'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'fibermon_fiber'

[deframe fibermon_fiber [frame] [fiber
				 frame
				 vbox
				 menu_bar
				 command_menu_item
				 command_menu
				 command_pause_menu_item
				 command_continue_menu_item
				 command_keep_undead_menu_item
				 command_dont_keep_undead_menu_item
				 command_quit_menu_item
				 view_menu_item
				 view_menu
				 view_print_to_screen_menu_item
				 view_stack_trace_menu_item
				 hbox
				 progress_bar
				 table
				 table_labels
				 time
				 execution_nanoseconds
				 bytecode_count
				 bytecodes_per_second
				 execution_efficiency
				 elapsed_nanoseconds
				 elapsed_execution_nanoseconds
				 elapsed_bytecode_count]
  [new [fiber]
       [fibermon_fiber-construct_fast this]
       
       [set this fiber fiber]
       
       [have table modify_bg `normal [gdk-rgb_color-new 1.0 0.0 0.0]]
       
       [have command_pause_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber paused t]]
	     nil]
       [have command_continue_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber paused nil]]
	     nil]
       [have command_keep_undead_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber keep_undead t]]
	     nil]
       [have command_dont_keep_undead_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber keep_undead nil]]
	     nil]
       [have command_quit_menu_item signal_connect 'activate'
	     [funk []
		   [have fiber quit]]
	     nil]
       [have view_print_to_screen_menu_item signal_connect 'activate'
	     [funk []
		   [print fiber]]
	     nil]
       [have view_stack_trace_menu_item signal_connect 'activate'
	     [funk []
		   [format stdout '\n\nfibermon stack trace:\n']
		   [have fiber print_stack_trace]
		   [format stdout '\n\n']]
	     nil]
       
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_fiber get widget []
  frame]

[deftypefunk fibermon_fiber execute redraw []
  [fibermon_fiber-redraw_fast this]
  nil]

[deftypefunk fibermon_fiber execute recompute_statistics []
  [fibermon_fiber-recompute_statistics_fast this]
  nil]

'fibermon_processor'

[deframe fibermon_processor [frame] [index
				     frame
				     vbox
				     progress_bar
				     scrolled_window
				     fiber_vbox
				     fibermon_fiber_hash
				     table
				     table_labels
				     execution_nanoseconds
				     bytecode_count
				     bytecodes_per_second
				     execution_efficiency
				     elapsed_nanoseconds
				     elapsed_execution_nanoseconds
				     elapsed_bytecode_count
				     total_used_memory
				     total_free_memory]
  [new [index]
       [set this index index]
       [fibermon_processor-construct_fast this]
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_processor get widget []
  frame]

[deftypefunk fibermon_processor execute redraw []
  [fibermon_processor-redraw_fast this]
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber redraw]]
	[get fibermon_fiber_hash values]]
  nil]

[deftypefunk fibermon_processor execute recompute_statistics []
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber recompute_statistics]]
	[get fibermon_fiber_hash values]]
  [fibermon_processor-recompute_statistics_fast this]
  nil]

[deftypefunk fibermon_processor execute add_fiber [fibermon_fiber]
  [if [not [is-type `fibermon_fiber fibermon_fiber]]
      [error bug_type attempted_to_add_fiber_that_is_not_a_fibermon_fiber]]
  [have fiber_vbox pack_start fibermon_fiber nil nil 0]
  [have [get fibermon_fiber widget] show_all]
  [have fibermon_fiber_hash add [get fibermon_fiber fiber] fibermon_fiber]]

[deftypefunk fibermon_processor execute remove_fiber [fibermon_fiber]
  [if [not [is-type `fibermon_fiber fibermon_fiber]]
      [error bug_type attempted_to_remove_fiber_that_is_not_a_fibermon_fiber]]
  [have [get fibermon_fiber widget] hide_all]
  [have fiber_vbox remove fibermon_fiber]
  [have fibermon_fiber_hash remove [get fibermon_fiber fiber]]]


'fibermon'

[deframe fibermon [frame] [[win                 [gtk-window-new]]
			   [scrolled_window     [gtk-scrolled_window-new]]
			   [processor_hbox      [gtk-hbox-new 2]]
			   [processor_array     [new array 8]]
			   [done                nil]
			   [fiber               nil]
			   [processor_count     8]
			   [index_fiber_hash    [new ptypehash]]
			   [fibermon_fiber_hash [new ptypehash]]]
  [new []
       [set  win default_size 1900 800]
       [set  win title 'fibermon']
       [have win connect_hide_on_delete]
       [dotimes [index processor_count]
	 [set processor_array elt index [new fibermon_processor index]]]
       [dotimes [index processor_count]
	 [have processor_hbox pack_start [get processor_array elt index] t t 0]]
       [have scrolled_window add_with_viewport processor_hbox]
       [have win add scrolled_window]
       [= fiber [fiber [funk []
			     [cause-define cause-name `fibermon]
			     [format stdout '\nfibermon starting.\n']
			     [have win show_all]
			     [while [not done]
			       [have this reorganize_fibers]
			       [have this recompute_statistics]
			       [have this redraw]
			       [if [not [get win visible]]
				   [= done t]]]
			     [have win destroy]
			     [format stdout '\nfibermon exiting.\n']]
		       nil]]
       this]]

[deftypefunk fibermon execute reorganize_fibers []
  [mapc [funk [fibermon_fiber]
	      [let [[fiber [get fibermon_fiber fiber]]]
		[if [null [get fiber processor_assignment_index]]
		    [prog [have [get processor_array elt [have index_fiber_hash lookup fiber]] remove_fiber fibermon_fiber]
			  [have index_fiber_hash    remove fiber]
			  [have fibermon_fiber_hash remove fiber]
			  ]]]]
	[get fibermon_fiber_hash values]]
  [mapc [funk [fiber]
	      [let [[current_index [get fiber processor_assignment_index]]]
		[if current_index
		    [prog [if [get index_fiber_hash contains fiber]
			      [let [[old_known_index [have index_fiber_hash lookup fiber]]]
				[if [not [== old_known_index current_index]]
				    [let [[fibermon_fiber [have fibermon_fiber_hash lookup fiber]]]
				      [have index_fiber_hash remove fiber]
				      [have [get processor_array elt old_known_index] remove_fiber fiber]
				      [have index_fiber_hash add fiber current_index]
				      [have [get processor_array elt   current_index] add_fiber fibermon_fiber]]]]
			    [let [[fibermon_fiber [new fibermon_fiber fiber]]]
			      [have index_fiber_hash    add fiber current_index]
			      [have fibermon_fiber_hash add fiber fibermon_fiber]
			      [have [get processor_array elt current_index] add_fiber fibermon_fiber]]]]]]]
	[scheduler-active_fibers]]
  nil]

[deftypefunk fibermon execute redraw []
  [dotimes [index processor_count]
    [have [get processor_array elt index] redraw]]
  nil]

[deftypefunk fibermon execute recompute_statistics []
  [dotimes [index processor_count]
    [have [get processor_array elt index] recompute_statistics]]
  nil]

[defunk fibermon-command_line [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nfibermon fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'FIBERMON(1)'
		'\n'   'NAME'
		'\n'   '       fibermon - display Funk fibers'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       fibermon -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The fibermon program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of tasks currently being managed '
		'\n'   '       by the Funk kernel.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[fibermon [new fibermon]]]
	nil]]]]

[defmetro fibermon [:rest args]
  `[fibermon-command_line @[mapcar [funk [arg] `[quote ,arg]] args]]]


