'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk bytes-to_memory_string [this]
  [let [[i [get this as-integer]]]
    [cond [      [< i                        1024]   [format nil    i]]
	  [      [< i [*                1024 1024]]  [format nil [/ i                  1024.0]  'k']]
	  [      [< i [*           1024 1024 1024]]  [format nil [/ i [*        1024.0 1024.0]] 'M']]
	  [      [< i [*      1024 1024 1024 1024]]  [format nil [/ i [* 1024.0 1024.0 1024.0]] 'G']]
	  [[or t [< i [* 1024 1024 1024 1024 1024]]] [format nil [/ i [* 1024.0 1024.0 1024.0]] 'T']]]]]

[defunk nanoseconds-to_time_string [this]
  [let [[i [get this as-integer]]]
    [cond [[< i                       1000]  [format nil    i                                          'ns']]
	  [[< i               [* 1000 1000]] [format nil [/ i                                 1000.0]  'us']]
	  [[< i          [* 1000 1000 1000]] [format nil [/ i                       [* 1000.0 1000.0]] 'ms']]
	  [[< i       [* 60 1000 1000 1000]] [format nil [/ i                [* 1000.0 1000.0 1000.0]] 's']]
	  [[< i    [* 60 60 1000 1000 1000]] [format nil [/ i           [* 60.0 1000.0 1000.0 1000.0]] 'm']]
	  [[< i [* 24 60 60 1000 1000 1000]] [format nil [/ i      [* 60.0 60.0 1000.0 1000.0 1000.0]] 'h']]
	  [t                                 [format nil [/ i [* 24.0 60.0 60.0 1000.0 1000.0 1000.0]] 'd']]]]]

'fibermon_fiber'

[deframe fibermon_fiber [frame] [[fiber                              nil]
				 [frame                              nil]
				 [vbox                               [gtk-vbox-new 2]]
				 [menu_bar                           [gtk-menu_bar-new]]
				 [command_menu_item                  [gtk-menu_item-new 'Command']]
				 [command_menu                       [gtk-menu-new]]
				 [command_pause_menu_item            [gtk-menu_item-new 'Pause']]
				 [command_continue_menu_item         [gtk-menu_item-new 'Continue']]
				 [command_keep_undead_menu_item      [gtk-menu_item-new 'Keep Undead']]
				 [command_dont_keep_undead_menu_item [gtk-menu_item-new 'Don\'t Keep Undead']]
				 [command_quit_menu_item             [gtk-menu_item-new 'Quit']]
				 [view_menu_item                     [gtk-menu_item-new 'View']]
				 [view_menu                          [gtk-menu-new]]
				 [view_print_to_screen_menu_item     [gtk-menu_item-new 'Print to Screen']]
				 [view_stack_trace_menu_item         [gtk-menu_item-new 'Stack Trace']]
				 [hbox                               [gtk-hbox-new 2]]
				 [progress_bar                       [gtk-progress_bar-new]]
				 [table                              [gtk-table-new 12 2 nil]]
				 [table_labels                       [new array 12 2]]
				 [time                               nil]
				 [execution_nanoseconds              nil]
				 [bytecode_count                     nil]
				 [bytecodes_per_second               nil]
				 [execution_efficiency               nil]
				 [elapsed_nanoseconds                nil]
				 [elapsed_execution_nanoseconds      nil]
				 [elapsed_bytecode_count             nil]]
  [new [fiber]
       [set this fiber fiber]
       [set this frame [gtk-frame-new 'fiber']]
       
       [have command_menu append command_pause_menu_item]
       [have command_pause_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber paused t]]
	     nil]
       [have command_menu append command_continue_menu_item]
       [have command_continue_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber paused nil]]
	     nil]
       [have command_menu append command_keep_undead_menu_item]
       [have command_keep_undead_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber keep_undead t]]
	     nil]
       [have command_dont_keep_undead_menu_item signal_connect 'activate'
	     [funk []
		   [set fiber keep_undead nil]]
	     nil]
       [have command_quit_menu_item signal_connect 'activate'
	     [funk []
		   [have fiber quit]]
	     nil]
       [have command_menu append command_dont_keep_undead_menu_item]
       [have command_menu append command_quit_menu_item]
       [have menu_bar append command_menu_item]
       [set command_menu_item submenu command_menu]
       
       [have view_menu append view_print_to_screen_menu_item]
       [have view_print_to_screen_menu_item signal_connect 'activate'
	     [funk []
		   [print fiber]]
	     nil]
       [have view_menu append view_stack_trace_menu_item]
       [have view_stack_trace_menu_item signal_connect 'activate'
	     [funk []
		   [have fiber print_stack_trace]]
	     nil]
       [have menu_bar append view_menu_item]
       [set view_menu_item submenu view_menu]
       [set progress_bar orientation `bottom_to_top]
       [dotimes [row 12]
	 [let [[row_labels [get table_labels elt row]]]
	   [dotimes [column 2]
	     [let [[table_label [gtk-label-new '']]]
	       [set table_label alignment 0.0 0.0]
	       [set row_labels elt column table_label]
	       [have table attach table_label column [+ column 1] row [+ row 1] 0 0]]]]]
       [set [get [get table_labels elt  0] elt 0] text 'cause-name']
       [set [get [get table_labels elt  1] elt 0] text 'keep_undead']
       [set [get [get table_labels elt  2] elt 0] text 'is_zombie']
       [set [get [get table_labels elt  3] elt 0] text 'is_complete']
       [set [get [get table_labels elt  4] elt 0] text 'execute_mutex']
       [set [get [get table_labels elt  5] elt 0] text 'paused']
       [set [get [get table_labels elt  6] elt 0] text 'last_executed_time']
       [set [get [get table_labels elt  7] elt 0] text 'sleep_until_time']
       [set [get [get table_labels elt  8] elt 0] text 'execution_time']
       [set [get [get table_labels elt  9] elt 0] text 'bytecode_count']
       [set [get [get table_labels elt 10] elt 0] text 'bytecodes_per_second']
       [set [get [get table_labels elt 11] elt 0] text 'execution_efficiency']
       [have hbox pack_start progress_bar nil nil 0]
       [have hbox pack_start table        t t 0]
       [have vbox pack_start menu_bar nil nil 0]
       [have vbox pack_start hbox     t t 0]
       [have frame add vbox]
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_fiber get widget []
  frame]

[deftypefunk fibermon_fiber execute redraw []
  [let [[progress_fraction [if execution_efficiency
			       [if [< execution_efficiency 0.0]
				   0.0
				   [if [> execution_efficiency 1.0]
				       1.0
				       execution_efficiency]]
			     0.0]]]
    [set progress_bar fraction progress_fraction]]
  [set [get [get table_labels elt  0] elt 1] text [format nil [let [[cause_reg [get fiber cause_reg]]]
								[if cause_reg
								    [have cause_reg lookup `cause-name]]]]]
  [set [get [get table_labels elt  1] elt 1] text [format nil [if [get fiber keep_undead] 'Yes' 'No']]]
  [set [get [get table_labels elt  2] elt 1] text [format nil [if [get fiber is_zombie] 'Yes' 'No']]]
  [set [get [get table_labels elt  3] elt 1] text [format nil [if [get fiber is_complete] 'Yes' 'No']]]
  [set [get [get table_labels elt  4] elt 1] text [format nil [get fiber execute_mutex]]]
  [set [get [get table_labels elt  5] elt 1] text [format nil [if [get fiber paused] 'Yes' 'No']]]
  [set [get [get table_labels elt  6] elt 1] text [format nil [get fiber last_executed_time]]]
  [set [get [get table_labels elt  7] elt 1] text [format nil [get fiber sleep_until_time]]]
  [set [get [get table_labels elt  8] elt 1] text [format nil [nanoseconds-to_time_string [if execution_nanoseconds execution_nanoseconds 0]]]]
  [set [get [get table_labels elt  9] elt 1] text [format nil [bytes-to_memory_string [if bytecode_count bytecode_count 0]] 'Bc']]
  [set [get [get table_labels elt 10] elt 1] text [format nil [bytes-to_memory_string [if bytecodes_per_second bytecodes_per_second 0]] 'Bc/s']]
  [set [get [get table_labels elt 11] elt 1] text [format nil [* 100.0 [if execution_efficiency execution_efficiency 0]] '%']]
  ]

[deftypefunk fibermon_fiber execute recompute_statistics []
  [let [[last_time                  time]
	[last_execution_nanoseconds execution_nanoseconds]
	[last_bytecode_count        bytecode_count]]
    [= time                          [time]]
    [= execution_nanoseconds         [get fiber execution_nanoseconds]]
    [= bytecode_count                [get fiber bytecode_count]]
    [= elapsed_nanoseconds           [if last_time                  [- [get time nanoseconds_since_1970] [get last_time nanoseconds_since_1970]]]]
    [= elapsed_execution_nanoseconds [if last_execution_nanoseconds [- execution_nanoseconds             last_execution_nanoseconds]]]
    [= elapsed_bytecode_count        [if last_bytecode_count        [- bytecode_count                    last_bytecode_count]]]
    [if [and elapsed_bytecode_count elapsed_nanoseconds]
	[= bytecodes_per_second [/ [* 1000000000.0 elapsed_bytecode_count] elapsed_nanoseconds]]]
    [if [and elapsed_execution_nanoseconds elapsed_nanoseconds]
	[= execution_efficiency [/ [get elapsed_execution_nanoseconds as-double] elapsed_nanoseconds]]]
    nil]]

'fibermon_processor'

[deframe fibermon_processor [frame] [index
				     frame
				     vbox
				     progress_bar
				     scrolled_window
				     fiber_vbox
				     fibermon_fiber_hash
				     table
				     table_labels
				     execution_nanoseconds
				     bytecode_count
				     bytecodes_per_second
				     execution_efficiency
				     elapsed_nanoseconds
				     elapsed_execution_nanoseconds
				     elapsed_bytecode_count
				     total_used_memory
				     total_free_memory]
  [new [index]
       [= vbox                [gtk-vbox-new 2]]
       [= progress_bar        [gtk-progress_bar-new]]
       [= scrolled_window     [gtk-scrolled_window-new]]
       [= fiber_vbox          [gtk-vbox-new 2]]
       [= fibermon_fiber_hash [new ptypehash]]
       [= table               [gtk-table-new 4 2 nil]]
       [= table_labels        [new array 4 2]]
       
       [set this index index]
       [set this frame [gtk-frame-new [format nil 'processor #' index]]]
       [have scrolled_window add_with_viewport fiber_vbox]
       [dotimes [row 4]
	 [let [[row_labels [get table_labels elt row]]]
	   [dotimes [column 2]
	     [let [[table_label [gtk-label-new '']]]
	       [set table_label alignment 0.0 0.0]
	       [set row_labels elt column table_label]
	       [have table attach table_label column [+ column 1] row [+ row 1] 0 0]]]]]
       [set [get [get table_labels elt 0] elt 0] text 'bytecodes_per_second']
       [set [get [get table_labels elt 1] elt 0] text 'execution_efficiency']
       [set [get [get table_labels elt 2] elt 0] text 'total_used_memory']
       [set [get [get table_labels elt 3] elt 0] text 'total_free_memory']
       [have vbox pack_start table           nil nil 0]
       [have vbox pack_start progress_bar    nil nil 0]
       [have vbox pack_start scrolled_window t t 0]
       [have frame add vbox]
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_processor get widget []
  frame]

[deftypefunk fibermon_processor execute redraw []
  [set [get [get table_labels elt 0] elt 1] text [format nil [if bytecodes_per_second [bytes-to_memory_string bytecodes_per_second] ''] 'Bc/s']]
  [set [get [get table_labels elt 1] elt 1] text [format nil [* 100.0 [if execution_efficiency execution_efficiency 0.0]] '%']]
  [set [get [get table_labels elt 2] elt 1] text [format nil [if total_used_memory [bytes-to_memory_string total_used_memory] ''] 'b']]
  [set [get [get table_labels elt 3] elt 1] text [format nil [if total_free_memory [bytes-to_memory_string total_free_memory] ''] 'b']]
  [let [[progress_fraction [if execution_efficiency execution_efficiency 0.0]]]
    [set progress_bar text     [format nil [* 100.0 progress_fraction] '%']]
    [set progress_bar fraction progress_fraction]]
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber redraw]]
	[get fibermon_fiber_hash values]]
  nil]

[deftypefunk fibermon_processor execute recompute_statistics []
  [= bytecodes_per_second 0]
  [= execution_efficiency 0]
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber recompute_statistics]
	      [let [[fiber_bytecodes_per_second          [get fibermon_fiber bytecodes_per_second]]
		    [fiber_execution_efficiency          [get fibermon_fiber execution_efficiency]]
		    [fiber_elapsed_execution_nanoseconds [get fibermon_fiber elapsed_execution_nanoseconds]]]
		[if fiber_bytecodes_per_second [+= bytecodes_per_second fiber_bytecodes_per_second]]
		[if fiber_execution_efficiency [+= execution_efficiency fiber_execution_efficiency]]
		]]
	[get fibermon_fiber_hash values]]
  [if [< execution_efficiency 0.0]
      [= execution_efficiency 0.0]
    [if [> execution_efficiency 1.0]
	[= execution_efficiency 1.0]]]
  [if index
      [prog [= total_free_memory [system-memorypool-total_free_memory   index]]
	    [= total_used_memory [- [system-memorypool-total_global_memory index] total_free_memory]]
	    ]]
  nil]

[deftypefunk fibermon_processor execute add_fiber [fibermon_fiber]
  [have fiber_vbox pack_start fibermon_fiber nil nil 0]
  [have [get fibermon_fiber widget] show_all]
  [have fibermon_fiber_hash add [get fibermon_fiber fiber] fibermon_fiber]]

[deftypefunk fibermon_processor execute remove_fiber [fibermon_fiber]
  [have [get fibermon_fiber widget] hide_all]
  [have fiber_vbox remove fibermon_fiber]
  [have fibermon_fiber_hash remove [get fibermon_fiber fiber]]]


'fibermon'

[deframe fibermon [frame] [[win                  [gtk-window-new]]
			    [scrolled_window      [gtk-scrolled_window-new]]
			    [processor_hbox       [gtk-hbox-new 2]]
			    [processor_array      [new array 8]]
			    [done                 nil]
			    [fiber                nil]
			    [processor_count      8]
			    [index_fiber_hash     [new ptypehash]]
			    [fibermon_fiber_hash [new ptypehash]]]
  [new []
       [set  win default_size 1900 800]
       [set  win title 'fibermon']
       [have win connect_hide_on_delete]
       [dotimes [index processor_count]
	 [set processor_array elt index [new fibermon_processor index]]]
       [dotimes [index processor_count]
	 [have processor_hbox pack_start [get processor_array elt index] t t 0]]
       [have win add processor_hbox]
       [= fiber [fiber [funk []
			     [cause-define cause-name `fibermon]
			     [format stdout '\nfibermon starting.\n']
			     [have win show_all]
			     [while [not done]
			       [have this reorganize_fibers]
			       [have this recompute_statistics]
			       [have this redraw]
			       [if [not [get win visible]]
				   [= done t]]]
			     [have win destroy]
			     [format stdout '\nfibermon exiting.\n']]
		       nil]]
       this]]

[deftypefunk fibermon execute reorganize_fibers []
  [mapc [funk [fibermon_fiber]
	      [if [null [get [get fibermon_fiber fiber] processor_assignment_index]]
		  [prog [have index_fiber_hash remove fiber]
			[have [get processor_array elt [have index_fiber_hash lookup fiber]] remove_fiber fiber]]]]
	[get fibermon_fiber_hash values]]
  [mapc [funk [fiber]
	      [let [[current_index [get fiber processor_assignment_index]]]
		[if current_index
		    [prog [if [get index_fiber_hash contains fiber]
			      [let [[old_known_index [have index_fiber_hash lookup fiber]]]
				[if [not [== old_known_index current_index]]
				    [let [[fibermon_fiber [have fibermon_fiber_hash lookup fiber]]]
				      [have index_fiber_hash remove fiber]
				      [have [get processor_array elt old_known_index] remove_fiber fiber]
				      [have index_fiber_hash add fiber current_index]
				      [have [get processor_array elt   current_index] add_fiber fibermon_fiber]]]]
			    [let [[fibermon_fiber [new fibermon_fiber fiber]]]
			      [have index_fiber_hash add fiber current_index]
			      [have [get processor_array elt   current_index] add_fiber fibermon_fiber]]]]]]]
	[scheduler-active_fibers]]
  nil]

[deftypefunk fibermon execute redraw []
  [dotimes [index processor_count]
    [have [get processor_array elt index] redraw]]
  nil]

[deftypefunk fibermon execute recompute_statistics []
  [dotimes [index processor_count]
    [have [get processor_array elt index] recompute_statistics]]
  nil]

[defunk fibermon-command_line [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nfibermon fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'FIBERMON(1)'
		'\n'   'NAME'
		'\n'   '       fibermon - display Funk fibers'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       fibermon -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The fibermon program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of tasks currently being managed '
		'\n'   '       by the Funk kernel.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[fibermon [new fibermon]]]
	nil]]]]

[defmetro fibermon [:rest args]
  `[fibermon-command_line @[mapcar [funk [arg] `[quote ,arg]] args]]]


