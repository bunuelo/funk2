'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk safe-system [command]
  [if [!= 0 [system command]]
      [error `system [frame command command]]]]

[defunk system-dot [output_format output_width output_height dot_filename ps_filename]
  [let [[command [string-concat 'dot -Gsize=' [exp-as-string output_width] ',' [exp-as-string output_height] ' -T' output_format ' -o' ps_filename ' ' dot_filename]]]
    [if [!= 0 [system command]]
	[error `runtime `[dot-command: ,command]]]]]

[defunk system-gv [ps_filename]
  [let [[command [string-concat 'gv ' ps_filename]]]
    [if [!= 0 [system command]]
	[error `runtime `[gv-command: ,command]]]]]


[defunk dot_code-gview [this]
  [have this save 'graphviz-temp.dot']
  [system-dot 'ps' 6 4 'graphviz-temp.dot' 'graphviz-temp.ps']
  [system-gv 'graphviz-temp.ps']]

[defunk dot_code-as-image [this width height]
  [have this save 'graphviz-temp.dot']
  [safe-system [format nil 'dot -Gdpi=2048 -Gsize=' [/ width 2048.0] ',' [/ height 2048.0] ' -Tpng graphviz-temp.dot -ographviz-temp.png']]
  [let [[temp_image [image-new_from_file 'graphviz-temp.png']]]
    [let [[temp_width  [get temp_image width]]
	  [temp_height [get temp_image height]]]
      [if [and [== temp_width  width]
	       [== temp_height height]]
	  temp_image
	[if [and [<= temp_width  width]
		 [<= temp_height height]]
	    [let [[image [image-new_from_rgb_data width height [new chunk [* width height 3]]]]]
	      [have image clear 255 255 255 255]
	      [have temp_image copy_rectangle_to 0 0 image [/ [- width temp_width] 2] [/ [- height temp_height] 2] temp_width temp_height]
	      image]
	  temp_image]]]]]


[deftypefunk graph execute gview []
  [dot_code-gview [get this as-dot_code]]]

[deftypefunk graph get as-image [width height]
  [dot_code-as-image [get this as-dot_code] width height]]

[deftypefunk frame execute gview       [] [have [get this as-graph] gview]]
[deftypefunk frame get     as-dot_code [] [get  [get this as-graph] as-dot_code]]


