'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe dictionary_frame [frame] []]

[deftypefunk dictionary_frame execute add_word [type symbol features]
  [let [[word [object_type-new type]]] 
    [cond [[eq type `proper_noun_word] [let [[symbols [cond [[is-type `symbol symbol] [cons symbol nil]]
							    [[or [is-type `cons   symbol]
								 [is-type `list   symbol]] symbol]
							    [t                             [error bug_type  invalid_symbol_or_symbol_list_when_adding_word_to_dictionary_frame
												  word_type type
												  symbol    symbol]]]]]
					 [have word add `symbols symbols]]]
	  [t                           [have word add `symbol symbol]]]
    [mapc [funk [feature]
		[if [not [get word contains feature]]
		    [error bug_type  `invalid_feature_when_adding_word_to_dictionary_frame
			   word_type type
			   feature   feature]
		  [have word add feature t]]]
	  features]
    [have this add_type_var_value type symbol word]]]

[defmetro dictionary-add_word [this type symbol features]
  `[have ,this add_word [quote ,type] [quote ,symbol] [conslist @[mapcar [funk [feature] `[quote ,feature]] features]]]]

[globalize dictionary [new dictionary_frame]]

[dictionary-add_word dictionary verb_word pick [takes_particle infinitive transitive]]

[dictionary-add_word dictionary particle_word up []]

[dictionary-add_word dictionary determiner_word a [indefinite singular]]

[dictionary-add_word dictionary determiner_word the [plural singular definite]]

[dictionary-add_word dictionary noun_word knife [singular]]

[dictionary-add_word dictionary preposition_word before []]

[dictionary-add_word dictionary verb_word cut [present]]

[dictionary-add_word dictionary verb_word cutting [present ing]]

[dictionary-add_word dictionary noun_word bread [mass]]

[dictionary-add_word dictionary proper_noun_word Lauren [singular]]

[dictionary-add_word dictionary proper_noun_word Ralph [singular]]

[dictionary-add_word dictionary verb_word saw [past infinitive]]


[deftypefunk dictionary_frame execute parse_sequence_as_main_clause [sequence]
  
  [print sequence]]




[globalize example_major_clauses `[[pick up the knife]
				   [pick up the knife before cutting the bread]
				   [Lauren picked up the knife]
				   [Ralph saw Lauren cut the bread]]]


