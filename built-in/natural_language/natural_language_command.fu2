'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



[defunk skb-test [semantic_realm]
  [cause-define semantic_frame-trace_add                         t]
  [cause-define semantic_frame-trace_remove                      t]
  [cause-define semantic_knowledge_base-trace_add_semantic_frame t]
  [let [[semantic_knowledge_base      [new semantic_knowledge_base]]
	[meta_semantic_knowledge_base [new meta_semantic_knowledge_base nil]]]
    [let [[knife_semantic_frame        [new visual_object_semantic_frame semantic_realm]]
	  [toaster_semantic_frame      [new visual_object_semantic_frame semantic_realm]]
	  [counter_semantic_frame      [new visual_object_semantic_frame semantic_realm]]
	  [kitchen_semantic_frame      [new visual_object_semantic_frame semantic_realm]]
	  [refrigerator_semantic_frame [new visual_object_semantic_frame semantic_realm]]
	  [butter_semantic_frame       [new visual_object_semantic_frame semantic_realm]]
	  [Ralph_semantic_frame        [new visual_object_semantic_frame semantic_realm]]
	  [Lauren_semantic_frame       [new visual_object_semantic_frame semantic_realm]]]
      [have semantic_knowledge_base add_semantic_frame knife_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame toaster_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame counter_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame kitchen_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame refrigerator_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame butter_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame Ralph_semantic_frame]
      [have semantic_knowledge_base add_semantic_frame Lauren_semantic_frame]
      
      [let [[this_perception_meta_semantic_frame [new meta_semantic_frame semantic_realm]]]
	[have meta_semantic_knowledge_base add_semantic_frame this_perception_meta_semantic_frame]
	
	[have knife_semantic_frame        add_noun        `knife]                          [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship knife_semantic_frame `property `noun `knife]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have knife_semantic_frame        add_classifier  `butter]                         [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship knife_semantic_frame `property `classifier `butter]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have knife_semantic_frame        add_preposition `on counter_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship knife_semantic_frame `preposition `on counter_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have knife_semantic_frame        add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship knife_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have toaster_semantic_frame      add_noun        `toaster]                        [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship toaster_semantic_frame `property `noun `toaster]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have toaster_semantic_frame      add_preposition `on counter_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship toaster_semantic_frame `preposition `on counter_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have toaster_semantic_frame      add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship toaster_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have counter_semantic_frame      add_noun        `counter]                        [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship counter_semantic_frame `property `noun `counter]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have counter_semantic_frame      add_classifier  `kitchen]                        [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship counter_semantic_frame `property `classifier `kitchen]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have counter_semantic_frame      add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship counter_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have kitchen_semantic_frame      add_noun        `kitchen]                        [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship kitchen_semantic_frame `property `noun `kitchen]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have refrigerator_semantic_frame add_noun        `refrigerator]                   [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship refrigerator_semantic_frame `property `noun `refrigerator]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have refrigerator_semantic_frame add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship refrigerator_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have butter_semantic_frame       add_noun        `butter]                         [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship butter_semantic_frame `property `noun `butter]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have butter_semantic_frame       add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship butter_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have butter_semantic_frame       add_preposition `in refrigerator_semantic_frame] [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship butter_semantic_frame `preposition `in refrigerator_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have Ralph_semantic_frame        add_noun        `Ralph]                          [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship Ralph_semantic_frame `property `noun `Ralph]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have Ralph_semantic_frame        add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship Ralph_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	
	[have Lauren_semantic_frame       add_noun        `Lauren]                         [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship Lauren_semantic_frame `property `noun `Lauren]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	[have Lauren_semantic_frame       add_preposition `in kitchen_semantic_frame]      [let [[relationship_meta_semantic_object [have semantic_realm lookup_or_create_meta_relationship Lauren_semantic_frame `preposition `in kitchen_semantic_frame]]]
											     [have this_perception_meta_semantic_frame add `k-line `visual_perception relationship_meta_semantic_object]
											     [have meta_semantic_knowledge_base add_semantic_frame relationship_meta_semantic_object]]
	]
      [frame semantic_knowledge_base      semantic_knowledge_base
	     meta_semantic_knowledge_base meta_semantic_knowledge_base]]]]

[defunk skb_match-test [semantic_realm]
  [let [[semantic_knowledge_base [skb-test semantic_realm]]]
    [let [[index_semantic_frame [new visual_object_semantic_frame semantic_realm]]]
      [have index_semantic_frame add_noun `toaster]
      [have semantic_knowledge_base lookup_matching_semantic_frames index_semantic_frame]]]]




[deframe natural_language_command [frame] [verb_symbols arguments prepositions funk]
  [new [initial_verb_symbols initial_arguments initial_prepositions initial_funk]
       [= verb_symbols initial_verb_symbols]
       [= arguments    initial_arguments]
       [= prepositions initial_prepositions]
       [= funk         initial_funk]]]

[deftypefunk parse_tree get direct_object_noun_group_node []
  [let [[child_iter                    [get root_node first_child_node]]
	[direct_object_noun_group_node nil]]
    [while child_iter
      [let [[parse_object [get child_iter parse_object]]]
	[if [and [is-type `noun_group parse_object]
		 [get parse_object object]
		 [get parse_object object_one]]
	    [= direct_object_noun_group_node child_iter]]]
      [= child_iter [get child_iter next_node]]]
    direct_object_noun_group_node]]

[deftypefunk natural_language_command execute execute_parse_tree [parse_tree]
  [let [[argument_frame [frame]]]
    [mapc [funk [argument]
		[cond [[eq argument `direct_object] [have argument_frame add `direct_object [get parse_tree direct_object_noun_group_node]]]
		      [t                            [error bug_type `unknown_argument_name
							   argument argument]]]]
	  arguments]
    [let [[funk_args  [get funk args]]
	  [apply_args nil]]
      [mapc [funk [arg]
		  [= apply_args [cons [have argument_frame lookup arg] apply_args]]]
	    funk_args]
      [apply funk [reverse apply_args]]]]]

[deframe natural_language_command_frame [frame] [[key_symbols_hash [hash]]]]

[deftypefunk natural_language_command_frame get symbols_key [symbols]
  [let [[key [have key_symbols_hash lookup symbols]]]
    [if [null key]
	[prog [have key_symbols_hash add symbols symbols]
	      [= key symbols]]]
    key]]

[deftypefunk natural_language_command_frame execute add_command [verb_symbols arguments prepositions funk]
  [let [[key [get this symbols_key verb_symbols]]]
    [have this add_type_var_value `natural_language_command key [new natural_language_command verb_symbols arguments prepositions funk]]
    nil]]

[deftypefunk natural_language_command_frame execute execute_parse_tree [parse_tree]
  [let [[main_clause_node [get parse_tree root_node]]]
    [let [[main_clause [get main_clause_node parse_object]]]
      [if [not [is-type `clause main_clause]]
	  [error bug_type `parse_tree_is_not_clause
		 parse_tree parse_tree]
	[if [get main_clause secondary]
	    [error bug_type `parse_tree_must_not_be_secondary_clause
		   parse_tree parse_tree]
	  [let [[main_verb_group_node [get main_clause_node child_of_type_node `verb_group]]]
	    [let [[main_verb_group [get main_verb_group_node parse_object]]]
	      [if [not [is-type `verb_group main_verb_group]]
		  [error bug_type        `main_verb_group_wrong_type
			 main_verb_group main_verb_group]
		[if [not [get main_verb_group imperative]]
		    [error bug_type        `main_verb_group_must_be_imperative
			   main_verb_group main_verb_group]
		  [let [[main_verb_group_symbols [get main_verb_group symbols]]]
		    [let [[natural_language_command [get this type_var_value `natural_language_command [get this symbols_key main_verb_group_symbols] nil]]]
		      [if [null natural_language_command]
			  [error bug_type                `do_not_know_natural_language_command
				 main_verb_group_symbols main_verb_group_symbols]
			[have natural_language_command execute_parse_tree parse_tree]]]]]]]]]]]]]


[defunk nl_command-test []
  [let [[natural_language_command_frame [new natural_language_command_frame]]]
    [have natural_language_command_frame add_command `[pick up] `[direct_object] nil
	  [funk [direct_object]
		[terminal_format standard-terminal '\nPicking up ' [get direct_object leaf_symbols] '!  :-D']]]
    [let [[parse_tree [first [get english_dictionary parse_trees `[pick the knife up]]]]]
      [have natural_language_command_frame execute_parse_tree parse_tree]]]]

