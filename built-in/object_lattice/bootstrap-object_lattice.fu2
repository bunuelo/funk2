'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk object_lattice execute scan_and_incorporate_leafs [object]
  [object_lattice-scan_and_incorporate_leafs this object]]

[deftypefunk object_lattice execute scan_leafs [object node_funk relation_funk]
  [object_lattice-scan_leafs this object node_funk relation_funk]]

[defunk mapc_nodes [object node_funk]
  [let [[object_lattice [new object_lattice]]]
    [have object_lattice scan_leafs object node_funk nil]]]

[defunk mapc_relations [object relation_funk]
  [let [[object_lattice [new object_lattice]]]
    [have object_lattice scan_leafs object nil relation_funk]]]

[defunk mapc_type_relations [object relation_funk]
  [mapc_relations object
		  [funk [x y z]
			[funkall relation_funk [type x] y [type z]]]]]

[defunk print_type_relations [object]
  [mapc_type_relations object
		       [funk [x y z]
			     [if z
				 [format stdout '\nThe ' y ' of a ' x ' can be a ' z '.']
			       [format stdout '\nThe ' y ' of a ' x ' can be nothing.']]]]
  nil]



