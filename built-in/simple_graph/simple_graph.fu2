'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk simple_graph execute add_node                      [node]                                                       [simple_graph-add_node                      this node]]
[deftypefunk simple_graph execute add_edge                      [label left_node right_node]                                 [simple_graph-add_edge                      this label left_node right_node]]
[deftypefunk simple_graph get     contains_node                 [node]                                                       [simple_graph-contains_node                 this node]]
[deftypefunk simple_graph get     contains_edge                 [label left_node right_node]                                 [simple_graph-contains_edge                 this label left_node right_node]]
[deftypefunk simple_graph get     contains_edge_type            [label]                                                      [simple_graph-contains_edge_type            this label]]
[deftypefunk simple_graph get     intersect                     [that]                                                       [simple_graph-intersect                     this that]]
[deftypefunk simple_graph get     union                         [that]                                                       [simple_graph-union                         this that]]
[deftypefunk simple_graph execute remove_node                   [node]                                                       [simple_graph-remove_node                   this node]]
[deftypefunk simple_graph execute remove_edge                   [label left_node right_node]                                 [simple_graph-remove_edge                   this label left_node right_node]]
[deftypefunk simple_graph get     copy                          []                                                           [simple_graph-copy                          this]]
[deftypefunk simple_graph get     difference                    [that]                                                       [simple_graph-difference                    this that]]
[deftypefunk simple_graph get     variables                     []                                                           [simple_graph-variables                     this]]
[deftypefunk simple_graph get     nodes                         []                                                           [simple_graph-nodes                         this]]
[deftypefunk simple_graph get     has_nodes                     []                                                           [simple_graph-has_nodes                     this]]
[deftypefunk simple_graph get     edges                         []                                                           [simple_graph-edges                         this]]
[deftypefunk simple_graph execute replace_node                  [old_node new_node]                                          [simple_graph-replace_node                  this old_node new_node]]
[deftypefunk simple_graph execute replace_edge                  [edge_label left_node_label right_node_label new_edge_label] [simple_graph-replace_edge                  this edge_label left_node_label right_node_label new_edge_label]]
[deftypefunk simple_graph execute replace_edge_type             [edge_label new_edge_label]                                  [simple_graph-replace_edge_type             this edge_label new_edge_label]]
[deftypefunk simple_graph execute make_rooted                   [root_node]                                                  [simple_graph-make_rooted                   this root_node]]
[deftypefunk simple_graph execute make_rootless                 []                                                           [simple_graph-make_rootless                 this]]
[deftypefunk simple_graph execute make_node_variable            [node variable_name]                                         [simple_graph-make_node_variable            this node variable_name]]
[deftypefunk simple_graph execute make_node_wildcard            [node]                                                       [simple_graph-make_node_wildcard            this node]]
[deftypefunk simple_graph execute make_edge_variable            [edge_label left_node_label right_node_label variable_name]  [simple_graph-make_edge_variable            this edge_label left_node_label right_node_label variable_name]]
[deftypefunk simple_graph execute make_edge_wildcard            [edge_label left_node_label right_node_label]                [simple_graph-make_edge_wildcard            this edge_label left_node_label right_node_label]]
[deftypefunk simple_graph get     contains_match_with_bindings  [that bindings]                                              [simple_graph-contains_match_with_bindings  this that bindings]]
[deftypefunk simple_graph execute bind_variable                 [variable_name value]                                        [simple_graph-bind_variable                 this variable_name value]]
[deftypefunk simple_graph execute find_common_variable_subgraph [that]                                                       [simple_graph-find_common_variable_subgraph this that]]
[deftypefunk simple_graph execute abstract_frame_node_slot      [slot_name]                                                  [simple_graph-abstract_frame_node_slot      this slot_name]]
[deftypefunk simple_graph get     node_map                      [map_funk]                                                   [simple_graph-node_map                      this map_funk]]
[deftypefunk simple_graph get     without_self_loops            []                                                           [simple_graph-without_self_loops            this]]
[deftypefunk simple_graph get     without_duplicate_edges       []                                                           [simple_graph-without_duplicate_edges       this]]

[deftypefunk simple_graph_variable get is_wildcard [] [simple_graph_variable-is_wildcard this]]

