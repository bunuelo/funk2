'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_block'

[deframe blocks_world_block [frame] [name width height color x y]
  [new [initial-name
	initial-width
	initial-height
	initial-color
	initial-x
	initial-y]
       [= name   initial-name]
       [= width  initial-width]
       [= height initial-height]
       [= color  initial-color]
       [= x      initial-x]
       [= y      initial-y]
       ]]

[deftypefunk blocks_world_block execute render_to_cairo [cairo_context]
  [have cairo_context move_to [get x as-double] [get y as-double]]
  [have cairo_context save]
  
  [have cairo_context set_source_rgba 1.0 1.0 1.0 1.0]
  [have cairo_context arc 36.0 36.0 35.0 0.0 [/ [* 360.0 pi] 180.0]]
  [have cairo_context stroke]
  [have cairo_context set_line_cap `square]
  [have cairo_context move_to 36.0 36.0]
  [have cairo_context set_line_cap `round]
  [have cairo_context rel_line_to 34.0 0.0]
  [have cairo_context stroke]

  [have cairo_context set_source_rgba 0.0 0.0 1.0 0.5]
  [have cairo_context move_to 0.0 0.0]
  [have cairo_context curve_to 36.0 0.0  36.0 72.0  72.0 72.0]
  [have cairo_context stroke]
  
  [have cairo_context set_source_rgba 1.0 1.0 1.0 1.0]
  [have cairo_context move_to 36.0 35.0]
  [have cairo_context select_font_face 'Courier' `normal `normal]
  [have cairo_context set_font_size 1.0]
  [have cairo_context text_path 'cairo funk']
  [have cairo_context fill]
  
  [have cairo_context restore]
  ]

'blocks_world_physics'

[deframe blocks_world_physics [frame] [blocks]
  [new []
       ]]

[deftypefunk blocks_world_physics execute add_block [block]
  [= blocks [cons block blocks]]]

[deftypefunk blocks_world_physics execute render_to_cairo [cairo_context]
  [have cairo_context set_source_rgba 0.0 0.0 0.0 1.0]
  [have cairo_context paint]
  
  [mapc [funk [block]
	      [have block render_to_cairo cairo_context]]
	blocks]
  ]


'blocks_world'

[deframe blocks_world [frame] [gtk_window
			       gtk_image_mutex
			       gtk_image
			       cairo_image_surface
			       cairo_context
			       blocks_world_physics
			       fiber
			       done]
  [new []
       [= gtk_window [gtk-window-new]]
       [set gtk_window title 'Blocks World']
       
       [= cairo_image_surface [new cairo_image_surface `ARGB32 640 480]]
       [= cairo_context       [new cairo_context cairo_image_surface]]
       
       [= gtk_image_mutex [new mutex]]
       [= gtk_image [gtk-image-new_from_image [get cairo_image_surface as-image]]]
       [have gtk_window add gtk_image]
       
       [have gtk_window show_all]
       
       [= blocks_world_physics [new blocks_world_physics]]
       
       [= fiber [fiber [funk []
			     [while [not done]
			       [millisleep 100]
			       [have this cycle]]
			     [have this destroy]]
		       nil]]
       
       [have this setup_default_scenario]
       ]]

[deftypefunk blocks_world execute destroy []
  [have cairo_image_surface destroy]
  [have cairo_context       destroy]]

[deftypefunk blocks_world execute cycle []
  [if [not [get gtk_window visible]]
      [= done t]
    [have this handle_redraw]]]

[deftypefunk blocks_world execute redraw_cairo_surface []
  [have blocks_world_physics render_to_cairo cairo_context]
  ]

[deftypefunk blocks_world execute regenerate_gtk_image []
  [have gtk_image_mutex lock]
  [let [[old_gtk_image gtk_image]]
    [= gtk_image [gtk-image-new_from_image [get cairo_image_surface as-image]]]
    [have gtk_image  show_all]
    [have gtk_window replace old_gtk_image gtk_image]]
  [have gtk_image_mutex unlock]]

[deftypefunk blocks_world execute handle_redraw []
  [have this redraw_cairo_surface]
  [have this regenerate_gtk_image]
  ]

[deftypefunk blocks_world execute setup_default_scenario []
  [let [[block-1 [new blocks_world_block `Block-1 16.0 16.0 `red   16.0 16.0]]
	[block-2 [new blocks_world_block `Block-2 16.0 16.0 `blue  64.0 16.0]]
	[table-1 [new blocks_world_block `Table-1 64.0  2.0 `white 16.0 32.0]]]
    [have blocks_world_physics add_block block-1]
    [have blocks_world_physics add_block block-2]
    [have blocks_world_physics add_block table-1]
    ]]



[defmetro blocks_world []
  `[prog [new blocks_world]
	 nil]]


