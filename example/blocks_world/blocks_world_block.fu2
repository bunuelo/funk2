'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_block'

[deframe blocks_world_block [blocks_world_sprite] [blocks_world_physics
						   
						   [in_gripper nil]
						   [x_velocity 0.0]
						   [y_velocity 0.0]
						   [on_block   nil]
						   ]
  [new [initial-name
	initial-width
	initial-height
	initial-color
	initial-shape
	initial-x
	initial-y]
       [construct blocks_world_sprite
		  initial-name
		  initial-width
		  initial-height
		  initial-color
		  initial-shape
		  initial-x
		  initial-y]
       ]]

[deftypefunk blocks_world_block get overlaps_horizontally [block]
  [not [or [< [+ x width] [get block x]]
	   [> x           [+ [get block x] [get block width]]]]]]

[deftypefunk blocks_world_block execute handle_movement [step_size]
  [= y_velocity [+ y_velocity [* step_size 9.8]]]]

[deftypefunk blocks_world_block execute step [step_size]
  [let [[obstacle_below_y nil]
	[obstacle_block   nil]]
    [mapc [funk [block]
		[if [not [eq this block]]
		    [if [and [get this overlaps_horizontally block]
			     [< y [get block y]]
			     [or [null obstacle_below_y]
				 [< [get block y] obstacle_below_y]]]
			[prog [= obstacle_below_y [get block y]]
			      [= obstacle_block   block]]]]]
	  [get blocks_world_physics blocks]]
    [= on_block nil]
    [if [not [null obstacle_below_y]]
	[prog `[terminal_format standard-terminal '\n' `[,name on ,[get block name]]]
	      [let [[maximum_block_y [- obstacle_below_y height]]]
		[let [[next_block_y [+ y [* step_size y_velocity]]]]
		  [if [< maximum_block_y next_block_y]
		      [prog [= y          maximum_block_y]
			    [= y_velocity 0.0]]
		    [prog [= on_block obstacle_block]
			  [= y next_block_y]]]]]]]
    ]]


