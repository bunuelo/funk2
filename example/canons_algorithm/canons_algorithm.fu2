'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe cannons_matrix [frame] [size array]
  [new [initial-size]
       [= size initial-size]
       [= array [new array size size]]
       [have this zero]]]

[deftypefunk cannons_matrix set elt [i j value]
  [set [get array elt i] elt j value]]

[deftypefunk cannons_matrix get elt [i j]
  [get [get array elt i] elt j]]

[deftypefunk cannons_matrix execute zero []
  [dotimes [j size]
    [dotimes [i size]
      [set this elt i j 0]]]]

[defunk cannons_matrix-new_random [size max_value]
  [let [[this [new cannons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set this elt i j [random max_value]]]]
    this]]

[defunk cannons_matrix-new_identity [size]
  [let [[this [new cannons_matrix size]]]
    [dotimes [i size]
      [set this elt i i 1]]
    this]]

[defunk cannons_matrix-new_debug [size]
  [let [[this [new cannons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set this elt i j [+ [* i size] j]]]]
    this]]

[deframe cannons_port [frame] [value]]

[deftypefunk cannons_port execute write [element]
  [= value element]]

[deftypefunk cannons_port execute read []
  value]

[deframe cannons_processor [frame] [clock_trigger size i j input-port up-port left-port fiber [a 0] [b 0] [c 0]]
  [new [initial-clock_trigger initial-size initial-i initial-j]
       [= clock_trigger initial-clock_trigger]
       [= size          initial-size]
       [= i             initial-i]
       [= j             initial-j]
       [= input-port    [new cannons_port]]
       [= fiber         [fiber [funk []
				     [have this run]]
			       []]]]]

[deftypefunk cannons_processor execute run []
  [while t
    [wait-for-trigger clock_trigger]
    [terminal_format standard-terminal '\nprocessor i=' i ' j=' j ': starting.']
    [have this execute_phase_one]
    [terminal_format standard-terminal '\nprocessor i=' i ' j=' j ': phase one complete, beginning phase two.']
    [have this execute_phase_two]
    [wait-for-trigger clock_trigger]
    [terminal_format standard-terminal '\nprocessor i=' i ' j=' j ': finished.']]]


[deftypefunk cannons_processor execute phase_one []
  [dotimes [n [- size 1]]
    [if [< n i]
	[prog [wait-for-trigger clock_trigger]
	      [have left-port write a]
	      [wait-for-trigger clock_trigger]
	      [= a [have input-port read]]]
      [prog [wait-for-trigger clock_trigger]
	    [wait-for-trigger clock_trigger]]]]
  [dotimes [n [- size 1]]
    [if [< n j]
	[prog [wait-for-trigger clock_trigger]
	      [have up-port write b]
	      [wait-for-trigger clock_trigger]
	      [= b [have input-port read]]]
      [prog [wait-for-trigger clock_trigger]
	    [wait-for-trigger clock_trigger]]]]]


[deftypefunk cannons_processor execute phase_two []
  [dotimes [n [- size 1]]
    [wait-for-trigger clock_trigger]
    [= c [+ c [* a b]]]
    [wait-for-trigger clock_trigger]
    [have left-port write a]
    [wait-for-trigger clock_trigger]
    [= a [have input-port read]]
    [wait-for-trigger clock_trigger]
    [have up-port write b]
    [wait-for-trigger clock_trigger]
    [= b [have input-port read]]]
  [wait-for-trigger clock_trigger]
  [= c [+ c [* a b]]]]


[deftypefunk cannons_processor get active []
  [global_scheduler-contains_active_fiber fiber]]

[deframe cannons_algorithm [frame] [size clock_trigger processor_array]
  [new [initial-size]
       [= size            initial-size]
       [= clock_trigger   [new fiber_trigger]]
       [= processor_array [new array size size]]
       [dotimes [i size]
	 [dotimes [j size]
	   [set [get processor_array elt i] elt j [new cannons_processor clock_trigger size i j]]]]
       [dotimes [i size]
	 [dotimes [j size]
	   [set [get this processor i j] up-port   [get [get this processor [% [+ [- i 1] size] size]          j]                input-port]]
	   [set [get this processor i j] left-port [get [get this processor          i                [% [+ [- j 1] size] size]] input-port]]]]
       [have this wait_until_inactive]]]

[deftypefunk cannons_algorithm get active []
  [let [[j      [- size 1]]
	[i      [- size 1]]
	[active nil]]
    [while [>= j 0]
      [while [>= i 0]
	[if [get [get this processor i j] active]
	    [prog [= active t]
		  [= i      0]
		  [= j      0]]]
	[= i [- i 1]]]
      [= j [- j 1]]]
    active]]

[deftypefunk cannons_algorithm execute wait_until_inactive []
  [millisleep 100]
  [while [get this active]
    [millisleep 100]]]

[deftypefunk cannons_algorithm get processor [i j]
  [get [get processor_array elt i] elt j]]

[deftypefunk cannons_algorithm execute clock []
  [have this wait_until_inactive]
  [have clock_trigger trigger]
  [have this wait_until_inactive]]

[deftypefunk cannons_algorithm set a_matrix [a_matrix]
  [dotimes [j size]
    [dotimes [i size]
      [set [get this processor i j] a [get a_matrix elt i j]]]]]

[deftypefunk cannons_algorithm get a_matrix []
  [let [[a_matrix [new cannons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set a_matrix elt i j [get [get this processor i j] a]]]]
    a_matrix]]

[deftypefunk cannons_algorithm set b_matrix [b_matrix]
  [dotimes [j size]
    [dotimes [i size]
      [set [get this processor i j] b [get b_matrix elt i j]]]]]

[deftypefunk cannons_algorithm get b_matrix []
  [let [[b_matrix [new cannons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set b_matrix elt i j [get [get this processor i j] b]]]]
    b_matrix]]

[deftypefunk cannons_algorithm get c_matrix []
  [let [[c_matrix [new cannons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set c_matrix elt i j [get [get this processor i j] c]]]]
    c_matrix]]

[defunk cannons_algorithm-test []
  [let [[size 3]]
    [let [[original_a_matrix [cannons_matrix-new_debug    size]]
	  [original_b_matrix [cannons_matrix-new_identity size]]
	  [algorithm         [new cannons_algorithm size]]]
      [set algorithm a_matrix original_a_matrix]
      [set algorithm b_matrix original_b_matrix]
      
      [terminal_format standard-terminal '\na_matrix: ' [get algorithm a_matrix]]
      [terminal_format standard-terminal '\nb_matrix: ' [get algorithm b_matrix]]
      [have algorithm clock]
      
      [dotimes [N [+ [* [- size 1] [+ 4 5]] 1]]
	[have algorithm clock]
	[terminal_format standard-terminal '\nN=' N]
	`[terminal_format standard-terminal '\na_matrix: ' [get algorithm a_matrix]]
	`[terminal_format standard-terminal '\nb_matrix: ' [get algorithm b_matrix]]
	`[terminal_format standard-terminal '\nc_matrix: ' [get algorithm c_matrix]]
	]
      
      [have algorithm clock]
      [terminal_format standard-terminal '\nc_matrix: ' [get algorithm c_matrix]]
      
      nil]]]



