'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe canons_matrix [frame] [size array]
  [new [initial-size]
       [= size initial-size]
       [= array [new array size size]]
       [have this zero]]]

[deftypefunk canons_matrix set elt [i j value]
  [set [get array elt i] elt j value]]

[deftypefunk canons_matrix get elt [i j]
  [get [get array elt i] elt j]]

[deftypefunk canons_matrix execute zero []
  [dotimes [j size]
    [dotimes [i size]
      [set this elt i j 0]]]]

[defunk canons_matrix-new_random [size max_value]
  [let [[this [new canons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set this elt i j [random max_value]]]]
    this]]

[deframe canons_port [frame] [event_stream iterator]
  [new []
       [= event_stream [new forgetful_event_stream]]
       [= iterator     [get event_stream new-iterator]]]]

[deftypefunk canons_port execute send [element]
  [let [[event [new event_stream_event [time]]]]
    [have event add `element element]
    [have event_stream add event]]]

[deftypefunk canons_port execute receive []
  [let [[event [get iterator current]]]
    [have event lookup `element]]]

[deframe canons_processor [frame] [clock_trigger size i j input-port up-port down-port left-port right-port fiber [a 0] [b 0] [c 0]]
  [new [initial-clock_trigger initial-size initial-i initial-j]
       [= clock_trigger initial-clock_trigger]
       [= size          initial-size]
       [= i             initial-i]
       [= j             initial-j]
       [= input-port    [new canons_port]]
       [= fiber         [fiber [funk []
				     [while t
				       
				       [terminal_format standard-terminal '\nfiber #: ' [+ [* i size] j]]
				       
				       [dotimes [n size]
					 [if [< n i]
					     [prog [wait-for-trigger clock_trigger]
						   [have left-port send a]
						   [wait-for-trigger clock_trigger]
						   [= a [have input-port receive]]]
					   [prog [wait-for-trigger clock_trigger]
						 [wait-for-trigger clock_trigger]]]]
				       
				       [dotimes [n size]
					 [if [< n j]
					     [prog [wait-for-trigger clock_trigger]
						   [have up-port send b]
						   [wait-for-trigger clock_trigger]
						   [= b [have input-port receive]]]
					   [prog [wait-for-trigger clock_trigger]
						 [wait-for-trigger clock_trigger]]]]
				       
				       
				       
				       
				       ]
				     
				     ]
			       []]]]]

[deftypefunk canons_processor get active []
  [global_scheduler-contains_active_fiber fiber]]

[deframe canons_algorithm [frame] [size clock_trigger processor_array]
  [new [initial-size]
       [= size            initial-size]
       [= clock_trigger   [new fiber_trigger]]
       [= processor_array [new array size size]]
       [dotimes [j size]
	 [dotimes [i size]
	   [set [get processor_array elt j] elt i [new canons_processor clock_trigger size i j]]]]
       [dotimes [j size]
	 [dotimes [i size]
	   [set [get this processor i j] up-port    [get [get this processor [% [+ [- i 1] size] size]          j]                input-port]]
	   [set [get this processor i j] down-port  [get [get this processor [%    [+ i 1]       size]          j]                input-port]]
	   [set [get this processor i j] left-port  [get [get this processor          i                [% [+ [- j 1] size] size]] input-port]]
	   [set [get this processor i j] right-port [get [get this processor          i                [%    [+ j 1]       size]] input-port]]]]
       [have this wait_until_inactive]]]

[deftypefunk canons_algorithm get active []
  [let [[j      [- size 1]]
	[i      [- size 1]]
	[active nil]]
    [while [>= j 0]
      [while [>= i 0]
	[if [get [get this processor i j] active]
	    [prog [= active t]
		  [= i      0]
		  [= j      0]]]
	[= i [- i 1]]]
      [= j [- j 1]]]
    active]]

[deftypefunk canons_algorithm execute wait_until_inactive []
  [while [get this active]
    [millisleep [* 100 size size]]]]

[deftypefunk canons_algorithm get processor [i j]
  [get [get processor_array elt i] elt j]]

[deftypefunk canons_algorithm execute clock []
  [have clock_trigger trigger]
  [have this wait_until_inactive]]

[deftypefunk canons_algorithm set a_matrix [a_matrix]
  [dotimes [j size]
    [dotimes [i size]
      [set [get this processor i j] a [get a_matrix elt i j]]]]]

[deftypefunk canons_algorithm get a_matrix []
  [let [[a_matrix [new canons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set a_matrix elt i j [get [get this processor i j] a]]]]
    a_matrix]]

[deftypefunk canons_algorithm set b_matrix [b_matrix]
  [dotimes [j size]
    [dotimes [i size]
      [set [get this processor i j] b [get b_matrix elt i j]]]]]

[deftypefunk canons_algorithm get b_matrix []
  [let [[b_matrix [new canons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set b_matrix elt i j [get [get this processor i j] b]]]]
    b_matrix]]

[deftypefunk canons_algorithm get c_matrix []
  [let [[c_matrix [new canons_matrix size]]]
    [dotimes [j size]
      [dotimes [i size]
	[set c_matrix elt i j [get [get this processor i j] c]]]]
    c_matrix]]

[defunk canons_algorithm-test []
  [let [[size 4]]
    [let [[original_a_matrix [canons_matrix-new_random size 2]]
	  [original_b_matrix [canons_matrix-new_random size 2]]
	  [algorithm         [new canons_algorithm size]]]
      [set algorithm a_matrix original_a_matrix]
      [set algorithm b_matrix original_b_matrix]
      
      [terminal_format standard-terminal '\na_matrix: ' [get algorithm a_matrix]]
      [terminal_format standard-terminal '\nb_matrix: ' [get algorithm b_matrix]]
      [terminal_format standard-terminal '\nc_matrix: ' [get algorithm c_matrix]]
      
      [dotimes [N [* size 4]]
	[have algorithm clock]
	[terminal_format standard-terminal '\nN=' N]
	[terminal_format standard-terminal '\na_matrix: ' [get algorithm a_matrix]]
	[terminal_format standard-terminal '\nb_matrix: ' [get algorithm b_matrix]]
	[terminal_format standard-terminal '\nc_matrix: ' [get algorithm c_matrix]]]
      
      nil]]]



