'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe facebook_user_profile [frame] [facebook uid webpage name friend_urls]
  [new [initial-facebook initial-uid]
       [= facebook initial-facebook]
       [= uid      initial-uid]
       
       [system [string-concat 'mkdir -p ' [get this profile_directory]]]
       
       nil]]

[deftypefunk facebook_user_profile get profile_directory []
  [string-concat [get facebook profile_directory] [get uid as-string] '/']]

[deftypefunk facebook_user_profile get profile_webpage_filename []
  [string-concat [get this profile_directory] 'webpage.html']]

[deftypefunk facebook_user_profile execute download_profile_webpage []
  [let [[temp_filename [get facebook temp_filename]]]
    [system [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" -O ' [get this profile_webpage_filename] ' http://www.facebook.com/' [get uid as-string]]]]]

[deftypefunk facebook_user_profile get webpage []
  [if [null webpage]
      [prog [if [not [pathname-exists [get this profile_webpage_filename]]]
		[have this download_profile_webpage]]
	    [= webpage [string-load [get this profile_webpage_filename]]]]]
  webpage]

[deframe facebook [frame] [url local_directory user_uids profile_uid_hash]
  [new []
       [= url              'http://facebook.com/']
       [= local_directory  '/home/neptune-unencrypted/Desktop/facebook/']
       [= profile_uid_hash [new ptypehash]]
       [= user_uids        nil]
       
       [system [string-concat 'mkdir -p ' local_directory]]
       [system [string-concat 'mkdir -p ' [get this profile_directory]]]
       
       [have this load_profiles]
       
       nil]]

[deftypefunk facebook get profile_directory []
  [string-concat local_directory 'profile/']]

[deftypefunk facebook get temp_filename []
  [string-concat local_directory 'facebook-' [get [get [time] nanoseconds_since_1970] as-string] '.tmp']]

[deftypefunk facebook execute load_profiles []
  [let [[temp_filename [get this temp_filename]]]
    [system [string-concat 'ls -1d ' [get this profile_directory] '*/*/* > ' temp_filename]]
    [let [[dirstr [string-load temp_filename]]]
      [system [string-concat 'rm -f ' temp_filename]]
      [let [[dirs [string-split dirstr '\n']]]
	[let [[profile_directory [get this profile_directory]]]
	  [mapc [funk [dir]
		      [if [not [equals dir '']]
			  [let [[subdir [have dir replace_all profile_directory '']]]
			    [let [[uid [get subdir as-symbol]]]
			      [have profile_uid_hash add uid [new facebook_user_profile this uid]]]]]]
		dirs]]
	]]]]

[defunk facebook-test []
  [terminal_format standard-terminal '\nfacebook-test.']
  [let [[facebook [new facebook]]]
    [let [[user_profile_1 [new facebook_user_profile facebook `people/Steve-Johnson/559579148]]]
      [terminal_format standard-terminal '\nfacebook sample user profile created.']
      
      [globalize facebook       facebook]
      [globalize user_profile_1 user_profile_1]
      
      nil]]]
