'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk directory_string-as-facebook_url_string [this]
  [have [have this replace_all '__dirslash__' '/']
	replace_all            '__question__' '?']]

[defunk facebook_url_string-as-directory_string [this]
  [have [have this replace_all '/' '__dirslash__']
	replace_all            '?' '__question__']]

[defunk string-quote_protect [this]
  [have this replace_all '"' '\\"']]

[defunk facebook_wget [user_agent cookies_filename url filename]
  [let [[command [string-concat 'tsocks wget'
				[if user_agent
				    [string-concat ' --user-agent="' [string-quote_protect user_agent] '"']
				  '']
				[if cookies_filename
				    [string-concat ' --load-cookies "' [string-quote_protect cookies_filename] '"']
				  '']
				' -O "' [string-quote_protect filename] '"'
				' "' [string-quote_protect url] '"']]]
    [terminal_format standard-terminal '\nsystem: ' command '\n']
    [system command]
    [let [[result [shelter [string-load filename]]]]
      [if [is-type `bug result]
	  nil
	[if [get result contains '<title>Security Check Required | Facebook</title>']
	    [prog [system [string-concat 'rm "' [string-quote_protect filename] '"']]
		  [print 'Security Check Required']
		  nil]
	  result]]]]]

[deframe facebook_user_profile [frame] [facebook
					uid
					public_webpage
					login_webpage
					all_friends_webpage
					name
					[favorite_musicians  `undefined]
					[favorite_books      `undefined]
					[favorite_movies     `undefined]
					[favorite_tv_shows   `undefined]
					[favorite_activities `undefined]
					[favorite_others     `undefined]
					[top_friend_uids     `undefined]
					relationship_partner_uid
					all_friends_link]
  [new [initial-facebook initial-uid]
       [= facebook initial-facebook]
       [= uid      initial-uid]
       
       [have this assure_profile_directory_exists] 
       
       [have facebook add_user_uid uid]
       nil]]

[deftypefunk facebook_user_profile get profile_directory_without_slash []
  [string-concat [get facebook profile_directory] [facebook_url_string-as-directory_string [get uid as-string]]]]

[deftypefunk facebook_user_profile get profile_directory_exists []
  [pathname-exists [get this profile_directory_without_slash]]]

[deftypefunk facebook_user_profile execute assure_profile_directory_exists []
  [if [not [get this profile_directory_exists]]
      [system [string-concat 'mkdir -p "' [get this profile_directory] '"']]]
  nil]

[deftypefunk facebook_user_profile get profile_directory []
  [string-concat [get this profile_directory_without_slash] '/']]

[deftypefunk facebook_user_profile get profile_public_webpage_filename []
  [string-concat [get this profile_directory] 'public_webpage.html']]

[deftypefunk facebook_user_profile get profile_login_webpage_filename []
  [string-concat [get this profile_directory] 'login_webpage.html']]

[deftypefunk facebook_user_profile execute download_profile_public_webpage []
  [terminal_format standard-terminal '\nDownloading public webpage ' [get this uid]]
  [let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	[cookies_filename nil]
	[url              [string-concat 'http://www.facebook.com/' [get uid as-string]]]
	[filename         [get this profile_public_webpage_filename]]]
    [facebook_wget user_agent cookies_filename url filename]]]

[deftypefunk facebook_user_profile execute download_profile_login_webpage []
  [terminal_format standard-terminal '\nDownloading login webpage ' [get this uid]]
  [let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	[cookies_filename [get facebook cookies_file]]
	[url              [string-concat 'http://www.facebook.com/' [get uid as-string]]]
	[filename         [get this profile_login_webpage_filename]]]
    [facebook_wget user_agent cookies_filename url filename]]]

`[deftypefunk facebook_user_profile execute download_profile_public_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" -O ' [get this profile_public_webpage_filename] ' http://www.facebook.com/' [get uid as-string]]]]]

`[deftypefunk facebook_user_profile execute download_profile_login_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" --load-cookies ' [get facebook cookies_file] ' -O ' [get this profile_login_webpage_filename] ' http://www.facebook.com/' [get uid as-string]]]]]

[deftypefunk facebook_user_profile get public_webpage []
  [if [null public_webpage]
      [prog [if [not [pathname-exists [get this profile_public_webpage_filename]]]
		[have this download_profile_public_webpage]]
	    [= public_webpage [string-load [get this profile_public_webpage_filename]]]]]
  public_webpage]

[deftypefunk facebook_user_profile get login_webpage []
  [if [null login_webpage]
      [prog [if [not [pathname-exists [get this profile_login_webpage_filename]]]
		[have this download_profile_login_webpage]]
	    [= login_webpage [string-load [get this profile_login_webpage_filename]]]]]
  login_webpage]

[deftypefunk facebook_user_profile get name []
  [if [null name]
      [let [[public_webpage [get this public_webpage]]]
	[= name [get [have [car [string-split [cadr [string-split public_webpage '<title>']]
					      '</title>']]
			   replace_all ' | Facebook' ''] as-symbol]]]]
  name]

[deftypefunk facebook_user_profile get public_webpage_favorites []
  [let [[public_webpage [get this public_webpage]]]
    [cadr [string-split public_webpage 'class="uiHeaderTitle">Favorites</h3>']]]]

[deftypefunk facebook_user_profile get public_webpage_favorites_music []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Music</div>']]
		     '<div class="labelContainer">Books</div>']]]

[deftypefunk facebook_user_profile get favorite_musicians []
  [if [eq `undefined favorite_musicians]
      [let [[public_webpage_favorites_music [get this public_webpage_favorites_music]]]
	[= favorite_musicians [mapcar [funk [str]
					    [get [car [string-split str '"']] as-symbol]]
				      [cdr [string-split public_webpage_favorites_music 'title="']]]]]]
  favorite_musicians]

[deftypefunk facebook_user_profile get public_webpage_favorites_books []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Books</div>']]
		     '<div class="labelContainer">Movies</div>']]]

[deftypefunk facebook_user_profile get favorite_books []
  [if [eq `undefined favorite_books]
      [let [[public_webpage_favorites_books [get this public_webpage_favorites_books]]]
	[= favorite_books [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_books 'title="']]]]]]
  favorite_books]

[deftypefunk facebook_user_profile get public_webpage_favorites_movies []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Movies</div>']]
		     '<div class="labelContainer">Television</div>']]]

[deftypefunk facebook_user_profile get favorite_movies []
  [if [eq `undefined favorite_movies]
      [let [[public_webpage_favorites_movies [get this public_webpage_favorites_movies]]]
	[= favorite_movies [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_movies 'title="']]]]]]
  favorite_movies]


[deftypefunk facebook_user_profile get public_webpage_favorites_tv_shows []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Television</div>']]
		     '<div class="labelContainer">Activities</div>']]]

[deftypefunk facebook_user_profile get favorite_tv_shows []
  [if [eq `undefined favorite_tv_shows]
      [let [[public_webpage_favorites_tv_shows [get this public_webpage_favorites_tv_shows]]]
	[= favorite_tv_shows [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_tv_shows 'title="']]]]]]
  favorite_tv_shows]

[deftypefunk facebook_user_profile get public_webpage_favorites_activities []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Activities</div>']]
		     '<th class="label">Other</th>']]]

[deftypefunk facebook_user_profile get favorite_activities []
  [if [eq `undefined favorite_activities]
      [let [[public_webpage_favorites_activities [get this public_webpage_favorites_activities]]]
	[= favorite_activities [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_activities 'title="']]]]]]
  favorite_activities]

[deftypefunk facebook_user_profile get public_webpage_favorites_others []
  [cadr [string-split [get this public_webpage_favorites] '<th class="label">Other</th>']]]

[deftypefunk facebook_user_profile get favorite_others []
  [if [eq `undefined favorite_others]
      [let [[public_webpage_favorites_others [get this public_webpage_favorites_others]]]
	[= favorite_others [mapcar [funk [str]
					 [get [car [string-split [cadr [string-split str '"']] '</a>']] as-symbol]]
				   [cdr [string-split [cadr [string-split public_webpage_favorites_others '<span class="visible">']]
						      '<a href="']]]]]]
  favorite_others]

[deftypefunk facebook_user_profile get relationship_partner_uid []
  [if [null relationship_partner_uid]
      [= relationship_partner_uid [let [[login_webpage [get this login_webpage]]]
				    [get [car [string-split [cadr [string-split login_webpage 'In a relationship with <a href="http://www.facebook.com/']]
							    '"']] as-symbol]]]]
  relationship_partner_uid]

[deftypefunk facebook_user_profile get webpage_friends []
  [let [[login_webpage [get this login_webpage]]]
    [car [string-split [cadr [string-split login_webpage 'Friends</div>']]
		       'fsl fcg">About']]]]

[deftypefunk facebook_user_profile get top_friend_uids []
  [if [eq `undefined top_friend_uids]
      [= top_friend_uids [let [[webpage_friends [get this webpage_friends]]]
		       [mapcar [funk [str]
				     [get [car [string-split str '"']] as-symbol]]
			       [cdr [string-split webpage_friends '<a href="http://www.facebook.com/']]]]]]
  top_friend_uids]

[deftypefunk facebook_user_profile get all_friends_link []
  [if [null all_friends_link]
      [let [[parse_result [shelter [let [[login_webpage [get this login_webpage]]]
				     [have [car [string-split [cadr [string-split [cadr [string-split login_webpage '<div id="pagelet_timeline_friends_nav_top"']]
										  '<a class="tab" href="']]
							      '"']]
					   replace_all '&amp;' '&']]]]]
	[if [not [is-type `bug parse_result]]
	    [= all_friends_link parse_result]
	  [terminal_format standard-terminal '\nfacebook_user_profile-get-all_friends_link error: *** ERROR PARSING ALL_FRIENDS_LINK ***\n']]]]
  all_friends_link]

[deftypefunk facebook_user_profile get all_friends_webpage_filename []
  [string-concat [get this profile_directory] 'all_friends_webpage.html']]

[deftypefunk facebook_user_profile execute download_all_friends_webpage []
  [terminal_format standard-terminal '\nDownloading all friends webpage ' [get this uid]]
  [let [[all_friends_link [get this all_friends_link]]]
    [if [is-type `string all_friends_link]
	[let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	      [cookies_filename [get facebook cookies_file]]
	      [url              all_friends_link]
	      [filename         [get this all_friends_webpage_filename]]]
	  [facebook_wget user_agent cookies_filename url filename]]
      [prog [terminal_format standard-terminal '\nfacebook_user_profile-execute-download_all_friends_webpage error: *** ERROR DOWNLOADING ALL FRIENDS WEBPAGE ***\n']
	    nil]]]]

`[deftypefunk facebook_user_profile execute download_all_friends_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" --load-cookies ' [get facebook cookies_file] ' -O ' [get this all_friends_webpage_filename] ' "' [get this all_friends_link] '"']]]]

[deftypefunk facebook_user_profile get all_friends_webpage []
  [if [null all_friends_webpage]
      [prog [if [not [pathname-exists [get this all_friends_webpage_filename]]]
		[have this download_all_friends_webpage]]
	    [= all_friends_webpage [string-load [get this all_friends_webpage_filename]]]]]
  all_friends_webpage]

[deftypefunk facebook_user_profile get all_friend_uids []
  [mapcar [funk [str]
		[get [car [string-split str '"']] as-symbol]]
	  [cdr [string-split [car [string-split [cadr [string-split [cadr [string-split [get this all_friends_webpage]
											'<div class="fbProfileBrowser"']]
								    '<div class="profileBrowserGrid">']]
						'--></code>']]
			     'href="http://www.facebook.com/']]]]

[defunk filter_bug [exp]
  [if [is-type `bug exp]
      nil
    exp]]

[defunk filter_bug_as_string [exp]
  [let [[filtered_exp [filter_bug exp]]]
    [if filtered_exp
	[if [is-type `cons filtered_exp]
	    [stringlist-intersperse [mapcar [funk [exp]
						  [get exp as-string]]
					    filtered_exp]
				    ', ']
	  [get filtered_exp as-string]]
      '']]]

[deftypefunk facebook_user_profile get as-string []
  [string-concat 'UID                     : ' [get uid as-string]                                                  '\n'
		 'Name                    : ' [filter_bug_as_string [shelter [get this name]]]                     '\n'
		 'Relationship Partner UID: ' [filter_bug_as_string [shelter [get this relationship_partner_uid]]] '\n'
		 'Top Friend UIDs         : ' [filter_bug_as_string [shelter [get this top_friend_uids]]]          '\n'
		 'All Friend UIDs         : ' [filter_bug_as_string [shelter [get this all_friend_uids]]]          '\n'
		 'Favorite Musicians      : ' [filter_bug_as_string [shelter [get this favorite_musicians]]]       '\n'
		 'Favorite Books          : ' [filter_bug_as_string [shelter [get this favorite_books]]]           '\n'
		 'Favorite Movies         : ' [filter_bug_as_string [shelter [get this favorite_movies]]]          '\n'
		 'Favorite TV Shows       : ' [filter_bug_as_string [shelter [get this favorite_tv_shows]]]        '\n'
		 'Favorite Activities     : ' [filter_bug_as_string [shelter [get this favorite_activities]]]      '\n'
		 'Favorite Others         : ' [filter_bug_as_string [shelter [get this favorite_others]]]          '\n'
		 ]]

[deftypefunk facebook_user_profile execute print []
  [terminal_format standard-terminal [get this as-string]]]

[deftypefunk facebook_user_profile get as-tsv_row []
  [string-concat [get uid as-string]                                                  '\t'
		 [filter_bug_as_string [shelter [get this name]]]                     '\t'
		 [filter_bug_as_string [shelter [get this relationship_partner_uid]]] '\t'
		 [filter_bug_as_string [shelter [get this top_friend_uids]]]          '\t'
		 [filter_bug_as_string [shelter [get this all_friend_uids]]]          '\t'
		 [filter_bug_as_string [shelter [get this favorite_musicians]]]       '\t'
		 [filter_bug_as_string [shelter [get this favorite_books]]]           '\t'
		 [filter_bug_as_string [shelter [get this favorite_movies]]]          '\t'
		 [filter_bug_as_string [shelter [get this favorite_tv_shows]]]        '\t'
		 [filter_bug_as_string [shelter [get this favorite_activities]]]      '\t'
		 [filter_bug_as_string [shelter [get this favorite_others]]]          '\n'
		 ]]

[deftypefunk facebook_user_profile get tsv_filename []
  [string-concat [get this profile_directory] 'brief.tsv']]

[deftypefunk facebook_user_profile execute download []
  [terminal_format standard-terminal '\nDownloading ' [get this uid]]
  [get this public_webpage]
  [get this login_webpage]
  [get this all_friends_webpage]]

[deftypefunk facebook_user_profile execute generate_tsv []
  [terminal_format standard-terminal '\nGenerating tsv ' [get this uid]]
  [string-save [get this as-tsv_row] [get this tsv_filename]]]

[deftypefunk facebook_user_profile get expand_uids []
  [append [filter_bug [shelter [get this top_friend_uids]]]
	  [filter_bug [shelter [get this all_friend_uids]]]]]

[deftypefunk facebook_user_profile execute expand []
  [if [not [pathname-exists [get this tsv_filename]]]
      [prog [terminal_format standard-terminal '\nExpanding ' [get this uid]]
	    [have this generate_tsv]
	    [mapc [funk [uid]
			[if [not [get facebook contains_uid uid]]
			    [prog [terminal_format standard-terminal '\nKnow of new UID: ' uid]
				  [if [is-type `bug [shelter [new facebook_user_profile facebook uid]]]
				      [print '*** ERROR CREATING USER PROFILE ***']]]]]
		  [get this expand_uids]]]]
  nil]

[deframe facebook [frame] [[url             'http://facebook.com/']
			   [cookies_file    '/home/neptune/Desktop/cookies.txt']
			   [local_directory '/home/neptune-unencrypted/Desktop/facebook/']
			   profile_uid_set]
  [new []
       [= profile_uid_set [new set]]
       
       [system [string-concat 'mkdir -p "' local_directory '"']]
       [system [string-concat 'mkdir -p "' [get this profile_directory] '"']]
       
       [have this load_profiles]
       
       nil]]

[deftypefunk facebook execute add_user_uid [user_uid]
  [have profile_uid_set add user_uid]]

[deftypefunk facebook get contains_uid [uid]
  [get profile_uid_set contains uid]]

[deftypefunk facebook get user_uids []
  [get profile_uid_set elements]]

[deftypefunk facebook get profile_directory []
  [string-concat local_directory 'profile/']]

[deftypefunk facebook get temp_filename []
  [string-concat local_directory 'facebook-' [get [get [time] nanoseconds_since_1970] as-string] '.tmp']]

[deftypefunk facebook execute load_profiles []
  [let [[temp_filename [get this temp_filename]]]
    [system [string-concat 'ls -1 ' [get this profile_directory] ' > "' temp_filename '"']]
    [let [[dirstr [string-load temp_filename]]]
      [system [string-concat 'rm -f ' temp_filename]]
      [let [[dirs [string-split dirstr '\n']]]
	[let [[profile_directory [get this profile_directory]]]
	  [mapc [funk [dir]
		      [if [not [equals dir '']]
			  [let [[subdir [have dir replace_all profile_directory '']]]
			    [let [[uid [get [directory_string-as-facebook_url_string subdir] as-symbol]]]
			      [have profile_uid_set add uid]]]]]
		dirs]]
	]]]]

[deftypefunk facebook execute download_all []
  [terminal_format standard-terminal '\nFacebook beginning to download all.']
  [mapc [funk [user_uid]
	      [have [new facebook_user_profile this user_uid] download]]
	[get this user_uids]]
  [terminal_format standard-terminal '\nFacebook done downloading all.']
  nil]

[deftypefunk facebook execute generate_all_tsv []
  [terminal_format standard-terminal '\nFacebook beginning to generate all tsv files.']
  [mapc [funk [user_uid]
	      [have [new facebook_user_profile this user_uid] generate_tsv]]
	[get this user_uids]]
  [terminal_format standard-terminal '\nFacebook done generating all tsv files.']
  nil]

[deftypefunk facebook execute expand []
  [terminal_format standard-terminal '\nFacebook beginning expansion.']
  [mapc [funk [user_uid]
	      [have [new facebook_user_profile this user_uid] expand]]
	[get this user_uids]]
  [terminal_format standard-terminal '\nFacebook done with expansion.']
  nil]

[defunk facebook-test []
  [terminal_format standard-terminal '\nfacebook-test.']
  [let [[facebook [new facebook]]]
    [let [[user_profile_1 [new facebook_user_profile facebook `people/Steve-Johnson/559579148]]
	  [user_profile_2 [new facebook_user_profile facebook `steve.johnson.1420354]]]
      
      [terminal_format standard-terminal '\nfacebook sample user profile created.']
      
      [globalize facebook       facebook]
      [globalize user_profile_1 user_profile_1]
      [globalize user_profile_2 user_profile_2]
      
      nil]]]
