'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk directory_string-as-facebook_url_string [this]
  [have [have this replace_all '__dirslash__' '/']
	replace_all            '__question__' '?']]

[defunk facebook_url_string-as-directory_string [this]
  [have [have this replace_all '/' '__dirslash__']
	replace_all            '?' '__question__']]

[defunk string-quote_protect [this]
  [have this replace_all '"' '\\"']]

[defunk facebook_wget [user_agent cookies_filename url filename]
  [if [pathname-exists [string-concat filename '.failed_security_check']]
      [prog [terminal_format standard-terminal '\nfacebook_wget warning: skipping because of ' [string-concat filename '.failed_security_check']]
	    nil]
    [let [[command [string-concat 'tsocks wget'
				  [if user_agent
				      [string-concat ' --user-agent="' [string-quote_protect user_agent] '"']
				    '']
				  [if cookies_filename
				      [string-concat ' --load-cookies "' [string-quote_protect cookies_filename] '"']
				    '']
				  ' -O "' [string-quote_protect filename] '"'
				  ' "' [string-quote_protect url] '"']]]
      [terminal_format standard-terminal '\nsystem: ' command '\n']
      [system command]
      [let [[result [shelter [string-load filename]]]]
	[if [is-type `bug result]
	    nil
	  [if [or [have result contains 'Security Check Required']
		  [have result contains 'Sicherheitskontrolle erforderlich']]
	      [prog [system [string-concat 'rm "' [string-quote_protect filename] '"']]
		    [string-save 'Security Check Required' [string-concat filename '.failed_security_check']]
		    [terminal_format standard-terminal '\nfacebook_wget error: *** SECURITY CHECK REQUIRED ***']
		    nil]
	    result]]]]]]

[defunk facebook_login_wget [user_agent cookies_filename url filename]
  [let [[result [facebook_wget user_agent cookies_filename url filename]]]
    [if [is-type `string result]
	[if [have result contains 'Forgot your password?']
	    [prog [system [string-concat 'rm "' [string-quote_protect filename] '"']]
		  [terminal_format standard-terminal '\nfacebook_login_wget error: *** COOKIES NOT WORKING FOR LOGGING IN ***']
		  nil]
	  result]]]]


'facebook_user_profile'

[deframe facebook_user_profile [frame] [facebook
					local_location
					uid
					public_webpage
					login_webpage
					all_friends_webpage
					name
					[favorite_musicians  `undefined]
					[favorite_books      `undefined]
					[favorite_movies     `undefined]
					[favorite_tv_shows   `undefined]
					[favorite_activities `undefined]
					[favorite_others     `undefined]
					[top_friend_uids     `undefined]
					relationship_partner_uid
					all_friends_link]
  [new [initial-facebook initial-local_location initial-uid]
       [= facebook       initial-facebook]
       [= local_location initial-local_location]
       [= uid            initial-uid]
       
       [have facebook add_local_location_user_uid local_location uid]
       nil]]

[deftypefunk facebook_user_profile get user_local_location_directory_without_slash []
  [get facebook user_local_location_directory_without_slash local_location uid]]

[deftypefunk facebook_user_profile get user_local_location_directory_exists []
  [get facebook user_local_location_directory_exists local_location uid]]

[deftypefunk facebook_user_profile get user_local_location_directory []
  [get facebook user_local_location_directory local_location uid]]


[deftypefunk facebook_user_profile get profile_public_webpage_filename []
  [string-concat [get this user_local_location_directory] 'public_webpage.html']]

[deftypefunk facebook_user_profile get profile_login_webpage_filename []
  [string-concat [get this user_local_location_directory] 'login_webpage.html']]

[deftypefunk facebook_user_profile execute download_profile_public_webpage []
  [terminal_format standard-terminal '\nDownloading public webpage ' [get this uid]]
  [let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	[cookies_filename nil]
	[url              [string-concat 'http://www.facebook.com/' [get uid as-string]]]
	[filename         [get this profile_public_webpage_filename]]]
    [facebook_wget user_agent cookies_filename url filename]]]

[deftypefunk facebook_user_profile execute download_profile_login_webpage []
  [terminal_format standard-terminal '\nDownloading login webpage ' [get this uid]]
  [let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	[cookies_filename [get facebook cookies_file]]
	[url              [string-concat 'http://www.facebook.com/' [get uid as-string]]]
	[filename         [get this profile_login_webpage_filename]]]
    [facebook_login_wget user_agent cookies_filename url filename]]]

`[deftypefunk facebook_user_profile execute download_profile_public_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" -O ' [get this profile_public_webpage_filename] ' http://www.facebook.com/' [get uid as-string]]]]]

`[deftypefunk facebook_user_profile execute download_profile_login_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" --load-cookies ' [get facebook cookies_file] ' -O ' [get this profile_login_webpage_filename] ' http://www.facebook.com/' [get uid as-string]]]]]

[deftypefunk facebook_user_profile get public_webpage []
  [if [null public_webpage]
      [prog [if [not [pathname-exists [get this profile_public_webpage_filename]]]
		[have this download_profile_public_webpage]]
	    [let [[load_file_result [shelter [string-load [get this profile_public_webpage_filename]]]]]
	      [if [not [is-type `bug load_file_result]]
		  [= public_webpage load_file_result]
		[terminal_format standard-terminal '\nfacebook_user_profile-get-public_webpage error: ' [get this uid] ' *** ERROR LOADING PUBLIC WEBPAGE FILE ***']]]]]
  public_webpage]

[deftypefunk facebook_user_profile get login_webpage []
  [if [null login_webpage]
      [prog [if [not [pathname-exists [get this profile_login_webpage_filename]]]
		[have this download_profile_login_webpage]]
	    [let [[load_file_result [shelter [string-load [get this profile_login_webpage_filename]]]]]
	      [if [not [is-type `bug load_file_result]]
		  [= login_webpage load_file_result]
		[terminal_format standard-terminal '\nfacebook_user_profile-get-login_webpage error: ' [get this uid] ' *** ERROR LOADING LOGIN WEBPAGE FILE ***']]]]]
  login_webpage]

[deftypefunk facebook_user_profile get name []
  [if [null name]
      [let [[public_webpage [get this public_webpage]]]
	[if public_webpage
	    [= name [get [have [car [string-split [cadr [string-split public_webpage '<title>']]
						  '</title>']]
			       replace_all ' | Facebook' ''] as-symbol]]
	  [let [[login_webpage [get this login_webpage]]]
	    [if login_webpage
		[= name [get [have [car [string-split [cadr [string-split login_webpage '<title>']]
						      '</title>']]
				   replace_all ' | Facebook' ''] as-symbol]]]]]]]
  name]

[deftypefunk facebook_user_profile get public_webpage_favorites []
  [let [[public_webpage [get this public_webpage]]]
    [cadr [string-split public_webpage 'class="uiHeaderTitle">Favorites</h3>']]]]

[deftypefunk facebook_user_profile get public_webpage_favorites_music []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Music</div>']]
		     '<div class="labelContainer">Books</div>']]]

[deftypefunk facebook_user_profile get favorite_musicians []
  [if [eq `undefined favorite_musicians]
      [let [[public_webpage_favorites_music [get this public_webpage_favorites_music]]]
	[= favorite_musicians [mapcar [funk [str]
					    [get [car [string-split str '"']] as-symbol]]
				      [cdr [string-split public_webpage_favorites_music 'title="']]]]]]
  favorite_musicians]

[deftypefunk facebook_user_profile get public_webpage_favorites_books []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Books</div>']]
		     '<div class="labelContainer">Movies</div>']]]

[deftypefunk facebook_user_profile get favorite_books []
  [if [eq `undefined favorite_books]
      [let [[public_webpage_favorites_books [get this public_webpage_favorites_books]]]
	[= favorite_books [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_books 'title="']]]]]]
  favorite_books]

[deftypefunk facebook_user_profile get public_webpage_favorites_movies []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Movies</div>']]
		     '<div class="labelContainer">Television</div>']]]

[deftypefunk facebook_user_profile get favorite_movies []
  [if [eq `undefined favorite_movies]
      [let [[public_webpage_favorites_movies [get this public_webpage_favorites_movies]]]
	[= favorite_movies [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_movies 'title="']]]]]]
  favorite_movies]


[deftypefunk facebook_user_profile get public_webpage_favorites_tv_shows []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Television</div>']]
		     '<div class="labelContainer">Activities</div>']]]

[deftypefunk facebook_user_profile get favorite_tv_shows []
  [if [eq `undefined favorite_tv_shows]
      [let [[public_webpage_favorites_tv_shows [get this public_webpage_favorites_tv_shows]]]
	[= favorite_tv_shows [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_tv_shows 'title="']]]]]]
  favorite_tv_shows]

[deftypefunk facebook_user_profile get public_webpage_favorites_activities []
  [car [string-split [cadr [string-split [get this public_webpage_favorites] '<div class="labelContainer">Activities</div>']]
		     '<th class="label">Other</th>']]]

[deftypefunk facebook_user_profile get favorite_activities []
  [if [eq `undefined favorite_activities]
      [let [[public_webpage_favorites_activities [get this public_webpage_favorites_activities]]]
	[= favorite_activities [mapcar [funk [str]
					[get [car [string-split str '"']] as-symbol]]
				  [cdr [string-split public_webpage_favorites_activities 'title="']]]]]]
  favorite_activities]

[deftypefunk facebook_user_profile get public_webpage_favorites_others []
  [cadr [string-split [get this public_webpage_favorites] '<th class="label">Other</th>']]]

[deftypefunk facebook_user_profile get favorite_others []
  [if [eq `undefined favorite_others]
      [let [[public_webpage_favorites_others [get this public_webpage_favorites_others]]]
	[= favorite_others [mapcar [funk [str]
					 [get [car [string-split [cadr [string-split str '"']] '</a>']] as-symbol]]
				   [cdr [string-split [cadr [string-split public_webpage_favorites_others '<span class="visible">']]
						      '<a href="']]]]]]
  favorite_others]

[deftypefunk facebook_user_profile get relationship_partner_uid []
  [if [null relationship_partner_uid]
      [= relationship_partner_uid [let [[login_webpage [get this login_webpage]]]
				    [get [car [string-split [cadr [string-split login_webpage 'In a relationship with <a href="http://www.facebook.com/']]
							    '"']] as-symbol]]]]
  relationship_partner_uid]

[deftypefunk facebook_user_profile get webpage_friends []
  [let [[login_webpage [get this login_webpage]]]
    [car [string-split [cadr [string-split login_webpage 'Friends</div>']]
		       'fsl fcg">About']]]]

[deftypefunk facebook_user_profile get top_friend_uids []
  [if [eq `undefined top_friend_uids]
      [let [[result [shelter [let [[webpage_friends [get this webpage_friends]]]
			       [mapcar [funk [str]
					     [get [car [string-split str '"']] as-symbol]]
				       [cdr [string-split webpage_friends '<a href="http://www.facebook.com/']]]]]]]
	[if [is-type `bug result]
	    [prog `[terminal_format standard-terminal '\nfacebook_user_profile-get-top_friend_uids bug: ' result]
		  [= top_friend_uids nil]]
	  [= top_friend_uids result]]]]
  top_friend_uids]

[deftypefunk facebook_user_profile get all_friends_link []
  [if [null all_friends_link]
      [let [[parse_result [shelter [let [[login_webpage [get this login_webpage]]]
				     [have [car [string-split [cadr [string-split [cadr [string-split login_webpage '<div id="pagelet_timeline_friends_nav_top"']]
										  '<a class="tab" href="']]
							      '"']]
					   replace_all '&amp;' '&']]]]]
	[if [is-type `bug parse_result]
	    [= parse_result [shelter [let [[login_webpage [get this login_webpage]]]
				       [have [car [string-split [cadr [string-split [cadr [string-split login_webpage '<div class="relationshipSection">']]
										    '<span class="fcg"><a href="']]
								'"']]
					     replace_all '&amp;' '&']]]]]
	[if [not [is-type `bug parse_result]]
	    [= all_friends_link parse_result]
	  [terminal_format standard-terminal '\nfacebook_user_profile-get-all_friends_link error: ' [get this uid] ' *** ERROR PARSING ALL_FRIENDS_LINK ***']]]]
  all_friends_link]

[deftypefunk facebook_user_profile get all_friends_webpage_filename []
  [string-concat [get this user_local_location_directory] 'all_friends_webpage.html']]

[deftypefunk facebook_user_profile execute download_all_friends_webpage []
  [terminal_format standard-terminal '\nDownloading all friends webpage ' [get this uid]]
  [let [[all_friends_link [get this all_friends_link]]]
    [if [is-type `string all_friends_link]
	[let [[user_agent       'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1']
	      [cookies_filename [get facebook cookies_file]]
	      [url              all_friends_link]
	      [filename         [get this all_friends_webpage_filename]]]
	  [facebook_login_wget user_agent cookies_filename url filename]]
      [prog [terminal_format standard-terminal '\nfacebook_user_profile-execute-download_all_friends_webpage error: ' [get this uid] ' *** ERROR DOWNLOADING ALL FRIENDS WEBPAGE ***']
	    nil]]]]

`[deftypefunk facebook_user_profile execute download_all_friends_webpage []
   [system [print [string-concat 'wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:13.0) Gecko/20100101 Firefox/13.0.1" --load-cookies ' [get facebook cookies_file] ' -O ' [get this all_friends_webpage_filename] ' "' [get this all_friends_link] '"']]]]

[deftypefunk facebook_user_profile get all_friends_webpage []
  [if [null all_friends_webpage]
      [prog [if [not [pathname-exists [get this all_friends_webpage_filename]]]
		[have this download_all_friends_webpage]]
	    [let [[load_file_result [shelter [string-load [get this all_friends_webpage_filename]]]]]
	      [if [not [is-type `bug load_file_result]]
		  [= all_friends_webpage load_file_result]
		[prog [terminal_format standard-terminal '\nfacebook_user_profile-get-all_friends_webpage error: ' [get this uid] ' *** ERROR LOADING ALL FRIENDS WEBPAGE FILE ***']
		      [bug load_file_result]]]]]]
  all_friends_webpage]

[deftypefunk facebook_user_profile get all_friend_uids []
  [let [[result [shelter [mapcar [funk [str]
				       [get [car [string-split str '"']] as-symbol]]
				 [cdr [string-split [car [string-split [cadr [string-split [cadr [string-split [get this all_friends_webpage]
													       '<div class="fbProfileBrowser"']]
											   '<div class="profileBrowserGrid">']]
								       '--></code>']]
						    'href="http://www.facebook.com/']]]]]]
    [if [is-type `bug result]
	[= result [shelter [mapcar [funk [str]
					 [get [have [car [string-split str '"']] replace_all '?ref=pb' ''] as-symbol]]
				   [cdr [string-split [car [string-split [cadr [string-split [get this all_friends_webpage]
											     '<div class="fbProfileBrowser"']]
									 '--></code>']]
						      'href="http://www.facebook.com/']]]]]]
    [if [is-type `bug result]
	[prog [terminal_format standard-terminal '\nfacebook_user_profile-get-all_friend_uids error: ' [get this uid] ' *** ERROR PARSING ALL FRIEND UIDS ***']
	      [bug result]]
      result]]]

[defunk filter_bug [exp]
  [if [is-type `bug exp]
      nil
    exp]]

[defunk filter_bug_as_string [exp]
  [let [[filtered_exp [filter_bug exp]]]
    [if filtered_exp
	[if [is-type `cons filtered_exp]
	    [stringlist-intersperse [mapcar [funk [exp]
						  [get exp as-string]]
					    filtered_exp]
				    ', ']
	  [get filtered_exp as-string]]
      '']]]

[deftypefunk facebook_user_profile get as-string []
  [string-concat 'UID                     : ' [get uid as-string]                                                  '\n'
		 'Name                    : ' [filter_bug_as_string [shelter [get this name]]]                     '\n'
		 'Relationship Partner UID: ' [filter_bug_as_string [shelter [get this relationship_partner_uid]]] '\n'
		 'Top Friend UIDs         : ' [filter_bug_as_string [shelter [get this top_friend_uids]]]          '\n'
		 'All Friend UIDs         : ' [filter_bug_as_string [shelter [get this all_friend_uids]]]          '\n'
		 'Favorite Musicians      : ' [filter_bug_as_string [shelter [get this favorite_musicians]]]       '\n'
		 'Favorite Books          : ' [filter_bug_as_string [shelter [get this favorite_books]]]           '\n'
		 'Favorite Movies         : ' [filter_bug_as_string [shelter [get this favorite_movies]]]          '\n'
		 'Favorite TV Shows       : ' [filter_bug_as_string [shelter [get this favorite_tv_shows]]]        '\n'
		 'Favorite Activities     : ' [filter_bug_as_string [shelter [get this favorite_activities]]]      '\n'
		 'Favorite Others         : ' [filter_bug_as_string [shelter [get this favorite_others]]]          '\n'
		 ]]

[deftypefunk facebook_user_profile execute print []
  [terminal_format standard-terminal [get this as-string]]]

[deftypefunk facebook_user_profile get as-tsv_row []
  [string-concat [get uid as-string]                                                  '\t'
		 [filter_bug_as_string [shelter [get this name]]]                     '\t'
		 [filter_bug_as_string [shelter [get this relationship_partner_uid]]] '\t'
		 [filter_bug_as_string [shelter [get this top_friend_uids]]]          '\t'
		 [filter_bug_as_string [shelter [get this all_friend_uids]]]          '\t'
		 [filter_bug_as_string [shelter [get this favorite_musicians]]]       '\t'
		 [filter_bug_as_string [shelter [get this favorite_books]]]           '\t'
		 [filter_bug_as_string [shelter [get this favorite_movies]]]          '\t'
		 [filter_bug_as_string [shelter [get this favorite_tv_shows]]]        '\t'
		 [filter_bug_as_string [shelter [get this favorite_activities]]]      '\t'
		 [filter_bug_as_string [shelter [get this favorite_others]]]          '\n'
		 ]]

[deftypefunk facebook_user_profile get tsv_filename []
  [string-concat [get this user_local_location_directory] 'brief.tsv']]

[deftypefunk facebook_user_profile execute download []
  [terminal_format standard-terminal '\nDownloading ' [get this uid]]
  [let [[result [shelter [get this public_webpage]]]]
    [if [is-type `bug result]
	[terminal_format standard-terminal '\nfacebook_user_profile-execute-download warning: error downloading public_webpage for ' uid]]]
  [let [[result [shelter [get this login_webpage]]]]
    [if [is-type `bug result]
	[terminal_format standard-terminal '\nfacebook_user_profile-execute-download warning: error downloading login_webpage for ' uid]]]
  [let [[result [shelter [get this all_friends_webpage]]]]
    [if [is-type `bug result]
	[terminal_format standard-terminal '\nfacebook_user_profile-execute-download warning: error downloading all_friends_webpage for ' uid]]]
  [system [string-concat 'mv "' [string-quote_protect [get this user_local_location_directory]] '" "' [string-quote_protect [get facebook user_local_location_directory `tried-downloading uid]] '"']]
  nil]


[deftypefunk facebook_user_profile execute generate_tsv []
  [terminal_format standard-terminal '\nGenerating tsv ' [get this uid]]
  [string-save [get this as-tsv_row] [get this tsv_filename]]]

[deftypefunk facebook_user_profile get expand_uids []
  [let [[top_friend_uids [shelter [get this top_friend_uids]]]
	[all_friend_uids [shelter [get this all_friend_uids]]]]
    [if [is-type `bug top_friend_uids]
	[prog [terminal_format standard-terminal '\nfacebook_user_profile-get-expand_uids error: error getting top_friend_uids for ' [get this uid] '.']
	      [= top_friend_uids nil]]]
    [if [is-type `bug all_friend_uids]
	[prog [terminal_format standard-terminal '\nfacebook_user_profile-get-expand_uids error: error getting all_friend_uids for ' [get this uid] '.']
	      [= all_friend_uids nil]]]
    [append top_friend_uids
	    all_friend_uids]]]

[deftypefunk facebook_user_profile get tsv_file_needs_to_be_regenerated []
  [or [not [pathname-exists [get this tsv_filename]]]
      [let [[tsv_filename_stat         [pathname-stat [get this tsv_filename]]]
	    [public_filename_stat      [if [pathname-exists [get this profile_public_webpage_filename]]
					   [pathname-stat   [get this profile_public_webpage_filename]]]]
	    [login_filename_stat       [if [pathname-exists [get this profile_login_webpage_filename]]
					   [pathname-stat   [get this profile_login_webpage_filename]]]]
	    [all_friends_filename_stat [if [pathname-exists [get this all_friends_webpage_filename]]
					   [pathname-stat   [get this all_friends_webpage_filename]]]]]
	[let [[tsv_time [have tsv_filename_stat lookup `time_of_last_modification]]]
	  [or [and public_filename_stat
		   [let [[html_time [have public_filename_stat lookup `time_of_last_modification]]]
		     [> html_time tsv_time]]]
	      [and login_filename_stat
		   [let [[html_time [have login_filename_stat lookup `time_of_last_modification]]]
		     [> html_time tsv_time]]]
	      [and all_friends_filename_stat
		   [let [[html_time [have all_friends_filename_stat lookup `time_of_last_modification]]]
		     [> html_time tsv_time]]]]]]]]

[deftypefunk facebook_user_profile execute expand []
  [terminal_format standard-terminal '\nExpanding ' [get this local_location] ' '  [get this uid]]
  [have this generate_tsv]
  [mapc [funk [uid]
	      [let [[uid_doesnt_already_exist [shelter [and [not [get facebook contains_local_location_uid `know-of           uid]]
							    [not [get facebook contains_local_location_uid `tried-downloading uid]]
							    [not [get facebook contains_local_location_uid `tried-expanding   uid]]]]]]
		[if [is-type `bug uid_doesnt_already_exist]
		    [terminal_format standard-terminal '\nERROR CHECKING IF UID EXISTS: ' uid]
		  [if uid_doesnt_already_exist
		      [prog [terminal_format standard-terminal '\nKnow of new UID: ' uid]
			    [if [is-type `bug [shelter [new facebook_user_profile facebook `know-of uid]]]
				[print '*** ERROR CREATING USER PROFILE ***']]]]]]]
	[get this expand_uids]]
  [system [string-concat 'mv "' [string-quote_protect [get this user_local_location_directory]] '" "' [string-quote_protect [get facebook user_local_location_directory `tried-expanding uid]] '"']]
  nil]


'facebook'

[deframe facebook [frame] [[url             'http://facebook.com/']
			   [cookies_file    '/home/neptune/Desktop/cookies.txt']
			   [local_directory '/home/neptune-unencrypted/Desktop/facebook/']
			   profiles_loaded
			   cached_location_profile_uid_hash_hash]
  [new []
       [= cached_location_profile_uid_hash_hash [new ptypehash]]
       
       [system [string-concat 'mkdir -p "' local_directory '"']]
       [system [string-concat 'mkdir -p "' [get this local_location_directory `know-of]           '"']]
       [system [string-concat 'mkdir -p "' [get this local_location_directory `tried-downloading] '"']]
       [system [string-concat 'mkdir -p "' [get this local_location_directory `tried-expanding]   '"']]
       
       nil]]

[deftypefunk facebook get cached_location_profile_uid_hash [local_location]
  [let [[cached_location_profile_uid_hash [have cached_location_profile_uid_hash_hash lookup local_location]]]
    [if [null cached_location_profile_uid_hash]
	[prog [= cached_location_profile_uid_hash [new ptypehash]]
	      [have cached_location_profile_uid_hash_hash add local_location cached_location_profile_uid_hash]]]
    cached_location_profile_uid_hash]]

[deftypefunk facebook get user_local_location_directory_without_slash [local_location uid]
  [string-concat [get this local_location_directory local_location] [facebook_url_string-as-directory_string [get uid as-string]]]]

[deftypefunk facebook get user_local_location_directory [local_location uid]
  [string-concat [get this user_local_location_directory_without_slash local_location uid] '/']]

[deftypefunk facebook get user_local_location_directory_exists [local_location uid]
  [let [[result [shelter [pathname-exists [get this user_local_location_directory_without_slash local_location uid]]]]]
    [if [is-type `bug result]
	[prog [terminal_format standard-terminal '\nfacebook: ERROR CHECKING IF FILE EXISTS.  local_location=' local_location ' uid=' uid]
	      [bug result]]]
    result]]

[deftypefunk facebook execute add_local_location_user_uid [local_location uid]
  [if [not [get this user_local_location_directory_exists local_location uid]]
      [system [string-concat 'mkdir -p "' [get this user_local_location_directory local_location uid] '"']]]
  [have [get this cached_location_profile_uid_hash local_location] add uid t]
  nil]

[deftypefunk facebook get contains_local_location_uid [local_location uid]
  [let [[cached_profile_uid_hash [get this cached_location_profile_uid_hash local_location]]]
    [let [[have_cached_result [get cached_profile_uid_hash contains uid]]]
      [if have_cached_result
	  [have cached_profile_uid_hash lookup uid]
	[let [[actual_result [get this user_local_location_directory_exists local_location uid]]]
	  [have cached_profile_uid_hash add uid actual_result]
	  actual_result]]]]]

[deftypefunk facebook get local_location_user_uids [local_location]
  [have this assure_local_location_profiles_loaded local_location]
  [get [get this cached_location_profile_uid_hash local_location] keys]]

[deftypefunk facebook get local_location_directory [local_location]
  [string-concat local_directory [get local_location as-string] '/']]

[deftypefunk facebook get temp_filename []
  [string-concat local_directory 'facebook-' [get [get [time] nanoseconds_since_1970] as-string] '.tmp']]

[deftypefunk facebook execute load_local_location_profiles [local_location]
  [let [[temp_filename [get this temp_filename]]]
    [system [string-concat 'find ' [get this local_location_directory local_location] ' -maxdepth 1 | head -64 > "' temp_filename '"']]
    [let [[dirstr [string-load temp_filename]]]
      [system [string-concat 'rm -f ' temp_filename]]
      [let [[dirs [string-split dirstr '\n']]]
	[terminal_format standard-terminal '\nfacebook: loading ' [- [length dirs] 1] ' profiles.']
	[let [[local_location_directory [get this local_location_directory local_location]]]
	  [mapc [funk [dir]
		      [if [not [equals dir '']]
			  [let [[subdir [have dir replace_all local_location_directory '']]]
			    [let [[uid [get [directory_string-as-facebook_url_string subdir] as-symbol]]]
			      [have [get this cached_location_profile_uid_hash local_location] add uid t]]]]]
		dirs]]
	[terminal_format standard-terminal '\nfacebook: done loading profiles.']
	[= profiles_loaded t]
	]]]]

[deftypefunk facebook execute assure_local_location_profiles_loaded [local_location]
  [if [not profiles_loaded]
      [have this load_local_location_profiles local_location]]]

[defunk partimesc [count funk seq]
  [if [or [not [is-type `integer count]]
	  [not [> count 0]]]
      [error bug_type     `incorrect_argument_type
	     description  'Argument count should be an integer greater than zero.'
	     correct_type `integer
	     actual_type  [type count]]]
  [let [[fiber_array     [new array count]]
	[start_trigger   [new fiber_trigger]]
	[main_iter       seq]
	[main_iter_mutex [new mutex]]
	[per_job_count   [print [+ [/ [/ [length seq] count] 10] 1]]]]
    [dotimes [i count]
      [set fiber_array elt i [fiber [funk []
					  [wait-for-trigger start_trigger]
					  [let [[not_done       t]
						[fiber_elements nil]]
					    [while not_done
					      [have main_iter_mutex lock]
					      [if [null main_iter]
						  [= not_done nil]]
					      [dotimes [i per_job_count]
						[if main_iter
						    [prog [= fiber_elements [cons [car main_iter] fiber_elements]]
							  [= main_iter [cdr main_iter]]]]]
					      [have main_iter_mutex unlock]
					      [mapc funk fiber_elements]
					      [= fiber_elements nil]]]]
				    nil]]]
    [labels [[all_sleeping []
			   [let [[all_sleeping t]]
			     [dotimes [i count]
			       [let [[fiber [get fiber_array elt i]]]
				 [if [and [global_scheduler-contains_active_fiber fiber]
					  [null [get fiber exit_status]]]
				     [= all_sleeping nil]]]]
			     all_sleeping]]]
	    [while [not [all_sleeping]]
	      [millisleep 100]]
	    [have start_trigger trigger]
	    [apply &join [get fiber_array as-conslist]]
	    nil]]]

[defunk parc [funk seq]
  [partimesc [length [get scheduler:global_scheduler processors]] funk seq]]

[deftypefunk facebook execute download_all []
  [terminal_format standard-terminal '\nFacebook beginning to download all.']
  [parc [funk [user_uid]
	      [have [new facebook_user_profile this `know-of user_uid] download]]
	[get this local_location_user_uids `know-of]]
  [terminal_format standard-terminal '\nFacebook done downloading all.']
  nil]

[deftypefunk facebook execute generate_all_tsv []
  [terminal_format standard-terminal '\nFacebook beginning to generate all tsv files.']
  [mapc [funk [user_uid]
	      [have [new facebook_user_profile this `tried-downloading user_uid] generate_tsv]]
	[get this local_location_user_uids `tried-downloading]]
  [terminal_format standard-terminal '\nFacebook done generating all tsv files.']
  nil]

[deftypefunk facebook execute expand_all []
  [terminal_format standard-terminal '\nFacebook beginning expansion of all profiles.']
  [parc [funk [user_uid]
	      [have [new facebook_user_profile this `tried-downloading user_uid] expand]]
	[get this local_location_user_uids `tried-downloading]]
  [terminal_format standard-terminal '\nFacebook done with expansion of all profiles.']
  nil]

[deftypefunk facebook execute expand []
  [have this expand_all]]

[defunk facebook-init []
  [terminal_format standard-terminal '\nfacebook-init.']
  [let [[facebook [new facebook]]]
    [let [[user_profile_1 `[new facebook_user_profile facebook `know-of `people/Steve-Johnson/559579148]]
	  [user_profile_2 `[new facebook_user_profile facebook `know-of `steve.johnson.1420354]]]
      
      `[terminal_format standard-terminal '\ntwo facebook sample user profiles created.']
      
      [globalize facebook       facebook]
      `[globalize user_profile_1 user_profile_1]
      `[globalize user_profile_2 user_profile_2]
      
      nil]]]

[defunk facebook-save_download_all_image []
  [= user-boot-commands `[[prog [shelter [prog [facebook-init]
					       [have facebook download_all]]]
				[quit]]]]
  [save_memory_image 'img/bootstrap-facebook-download_all.img']]

[defunk facebook-save_expand_image []
  [= user-boot-commands `[[prog [shelter [facebook-init]
					 [have facebook expand]]
				[quit]]]]
  [save_memory_image 'img/bootstrap-facebook-expand_all.img']]

