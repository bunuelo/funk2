'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk number-to_memory_string [this]
  [let [[i [get this as-integer]]]
    [cond [      [< i                        1024]   [format nil    i]]
	  [      [< i [*                1024 1024]]  [format nil [/ i                  1024.0]  'k']]
	  [      [< i [*           1024 1024 1024]]  [format nil [/ i [*        1024.0 1024.0]] 'M']]
	  [      [< i [*      1024 1024 1024 1024]]  [format nil [/ i [* 1024.0 1024.0 1024.0]] 'G']]
	  [[or t [< i [* 1024 1024 1024 1024 1024]]] [format nil [/ i [* 1024.0 1024.0 1024.0]] 'T']]]]]

[defunk fibermon_processor_widget-redraw [processor_text_view progress_bar processor info_fiber_hash text_view]
  [print 'debug 0']
  [let [[total_execution_seconds 0.0]
	[total_bytecode_count    0]
	[last_real_time          [have info_fiber_hash lookup `last_real_time]]]
    [print 'debug 1']
    [if [null last_real_time]
	[= last_real_time [time]]]
    [print 'debug 2']
    [set [get text_view buffer] text [stringlist-concat [mapcar [funk [fiber]
								      [print 'debug 3']
								      [let [[fiber_info [have info_fiber_hash lookup fiber]]]
									[print 'debug 4']
									[if [null fiber_info]
									    [prog [= fiber_info [let [[this [frame]]]
												  [have this add `last_execution_nanoseconds  [get fiber execution_nanoseconds]]
												  [have this add `last_bytecode_count         [get fiber bytecode_count]]
												  [have this add `last_nanoseconds_since_1970 [get [time] nanoseconds_since_1970]]
												  [have this add `last_processor_usage        0.0]
												  this]]
										  [have info_fiber_hash add fiber fiber_info]]]
									[print 'debug 5']
									[let [[execution_nanoseconds  [get fiber execution_nanoseconds]]
									      [bytecode_count         [get fiber bytecode_count]]
									      [nanoseconds_since_1970 [get [time] nanoseconds_since_1970]]]
									  [print 'debug 6']
									  [let [[elapsed_execution_nanoseconds [- execution_nanoseconds  [have fiber_info lookup `last_execution_nanoseconds]]]
										[elapsed_nanoseconds           [- nanoseconds_since_1970 [have fiber_info lookup `last_nanoseconds_since_1970]]]
										[elapsed_bytecode_count        [- bytecode_count         [have fiber_info lookup `last_bytecode_count]]]]
									    [print 'debug 7']
									    [let [[elapsed_execution_seconds [/ elapsed_execution_nanoseconds 1000000000.0]]
										  [elapsed_seconds           [/ elapsed_nanoseconds           1000000000.0]]]
									      
									      [print 'debug 8']
									      [= total_execution_seconds [+ total_execution_seconds elapsed_execution_seconds]]
									      [= total_bytecode_count    [+ total_bytecode_count    elapsed_bytecode_count]]
									      
									      [let [[processor_usage [if [== elapsed_seconds 0.0]
													 0.0
													 [/ elapsed_execution_seconds elapsed_seconds]]]]
										[print 'debug 9']
										[let [[bytecodes_per_execution_second [if [!= elapsed_execution_nanoseconds 0]
															  [/ elapsed_bytecode_count elapsed_execution_seconds]
															nil]]
										      [bytecodes_per_second           [if [!= elapsed_nanoseconds 0]
															  [/ elapsed_bytecode_count elapsed_seconds]
															nil]]]
										  [print 'debug 10']
										  [have fiber_info add `last_execution_nanoseconds  execution_nanoseconds]
										  [have fiber_info add `last_bytecode_count         bytecode_count]
										  [have fiber_info add `last_nanoseconds_since_1970 nanoseconds_since_1970]
										  [print 'debug 11']
										  `[format nil '[' fiber '\n'
											   '\t' [* 100 processor_usage]        '% processor' '\n'
											   '\t' elapsed_execution_seconds      ' s execution' '\n'
											   '\t' elapsed_seconds                ' s real' '\n'
											   '\t' elapsed_bytecode_count         ' bc' '\n'
											   '\t' bytecodes_per_execution_second ' bc/s execution' '\n'
											   '\t' bytecodes_per_second           ' bc/s real' '\n'
											   '\t' 'is' [if [get fiber paused]      ' ' ' not '] 'paused' '\n'
											   '\t' 'is' [if [get fiber is_complete] ' ' ' not '] 'complete' '\n'
											   '\t' 'is' [if [get fiber is_zombie]   ' ' ' not '] 'zombie' ']' '\n']
										   [print 'debug 12']
										   [let [[cause_reg [get fiber cause_reg]]]
										     [print 'debug 13']
										     [format nil '[' [if cause_reg
													 [let [[cause-frame [get cause_reg frame]]]
													   [print 'debug 13.1']
													   [format nil [have cause_reg lookup `cause-name] '\n'
														   [stringlist-concat [mapcar [funk [slot]
																		    [print 'debug 13.2']
																		    [if [not [eq slot `cause-name]]
																			[format nil ' - ' slot ': ' [have cause_reg lookup slot] '\n']
																		      '']]
																	      [append `[cause-args]
																		       [get cause-frame slots]]]]]]]
											     '\t' [/ bytecodes_per_second 1024.0]       ' kBc/s' '\n'
											     '\t' 'is' [if [prog [print 'debug 13.3'] [get fiber paused]]           ' ' ' not '] 'paused' '\n'
											     '\t' 'is' [if [prog [print 'debug 13.4'] [get fiber is_complete]]      ' ' ' not '] 'complete' '\n'
											     '\t' 'is' [if [prog [print 'debug 13.5'] [get fiber sleep_until_time]] ' ' ' not '] 'asleep' '\n'
											     '\t' 'is' [if [prog [print 'debug 13.6'] [get fiber is_zombie]]        ' ' ' not '] 'zombie' ']' '\n']]
										   ]]]]]]]
								[get processor active_fibers]]]]
    
    [print 'debug 14'] 
    [let [[real_time [time]]]
      [print 'debug 15'] 
      [let [[elapsed_nanoseconds [- [get real_time nanoseconds_since_1970] [get last_real_time nanoseconds_since_1970]]]]
	[print 'debug 16'] 
	[let [[elapsed_seconds [/ elapsed_nanoseconds 1000000000.0]]]
	  [print 'debug 17'] 
	  [let [[processor_usage [if [== elapsed_seconds 0.0]
				     0.0
				   [/ total_execution_seconds elapsed_seconds]]]]
	    [print 'debug 18'] 
	    [= processor_usage [cond [[< processor_usage 0.0] 0.0]
				     [[> processor_usage 1.0] 1.0]
				     [t                       processor_usage]]]
	    
	    [print 'debug 19'] 
	    [set progress_bar fraction processor_usage]
	    
	    [print 'debug 20'] 
	    [let [[total_used_memory [system-memorypool-total_global_memory [get processor pool_index]]]
		  [total_free_memory [system-memorypool-total_free_memory   [get processor pool_index]]]]
	      
	      [print 'debug 21'] 
	      [set [get processor_text_view buffer] text [format nil  'processor pool index\t: ' [get processor pool_index]                                                            ''
								 '\n' 'total memory\t\t: '       [number-to_memory_string [+ total_free_memory total_used_memory]]                     'B'
								 '\n' 'free memory\t\t\t: '      [number-to_memory_string total_free_memory]                                           'B'
								 '\n' 'active fiber count\t: '   [simple_length [get processor active_fibers]]                                         ''
								 '\n' 'processor usage\t\t: '    [* 100.0 processor_usage]                                                             '%'
								 '\n' 'total bytecode rate\t: '  [/ [if [== elapsed_seconds 0.0] 0.0 [/ total_bytecode_count elapsed_seconds]] 1024.0] ' kBc/s'
								 '\n' 'elapsed\t\t\t\t: '        elapsed_seconds                                                                       ' s'
								 ]]
	      
	      [print 'debug 22'] 
	      ]]]]
      [print 'debug 23'] 
      [have info_fiber_hash add `last_real_time real_time]]]
  [print 'debug 24'] 
  nil]



[defunk fibermon_processor_widget-new [index]
  [let [[processor           [get [get scheduler:global_scheduler processors] elt index]]
	[info_fiber_hash     [new ptypehash]]
	[scrolled_window     [gtk-scrolled_window-new]]
	[vbox                [gtk-vbox-new 3]]
	[processor_text_view [gtk-text_view-new]]
	[progress_bar        [gtk-progress_bar-new]]
	[text_view           [gtk-text_view-new]]]
    [set progress_bar fraction 0]
    [have vbox pack_start processor_text_view nil nil 0]
    [have vbox pack_start progress_bar nil nil 0]
    [have scrolled_window add text_view]
    [have vbox pack_start scrolled_window t t 0]
    [frame widget      vbox
	   redraw_funk [funk []
			     [format stdout '\nfibermon_processor_widget-new: beginning redrawing index=' index]
			     [fibermon_processor_widget-redraw processor_text_view progress_bar processor info_fiber_hash text_view]
			     [format stdout '\nfibermon_processor_widget-new: finished redrawing index=' index]]]]]



[defunk fibermon-new [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nfibermon fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'FIBERMON(1)'
		'\n'   'NAME'
		'\n'   '       fibermon - display Funk tasks'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       fibermon -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The fibermon program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of tasks currently being managed '
		'\n'   '       by the Funk kernel.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[win             [gtk-window-new]]
	    [scrolled_window [gtk-scrolled_window-new]]
	    [processor_hbox  [gtk-hbox-new 8]]
	    [processor_array [new array 8]]]
	
	[set win default_size 1900 640]
	[set win title        'fibermon']
	
	[let [[redraw_funks             nil]
	      [fibermon-redraw-quit_now nil]
	      [fibermon-redraw-is_done  nil]]
	  [dotimes [i 8]
	    [let [[processor_frame [fibermon_processor_widget-new i]]]
	      [let [[processor   [have processor_frame lookup `widget]]
		    [redraw_funk [have processor_frame lookup `redraw_funk]]]
		[= redraw_funks [cons redraw_funk redraw_funks]]
		[have processor_hbox pack_start processor t t 0]
		[set processor_array elt i processor]]]]
	  
	  [have scrolled_window add_with_viewport processor_hbox]
	  
	  [have win connect_hide_on_delete]
	  [have win add scrolled_window]
	  
	  [have win signal_connect 'destroy'
		[funk []
		      [= fibermon-redraw-quit_now t]
		      [while [not fibermon-redraw-is_done]
			[millisleep 100]]]
		nil]
	  
	  [have win show_all]
	  
	  [fiber [funk []
		       [cause-define cause-name `fibermon]
		       [cause-enable_reactive_critics [this-cause]]
		       [while [not fibermon-redraw-quit_now]
			 [mapc [funk [redraw_funk]
				     [apply redraw_funk nil]]
			       redraw_funks]
			 [if [not [get win visible]]
			     [= fibermon-redraw-quit_now t]]
			 [yield]]
		       [= fibermon-redraw-is_done t]
		       [have win destroy]
		       nil]
		 nil]]]]]]

[defmetro fibermon [:rest args]
  `[fibermon-new @[mapcar [funk [arg] `[quote ,arg]] args]]]


