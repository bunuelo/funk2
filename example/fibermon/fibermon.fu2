'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk fibermon_processor_widget-redraw [this processor info_fiber_hash text_view]
  [set [get text_view buffer] text [stringlist-concat [mapcar [funk [fiber]
								    [let [[fiber_info [have info_fiber_hash lookup fiber]]]
								      [if [null fiber_info]
									  [prog [= fiber_info [let [[this [frame]]]
												[have this add `last_execution_nanoseconds  [get fiber execution_nanoseconds]]
												[have this add `last_bytecode_count         [get fiber bytecode_count]]
												[have this add `last_nanoseconds_since_1970 [get [time] nanoseconds_since_1970]]
												this]]
										[have info_fiber_hash add fiber fiber_info]]]
								      [let [[execution_nanoseconds  [get fiber execution_nanoseconds]]
									    [bytecode_count         [get fiber bytecode_count]]
									    [nanoseconds_since_1970 [get [time] nanoseconds_since_1970]]]
									[let [[elapsed_execution_nanoseconds [- execution_nanoseconds  [have fiber_info lookup `last_execution_nanoseconds]]]
									      [elapsed_nanoseconds           [- nanoseconds_since_1970 [have fiber_info lookup `last_nanoseconds_since_1970]]]
									      [elapsed_bytecode_count        [- bytecode_count         [have fiber_info lookup `last_bytecode_count]]]]
									  [let [[elapsed_execution_seconds [/ elapsed_execution_nanoseconds 1000000000.0]]
										[elapsed_seconds           [/ elapsed_nanoseconds           1000000000.0]]]
									    [let [[bytecodes_per_execution_second [if [!= elapsed_execution_nanoseconds 0]
														      [/ elapsed_bytecode_count elapsed_execution_seconds]
														  nil]]
										[bytecodes_per_second           [if [!= elapsed_nanoseconds 0]
														    [/ elapsed_bytecode_count elapsed_seconds]
														  nil]]]
									    [have fiber_info add `last_execution_nanoseconds  execution_nanoseconds]
									    [have fiber_info add `last_bytecode_count         bytecode_count]
									    [have fiber_info add `last_nanoseconds_since_1970 nanoseconds_since_1970]
									    [format nil '[' fiber '\n'
										    '  ' elapsed_execution_seconds      ' s execution' '\n'
										    '  ' elapsed_seconds                ' s real' '\n'
										    '  ' elapsed_bytecode_count         ' bc' '\n'
										    '  ' bytecodes_per_execution_second ' bc/s execution' '\n'
										    '  ' bytecodes_per_second           ' bc/s real' ']' '\n']]]]]]]
							      [get processor active_fibers]]]]
  nil]

[defunk fibermon_processor_widget-new [index]
  [let [[this [gtk-scrolled_window-new]]]
    [let [[processor       [get [get scheduler:global_scheduler processors] elt index]]
	  [info_fiber_hash [new ptypehash]]
	  [text_view       [gtk-text_view-new]]]
      [have this add text_view]
      [fiber [funk []
		   [while t
		     [fibermon_processor_widget-redraw this processor info_fiber_hash text_view]
		     [sleep 1]]]
	     nil]
      ]
    this]]

[defunk fibermon [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[prog [format stdout '\nfibermon error: fibermon does not currently accept any arguments.\n']
	      [= print_usage_message_and_exit t]]]
    [if print_usage_message_and_exit
	[prog [format stdout '\nfibermon usage: [fibermon]']
	      [format stdout '\n']
	      [format stdout '\n  fibermon is a gtk-based application that allows the user to monitor the fibers in the Funk2 system.']
	      [format stdout '\n']]
      [let [[win             [gtk-window-new]]
	    [vbox            [gtk-vbox-new 2]]
	    [hbox            [gtk-hbox-new 2]]
	    [search_entry    [gtk-entry-new]]
	    [search_button   [gtk-button-new_with_label 'Search']]
	    [next_button     [gtk-button-new_with_label 'Next']]
	    [vpaned          [gtk-vpaned-new]]
	    [swindow         [gtk-scrolled_window-new]]
	    [processor_hbox  [gtk-hbox-new 8]]
	    [processor_array [new array 8]]
	    [text_view       [gtk-text_view-new]]]
	
	[have win            add        vbox]
	[have vbox           pack_start hbox nil nil 0]
	[have hbox           pack_start search_entry t t 0]
	[have hbox           pack_start search_button nil nil 0]
	[have hbox           pack_start next_button nil nil 0]
	[have vbox           pack_start vpaned t t 0]
	[have vpaned         pack1      swindow t t]
	[have swindow        add        text_view]
	[have vpaned         pack2      processor_hbox t t]
	[dotimes [i 8]
	  [let [[processor [fibermon_processor_widget-new i]]]
	    [have processor_hbox pack_start processor t t 0]
	    [set processor_array elt i processor]]]
	
	[have search_button signal_connect 'clicked'
	      [funk []
		    [let [[found_range [have [get [get text_view buffer] start_iter] forward_search [get search_entry text]]]]
		      [if found_range
			  [prog [format stdout '\n  found "' [get search_entry text] '"!']
				[have [get text_view buffer] select_range found_range]]
			[prog [format stdout '\n  could not find "' [get search_entry text] '".']]]]]
	      nil]
	[have next_button signal_connect 'clicked' [funk [button] [print 'Next button clicked!']] [cons next_button nil]]
	
	[have win show_all]]]]]


