'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk fibermon [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[prog [format stdout '\nfibermon error: fibermon does not currently accept any arguments.\n']
	      [= print_usage_message_and_exit t]]]
    [if print_usage_message_and_exit
	[prog [format stdout '\nfibermon usage: [fibermon]']
	      [format stdout '\n']
	      [format stdout '\n  fibermon is a gtk-based application that allows the user to monitor the fibers in the Funk2 system.']
	      [format stdout '\n']
	      [return]]]]
  
  [let [[win           [gtk-window-new]]
	[vbox          [gtk-vbox-new 2]]
	[hbox          [gtk-hbox-new 2]]
	[search_entry  [gtk-entry-new]]
	[search_button [gtk-button-new_with_label 'Search']]
	[next_button   [gtk-button-new_with_label 'Next']]
	[swindow       [gtk-scrolled_window-new]]
	[text_view     [gtk-text_view-new]]]
    
    [have win     add        vbox]
    [have vbox    pack_start hbox nil nil 0]
    [have hbox    pack_start search_entry t t 0]
    [have hbox    pack_start search_button nil nil 0]
    [have hbox    pack_start next_button nil nil 0]
    [have vbox    pack_start swindow t t 0]
    [have swindow add        text_view]
    
    [have search_button signal_connect 'clicked'
	  [funk []
		[let [[found_range [have [get [get text_view buffer] start_iter] forward_search [get search_entry text]]]]
		  [if found_range
		      [prog [format stdout '\n  found "' [get search_entry text] '"!']
			    [have [get text_view buffer] select_range found_range]]
		    [prog [format stdout '\n  could not find "' [get search_entry text] '".']]]]]
	  nil]
    [have next_button signal_connect 'clicked' [funk [button] [print 'Next button clicked!']] [cons next_button nil]]
    
    [have win show_all]]]


