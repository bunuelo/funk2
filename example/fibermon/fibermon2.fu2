'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk number-to_memory_string [this]
  [let [[i [get this as-integer]]]
    [cond [      [< i                        1024]   [format nil    i]]
	  [      [< i [*                1024 1024]]  [format nil [/ i                  1024.0]  'k']]
	  [      [< i [*           1024 1024 1024]]  [format nil [/ i [*        1024.0 1024.0]] 'M']]
	  [      [< i [*      1024 1024 1024 1024]]  [format nil [/ i [* 1024.0 1024.0 1024.0]] 'G']]
	  [[or t [< i [* 1024 1024 1024 1024 1024]]] [format nil [/ i [* 1024.0 1024.0 1024.0]] 'T']]]]]


'fibermon2_fiber'

[deframe fibermon2_fiber [frame] [[fiber                         nil]
				  [frame                         nil]
				  [table                         [gtk-table-new 11 2 nil]]
				  [table_labels                  [new array 11 2]]
				  [time                          nil]
				  [execution_nanoseconds         nil]
				  [bytecode_count                nil]
				  [bytecodes_per_second          nil]
				  [execution_efficiency          nil]
				  [elapsed_nanoseconds           nil]
				  [elapsed_execution_nanoseconds nil]
				  [elapsed_bytecode_count        nil]]
  [new [fiber]
       [set this fiber fiber]
       [set this frame [gtk-frame-new 'fiber']]
       [dotimes [row 11]
	 [let [[row_labels [get table_labels elt row]]]
	   [dotimes [column 2]
	     [let [[table_label [gtk-label-new '']]]
	       [set table_label alignment 0.0 0.0]
	       [set row_labels elt column table_label]
	       [have table attach table_label column [+ column 1] row [+ row 1] 0 0]]]]]
       [have frame add table]
       this]]

[deftypefunk fibermon2_fiber get widget []
  frame]

[deftypefunk fibermon2_fiber execute redraw []
  [let [[row [get table_labels elt  0]]] [set [get row elt 0] text 'keep_undead']           [set [get row elt 1] text [format nil [get fiber keep_undead]]]]
  [let [[row [get table_labels elt  1]]] [set [get row elt 0] text 'is_zombie']             [set [get row elt 1] text [format nil [get fiber is_zombie]]]]
  [let [[row [get table_labels elt  2]]] [set [get row elt 0] text 'is_complete']           [set [get row elt 1] text [format nil [get fiber is_complete]]]]
  [let [[row [get table_labels elt  3]]] [set [get row elt 0] text 'execute_mutex']         [set [get row elt 1] text [format nil [get fiber execute_mutex]]]]
  [let [[row [get table_labels elt  4]]] [set [get row elt 0] text 'paused']                [set [get row elt 1] text [format nil [get fiber paused]]]]
  [let [[row [get table_labels elt  5]]] [set [get row elt 0] text 'last_executed_time']    [set [get row elt 1] text [format nil [get fiber last_executed_time]]]]
  [let [[row [get table_labels elt  6]]] [set [get row elt 0] text 'sleep_until_time']      [set [get row elt 1] text [format nil [get fiber sleep_until_time]]]]
  [let [[row [get table_labels elt  7]]] [set [get row elt 0] text 'execution_nanoseconds'] [set [get row elt 1] text [format nil execution_nanoseconds]]]
  [let [[row [get table_labels elt  8]]] [set [get row elt 0] text 'bytecode_count']        [set [get row elt 1] text [format nil bytecode_count]]]
  [let [[row [get table_labels elt  9]]] [set [get row elt 0] text 'bytecodes_per_second']  [set [get row elt 1] text [format nil bytecodes_per_second]]]
  [let [[row [get table_labels elt 10]]] [set [get row elt 0] text 'execution_efficiency']  [set [get row elt 1] text [format nil execution_efficiency]]]
  ]

[deftypefunk fibermon2_fiber execute recompute_statistics []
  [let [[last_time                  time]
	[last_execution_nanoseconds execution_nanoseconds]
	[last_bytecode_count        bytecode_count]]
    [= time                          [time]]
    [= execution_nanoseconds         [get fiber execution_nanoseconds]]
    [= bytecode_count                [get fiber bytecode_count]]
    [= elapsed_nanoseconds           [if last_time                  [- [get time nanoseconds_since_1970] [get last_time nanoseconds_since_1970]]]]
    [= elapsed_execution_nanoseconds [if last_execution_nanoseconds [- execution_nanoseconds             last_execution_nanoseconds]]]
    [= elapsed_bytecode_count        [if last_bytecode_count        [- bytecode_count                    last_bytecode_count]]]
    [if [and elapsed_bytecode_count elapsed_nanoseconds]
	[= bytecodes_per_second [/ [* 1000000000.0 elapsed_bytecode_count] elapsed_nanoseconds]]]
    [if [and elapsed_execution_nanoseconds elapsed_nanoseconds]
	[= execution_efficiency [/ [get elapsed_execution_nanoseconds as-double] elapsed_nanoseconds]]]
    nil]]

'fibermon2_processor'

[deframe fibermon2_processor [frame] [[index                         nil]
				      [frame                         nil]
				      [vbox                          [gtk-vbox-new 2]]
				      [progress_bar                  [gtk-progress_bar-new]]
				      [scrolled_window               [gtk-scrolled_window-new]]
				      [fiber_vbox                    [gtk-vbox-new 2]]
				      [fibermon2_fiber_hash          [new ptypehash]]
				      [table                         [gtk-table-new 4 2 nil]]
				      [table_labels                  [new array 4 2]]
				      [execution_nanoseconds         nil]
				      [bytecode_count                nil]
				      [bytecodes_per_second          nil]
				      [execution_efficiency          nil]
				      [elapsed_nanoseconds           nil]
				      [elapsed_execution_nanoseconds nil]
				      [elapsed_bytecode_count        nil]]
  
  [new [index]
       [set this index index]
       [set this frame [gtk-frame-new [format nil 'processor #' index]]]
       [have scrolled_window add_with_viewport fiber_vbox]
       [dotimes [row 4]
	 [let [[row_labels [get table_labels elt row]]]
	   [dotimes [column 2]
	     [let [[table_label [gtk-label-new '']]]
	       [set table_label alignment 0.0 0.0]
	       [set row_labels elt column table_label]
	       [have table attach table_label column [+ column 1] row [+ row 1] 0 0]]]]]
       [have vbox pack_start table           nil nil 0]
       [have vbox pack_start process_bar     nil nil 0]
       [have vbox pack_start scrolled_window t t 0]
       [have frame add vbox]
       this]]

[deftypefunk fibermon2_processor get widget []
  frame]

[deftypefunk fibermon2_processor execute redraw []
  [let [[row [get table_labels elt 0]]] [set [get row elt 0] text 'execution_nanoseconds'] [set [get row elt 1] text [format nil execution_nanoseconds]]]
  [let [[row [get table_labels elt 1]]] [set [get row elt 0] text 'bytecode_count']        [set [get row elt 1] text [format nil bytecode_count]]]
  [let [[row [get table_labels elt 2]]] [set [get row elt 0] text 'bytecodes_per_second']  [set [get row elt 1] text [format nil bytecodes_per_second]]]
  [let [[row [get table_labels elt 3]]] [set [get row elt 0] text 'execution_efficiency']  [set [get row elt 1] text [format nil execution_efficiency]]]
  [mapc [funk [fibermon2_fiber]
	      [have fibermon2_fiber redraw]]
	[get fibermon2_fiber_hash values]]
  [if [< execution_efficiency 0.0]
      [set progress_bar fraction 0.0]
    [if [> execution_efficiency 1.0]
	[set progress_bar fraction 1.0]
      [set progress_bar fraction execution_efficiency]]]
  nil]

[defmetro += [variable value]
  `[= ,variable [+ ,variable ,value]]]

[defmetro -= [variable value]
  `[= ,variable [- ,variable ,value]]]

[defmetro *= [variable value]
  `[= ,variable [* ,variable ,value]]]

[defmetro /= [variable value]
  `[= ,variable [/ ,variable ,value]]]

[defmetro >>= [variable value]
  `[= ,variable [>> ,variable ,value]]]

[defmetro <<= [variable value]
  `[= ,variable [<< ,variable ,value]]]

[defmetro ++ [variable]
  `[= ,variable [+ ,variable 1]]]

[defmetro -- [variable]
  `[= ,variable [- ,variable 1]]]


[deftypefunk fibermon2_processor execute recompute_statistics []
  [let [[elapsed_nanoseconds__count 0]]
    [= execution_nanoseconds         0]
    [= bytecode_count                0]
    [= bytecodes_per_second          0]
    [= execution_efficiency          0]
    [= elapsed_nanoseconds           0]
    [= elapsed_execution_nanoseconds 0]
    [= elapsed_bytecode_count        0]
    [mapc [funk [fibermon2_fiber]
		[have fibermon2_fiber recompute_statistics]
		[let [[fiber_execution_nanoseconds         [get fibermon2_fiber execution_nanoseconds]]
		      [fiber_bytecode_count                [get fibermon2_fiber bytecode_count]]
		      [fiber_bytecodes_per_second          [get fibermon2_fiber bytecodes_per_second]]
		      [fiber_execution_efficiency          [get fibermon2_fiber execution_efficiency]]
		      [fiber_elapsed_nanoseconds           [get fibermon2_fiber elapsed_nanoseconds]]
		      [fiber_elapsed_execution_nanoseconds [get fibermon2_fiber elapsed_execution_nanoseconds]]
		      [fiber_elapsed_bytecode_count        [get fibermon2_fiber elapsed_bytecode_count]]]
		  [if fiber_execution_nanoseconds               [+= execution_nanoseconds         fiber_execution_nanoseconds]]
		  [if fiber_bytecode_count                      [+= bytecode_count                fiber_bytecode_count]]
		  [if fiber_bytecodes_per_second                [+= bytecodes_per_second          fiber_bytecodes_per_second]]
		  [if fiber_execution_efficiency                [+= execution_efficiency          fiber_execution_efficiency]]
		  [if fiber_elapsed_nanoseconds           [prog [+= elapsed_nanoseconds           fiber_elapsed_nanoseconds]           [++ elapsed_nanoseconds__count]]]
		  [if fiber_elapsed_execution_nanoseconds       [+= elapsed_execution_nanoseconds fiber_elapsed_execution_nanoseconds]]
		  [if fiber_elapsed_bytecode_count              [+= elapsed_bytecode_count        fiber_elapsed_bytecode_count]]
		  ]]
	  [get fibermon2_fiber_hash values]]
    [if [!= elapsed_nanoseconds__count 0]
	[/= elapsed_nanoseconds elapsed_nanoseconds__count]]
    ]
  nil]

[deftypefunk fibermon2_processor execute add_fiber [fibermon2_fiber]
  [have fiber_vbox pack_start fibermon2_fiber nil nil 0]
  [have [get fibermon2_fiber widget] show_all]
  [have fibermon2_fiber_hash add [get fibermon2_fiber fiber] fibermon2_fiber]]

[deftypefunk fibermon2_processor execute remove_fiber [fibermon2_fiber]
  [have [get fibermon2_fiber widget] hide_all]
  [have fiber_vbox remove fibermon2_fiber]
  [have fibermon2_fiber_hash remove [get fibermon2_fiber fiber]]]


'fibermon2'

[deframe fibermon2 [frame] [[win                  [gtk-window-new]]
			    [scrolled_window      [gtk-scrolled_window-new]]
			    [processor_hbox       [gtk-hbox-new 2]]
			    [processor_array      [new array 8]]
			    [done                 nil]
			    [fiber                nil]
			    [processor_count      8]
			    [index_fiber_hash     [new ptypehash]]
			    [fibermon2_fiber_hash [new ptypehash]]]
  [new []
       [set  win default_size 1900 800]
       [set  win title 'fibermon2']
       [have win connect_hide_on_delete]
       [dotimes [index processor_count]
	 [set processor_array elt index [new fibermon2_processor index]]]
       [dotimes [index processor_count]
	 [have processor_hbox pack_start [get processor_array elt index] t t 0]]
       [have win add processor_hbox]
       [= fiber [fiber [funk []
			     [format stdout '\nfibermon2 starting.\n']
			     [have win show_all]
			     [while [not done]
			       [have this reorganize_fibers]
			       [have this recompute_statistics]
			       [have this redraw]
			       [if [not [get win visible]]
				   [= done t]]]
			     [format stdout '\nfibermon2 exiting.\n']]
		       nil]]
       this]]

[deftypefunk fibermon2 execute reorganize_fibers []
  [mapc [funk [fibermon2_fiber]
	      [if [null [get [get fibermon2_fiber fiber] processor_assignment_index]]
		  [prog [have index_fiber_hash remove fiber]
			[have [get processor_array elt [have index_fiber_hash lookup fiber]] remove_fiber fiber]]]]
	[get fibermon2_fiber_hash values]]
  [mapc [funk [fiber]
	      [let [[current_index [get fiber processor_assignment_index]]]
		[if current_index
		    [prog [if [get index_fiber_hash contains fiber]
			      [let [[old_known_index [have index_fiber_hash lookup fiber]]]
				[if [not [== old_known_index current_index]]
				    [let [[fibermon2_fiber [have fibermon2_fiber_hash lookup fiber]]]
				      [have index_fiber_hash remove fiber]
				      [have [get processor_array elt old_known_index] remove_fiber fiber]
				      [have index_fiber_hash add fiber current_index]
				      [have [get processor_array elt   current_index] add_fiber fibermon2_fiber]]]]
			    [let [[fibermon2_fiber [new fibermon2_fiber fiber]]]
			      [have index_fiber_hash add fiber current_index]
			      [have [get processor_array elt   current_index] add_fiber fibermon2_fiber]]]]]]]
	[scheduler-active_fibers]]
  nil]

[deftypefunk fibermon2 execute redraw []
  [dotimes [index processor_count]
    [have [get processor_array elt index] redraw]]
  nil]

[deftypefunk fibermon2 execute recompute_statistics []
  [dotimes [index processor_count]
    [have [get processor_array elt index] recompute_statistics]]
  nil]

[defunk fibermon2-command_line [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nfibermon2 fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'FIBERMON2(1)'
		'\n'   'NAME'
		'\n'   '       fibermon2 - display Funk fibers'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       fibermon2 -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The fibermon2 program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of tasks currently being managed '
		'\n'   '       by the Funk kernel.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[fibermon2 [new fibermon2]]]
	nil]]]]

[defmetro fibermon2 [:rest args]
  `[fibermon2-command_line @[mapcar [funk [arg] `[quote ,arg]] args]]]


