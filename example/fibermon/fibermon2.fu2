'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk number-to_memory_string [this]
  [let [[i [get this as-integer]]]
    [cond [      [< i                        1024]   [format nil    i]]
	  [      [< i [*                1024 1024]]  [format nil [/ i                  1024.0]  'k']]
	  [      [< i [*           1024 1024 1024]]  [format nil [/ i [*        1024.0 1024.0]] 'M']]
	  [      [< i [*      1024 1024 1024 1024]]  [format nil [/ i [* 1024.0 1024.0 1024.0]] 'G']]
	  [[or t [< i [* 1024 1024 1024 1024 1024]]] [format nil [/ i [* 1024.0 1024.0 1024.0]] 'T']]]]]


'fibermon2_fiber'

[deframe fibermon2_fiber [frame] [[fiber nil]
				  [label [gtk-label-new 'fiber']]]
  [new [fiber]
       [set this fiber fiber]
       this]]

[deftypefunk fibermon2_fiber get widget []
  label]


'fibermon2_processor'

[deframe fibermon2_processor [frame] [[index           nil]
				      [label           [gtk-label-new 'processor']]
				      [vbox            [gtk-vbox-new 2]]
				      [scrolled_window [gtk-scrolled_window-new]]
				      [fiber_vbox      [gtk-vbox-new 2]]]
  [new [index]
       [set this index index]
       [set label text [format nil 'processor #' index]]
       [have scrolled_window add_with_viewport fiber_vbox]
       [have vbox pack_start label      nil nil 0]
       [have vbox pack_start scrolled_window nil nil 0]
       this]]

[deftypefunk fibermon2_processor get widget []
  vbox]

[deftypefunk fibermon2_processor execute redraw []
  nil]

[deftypefunk fibermon2_processor execute add_fiber [fibermon2_fiber]
  [have fiber_vbox pack_start fibermon2_fiber t t 0]
  [have [get fibermon2_fiber widget] show_all]]

[deftypefunk fibermon2_processor execute remove_fiber [fibermon2_fiber]
  [have [get fibermon2_fiber widget] hide_all]
  [have fiber_vbox remove fibermon2_fiber]]


'fibermon2'

[deframe fibermon2 [frame] [[win                  [gtk-window-new]]
			    [scrolled_window      [gtk-scrolled_window-new]]
			    [processor_hbox       [gtk-hbox-new 2]]
			    [processor_array      [new array 8]]
			    [done                 nil]
			    [fiber                nil]
			    [processor_count      8]
			    [index_fiber_hash     [new ptypehash]]
			    [fibermon2_fiber_hash [new ptypehash]]]
  [new []
       [set  win default_size 1900 800]
       [set  win title 'fibermon2']
       [have win connect_hide_on_delete]
       [dotimes [index processor_count]
	 [set processor_array elt index [new fibermon2_processor index]]]
       [dotimes [index processor_count]
	 [have processor_hbox pack_start [get processor_array elt index] t t 0]]
       [have win add processor_hbox]
       [= fiber [fiber [funk []
			     [format stdout '\nfibermon2 starting.\n']
			     [have win show_all]
			     [while [not done]
			       [have this reorganize_fibers]
			       [have this redraw]
			       [if [not [get win visible]]
				   [= done t]]]
			     [format stdout '\nfibermon2 exiting.\n']]
		       nil]]
       this]]

[deftypefunk fibermon2 execute reorganize_fibers []
  [let [[count 0]]
    [mapc [funk [fiber]
		[= count [+ count 1]]
		[print count]
		[print 'debug 0']
		[let [[current_index [get fiber processor_assignment_index]]]
		  [if current_index
		      [prog [print 'debug 1']
			    [if [get index_fiber_hash contains fiber]
				[let [[old_known_index [have index_fiber_hash lookup fiber]]]
				  [print 'debug 2']
				  [if [not [== old_known_index current_index]]
				      [let [[fibermon2_fiber [have fibermon2_fiber_hash lookup fiber]]]
					[print 'debug 3']
					[have index_fiber_hash remove fiber]
					[print 'debug 4']
					[have [get processor_array elt old_known_index] remove_fiber fiber]
					[print 'debug 5']
					[have index_fiber_hash add fiber current_index]
					[print 'debug 6']
					[have [get processor_array elt   current_index] add_fiber fibermon2_fiber]]]]
			      [let [[fibermon2_fiber [new fibermon2_fiber fiber]]]
				[print 'debug 7']
				[have index_fiber_hash add fiber current_index]
				[print 'debug 8']
				[have [get processor_array elt   current_index] add_fiber fibermon2_fiber]]]]]]]
	  [scheduler-active_fibers]]]
  [print 'debug 9']
  nil]

[deftypefunk fibermon2 execute redraw []
  [dotimes [index processor_count]
    [have [get processor_array elt index] redraw]]
  nil]


[defunk fibermon2-command_line [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nfibermon2 fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'FIBERMON2(1)'
		'\n'   'NAME'
		'\n'   '       fibermon2 - display Funk fibers'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       fibermon2 -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The fibermon2 program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of tasks currently being managed '
		'\n'   '       by the Funk kernel.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[fibermon2 [new fibermon2]]]
	nil]]]]

[defmetro fibermon2 [:rest args]
  `[fibermon2-command_line @[mapcar [funk [arg] `[quote ,arg]] args]]]


