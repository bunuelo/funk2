'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe funk2_post    [frame] [title date author entry]]
[deframe funk2_example [frame] [name title date author entry]]

[defunk funk2_calendar_2010_october []
  [string-prog '<div id="calendar_wrap">'
	       '  <table summary="Calendar">'
	       '  <caption>'
	       '  October 2010'
	       '  </caption>'
	       '  <thead>'
	       '    <tr>'
	       '      <th abbr="Sunday" scope="col" title="Sunday">S</th>'
	       '      <th abbr="Monday" scope="col" title="Monday">M</th>'
	       '      <th abbr="Tuesday" scope="col" title="Tuesday">T</th>'
	       '      <th abbr="Wednesday" scope="col" title="Wednesday">W</th>'
	       '      <th abbr="Thursday" scope="col" title="Thursday">T</th>'
	       '      <th abbr="Friday" scope="col" title="Friday">F</th>'
	       '      <th abbr="Saturday" scope="col" title="Saturday">S</th>'
	       '    </tr>'
	       '  </thead>'
	       '  <tfoot>'
	       '    <tr>'
	       '      <td abbr="October" colspan="3" id="prev"><a href="#" title="View posts for September 2010">&laquo; Sep</a></td>'
	       '      <td class="pad">&nbsp;</td>'
	       '      <td colspan="3" id="next">&nbsp;</td>'
	       '    </tr>'
	       '  </tfoot>'
	       '  <tbody>'
	       '    <tr>'
	       '      <td class="pad" colspan="5">&nbsp;</td>'
	       '      <td>1</td>'
	       '      <td>2</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>3</td>'
	       '      <td>4</td>'
	       '      <td>5</td>'
	       '      <td>6</td>'
	       '      <td>7</td>'
	       '      <td>8</td>'
	       '      <td>9</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>10</td>'
	       '      <td>11</td>'
	       '      <td>12</td>'
	       '      <td>13</td>'
	       '      <td id="today">14</td>'
	       '      <td>15</td>'
	       '      <td>16</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>17</td>'
	       '      <td>18</td>'
	       '      <td>19</td>'
	       '      <td>20</td>'
	       '      <td>21</td>'
	       '      <td>22</td>'
	       '      <td>23</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>24</td>'
	       '      <td>25</td>'
	       '      <td>26</td>'
	       '      <td>27</td>'
	       '      <td>28</td>'
	       '      <td>29</td>'
	       '      <td>30</td>'
	       '      <td class="pad" colspan="4">&nbsp;</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>31</td>'
	       '      <td class="pad" colspan="6">&nbsp;</td>'
	       '    </tr>'
	       '  </tbody>'
	       '</table>'
	       '</div>']]

[defunk funk2_calendar_2010_december []
  [string-prog '<div id="calendar_wrap">'
	       '  <table summary="Calendar">'
	       '  <caption>'
	       '  December 2010'
	       '  </caption>'
	       '  <thead>'
	       '    <tr>'
	       '      <th abbr="Sunday" scope="col" title="Sunday">S</th>'
	       '      <th abbr="Monday" scope="col" title="Monday">M</th>'
	       '      <th abbr="Tuesday" scope="col" title="Tuesday">T</th>'
	       '      <th abbr="Wednesday" scope="col" title="Wednesday">W</th>'
	       '      <th abbr="Thursday" scope="col" title="Thursday">T</th>'
	       '      <th abbr="Friday" scope="col" title="Friday">F</th>'
	       '      <th abbr="Saturday" scope="col" title="Saturday">S</th>'
	       '    </tr>'
	       '  </thead>'
	       '  <tfoot>'
	       '    <tr>'
	       '      <td abbr="December" colspan="3" id="prev"><a href="#" title="View posts for November 2010">&laquo; Nov</a></td>'
	       '      <td class="pad">&nbsp;</td>'
	       '      <td colspan="3" id="next">&nbsp;</td>'
	       '    </tr>'
	       '  </tfoot>'
	       '  <tbody>'
	       '    <tr>'
	       '      <td class="pad" colspan="3">&nbsp;</td>'
	       '      <td>1</td>'
	       '      <td>2</td>'
	       '      <td>3</td>'
	       '      <td>4</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>5</td>'
	       '      <td>6</td>'
	       '      <td>7</td>'
	       '      <td>8</td>'
	       '      <td>9</td>'
	       '      <td id="today">10</td>'
	       '      <td>11</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>12</td>'
	       '      <td>13</td>'
	       '      <td>14</td>'
	       '      <td>15</td>'
	       '      <td>16</td>'
	       '      <td>17</td>'
	       '      <td>18</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>19</td>'
	       '      <td>20</td>'
	       '      <td>21</td>'
	       '      <td>22</td>'
	       '      <td>23</td>'
	       '      <td>24</td>'
	       '      <td>25</td>'
	       '    </tr>'
	       '    <tr>'
	       '      <td>26</td>'
	       '      <td>27</td>'
	       '      <td>28</td>'
	       '      <td>29</td>'
	       '      <td>30</td>'
	       '      <td>31</td>'
	       '      <td class="pad" colspan="3">&nbsp;</td>'
	       '    </tr>'
	       '  </tbody>'
	       '</table>'
	       '</div>']]

[defunk funk2_calendar []
  [funk2_calendar_2010_december]]

[defunk funk2_page [posts examples content]
  [string-prog '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
	       '<html xmlns="http://www.w3.org/1999/xhtml">'
	       '<head>'
	       '<meta http-equiv="content-type" content="text/html; charset=utf-8" />'
	       '<title>Funk2 Programming Language -- Official Website</title>'
	       '<meta name="keywords" content="" />'
	       '<meta name="Funk2" content="" />'
	       '<link href="/default.css" rel="stylesheet" type="text/css" media="screen" />'
	       '</head>'	       '<body>'
	       '<div id="header">'
	       '  <table border=0 cellspacing=0 cellpadding=0><tr><td>'
	       '    <div id="funk2_logo_header">'
	       '    </div>'
	       '  </td><td>'
	       '    <div id="center_header">'
	       '        <div id="logo">'
	       '	  <h1><a href="#">Funk2</a></h1>'
	       '	  <p>reflective programming language</p>'
	       '	</div>'
	       '	<div id="menu">'
	       '		<ul id="main">'
	       '			<li><a href="/about">About</a></li>'
	       '			<li><a href="/news">News</a></li>'
	       '			<li><a href="/documentation">Documentation</a></li>'
	       '			<li><a href="/download">Download</a></li>'
	       '			<li><a href="/community">Community</a></li>'
	       '			<li><a href="/support">Support</a></li>'
	       '			<li><a href="/development">Development</a></li>'
	       '		</ul>'
	       '	</div>'
	       '	'
	       '    </div>'
	       '  </td><td>'
	       '    <div id="mmp_logo_header">'
	       '    </div>'
	       '  </td></tr></table>'
	       '</div>'
	       '<!-- end header -->'
	       '<div id="wrapper">'
	       '	<!-- start page -->'
	       '	<div id="page">'
	       '		<div id="sidebar1" class="sidebar">'
	       '			<ul>'
	       '				<li>'
	       '					<h2>Recent Updates</h2>'
	       '					<ul>'
	       [stringlist-prog [let [[index 0]]
				  [mapcar [funk [post]
						[= index [+ index 1]]
						[string-concat '<li><a href="/#post' [exp-as-string index] '">' [get post title] '</a></li>']]
					  posts]]]
	       '					</ul>'
	       '				</li>'
	       '				<li>'
	       '					<h2>Example Applications</h2>'
	       '					<ul>'
	       [stringlist-prog [mapcar [funk [example]
					      [string-concat '<li><a href="/example/' [get example name] '">' [get example title] '</a></li>']]
					examples]]
	       '					</ul>'
	       '				</li>'
	       '				<li>'
	       '					<h2>Categories</h2>'
	       '					<ul>'
	       '						<li><a href="#">Artificial Intelligence</a></li>'
	       '						<li><a href="#">Neuroscience</a></li>'
	       '						<li><a href="#">Commonsense Reasoning</a></li>'
	       '						<li><a href="#">Distributed Computation</a></li>'
	       '						<li><a href="#">Collaborative Programming and Development</a></li>'
	       '						<li><a href="#">Self-describing Systems</a></li>'
	       '					</ul>'
	       '				</li>'
	       '				<li>'
	       '					<h2>Archives</h2>'
	       '					<ul>'
	       '						<li><a href="#">May</a> (0)</li>'
	       '						<li><a href="#">April</a> (0)</li>'
	       '						<li><a href="#">March</a> (0)</li>'
	       '						<li><a href="#">February</a> (0)</li>'
	       '						<li><a href="#">January</a> (0)</li>'
	       '					</ul>'
	       '				</li>'
	       '			</ul>'
	       '		</div>'
	       '<!-- start content -->'
	       '<div id="content">'
	       content
	       '</div>'
	       '<!-- end content -->'
	       '		<!-- start sidebars -->'
	       '		<div id="sidebar2" class="sidebar">'
	       '			<ul>'
	       '				<li>'
	       '					<form id="searchform" method="get" action="#">'
	       '						<div>'
	       '							<h2>Site Search</h2>'
	       '							<input type="text" name="s" id="s" size="15" value="" />'
	       '							<br />'
	       '							<input type="submit" value="Search" id="x" />'
	       '						</div>'
	       '					</form>'
	       '				</li>'
	       '				<li>'
	       '					<h2>Tags</h2>'
	       '					<p class="tag"><a href="#">reflection</a> <a href="#">mind</a> <a href="#">consciousness</a> <a href="#">debug</a> <a href="#">language</a> <a href="#">control</a> <a href="#">learn</a> <a href="#">cognitive model</a></p></li>'
	       '				<li>'
	       '					<h2>Calendar</h2>'
	       [funk2_calendar]
	       '				</li>'
	       [prog '				<li>'
		     '					<h2>Categories</h2>'
		     '					<ul>'
		     '						<li><a href="#">Aliquam libero</a></li>'
		     '						<li><a href="#">Consectetuer adipiscing elit</a></li>'
		     '						<li><a href="#">Metus aliquam pellentesque</a></li>'
		     '						<li><a href="#">Suspendisse iaculis mauris</a></li>'
		     '						<li><a href="#">Urnanet non molestie semper</a></li>'
		     '						<li><a href="#">Proin gravida orci porttitor</a></li>'
		     '						<li><a href="#">Aliquam libero</a></li>'
		     '						<li><a href="#">Consectetuer adipiscing elit</a></li>'
		     '						<li><a href="#">Metus aliquam pellentesque</a></li>'
		     '						<li><a href="#">Urnanet non molestie semper</a></li>'
		     '						<li><a href="#">Proin gravida orci porttitor</a></li>'
		     '						<li><a href="#">Aliquam libero</a></li>'
		     '						<li><a href="#">Consectetuer adipiscing elit</a></li>'
		     '						<li><a href="#">Metus aliquam pellentesque</a></li>'
		     '						<li><a href="#">Suspendisse iaculis mauris</a></li>'
		     '						<li><a href="#">Urnanet non molestie semper</a></li>'
		     '						<li><a href="#">Proin gravida orci porttitor</a></li>'
		     '					</ul>'
		     '				</li>'
		     '']
	       '			</ul>'
	       '		</div>'
	       '		<!-- end sidebars -->'
	       '		<div style="clear: both;">&nbsp;</div>'
	       '	</div>'
	       '	<!-- end page -->'
	       '</div>'
	       '<div id="footer">'
	       '	<p>&copy;2009 All Rights Reserved. &nbsp;&bull;&nbsp; Design by <a href="http://www.freecsstemplates.org/">Free CSS Templates</a>.</p>'
	       '</div>'
	       '</body>'
	       '</html>']]
  


[defunk funk2_about-content []
  [string-prog '<h1>About</h1>'
	       ''
	       '<p><strong>Funk2</strong> is a free, open, programming language designed for causal reflective tracing and monitoring of complex control systems.  '
	       'This project is developed by the <a href=http://rct.media.mit.edu/rct>Reflective Commonsense Thinking</a> group at the <a href=http://www.media.mit.edu>MIT Media Lab</a>.'
	       'The Funk2 project is currently supported as a core research effort of the <a href=http://mmp.mit.edu>Mind Machine Project</a>.</p>'	       ''
	       ''
	       '<p>The goal of the programming language Funk2 is to enable reflective algorithmic tracing for large heterogenous control systems. A few points emphasized in the Funk2 programming language are:</p>'
	       ''
	       '<ul>'
	       '  <li>Layered Critical Causal Reflection</li>'
	       '  <li>Efficient and Robust Control</li>'
	       '  <li>Learning by Credit Assignment</li>'
	       '  <li>Divergent Solution Paths</li>'
	       '  <li>Intricate Thread Control</li>'
	       '  <li>Goal-oriented Learning</li>'
	       '</ul>'
	       ''
	       '<p>Funk2 is a novel programming language that introduced a programming technology that we call Causal Reflective Programming.'
	       'The language is based on a peer-to-peer shared memory system, allowing individuals access to large numbers of processors and memory.'
	       'Funk2 uses a virtual scheduler, processor, and thread model that is based on top of the shared memory system, while taking advantage of the specific number of processor cores on each machine.'
	       'We use POSIX threads to implement virtual processors.'
	       'Funk2 includes very simple and abstract data and syntax representation--inspired by lisp and scheme.'
	       'Funk2 compiles to bytecodes that may be shared between architectures, inspired by these similar concepts in Python and Java virtual machines.'
	       'What is novel to the Funk2 programming language is it\'s unique ability to keep track of everything that it does, which uses a lot of memory when used indiscreetly, but in general allows reflective tracing for causal reasons why bugs occur, when they inevitably do.'
	       'Other reflective features of the language include an event-based inter-process communication system that works across the peer-to-peer network, inspired by the Erlang model.'
	       'We see a language like this as necessary for the social, iterative, cooperative design environment for large distributed complex control systems.'
	       'Our applications are inspired by Marvin Minsky\'s, Emotion Machine layered control algorithm for a Society of Mind.</p>'
	       ''
	       '<h2>Publications</h2>'
	       ''
	       '<ul>'
	       '  <li><a href="http://neuromin.de/rct/morgan2009-funk2__a_distributed_processing_language_for_reflective_tracing_of_a_large_critic_selector_cognitive_architecture.pdf">Morgan, B.; "Funk2: A Distributed Processing Language for Reflective Tracing of a Large Critic-Selector Cognitive Architecture"; Proceedings of the Metacognition Workshop at the Third IEEE International Conference on Self-Adaptive and Self-Organizing Systems; San Francisco, California, USA; 2009 September</a></li>'
	       '  <li><a href="http://neuromin.de/rct/morgan2009-funk2_memory-draft.pdf">Morgan, B.; "Funk2: A Frame-based Programming Language with Causally Reflective Capabilities"; Technical Note; Massachusetts Institute of Technology; 2009 May</a></li>'
	       '</ul>'
	       ''
	       '<h2>Presentations</h2>'
	       ''
	       '<ul>'
	       '  <li><a href="http://neuromin.de/rct/funk2_trust_presentation.html">Morgan, B.; "Funk2 Trust Presentation online Movie, PDF, and Transcript."; Research Presentation; Massachusetts Institute of Technology; 2008 April</a></li>'
	       '  <li><a href="http://neuromin.de/rct/2008_01_13-resenv-causal_reflection_programming.pdf">Morgan, B.; "Funk2: Causal Reflective Programming"; Research Presentation; Massachusetts Institute of Technology; 2008 January</a></li>'
	       '</ul>'
	       ''
	       ]]

[defunk funk2_about [posts examples]
  [funk2_page posts examples
	      [funk2_about-content]]]

[defunk compile_funk2_about [root_dir posts examples]
  [let [[about [funk2_about posts examples]]]
    [shelter [mkdir  [string-concat root_dir 'about']]]
    [have about save [string-concat root_dir 'about/index.html']]
    nil]]






[defunk funk2_news-content [posts]
  [string-prog [stringlist-prog [let [[index 0]]
				  [mapcar [funk [post]
						[= index [+ index 1]]
						[string-prog '<div class="post">'
							     [stringlist-concat `['<h1 class="title"><a name=post' ,[exp-as-string index] '>' ,[get post title] '</a></h1>']]
							     [stringlist-concat `['<p class="byline"><small>Posted on ' ,[get post date] ' by ' ,[get post author] '</small></p>']]
							     '  <div class="entry">'
							     [get post entry]
							     '	<p class="links"><a href="#" class="more">Read More</a> &nbsp;&nbsp;&nbsp; <a href="#" class="comments">No Comments</a></p>'
							     '  </div>'
							     '</div>']]
					  posts]]]
	       ]]

[defunk funk2_news [posts examples]
  [funk2_page posts examples
	      [funk2_news-content posts]]]

[defunk compile_funk2_news [root_dir posts examples]
  [let [[news [funk2_news posts examples]]]
    [have news save [string-concat root_dir 'index.html']]
    [shelter [mkdir [string-concat root_dir 'news']]]
    [have news save [string-concat root_dir 'news/index.html']]
    nil]]







[defunk funk2_object_documentation [posts examples type_name]
  [print [string-concat 'compiling ' [get type_name as-string] ' object documentation']]
  [funk2_page posts examples
	      [string-prog [string-concat '<h1><tt>' [get type_name as-string] '</tt> Object Documentation</h1>']
			   [let [[type [lookup_type type_name]]]
			     [string-prog '<h2><tt>get</tt> interface</h2>'
					  '<ul>'
					  [stringlist-prog [mapcar [funk [key_name]
									 [print [string-concat '  key: ' [get key_name as-string]]]
									 [let [[funk [get type type_var_value `get key_name nil]]]
									   [string-prog [string-concat '<li><tt>' [get key_name as-string] ' ' [exp-as-string [get funk args]] '</tt><br>']
											'&nbsp;&nbsp;&nbsp;&nbsp;' [string-concat [exp-as-string [get funk documentation]] '<br>']
											'&nbsp;'
											'</li>']]]
								   [get type type_var-keys `get]]]
					  '</ul>'
					  ''
					  '<h2><tt>set</tt> interface</h2>'
					  '<ul>'
					  [stringlist-prog [mapcar [funk [key_name]
									 [print [string-concat '  key: ' [get key_name as-string]]]
									 [let [[funk [get type type_var_value `set key_name nil]]]
									   [string-prog [string-concat '<li><tt>' [get key_name as-string] ' ' [exp-as-string [get funk args]] '</tt><br>']
											'&nbsp;&nbsp;&nbsp;&nbsp;' [string-concat [exp-as-string [get funk documentation]] '<br>']
											'&nbsp;'
											'</li>']]]
								   [get type type_var-keys `set]]]
					  '</ul>'
					  ''
					  '<h2><tt>execute</tt> interface</h2>'
					  '<ul>'
					  [stringlist-prog [mapcar [funk [key_name]
									 [print [string-concat '  key: ' [get key_name as-string]]]
									 [let [[funk [get type type_var_value `execute key_name nil]]]
									   [string-prog [string-concat '<li><tt>' [get key_name as-string] ' ' [exp-as-string [get funk args]] '</tt><br>']
											'&nbsp;&nbsp;&nbsp;&nbsp;' [string-concat [exp-as-string [get funk documentation]] '<br>']
											'&nbsp;'
											'</li>']]]
								   [get type type_var-keys `execute]]]
					  '</ul>'
					  ]]
			   ''
			   ]]]

[defunk funk2_documentation-all_objects-save [root_dir posts examples]
  [mapc [funk [type_name]
	      [let [[type_name_string     [get type_name as-string]]
		    [object_documentation [funk2_object_documentation posts examples type_name]]]
		[shelter [mkdir [string-concat root_dir 'documentation/object/' type_name_string]]]
		[have object_documentation save [string-concat root_dir 'documentation/object/' type_name_string '/index.html']]]]
	[system-type_names]]]

[defunk funk2_package_documentation [posts examples package_name]
  [print [string-concat 'compiling ' [get package_name as-string] ' package documentation']]
  [funk2_page posts examples
	      [string-prog [string-concat '<h1><tt>' [get package_name as-string] '</tt> Package Documentation</h1>']
			   [let [[package [lookup-package package_name]]]
			     [string-prog '<h2>Package Dependencies</h2>'
					  '<ul>'
					  [stringlist-prog [mapcar [funk [package_dependency]
									 [print [string-concat '  package dependency: ' [get package_dependency as-string]]]
									 [string-prog [string-concat '<li><a href=../' [get package_dependency as-string] '><tt>' [get package_dependency as-string] '</tt></a></li>']]]
								   [get package package_dependencies]]]
					  '</ul>'
					  ''
					  '<h2>Documentation</h2>'
					  [let [[documentation [get package documentation]]]
					    [if [is-type `string documentation]
						documentation
					      [get documentation as-string]]]]]]]]

[defunk funk2_documentation-all_packages-save [root_dir posts examples]
  [shelter [mkdir [string-concat root_dir 'documentation/package']]]
  [mapc [funk [package_name]
	      [let [[package_name_string   [get package_name as-string]]
		    [package_documentation [funk2_package_documentation posts examples package_name]]]
		[shelter [mkdir [string-concat root_dir 'documentation/package/' package_name_string]]]
		[have package_documentation save [string-concat root_dir 'documentation/package/' package_name_string '/index.html']]]]
	[package_names]]]

[defunk funk2_documentation-content [root_dir posts examples]
  [shelter [mkdir [string-concat root_dir 'documentation']]]
  [shelter [mkdir [string-concat root_dir 'documentation/object']]]
  [string-prog '<h1>Documentation</h1>'
	       ''
	       '<p>Funk2 is not yet completely documented.'
	       'Please see the examples on the lower left sidebar of this page to get an idea of how Funk2 is used.'
	       'Here, we have used Funk2\'s introspective functionality in order to print all object types and how those objects can be used.'
	       'There are three primary ways of interactive with objects once they have been created: <tt>get</tt>, <tt>set</tt>, and <tt>execute</tt>.</p>'
	       ''
	       '<tt>'
	       '  <p>[globalize a `[44 20 51 165]]</p>'
	       '  <p>[get a car]</p>'
	       '  <p>[get a cdr]</p>'
	       '  <p>[set a car \'a string\']</p>'
	       '  <p>[have a sort &>]</p>'
	       '</tt>'
	       ''
	       '<p>In the short example above, we have defined a global variable named <tt>a</tt> that stores a list of numbers.'
	       'Then, we get the <tt>car</tt> and <tt>cdr</tt> slot values of this object, like in the Lisp programming language.'
	       'Finally, we execute the <tt>sort</tt> funk and give it the <tt>></tt> comparison function.</p>'
	       ''
	       '<h2>Packages</h2>'
	       ''
	       '<ul>'
	       [stringlist-prog [mapcar [funk [package_name_string]
					      [string-concat '<li><a href="/documentation/package/' package_name_string '"><strong>' package_name_string '</strong></a></li>']]
					[have [mapcar [funk [package_name]
							    [get package_name as-string]]
						      [package_names]]
					      sort &>]]]
	       '</ul>'
	       '<h2>All Object Types</h2>'
	       ''
	       '<ul>'
	       [stringlist-prog [mapcar [funk [type_name_string]
					      [string-concat '<li><a href="/documentation/object/' type_name_string '"><strong>' type_name_string '</strong></a></li>']]
					[have [mapcar [funk [type_name]
							    [get type_name as-string]]
						      [system-type_names]]
					      sort &>]]]
	       '</ul>'
	       '']]

[defunk funk2_documentation [root_dir posts examples]
  [funk2_page posts examples
	      [funk2_documentation-content root_dir posts examples]]]

[defunk compile_funk2_documentation [root_dir posts examples]
  [let [[documentation [funk2_documentation root_dir posts examples]]]
    [shelter [mkdir [string-concat root_dir 'documentation']]]
    [have documentation save [string-concat root_dir 'documentation/index.html']]
    [funk2_documentation-all_packages-save root_dir posts examples]
    [funk2_documentation-all_objects-save  root_dir posts examples]
    nil]]


[defunk funk2_download-content []
  [string-prog '<h1>Download</h1>'
	       ''
	       '<h2>Binary and Source Packages</h2>'
	       ''
	       '<p>The following is a direct link to the latest version of platform independent source code, which compiles and runs cleanly on Linux, MacOSX, and Windows (under CygWin):</p>'
	       '  <ul>'
	       '    <li><a href="/version/funk2-2.11.0.2010.05.04/funk2-2.11.0.2010.05.04.tar.gz">Latest Architecture and Platform Independent Source Code (version 2.11.0.2010.05.04)</a></li>'
	       '  </ul>'
	       ''
	       '<p>The following table includes direct links to the latest architecture and platform specific binary packages. In most situations, you should be able to simply single-click on the appropriate link in order for your operating system to fully install the latest version of Funk2.</p>'
	       '  <ul>'
	       '    <li><a href="/arch/i386/funk2_2.11.0.2010.04.20_i386.deb">Debian Sid i386 binary package (version 2.11.0.2010.04.20)</a></li>'
	       '    <li><a href="/arch/amd64/funk2_2.11.0.2010.04.20_amd64.deb">Debian Sid amd64 binary package (version 2.11.0.2010.04.20)</a></li>'
	       '    <li><a href="/version/funk2-2.11.0.2010.05.02/funk2_2.11.0.2010.05.02_i386_macosx_10.6.3_darwin_10.3.0.pkg.tar.gz">MacOS X 10.6.3 Darwin Kernel 10.3.0 i386 binary package (version 2.11.0.2010.05.02)</a></li>'
	       '    <li><a href="/version/funk2-2.11.0.2010.05.03/funk2_2.11.0.2010.05.03_i386_macosx_10.5.8_darwin_9.8.0.pkg.tar.gz">MacOS X 10.5.8 Darwin Kernel 9.8.0 i386 binary package (version 2.11.0.2010.05.03)</a></li>'
	       '  </ul>'
	       ''
	       '<p>All Funk2 packages are signed with a public key, which is available here for your security:</p>'
	       '  <ul>'
	       '    <li><a href="/bo-2010_01_02.pub">Public Key for Bo Morgan <bo@mit.edu> (most recent)</a></li>'
	       '    <li><a href="/bo-2009_01_01.pub">Public Key for Bo Morgan <bo@mit.edu> (for older packages released before 2010)</a></li>'
	       '  </ul>'
	       ''
	       [prog '<p>All of the above Funk2 source tarballs and binary packages as well as all other previous versions are available here:</p>'
		     '  <ul>'
		     '    <li><a href="http://funk2.neuromin.de/">Funk2 HTTP File Server</a></li>'
		     '  </ul>'
		     '']
	       '<p>Funk2 is developed with the Git subversioning system. Here are some public Git versioning resources:</p>'
	       '  <ul>'
	       '    <li><a href="http://git.neuromin.de/">Funk2 GitWeb Server</a></li>'
	       '  </ul>'
	       ''
	       '<h2>Public Git Access</h2>'
	       ''
	       'This project is now a publicly developed project hosted via gitosis and gitweb at http://git.neuromin.de/, where you should have both access to stable packages and the trunk source repository. To clone the public git Funk2 repository on your machine, you should be able to just type the following command into a terminal:'
	       ''
	       '  <ul>'
	       '    <li><tt>git clone git://neuromin.de/funk2.git</tt></li>'
	       '  </ul>'
	       '']]

[defunk funk2_download [posts examples]
  [funk2_page posts examples
	      [funk2_download-content]]]

[defunk compile_funk2_download [root_dir posts examples]
  [let [[download [funk2_download posts examples]]]
    [shelter [mkdir     [string-concat root_dir 'download']]]
    [have download save [string-concat root_dir 'download/index.html']]
    nil]]


[defunk funk2_community-content []
  [string-prog '<h1>Community</h1>'
	       ''
	       'Coming soon!']]

[defunk funk2_community [posts examples]
  [funk2_page posts examples
	      [funk2_community-content]]]

[defunk compile_funk2_community [root_dir posts examples]
  [let [[community [funk2_community posts examples]]]
    [shelter [mkdir [string-concat root_dir 'community']]]
    [have community save [string-concat root_dir 'community/index.html']]
    nil]]


[defunk funk2_support-content []
  [string-prog '<h1>Support Funk2</h1>'
	       ''
	       'Coming soon!']]

[defunk funk2_support [posts examples]
  [funk2_page posts examples
	      [funk2_support-content]]]

[defunk compile_funk2_support [root_dir posts examples]
  [let [[support [funk2_support posts examples]]]
    [shelter [mkdir [string-concat root_dir 'support']]]
    [have support save [string-concat root_dir 'support/index.html']]
    nil]]


[defunk funk2_development-content []
  [string-prog '<h1>Development</h1>'
	       ''
	       'Coming soon!']]

[defunk funk2_development [posts examples]
  [funk2_page posts examples
	      [funk2_development-content]]]

[defunk compile_funk2_development [root_dir posts examples]
  [let [[development [funk2_development posts examples]]]
    [shelter [mkdir [string-concat root_dir 'development']]]
    [have development save [string-concat root_dir 'development/index.html']]
    nil]]


[defunk funk2_example [posts examples example]
  [let [[content [string-prog '<!-- start content -->'
			      '<div id="content">'
			      '  <div class="post">'
			      [stringlist-concat `['<h1 class="title">' ,[get example title] '</h1>']]
			      [stringlist-concat `['<p class="byline"><small>Posted on ' ,[get example date] ' by ' ,[get example author] '</small></p>']]
			      '    <div class="entry">'
			      '      <p><tt>'
			      [have [have [have [have [get example entry] replace_all '\n' '<br>\n']
						replace_all '-' '&#x2011;']
					  replace_all '\t' '        ']
				    replace_all ' ' '&nbsp;']
			      '      </tt></p>'
			      [string-concat '<p class="links"><a href="/example/' [get example name] '.fu2" class="more">Download</a> &nbsp;&nbsp;&nbsp; <a href="#" class="comments">No Comments</a></p>']
			      '    </div>'
			      '  </div>'
			      '</div>'
			      '<!-- end content -->']]]
    [funk2_page posts examples content]]]

[defunk compile_funk2_example [root_dir posts examples example]
  [let [[example_html_code [funk2_example posts examples example]]]
    [shelter [mkdir [string-concat root_dir 'example']]]
    [shelter [mkdir [string-concat root_dir 'example/' [get example name]]]]
    [have [string-prog [string-concat '\'' [get example title] '\'']
		       [string-concat '\'This example Funk2 code was downloaded from http://www.funk2.org/example/' [get example name] '.fu2\'']
		       ''
		       [get example entry]]
	  save [string-concat root_dir 'example/' [get example name] '.fu2']]
    [have example_html_code   save [string-concat root_dir 'example/' [get example name] '/index.html']]
    nil]]

[defunk compile_funk2_examples [root_dir posts examples]
  [mapc [funk [example]
	      [print [string-concat 'compiling example ' [get example name]]]
	      [compile_funk2_example root_dir posts examples example]]
	examples]
  nil]

'<h3>Bulleted List:</h3>'
'<ul>'
'  <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>'
'  <li>Phasellus nec erat sit amet nibh pellentesque congue.</li>'
'  <li>Cras vitae metus aliquam risus pellentesque pharetra.</li>'
'</ul>'
'<h3>Numbered List:</h3>'
'<ol>'
'  <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>'
'  <li>Phasellus nec erat sit amet nibh pellentesque congue.</li>'
'  <li>Cras vitae metus aliquam risus pellentesque pharetra.</li>'
'</ol>'

[defunk generate_all_posts []
  [list [let [[this [new funk2_post]]]
	  [set this title  'Welcome to the official Funk2 Website!']
	  [set this date   'October 14th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<p><strong>Funk2</strong> is a free, open, programming language designed for causal reflective tracing and monitoring of complex control systems.  '
					'This project is developed by the <a href=http://rct.media.mit.edu/rct>Reflective Commonsense Thinking</a> group at the <a href=http://www.media.mit.edu>MIT Media Lab</a>.'
					'The Funk2 project is currently supported as a core research effort of the <a href=http://mmp.mit.edu>Mind Machine Project</a>.</p>']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Natural language processing']
	  [set this date   'October 7th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<p>A basic natural language toolkit has been added to the Funk2 programming language.'
					'A basic English dictionary and parser have been included for defining verbs and argument structures that can be used for adding knowledge and natural language control to cognitive architectures.'
					'A new built-in package can be required with the <tt>[require natural_language]</tt> command.'
					'</p>']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Layered cognitive architecture']
	  [set this date   'September 4th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<p>A basic cognitive architecture has been included as an example package.  This includes definitions for <emph>mind</emph>, <emph>mental_layer</emph>, <emph>agency</emph>, and <emph>resource</emph> objects.'
					'These basic mental primitives can be included by requiring the <emph>mind</emph> package (i.e. <tt>[require mind]</tt>).'
					'Also, when building a mind, using these architectural primitives, it is useful to see an overview of your mental model by using the new <emph>mindmon</emph> utility, which provides a graphical user interface to the mind.'
					'</p>']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'GTK support added for creating graphical user intefaces (GUIs)']
	  [set this date   'June 23rd, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<p>You can now create graphical applications within the Funk2 programming language by includinig the GTK package (i.e. <tt>[require gtk]</tt>).'
					'An example GTK application can be seen in the <tt>gtk-test</tt> directory included in the <tt>example</tt> directory in the source code.'
					'</p>']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Package manager']
	  [set this date   'June 23rd, 2010']
			  [set this author '<a href="#">Bo Morgan</a>']
			  [set this entry  [string-prog '<p>A new package manager has been added to the Funk2 programming language.'
							'A number of built-in packages are included in the default bootstrap image, and there is now a growing number of example packages that can be found in the example directory, included with Funk2 source code.'
							'You can now use the [require package-name] command in order to load a package and all of its dependencies.'
							'</p>']]
			  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Call for Collaboration to Build Artificial Intelligence']
	  [set this date   'May 12st, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<h3>All programs fail, so let us embrace this failure and write systems that react to failure through reflection:</h3>'
					'<blockquote>'
					'  <p>&#8220;Reflection is the business of man; a sense of his state is his first duty: but who remembereth himself in joy? Is it not in mercy then that sorrow is allotted unto us?&#8221;&#8212;William&nbsp;Shakespeare</p>'
					'</blockquote>'
					'<p>Human intelligence is a complicated control system for accomplishing complicated goals.  '
					'Building artificial intelligence is a massive software engineering project that requires new ways for large teams of engineers to work together.  '
					'Funk2 is meant as a collaboration platform that provides reflective tracing of resposibility for bugs in distributed interactive software systems.'
					'</p>'
					]]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Causal tracing of Funk completion events']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'The funk object is as universal to Funk2 as the lambda object is to Lisp or Python.'
					'Causally tracing funk execution and completion events allows us a powerful and intricate reflective tool.'
					'These numerous and intricate events are compiled into graphs and other representations for both debugging as well as planning in order to avoid software failures.'
					'Declarative and goal-oriented software systems that are not reflectively controlled are notoriously difficult to control and often attempt to solve problems by diving into an under constrained search.  '
					'Building pattern recognition that deals not only with the problem space but with the mental space of the solver itself is necessary for learning to solve more difficult control problems.  '
					]]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Funk2 remote interface to IsisWorld']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<a href="http://web.media.mit.edu/~dustin/simulator_setup/">IsisWorld</a> is another core research effort supported by the <a href="http://mmp.mit.edu">Mind Machine Project</a> that we are using to collaborate in developing reflective social commonsense reasoning cognitive models of humans.  '
					'Agents in IsisWorld are controlled through an XML-RPC interface.  '
					'The most recent IsisWorld interface in now included in the default distribution of Funk2 in order that AI researchers around the world can contribute to this large open software development and research project.']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'XML-RPC client library built on fast xmlrpc-c library']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Funk2 is written in pure C, which makes incorporating the fastest libraries easy.'
					'<a href="http://xmlrpc-c.sourceforge.net/">Xmlrpc-c</a> is a lightweight implementation of this very abstract remote procedure call (RPC) protocol.'
					'The <a href="www.xmlrpc.com">XML-RPC protocol</a> is an XML representation communicated through HTTP and is supported by <a href="http://www.xmlrpc.com/directory/1568/implementations">all popular languages</a>.'
					'Python dictionaries, Java hashtables, and other hierarchical named complex data types from other languages can be easily communicated to and from Funk2\'s frame-based and directed-graph object representations.'
					'Also, for data-intensive algorithms, the XML-RPC protocol supports the efficient communication of large amounts of raw binary data between correctly implemented versions of the protocol.'
					]]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Simple node and edge variable graph matching library completed']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Procedural traces in Funk2 are labeled directed graphs.  '
					'These graphs are very large and difficult to visualize because of their size and complexity.  '
					'We are developing algorithms for simplifying the process of finding and recognizing critical patterns in these reflective traces.  '
					'Often, large and subtle but exact patterns must be found in order to correctly assign credit for a failure in a learning situation.  '
					'We have developed a fast labeled directed graph representation in Funk2.  '
					'See our <a href="/example/graph_matching">graph matching example</a> for a demonstration of a simple variable graph matching algorithm.  '
					]]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Compiles on Windows XP under CygWin']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'A port of Funk2 has been made to the CygWin platform, which now enables Microsoft Windows users to join the Funk2 distributed programming effort!'
					'We have not completed a binary distribution package for the Windows operating system yet, but developers should have few problems compiling and installing Funk2 from source.'
					'Please see the Funk2 <a href=/download/>download</a> page in order to download the latest source package.']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'MacOS X Binaries available for 10.5 and 10.6']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Binary packages for the Apple Macintosh operating system X (MacOS X) are now available!  '
					'Please see the Funk2 <a href=/download/>download</a> page in order to download the latest MacOS X binary package for Funk2.']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'GraphViz graph visualization completed']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog '<a href="http://www.graphviz.org/">GraphViz</a> is an open, free and fast graph visualization tool for labeled directed graphs.  '
					'We have included a very fast GraphViz compiler in Funk2 for generating and viewing our causal reflective traces.  '
					'See our <a href="/example/graphviz">GraphViz example</a> for how this new facility of Funk2 can be used.  ']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Successfully stress tested 1000 parallel fibers for 1 day!']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Fibers are to Funk2 as threads are to a C or Java application.  '
					'Funk2 is an abstract simulation of an operating system built out of Funk2 traceable memory.  '
					'Each Funk2 processor is an abstract object representing each processor core in it\'s host machine.  '
					'Each Funk2 processor is implemented as a POSIX thread (pthread).'
					'Funk2 processors each have a scheduler that handles scheduling Funk2 fibers that represent parallel procedures, implemented as funks (traceable functions) of compiled bytecodes.'
					'Because this entire operating system simulation is built out of traceable memory, this opens an avenue for easily building very intricate causally reflective traces.'
					'The ability to run 1000 parallel fibers for a complete day is one step closer to the ability of the Funk2 programming to simulate large distributed concurrent systems.'
					'See our <a href="/example/parallel_programming">parallel programming example</a> for more details about how to create and control parallel fibers in Funk2.'
					]]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Funk2 used to teach 35 students &#8220;Block\'s World&#8221; planning in Marvin Minsky\'s Society of Mind class']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Funk2 is largely inspired by Marvin Minsky\'s theory that the ability of humans to quickly adapt and switch between mental representations and processes is a metacognitive problem of reflective control.'
					'His book, <u>Society of Mind</u>, organizes and describes in surprisingly both dense and understandable English the hundreds of different types of reasoning that a human performs.'
					'In his most recent book, <u>The Emotion Machine</u>, Prof. Minsky tells a story about how what we normally call &#8220;emotions&#8221; are actually self-reflective forms of control processes for switching between ways of thinking.'
					'We have built and demonstrated basic reactive and deliberative planning algorithms in Funk2 that demonstrate simple aspects of the lower layers of this theory.'
					'Thirty-five students completed two computer laboratory assignments within the Funk2 language that related the continuity between the contemporary fields of planning and reinforcement learning in relational domains to Prof. Minsky\'s theory for how to build a cognitive architecture.']]
	  this]
	[let [[this [new funk2_post]]]
	  [set this title  'Funk2 presented at Seed Magazine in New York']
	  [set this date   'May 12th, 2010']
	  [set this author '<a href="#">Bo Morgan</a>']
	  [set this entry  [string-prog 'Funk2 is the programming language that supports building large cognitive architectures, and a preliminary demonstration of the <a href="http://neuromin.de/rct/moral_compass.html">Moral Compass</a> cognitive architecture was invited to be presented last week at Seed Magazine\'s head office in New York.'
					'Read more about our visit on <a href="http://seedmediagroup.com/index.php/blog/some-reflective-common-sense-thoughts1/">Seed Media Group\'s blog</a>!']]
	  this]
	]]

[defunk generate_all_examples []
  [list [let [[this [new funk2_example]]]
	  [set this name   'GTK_GUI']
	  [set this title  'GTK graphical user interface']
	  [set this date   'October 14th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-load 'example/gtk-test/gtk-test.fu2']]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'xmlrpc_client']
	  [set this title  'XML-RPC client']
	  [set this date   'October 26th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-load 'example/xmlrpc-test/xmlrpc-test.fu2']]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'graph_matching']
	  [set this title  'Graph Matching']
	  [set this date   'May 13th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-prog 'coming soon!'
					]]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'graphviz']
	  [set this title  'GraphViz Graph Visualization']
	  [set this date   'May 13th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-prog 'coming soon!'
					]]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'parallel_programming']
	  [set this title  'Parallel Programming']
	  [set this date   'May 14th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-prog 'coming soon!'
					]]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'causal_event_tracing']
	  [set this title  'Causal event tracing']
	  [set this date   'May 13th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-prog 'coming soon!'
					]]
	  this]
	[let [[this [new funk2_example]]]
	  [set this name   'isisworld_client']
	  [set this title  'IsisWorld client']
	  [set this date   'May 13th, 2010']
	  [set this author 'Bo Morgan']
	  [set this entry  [string-prog 'coming soon!'
					]]
	  this]
	]]

[defunk compile_funk2_webpage [root_dir posts examples]
  [print 'compiling funk2 about']         [compile_funk2_about         root_dir posts examples]
  [print 'compiling funk2 news']          [compile_funk2_news          root_dir posts examples]
  [print 'compiling funk2 documentation'] [compile_funk2_documentation root_dir posts examples]
  [print 'compiling funk2 download']      [compile_funk2_download      root_dir posts examples]
  [print 'compiling funk2 community']     [compile_funk2_community     root_dir posts examples]
  [print 'compiling funk2 support']       [compile_funk2_support       root_dir posts examples]
  [print 'compiling funk2 development']   [compile_funk2_development   root_dir posts examples]
  [print 'compiling funk2 examples']      [compile_funk2_examples      root_dir posts examples]
  [print 'done compiling']
  nil]]

[let [[root_dir '/home/neptune/Desktop/www/funk2/']
      [posts    [generate_all_posts]]
      [examples [generate_all_examples]]]
  
  [defunk webpage-save             [] [compile_funk2_webpage       root_dir posts examples]]
  [defunk funk2_about-save         [] [compile_funk2_about         root_dir posts examples]]
  [defunk funk2_news-save          [] [compile_funk2_news          root_dir posts examples]]
  [defunk funk2_documentation-save [] [compile_funk2_documentation root_dir posts examples]]
  [defunk funk2_download-save      [] [compile_funk2_download      root_dir posts examples]]
  [defunk funk2_community-save     [] [compile_funk2_community     root_dir posts examples]]
  [defunk funk2_support-save       [] [compile_funk2_support       root_dir posts examples]]
  [defunk funk2_development-save   [] [compile_funk2_development   root_dir posts examples]]
  [defunk funk2_examples-save      [] [compile_funk2_examples      root_dir posts examples]]
  
  ]


