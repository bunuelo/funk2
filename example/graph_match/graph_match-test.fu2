'*********************************'
'*********************************'
'********                 ********'
'********   Graph Stuff   ********'
'********                 ********'
'*********************************'
'*********************************'


[deframe lattice_and_mappings [] [lattice graph_mappings_otl graph_mappings_lto]
  [new [init_lattice init_graph_mappings_otl init_graph_mappings_lto]
       [= lattice init_lattice]
       [= graph_mappings_otl init_graph_mappings_otl]
       [= graph_mappings_lto init_graph_mappings_lto]]]


[defunk find_top_isomorphisms [lattice subgraph]
  [print 'subgraph searched for:']
  [format stdout subgraph]
  [let* [[the_lattice lattice]
	 [the_subgraph_copy [get subgraph copy_with_node_label nil]]
	 [time_a [time]]
	 [the_isomorphisms [get [get the_lattice lattice] subgraph_isomorphisms the_subgraph_copy]]
	 [time_b [time]]
	 [the_cleaned_up_isomorphisms [clean_up_results2 the_isomorphisms [get the_lattice graph_mappings_lto]]]
	 [time_c [time]]]
    [print 'time to get subgraph isomorphisms:']
    [print [time_difference time_a time_b]]
    [print 'time to clean up isomorphisms:']
    [print [time_difference time_b time_c]]
    the_cleaned_up_isomorphisms]]

[defunk clean_up_results2 [results graph_mappings_lto]
  [print 'cleaning up']
  [let* [[graph_to_isomorphism_length_hash [new ptypehash]]
	 [max_length 0]]
    [mapc [funk [x] [if [> [get [car [car [cdr x]]] mapping_count] max_length]
			[= max_length [get [car [car [cdr x]]] mapping_count]]
		      nil]]
	  results]
    [mapc [funk [x] 
		[if [eq [get [car [car [cdr x]]] mapping_count] max_length]
		    [if [eq [have graph_to_isomorphism_length_hash lookup [car x]] nil]
			[have graph_to_isomorphism_length_hash add [car x] [cons [get [car [car [cdr x]]] mapping_count] [car [car [cdr x]]]]]
		      [if [< [have graph_to_isomorphism_length_hash lookup [car x]] [get [car [car [cdr x]]] mapping_count]]
			  [have graph_to_isomorphism_length_hash add [car x] [cons [get [car [car [cdr x]]] mapping_count] [car [car [cdr x]]]]]
			nil]]
		  nil]]
	  results]
    [print 'yay']
'bug here? car doesnt have get - not car of x?'
    [let* [[the_keys [get graph_to_isomorphism_length_hash keys]]
	   [original_graph_to_isomorphism_length_hash [new ptypehash]]
	   [the_sorted_keys [have the_keys sort [funk [x y]
						      [<
						       [car [have graph_to_isomorphism_length_hash lookup x]]
						       [car [have graph_to_isomorphism_length_hash lookup y]]]]]]]
      [print 'keys sorted']
      [let* [[top_graph_and_length [cons [have graph_mappings_lto lookup [car the_sorted_keys]] 
					 [have graph_to_isomorphism_length_hash lookup [car the_sorted_keys]]]]
	     [index 0]]
	[print 'finding original graphs']
	[mapc [funk [x] [prog
			 [have original_graph_to_isomorphism_length_hash add 
			       index
			       [cons [have graph_mappings_lto lookup x] [have graph_to_isomorphism_length_hash lookup x]]]
			 [= index [+ 1 index]]]]
	      the_sorted_keys]
	[cons top_graph_and_length original_graph_to_isomorphism_length_hash]]]]]


[defunk time_lattice_creation [n n1 n2 n3]
  [let* [[time_a [time]]
	 [the_graph [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' n] graph]]
	 [time_b [time]]
	 [the_lattice [create_lattice the_graph 2 n1 n2 n3]]
	 [time_c [time]]]
    [print 'time to load conceptnet graph:']
    [print [time_difference time_a time_b]]
    [print 'time to create lattice:']
    [print [time_difference time_b time_c]]]]

[defunk time_lattice_search [the_lattice]
  [let* [[time_a [time]]
	 [subgraph [make_random_n_conceptnet_graph 5 4]]
	 [results [search_for_subgraph_in_lattice subgraph the_lattice]]
	 [time_b [time]]]
    [print 'subgraph searched for:']
    [format stdout subgraph]
    [print 'time to search for subgraph:']
    [print [time_difference time_a time_b]]
    [print 'results:']
    [print results]]]

[defunk clean_up_results [results]
  [let* [[graph_to_isomorphism_length_hash [new ptypehash]]]
    [mapc [funk [x] [if [eq [have graph_to_isomorphism_length_hash lookup [car x]] nil]
			[have graph_to_isomorphism_length_hash add [car x] [get [car [car [cdr x]]] mapping_count]]
		      [have graph_to_isomorphism_length_hash add [get [car x] copy] [get [car [car [cdr x]]] mapping_count]]]] results]
    [let* [[the_keys [get graph_to_isomorphism_length_hash keys]]]
      [have the_keys sort [funk [x y]
				[< [have graph_to_isomorphism_length_hash lookup x] [have graph_to_isomorphism_length_hash lookup y]]]]]]]


[defunk search_for_subgraph_in_lattice [subgraph lattice]
  [let* [[the_lattice lattice]
	 [the_subgraph [get subgraph copy_with_node_label nil]]
	 [the_isomorphisms [get the_lattice subgraph_isomorphisms the_subgraph]]]
    the_isomorphisms]]

'[defunk search_for_subgraph_in_lattice_error_correcting [subgraph lattice]
  [let* [[the_lattice lattice]
	 [the_subgraph [get subgraph copy_with_node_label nil]]
	 [the_isomorphisms [get the_lattice error_correcting_subgraph_isomorphisms the_subgraph nil]]
	 [the_keys [get the_isomorphisms keys]]]
    [mapc [funk [x] [if [eq [have the_isomorphisms lookup x] nil]
			[have the_isomorphisms remove x]]]
	  the_keys]
    [let [[the_new_keys [get the_isomorphisms keys]]]
      [have the_new_keys sort [funk [x y]
				    [> [get [have the_isomorphisms lookup x] cost] [get [have the_isomorphisms lookup y] cost]]]]]]]'

'[defunk search_for_subgraph_in_graph [subgraph graph]
  [let* [[the_lattice [create_lattice graph 2 1 1 5]]
	 [the_subgraph [get subgraph copy_with_node_label nil]]
	 [the_isomorphisms [get the_lattice error_correcting_subgraph_isomorphisms the_subgraph nil]]
	 [the_keys [get the_isomorphisms keys]]]
    [mapc [funk [x] [if [eq [have the_isomorphisms lookup x] nil]
			[have the_isomorphisms remove x]]]
	  the_keys]
    [let [[the_new_keys [get the_isomorphisms keys]]]
      [have the_new_keys sort [funk [x y]
				    [> [get [have the_isomorphisms lookup x] cost] [get [have the_isomorphisms lookup y] cost]]]]]]]'


[defunk create_lattice [graph method_of_expansion number_of_expansions expand_each_node expand_by]
  [let* [[index 0]
	 [index2 0]
	 [index3 0]
	 [index4 0]
	 [the_lattice [new graph_decomposition_lattice]]
	 [graph_mappings_otl [new ptypehash]]
	 [graph_mappings_lto [new ptypehash]]]
    [decompose_single_nodes the_lattice graph graph_mappings_otl graph_mappings_lto]
    [while [< index number_of_expansions]
      [let [[lattice_graphs [get [get [get the_lattice root_graph_set] elements] as-array]]]
	[while [< index2 [get lattice_graphs length]]
	  [while [< index3 expand_each_node]
	    [let* [[graph_to_add [have graph_mappings_lto lookup [get lattice_graphs elt index2]]]]
	      [while [< index4 expand_by]
		[let* [[graph_to_add [expand graph_to_add graph 1 method_of_expansion]]
		       [graph_to_add_n [get graph_to_add copy_with_node_label nil]]]
		  [have the_lattice decompose_graph graph_to_add_n]
		  [have graph_mappings_otl add graph_to_add graph_to_add_n]
		  [have graph_mappings_lto add graph_to_add_n graph_to_add]]
		[= index4 [+ 1 index4]]]]
	    [= index4 0]
	    [= index3 [+ 1 index3]]]
	  [= index3 0]
	  [= index2 [+ 1 index2]]]
	[= index2 0]
	[= index [+ 1 index]]]]
    [new lattice_and_mappings the_lattice graph_mappings_otl graph_mappings_lto]]]

'[defunk create_lattice [graph method_of_expansion number_of_expansions expand_each_node expand_by]
  [let* [[index 0]
	 [index2 0]
	 [index3 0]
	 [the_lattice [new graph_decomposition_lattice]]
	 [graph_mappings_otl [new ptypehash]]
	 [graph_mappings_lto [new ptypehash]]]
    [decompose_single_nodes the_lattice graph graph_mappings_otl graph_mappings_lto]
    [while [< index number_of_expansions]
      [let [[lattice_graphs [get [get [get the_lattice root_graph_set] elements] as-array]]]
	[while [< index2 [get lattice_graphs length]]
	  [while [< index3 expand_each_node]
	    [let* [[graph_to_add [expand [have graph_mappings_lto lookup [get lattice_graphs elt index2]] graph expand_by method_of_expansion]]
		   [graph_to_add_n [get graph_to_add copy_with_node_label nil]]]
	      [have the_lattice decompose_graph graph_to_add_n]
	      [have graph_mappings_otl add graph_to_add graph_to_add_n]
	      [have graph_mappings_lto add graph_to_add_n graph_to_add]]
	    [= index3 [+ 1 index3]]]
	  [= index3 0]
	  [= index2 [+ 1 index2]]]
	[= index2 0]
	[= index [+ 1 index]]]]
    the_lattice]]'

[defunk decompose_single_nodes [lattice graph graph_mappings_otl graph_mappings_lto]
  [let* [[index 0]
	 [graph_nodes [get [get [get graph node_set] elements] as-array]]]
    [while [< index [get graph_nodes length]]
      [let [[a_graph [new graph]]]
	[have a_graph add_node [get graph_nodes elt index]]
	[let [[a_graph_n [get a_graph copy_with_node_label nil]]]
	  [have lattice decompose_graph a_graph_n]
	  [have graph_mappings_otl add a_graph a_graph_n]
	  [have graph_mappings_lto add a_graph_n a_graph]]]
      [= index [+ 1 index]]]]]



[defunk expand [subgraph graph n method]
  [let* [[index 0]
	 [nodes_added 0]
	 [subgraph_nodes [get [get [get subgraph node_set] elements] as-array]]]
    [cond
     [[== method 1]
      [while [and [< nodes_added n] [not [get [get_subgraph_neighbors subgraph graph] is_empty]]]
	[let* [[some_node [get_random_node subgraph]]
	       [random_neighbor_node [get_random_array_element [get_neighbors_array some_node graph]]]]
	  [if [not [eq [add_node_and_edges subgraph graph random_neighbor_node] nil]]
	      [prog
	       [= nodes_added [+ 1 nodes_added]]]]]]]
     [[== method 2]
      [while [< nodes_added n]
	[let* [[all_neighbors [get_subgraph_neighbors subgraph graph]]]
	  [if [get all_neighbors is_empty]
	      [= nodes_added n]
	    [while [and [not [get all_neighbors is_empty]] [< nodes_added n]]
	      [let [[neighbor_to_add [get all_neighbors an_arbitrary_element]]]
		[if [not [eq [add_node_and_edges subgraph graph neighbor_to_add] nil]]
		    [= nodes_added [+ 1 nodes_added]]]
		[have all_neighbors remove neighbor_to_add]]]]]]]
     [[== method 3]
      ]]
    subgraph]]


[defunk add_node_and_edges [graph1 graph node_to_add]
  [if [not [eq node_to_add nil]]
      [let* [[base_nodes [get [get [get graph1 node_set] elements] as-array]]
	     [index 0]]
	[have graph1 add_node node_to_add]
	[while [< index [get base_nodes length]]
	  [let [[edges [get graph edges_between_nodes [get base_nodes elt index] node_to_add]]]
	    [while edges
	      [let [[this-edge [cdr [car edges]]]]
		[= edges [cdr edges]]
		[have graph1 add_edge this-edge]]]
	    [= index [+ 1 index]]]]
	node_to_add]
    nil]]



[defunk get_neighbors_array [node graph]
  [if [not [eq [have [get graph edges_label_hash_right_node_hash_left_node_hash] lookup node] nil]]
      [get [get [get [have [get graph edges_label_hash_right_node_hash_left_node_hash] lookup node] as-frame] keys] as-array]
    nil]]

[defunk get_neighbors_set [node graph]
  [array_to_set [get_neighbors_array node graph]]]

[defunk get_random_array_element [an_array]
  [if [not [eq an_array nil]]
      [get an_array elt [random [get an_array length]]]
    nil]]

[defunk get_random_node [graph]
  [let* [[graph_nodes [get [get [get graph node_set] elements] as-array]]
	 [some_node [get graph_nodes elt [random [get graph node_count]]]]]
    some_node]]

[defunk get_subgraph_neighbors [subgraph graph]
  [let* [[all_neighbors [new set]]
	 [index 0]
	 [subgraph_nodes [get [get [get subgraph node_set] elements] as-array]]]
    [while [< index [get subgraph node_count]]
      [set_union all_neighbors [get_neighbors_set [get subgraph_nodes elt index] graph]]
      [= index [+ 1 index]]]
    [set_subtract all_neighbors [get subgraph node_set]]
    all_neighbors]]



[defunk make_random_n_conceptnet_graph [n e]
  [let* [[index 0]
	 [index2 0]
	 [edge_labels [get [conslist `HasProperty `IsA `CapableOf `HasPrerequisite 
				     `AtLocation `ConceptuallyRelatedTo `UsedFor 
				     `CausesDesire `MotivatedByGoal `DefinedAs 
				     `ReceivesAction `HasSubevent `MadeOf `PartOf 
				     `HasA `Desires `Located] as-array]]
	 [the_graph [new graph]]
	 [the_nodes [new array n]]
	 [nodel [new array n]]]
    [while [< index n]
      [set the_nodes elt index [new graph_node index]]
      [have the_graph add_node [get the_nodes elt index]]
      [= index [+ 1 index]]]
    [= index 0]
    [while [< index n]
      [= index2 0]
      [while [< index2 n]
	[if [!= index index2]
	    [let [[x [random e]]]
	      [if [== x 1] 
		  [have the_graph add_new_edge [get edge_labels elt [random 17]] [get the_nodes elt index] [get the_nodes elt index2]]]]]
	[= index2 [+ 1 index2]]]
      [= index [+ 1 index]]]
    the_graph]]


'**********************************'
'*******  Helper Functions  *******'
'**********************************'

[defunk set_union [set_a set_b]
  [if [not [get set_b is_empty]]
      [let* [[set_b_elements [get [get set_b elements] as-array]]
	     [index 0]]
	[while [< index [get set_b_elements length]]
	  [have set_a add [get set_b_elements elt index]]
	  [= index [+ 1 index]]]]
    set_a]]

[defunk set_subtract [set_a set_b]
  [if [not [get set_b is_sempty]]]
      [let* [[set_b_elements [get [get set_b elements] as-array]]
	     [index 0]]
	[while [< index [get set_b_elements length]]
	  [have set_a remove [get set_b_elements elt index]]
	  [= index [+ 1 index]]]]
    set_a]]

[defunk array_to_set [the_array]
  [if [not [eq the_array nil]]
      [let* [[the_set [new set]]
	     [index 0]]
	[while [< index [get the_array length]]
	  [prog
	   [have the_set add [get the_array elt index]]
	   [= index [+ 1 index]]]]
	the_set]
    [new set]]]



'**********************************'
'*********  Random Stuff  *********'
'**********************************'


[defunk time_difference [time_a time_b]
  [/ [- [get time_b nanoseconds_since_1970] [get time_a nanoseconds_since_1970]] 1000000000.0]]





[defunk create_base_graphs []
  [print 'globalizing 5-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng5 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 5] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 10-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng10 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 10] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 20-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng20 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 20] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 50-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng50 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 50] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 100-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng100 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 100] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 200-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng200 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 200] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 500-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng500 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 500] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 1000-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng1000 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 1000] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 2000-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng2000 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 2000] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]
  
  [print 'globalizing 5000-line conceptnet graph']  
  [let [[time_a [time]]]
    [globalize cng5000 [get [conceptnet-new_from_graph_file 'conceptnet_medium.graph' 5000] graph]]
    [let [[time_b [time]]]
      [print [time_difference time_a time_b]]]]]



[defunk create_small_base_lattices []
  [let* [[method_of_expansion 2]
	 [number_of_expansions 1]
	 [expand_each_node 1]
	 [expand_by 10]]
    [print 'globalizing 5-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl5 [create_lattice cng5 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 10-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl10 [create_lattice cng10 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 20-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl20 [create_lattice cng20 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 50-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl50 [create_lattice cng50 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 100-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl100 [create_lattice cng100 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 200-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl200 [create_lattice cng200 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 500-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl500 [create_lattice cng500 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]]]





[defunk create_large_base_lattices []
  [let* [[method_of_expansion 2]
	 [number_of_expansions 1]
	 [expand_each_node 1]
	 [expand_by 10]]
    [print 'globalizing 1000-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl1000 [create_lattice cng1000 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 2000-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl2000 [create_lattice cng2000 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]
    
    [print 'globalizing 5000-line conceptnet lattice']  
    [let [[time_a [time]]]
      [globalize cngl5000 [create_lattice cng5000 method_of_expansion number_of_expansions expand_each_node expand_by]]
      [let [[time_b [time]]]
	[print [time_difference time_a time_b]]]]]]