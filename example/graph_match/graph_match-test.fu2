'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk string get as-graph []
  [let [[this-length [length this]]]
    [let [[a [new array this-length]]]
      [dotimes [i this-length]
	[set a elt i [new bruno_graph_node [get this elt i]]]]
      [let [[g [new bruno_graph]]]
	[dotimes [i [- this-length 1]]
	  [have g add_new_edge `next-char [get a elt i] [get a elt [+ i 1]]]]
	g]]]]

[defunk graph_match-test []
  [let* [[d  [new bruno_decomposition_lattice]]
	 [g1 [get 'This is a test.' as-graph]]
	 [g2 [get 'Is this a test?' as-graph]]]
    `[format stdout '\n  g1: ' g1]
    `[format stdout '\n  g2: ' g2]
    [have d decompose_graph g1]
    [have d decompose_graph g2]
    `[print d]
     [let [[isomorphisms [get d subgraph_max_isomorphisms [get 'This is a test.' as-graph]]]]
       [print [have isomorphisms sort [funk [x y] [let [[x-isomorphism [second x]]
							[y-isomorphism [second y]]]
						    [< [get x-isomorphism mapping_count] [get y-isomorphism mapping_count]]]]]]
       ]]
  nil]


