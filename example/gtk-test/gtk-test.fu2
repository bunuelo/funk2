'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk gtk-test []
  [let [[win           [gtk-window-new]]
	[vpaned        [gtk-vpaned-new]]
	[hbox          [gtk-hbox-new 2]]
	[search_image  [gtk-image-new_from_image [image-new_from_rgb_data 24 24 [let [[data [new chunk [* 3 24 24]]]]
										  [dotimes [x 24]
										    [dotimes [y 24]
										      [let [[pixel [* 3 [+ [* 24 y] x]]]]
											[set data bit8-elt [+ pixel 0] [get [random 256] as-pointer]]
											[set data bit8-elt [+ pixel 1] [get [random 256] as-pointer]]
											[set data bit8-elt [+ pixel 2] [get [random 256] as-pointer]]]]]
										  data]]]]
	[search_entry  [gtk-entry-new]]
	[search_button [gtk-button-new_with_label 'Search']]
	[next_button   [gtk-button-new_with_label 'Next']]
	[open_button   [gtk-button-new_with_label 'Open']]
	[save_button   [gtk-button-new_with_label 'Save']]
	[swindow       [gtk-scrolled_window-new]]
	[notebook      [gtk-notebook-new]]
	[drawing_area  [gtk-drawing_area-new]]
	[text_view     [gtk-text_view-new]]
	[table_hbox    [gtk-hbox-new 2]]
	[table_scale   [gtk-scale-new_with_range `vertical 0.0 100.0 1.0]]
	[table         [gtk-table-new 10 4 t]]]
    
    [have hbox         pack_start   search_image nil nil 0]
    [have hbox         pack_start   search_entry t t 0]
    [have hbox         pack_start   search_button nil nil 0]
    [have hbox         pack_start   next_button nil nil 0]
    [have hbox         pack_start   open_button nil nil 0]
    [have hbox         pack_start   save_button nil nil 0]
    [have vpaned       pack1        hbox nil nil]
    
    [have swindow      add          text_view]
    [have notebook     append_page  swindow [gtk-label-new 'Document']]
    
    [have drawing_area request_size 100 100]
    [have notebook     append_page  drawing_area [gtk-label-new 'Drawing Area']]
    
    [have table_hbox pack_start table_scale nil nil 0]
    
    [dotimes [column 4]
      [dotimes [row 10]
	[have table attach [gtk-label-new [format nil 'column=' column '\nrow=' row]] column [+ column 1] row [+ row 1] 0 0]]]
    [have table_hbox pack_start table t t 0]
    
    [have notebook     append_page  table_hbox [gtk-label-new 'Table']]
    
    [have vpaned       pack2        notebook t t]
    
    [have win          add          vpaned]
    [set  win          title        'gtk-test']
    [set  win          default_size 128 64]
    
    [have search_entry key_press_event-signal_connect
	  [funk [key_event]
		[let [[keyval [have key_event lookup `keyval]]]
		  [terminal_format standard-terminal '\nkey event: ' key_event]
		  [if [eq keyval GDK_Return]
		      [prog [print 'Return!']
			    [set search_entry text '']
			    ]]]]]
    
    [have search_button signal_connect 'clicked'
	  [funk []
		[let [[found_range [have [get [get text_view buffer] start_iter] forward_search [get search_entry text]]]]
		  [if found_range
		      [prog [terminal_format standard-terminal '\n  found "' [get search_entry text] '"!']
			    [have [get text_view buffer] select_range found_range]]
		    [prog [terminal_format standard-terminal '\n  could not find "' [get search_entry text] '".']]]]]]
    
    [have next_button signal_connect 'clicked'
	  [funk []
		[terminal_format standard-terminal '\n  table_scale-value: ' [get table_scale value]]
		[set table_scale value 50.0]
		[set table_scale range -1.0 1.0]
		[set table_scale increments 0.05 0.1]
		[set table_scale digits 4]
		[set search_image image [image-new_from_rgb_data 24 24 [let [[data [new chunk [* 3 24 24]]]]
									 [dotimes [x 24]
									   [dotimes [y 24]
									     [let [[pixel [* 3 [+ [* 24 y] x]]]]
									       [set data bit8-elt [+ pixel 0] [get 255                       as-pointer]]
									       [set data bit8-elt [+ pixel 1] [get [if [== [- x y] 0] 255 0] as-pointer]]
									       [set data bit8-elt [+ pixel 2] [get 0                         as-pointer]]]]]
									 data]]]
		[print 'Next button clicked!']]]
    
    [have open_button signal_connect 'clicked'
	  [funk []
		[terminal_format standard-terminal '\n  open button clicked.']
		[let [[open_dialog [gtk-file_chooser_dialog-new_for_file_open nil]]]
		  [have open_dialog signal_connect 'response'
			[funk []
			      [have open_dialog destroy]]]
		  [have open_dialog show_all]
		  ]]]
    
    [have save_button signal_connect 'clicked'
	  [funk []
		[terminal_format standard-terminal '\n  save button clicked.']
		[let [[save_dialog [gtk-file_chooser_dialog-new_for_file_save nil]]]
		  [set  save_dialog current_name   'Untitled Document']
		  [set  save_dialog current_folder [getenv 'HOME']]
		  [have save_dialog signal_connect 'response'
			[funk []
			      [have save_dialog destroy]]]
		  [have save_dialog show_all]
		  ]]]
    
    [have drawing_area expose_event-signal_connect
	  [funk [expose_event]
		[terminal_format standard-terminal '\nexpose event: ' expose_event]
		[have drawing_area draw_arc       nil  0  0 100 100 [* 64   0] [* 64  90]]
		[have drawing_area draw_arc       nil  0  0 100 100 [* 64 270] [* 64 -90]]
		[have drawing_area draw_rectangle nil  0  0 100 100]
		[have drawing_area draw_rectangle nil 45 45  10  10]]]
    
    [have win show_all]]]

