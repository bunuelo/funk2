'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'gtk_timeline'

[deframe gtk_timeline [frame] [timeline
			       
			       image
			       gtk_scrolled_window
			       gtk_image]
  [new [initial-timeline scale]
       [= timeline initial-timeline]
       
       [set timeline x_width 100.0]
       [= gtk_scrolled_window [gtk-scrolled_window-new]]
       [= image          [timeline-as-image timeline scale]]
       [= gtk_image      [gtk-image-new_from_image image]]
       [have gtk_scrolled_window add_with_viewport gtk_image]]
  
       nil]]

[deftypefunk gtk_timeline get widget []
  gtk_scrolled_window]

[deftypefunk gtk_timeline get width []
  [get image width]]

[deftypefunk gtk_timeline get height []
  [get image height]]

[deftypefunk gtk_timeline execute save_to_pdf [filename]
  [have timeline save_to_pdf filename]]


'gtk_timeline_window'

[deframe gtk_timeline_window [frame] [timeline
				      
				      window
				      vbox
				      menu_bar
				      file_menu_item
				      file_menu
				      file_export_menu_item
				      file_close_menu_item
				      
				      entry_hbox
				      width_label
				      width_entry
				      scale_label
				      scale_entry
				      
				      gtk_timeline
				      ]
  [new [initial-timeline]
       [= timeline initial-timeline]
       
       [= window                [gtk-window-new]]
       [= gtk_timeline          [new gtk_timeline initial-timeline 4]]
       [= vbox                  [gtk-vbox-new 0]]
       [= menu_bar              [gtk-menu_bar-new]]
       [= file_menu_item        [gtk-menu_item-new 'File']]
       [= file_menu             [gtk-menu-new]]
       [= file_export_menu_item [gtk-menu_item-new 'Export...']]
       [= file_close_menu_item  [gtk-menu_item-new 'Close']]
       [= entry_hbox            [gtk-hbox-new 0]]
       [= width_label           [gtk-label-new 'Width: ']]
       [= width_entry           [gtk-entry-new]] [set width_entry text '100']
       [= scale_label           [gtk-label-new 'Scale: ']]
       [= scale_entry           [gtk-entry-new]] [set scale_entry text '4']
       
       [have vbox pack_start menu_bar nil nil 0]
       [have menu_bar append file_menu_item]
       [set  file_menu_item submenu file_menu]
       [have file_menu append file_export_menu_item]
       [have file_menu append file_close_menu_item]
       
       [have file_export_menu_item signal_connect 'activate'
	     [funk []
		   [have this start_export_dialog]]
	     nil]
       [have file_close_menu_item signal_connect 'activate'
	     [funk []
		   [have this destroy]]
	     nil]
       
       [have entry_hbox pack_start width_label nil nil 0]
       [have entry_hbox pack_start width_entry nil nil 0]
       [have entry_hbox pack_start scale_label nil nil 0]
       [have entry_hbox pack_start scale_entry nil nil 0]
       
       [have scale_entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     [if [eq keyval GDK_Return]
			 [let [[scale_text [get scale_entry text]]]
			   [let [[new_scale [shelter [have scale_text read]]]]
			     [if [is-type `bug new_scale]
				 [prog [terminal_format standard-terminal '\ngtk_timeline_window: found bug while trying to read new scale, ' scale_text '.']
				       [set scale_entry text [get [get gtk_timeline scale] as-string]]]
			       [let [[new_scale_double [shelter [get new_scale as-double]]]]
				 [if [is-type `bug new_scale_double]
				     [prog [terminal_format standard-terminal '\ngtk_timeline_window: found bug while trying to convert new scale, ' new_scale ', to double.']
					   [set scale_entry text [get [get gtk_timeline scale] as-string]]]
				   
				   [have vbox remove gtk_timeline]
				   [= gtk_timeline [new gtk_timeline timeline new_scale_double]]
				   [have vbox pack_start gtk_timeline t t 0]
				   
				   ]]]]]]]]
	     nil]
       
       [have vbox pack_start entry_hbox nil nil 0]
       [have vbox pack_start gtk_timeline t t 0]
       
       [have window add vbox]
       [set  window size [+ [get gtk_timeline width] 24] [+ [get gtk_timeline height] 4]]
       
       nil]]

[deftypefunk gtk_timeline_window get widget []
  window]

[deftypefunk gtk_timeline_window execute destroy []
  [have window destroy]]

[deftypefunk gtk_timeline_window set title [title]
  [set window title title]]

[deftypefunk gtk_timeline_window set size [width height]
  [set window size width height]]

[deftypefunk gtk_timeline_window execute show_all []
  [have window show_all]]


[deftypefunk gtk_timeline_window execute start_export_dialog []
  [terminal_format standard-terminal '\ngtk_timeline_window: starting export dialog.']
  [let [[save_dialog [gtk-file_chooser_dialog-new_for_file_save nil]]]
    [have save_dialog connect_hide_on_delete]
    [have save_dialog add_file_filter_pattern 'Portable Document Files (*.pdf)' '*.pdf']
    [set  save_dialog current_name 'Untitled Timeline.pdf']
    [have save_dialog response_event-signal_connect
	  [funk [event_frame]
		[let [[response_id [have event_frame lookup `response_id]]]
		  [if [eq response_id GTK_RESPONSE_ACCEPT]
		      [let [[filename [get save_dialog filename]]]
			[have gtk_timeline save_to_pdf filename]
			[terminal_format standard-terminal '\ngtk_timeline_window: done exporting ' filename '.']
			]]]
		[have save_dialog destroy]]
	  nil]
    [have save_dialog show_all]
    ]]

