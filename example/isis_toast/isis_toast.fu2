'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'blockman'


[globalize arm_length 0.2]

[deframe          blockman [frame] [isis_world_client isis_agent_name agent time_in_seconds timer_fiber]]

[deftypeconstruct blockman [isis_world_client isis_agent_name]
  [set this isis_world_client isis_world_client]
  [set this isis_agent_name   isis_agent_name]
  [set this time_in_seconds   0]
  [let [[agent [new agent]]]
    [set this agent agent]
    [defagency   agent physical]
    [defresource agent physical turn_right [seconds]
      [format stdout '\n  turn_right']
      [have [have this lookup `isis_world_client] turn_right-start [have this lookup `isis_agent_name]]
      [print 'debug turn_right 00']
      [let [[start_seconds [have this lookup `time_in_seconds]]]
	[while [< [- [have this lookup `time_in_seconds] start_seconds] seconds]
	  `[print 'debug turn_right-start 0.5']
	  [millisleep 80]]
	[print 'debug turn_right-start 1']
	[isis-call [have this lookup `isis_world_client] turn_right-stop agent [have this lookup `isis_agent_name]]]]
    [defresource agent physical turn_left []
      [format stdout '\n  turn_left']
      [have isis_world_client turn_left-start isis_agent_name]
      [let [[start_seconds [have this lookup `time_in_seconds]]]
	[while [< [- [have this lookup `time_in_seconds] start_seconds] seconds]
	  [millisleep 80]]
	[have isis_world_client turn_left-stop isis_agent_name]]]
    [defresource agent physical move_forward []
      [format stdout '\n  move_forward']
      [have isis_world_client move_forward-start isis_agent_name]
      [let [[start_seconds [have this lookup `time_in_seconds]]]
	[while [< [- [have this lookup `time_in_seconds] start_seconds] seconds]
	  [millisleep 80]]
	[have isis_world_client move_forward-stop isis_agent_name]]]
    [defresource agent physical move_backward []
      [format stdout '\n  move_backward']
      [have isis_world_client move_backward-start isis_agent_name]
      [let [[start_seconds [have this lookup `time_in_seconds]]]
	[while [< [- [have this lookup `time_in_seconds] start_seconds] seconds]
	  [millisleep 80]]
	[have isis_world_client move_backward-stop isis_agent_name]]]
    [defresource agent physical move_to [my_object]
      [format stdout '\n  move_to ' object]
      '[call `center_on_object my_object]'
      [have [get this agency `physical] call `center_on_object my_object]
      [let [[distance [have [have [have [have this lookup `sensory_state] lookup `object] lookup my_object] lookup `distance]]]
	[while [> distance arm_length]
	  '[call `move_forward 0.1]
          [call `sense]'
          [have [get this agency `physical] call `move_forward 0.1]
	  [have [get this agency `physical] call `sense]
	  [= distance [have [have [have [have this lookup `sensory_state] lookup `object] lookup my_object] lookup `distance]]]]]  
    [defresource agent physical center_on_object [my_object]
      [print 'center_on_object']
      [deftypefunk blockman execute turn_left_and_right []
        '[call `sense]'
	[have [get this agency `physical] call `sense]
	[print '0']
        [let [[x_pos [have [have [have [have this lookup `sensory_state] lookup `object] lookup my_object] lookup `x_pos]]]
          [if [< 0.02 x_pos]
              [prog '[call turn_left 0.1]'
		    [print '0.1']
		    [have [get this agency `physical] call `turn_left 0.3]
		    [millisleep 100]
		    [print '1']
		    [have this turn_left_and_right]]
            [if [> [- 0 0.02] x_pos]
		[prog '[call turn_right 0.1]'
		      [print '0.2']
		      [have [get this agency `physical] call `turn_left 0.3]
		      [millisleep 100]
		      [print '2']
		      [have this turn_left_and_right]]
	      
	      [print '4']]]]]
      [print '3']
      [have this turn_left_and_right]]
    '[defresource agent physical seek_object [my_object]
      [deftypefunk blockman execute look_for_object [patience]
        [if [> 0 patience]
	  [have ]'
      

    '[defresource agent physical timer []
       [let [[time [have this lookup `time_in_seconds]]]
        [if [eq nil [have [get [get [get this agent] agency `physical] resource `timer] lookup `paused]]
            [prog [millisleep 100]
                  [= time [+ time 0.1]]
                  [set this time_in_seconds time]]
          nil]]            
      ]'

  ' [deftypefunk isis_world_client execute find_angular_speed [agent_name my_object]
     [globalize angular_speed 0]
     [let [[x [have [have [have [have this sense agent_name] lookup `object] lookup my_object] lookup `x_pos]]] 
       [call turn_left 0.1]  
       [let [[new_x [have [have [have [have this sense agent_name] lookup `object] lookup my_object] lookup `x_pos]]]
         [= angular_speed [/ [- new_x x] 0.5]]]]
      angular_speed]'
  
    [defresource agent physical sense []
      [format stdout '\n  sense']
      [have this add `sensory_state [isis-call isis_world_client sense agent isis_agent_name]]
      ]    
    ]
  this]

[deftypefunk blockman execute step_simulator [second]
  [set this timer_fiber [fiber [funk []
				     [let [[step_size 0.1]
					   [count     0]]
				       [while [< count second]
					 [isis-call [have this lookup `isis_world_client] meta_step seconds step_size]
					 [print 'debug 00']
					 [have this timer step_size]
					 [print 'debug 22']
					 [= count [+ count step_size]]
					 [sleep 1]]]
				     ]
			       nil]]
  nil]

'[deftypefunk blockman execute step_simulator [seconds blockman_name]
  [isis-call [have this lookup `isis_world_client] meta_step [seconds]]
  [have this timer]
  ]'


'[deftypefunk blockman execute timer []      
      [let [[time [have this lookup `time_in_seconds]]]
      [sleep 0.1]
      [= time [+ time 0.1]]
      [set this time_in_seconds time]]
      [have this timer]            
      ]'

[deftypefunk blockman execute timer [seconds]
  [have this add `time_in_seconds [+ [have this lookup `time_in_seconds] seconds]]]


'[deftypefunk blockman execute timer []      
      [let [[time [have this lookup `time_in_seconds]]]
        [if [eq nil [have [have [have [have this lookup `agent] lookup `physical] lookup `timer] lookup `paused]]
            [prog [sleep 0.1]
                  [= time [+ time 0.1]]
                  [set this time_in_seconds time]]
          nil]]
            
      ]'

[deftypefunk blockman get agency [name]
  [let [[agent [get this agent]]]
    [get agent agency name]]]

[deftypefunk blockman get resource [agency_name resource_name]
  [let [[agency [get this agency agency_name]]]
    [get agency resource resource_name]]]

[deftypefunk blockman execute step []
  [let [[agent [get this agent]]]
    [have agent call `physical `move_to 'knife']
    ]]


[defunk test-blockman []
  [let [[isis_world_client [new isis_world_client '18.111.5.100']]]
    [let [[ralph [new blockman isis_world_client 'Ralph']]]
      ralph]]]
[globalize ralph [test-blockman]]

'[have [get ralph resource `physical `move_forward] lookup `finished]'

[cause-define cause-outside_resource [funk [] [print 'p']]]
 `[have [get ralph agency `physical] call `turn_right 1]
