'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe isis_agent_body [agent_body] [says arm_length]
  [new [name]
       [construct agent_body name [new moral_compass]]
       [set this says       nil]
       [set this arm_length 3]
       this]]

[deftypefunk moral_compass get objects []
  [let [[reactive_sensory_sense [get [get this agency `learned_reactive `sensory] learned_reactive_sensory_sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      nil]]]

[deftypefunk isis_agent_body get objects []
  [get [get this mind] objects]]

[deftypefunk moral_compass get sense []
  [let [[reactive_sensory_sense [get [get this agency `learned_reactive `sensory] learned_reactive_sensory_sense]]]
    reactive_sensory_sense]]

[deftypefunk moral_compass get isis_object_frame []
  [let [[reactive_sensory_sense [get this sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      [frame]]]]

[deftypefunk moral_compass get objects []
  [get this isis_object_frame]]

[deframe visual_object [frame] [object_type isis_name retina_position_horizontal retina_position_vertical raw_isis_frame]
  [new [initial-isis_name initial-raw_isis_frame]
       [= isis_name                  initial-isis_name]
       [= raw_isis_frame             initial-raw_isis_frame]
       [= retina_position_horizontal [have raw_isis_frame lookup `x_pos]]
       [= retina_position_vertical   [have raw_isis_frame lookup `y_pos]]
       [= object_type                [get this calculate_object_type]]
       ]]

[deftypefunk visual_object get calculate_object_type []
  [let [[isis_name_as_string [get isis_name as-string]]]
    [let [[isis_name_split_by_plus [have isis_name_as_string split '+']]]
      [let [[isis_name_type [first isis_name_split_by_plus]]]
	[get isis_name_type as-symbol]]]]]

[deftypefunk moral_compass get visual_objects []
  [let [[visual_objects nil]]
    [let [[isis_object_frame [get this isis_object_frame]]]
      [if isis_object_frame
	  [mapc [funk [isis_name]
		      [let [[visual_object [new visual_object isis_name [have isis_object_frame lookup isis_name]]]]
			[= visual_objects [cons visual_object visual_objects]]]]
		[get isis_object_frame keys]]]]
    visual_objects]]

[deftypefunk moral_compass get visual_semantic_knowledge []
  [let [[semantic_knowledge_base [new semantic_knowledge_base]]]
    [let [[visual_objects [get this visual_objects]]]
      [let [[visual_object_frame [frame]]]
	[mapc [funk [object]
		    [let [[visual_object_semantic_frame [new visual_object_semantic_frame]]
			  [isis_name                    [get object isis_name]]]
		      [have visual_object_semantic_frame add_visual_object_name isis_name]
		      [have semantic_knowledge_base add_semantic_frame visual_object_semantic_frame]
		      [have visual_object_frame add isis_name visual_object_semantic_frame]]]
	      visual_objects]
	[let [[object_iter_one visual_objects]]
	  [while object_iter_one
	    [let [[object_one      [car object_iter_one]]
		  [object_iter_two [cdr object_iter_one]]]
	      [while object_iter_two
		[let [[object_two [car object_iter_two]]]
		  [if [> [get object_one retina_position_vertical]
			 [get object_two retina_position_vertical]]
		      [have knife_semantic_frame        add_preposition `on counter_semantic_frame]
		    
		]
	      [= object_iter_two [cdr object_iter_two]]]]
	  [= object_iter_one [cdr object_iter_one]]]]]
    semantic_knowledge_base]]

[deftypefunk isis_agent_body execute user_activate [layer_name agency_name resource_name :rest args]
  [set [get [get this mind] agency layer_name agency_name] user_activate_resource resource_name]
  [set [get [get this mind] agency layer_name agency_name] user_activate_args     args]]

'isis_world agent specific control functions'

[deftypefunk isis_agent_body execute sense_world             []              [have [get this physical_world] sense_world             [get this name]]]
[deftypefunk isis_agent_body execute turn_right-start        []              [have [get this physical_world] turn_right-start        [get this name]]]
[deftypefunk isis_agent_body execute turn_right-stop         []              [have [get this physical_world] turn_right-stop         [get this name]]]
[deftypefunk isis_agent_body execute turn_left-start         []              [have [get this physical_world] turn_left-start         [get this name]]]
[deftypefunk isis_agent_body execute turn_left-stop          []              [have [get this physical_world] turn_left-stop          [get this name]]]
[deftypefunk isis_agent_body execute move_forward-start      []              [have [get this physical_world] move_forward-start      [get this name]]]
[deftypefunk isis_agent_body execute move_forward-stop       []              [have [get this physical_world] move_forward-stop       [get this name]]]
[deftypefunk isis_agent_body execute drop_from_right_hand    []              [have [get this physical_world] drop_from_right_hand    [get this name]]]
[deftypefunk isis_agent_body execute drop_from_left_hand     []              [have [get this physical_world] drop_from_left_hand     [get this name]]]
[deftypefunk isis_agent_body execute pick_up_with_left_hand  [target]        [have [get this physical_world] pick_up_with_left_hand  [get this name] target]]
[deftypefunk isis_agent_body execute pick_up_with_right_hand [target]        [have [get this physical_world] pick_up_with_right_hand [get this name] target]]
[deftypefunk isis_agent_body execute use_right_hand          [target object] [have [get this physical_world] use_right_hand          [get this name] target object]]
[deftypefunk isis_agent_body execute use_left_hand           [target object] [have [get this physical_world] use_left_hand           [get this name] target object]]
[deftypefunk isis_agent_body execute say                     [message]       [have [get this physical_world] say                     [get this name] message]]

