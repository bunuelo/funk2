'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe isis_agent_body [moral_agent_body] [says
					     [arm_length 3.5]
					     sense_frame
					     [retina_image_sequence [new image_sequence nil]]]
  [new [physical_world name]
       [construct moral_agent_body physical_world name]
       [have this say '']
       this]]

[deftypefunk isis_agent_body execute user_activate [layer_name agency_name resource_name :rest args]
  [set [get [get this mind] agency layer_name agency_name] user_activate_resource resource_name]
  [set [get [get this mind] agency layer_name agency_name] user_activate_args     args]]

'isis_world agent specific control functions'

[deftypefunk isis_agent_body execute raw_sense_world         []              [have [get this physical_world] raw_sense_world         [get this name]]]
[deftypefunk isis_agent_body execute sense_retina_image      []              [have [get this physical_world] sense_retina_image      [get this name]]]
[deftypefunk isis_agent_body execute turn_right-start        []              [have [get this physical_world] turn_right-start        [get this name]]]
[deftypefunk isis_agent_body execute turn_right-stop         []              [have [get this physical_world] turn_right-stop         [get this name]]]
[deftypefunk isis_agent_body execute turn_left-start         []              [have [get this physical_world] turn_left-start         [get this name]]]
[deftypefunk isis_agent_body execute turn_left-stop          []              [have [get this physical_world] turn_left-stop          [get this name]]]
[deftypefunk isis_agent_body execute look_up-start           []              [have [get this physical_world] look_up-start           [get this name]]]
[deftypefunk isis_agent_body execute look_up-stop            []              [have [get this physical_world] look_up-stop            [get this name]]]
[deftypefunk isis_agent_body execute look_down-start         []              [have [get this physical_world] look_down-start         [get this name]]]
[deftypefunk isis_agent_body execute look_down-stop          []              [have [get this physical_world] look_down-stop          [get this name]]]
[deftypefunk isis_agent_body execute move_forward-start      []              [have [get this physical_world] move_forward-start      [get this name]]]
[deftypefunk isis_agent_body execute move_forward-stop       []              [have [get this physical_world] move_forward-stop       [get this name]]]
[deftypefunk isis_agent_body execute move_backward-start     []              [have [get this physical_world] move_backward-start     [get this name]]]
[deftypefunk isis_agent_body execute move_backward-stop      []              [have [get this physical_world] move_backward-stop      [get this name]]]
[deftypefunk isis_agent_body execute drop_from_right_hand    []              [have [get this physical_world] drop_from_right_hand    [get this name]]]
[deftypefunk isis_agent_body execute drop_from_left_hand     []              [have [get this physical_world] drop_from_left_hand     [get this name]]]
[deftypefunk isis_agent_body execute pick_up_with_left_hand  [target]        [have [get this physical_world] pick_up_with_left_hand  [get this name] target]]
[deftypefunk isis_agent_body execute pick_up_with_right_hand [target]        [have [get this physical_world] pick_up_with_right_hand [get this name] target]]
[deftypefunk isis_agent_body execute use_right_hand          [target action] [have [get this physical_world] use_right_hand          [get this name] target action]]
[deftypefunk isis_agent_body execute use_left_hand           [target action] [have [get this physical_world] use_left_hand           [get this name] target action]]
[deftypefunk isis_agent_body execute say                     [message]       [have [get this physical_world] say                     [get this name] message]]

[deftypefunk isis_agent_body execute sense_funk2_retina_image []
  [let [[retina_image_frame [have this sense_retina_image]]]
    [let [[width    [have retina_image_frame lookup `width]]
	  [height   [have retina_image_frame lookup `height]]
	  [rgb_data [have retina_image_frame lookup `rgb_data]]]
      [image-new_from_rgb_data width height rgb_data]]]]

[deftypefunk isis_agent_body execute sense_world []
  sense_frame]

[deftypefunk isis_agent_body execute update_after_step_simulation []
  [let [[image [have this sense_funk2_retina_image]]]
    [have retina_image_sequence add_image_to_end image]
    [= sense_frame [have this raw_sense_world]]]]

[deftypefunk isis_agent_body get objects []
  [print 'This funktion is deprecated.']
  [get [get this mind] objects]]

[deftypefunk isis_agent_body execute sense_visual_objects []
  [let [[visual_objects nil]]
    [let [[isis_sense_frame [have this sense_world]]]
      [if isis_sense_frame
	  [prog [let [[isis_object_frame [have isis_sense_frame lookup `objects]]]
		  [if isis_object_frame
		      [mapc [funk [isis_name]
				  [let [[visual_object [new isis_visual_object isis_name isis_sense_frame [have isis_object_frame lookup isis_name]]]]
				    [= visual_objects [cons visual_object visual_objects]]]]
			    [get isis_object_frame keys]]]]
		[let [[isis_agent_frame [have isis_sense_frame lookup `agents]]]
		  [if isis_agent_frame
		      [mapc [funk [isis_name]
				  [let [[visual_agent [new isis_visual_agent isis_name isis_sense_frame [have isis_agent_frame lookup isis_name]]]]
				    [= visual_objects [cons visual_agent visual_objects]]]]
			    [get isis_agent_frame keys]]]]]]
      visual_objects]]]

[deftypefunk isis_agent_body execute sense_right_hand_object_name []
  [let [[isis_sense_frame [have this sense_world]]]
    [if isis_sense_frame
	[let [[position_frame [have isis_sense_frame lookup `position]]]
	  [let [[right_hand_object_name_string [have position_frame lookup `in_right_hand]]]
	    [let [[right_hand_object_name [if [equals '' right_hand_object_name_string]
					     nil
					   [get right_hand_object_name_string as-symbol]]]]
	      right_hand_object_name]]]]]]

[deftypefunk isis_agent_body execute sense_left_hand_object_name []
  [let [[isis_sense_frame [have this sense_world]]]
    [if isis_sense_frame
	[let [[position_frame [have isis_sense_frame lookup `position]]]
	  [let [[left_hand_object_name_string [have position_frame lookup `in_left_hand]]]
	    [let [[left_hand_object_name [if [equals '' left_hand_object_name_string]
					     nil
					   [get left_hand_object_name_string as-symbol]]]]
	      left_hand_object_name]]]]]]

[deftypefunk isis_agent_body get retina_image []
  [let [[retina_image_sequence-length [get retina_image_sequence length]]]
    [if [> retina_image_sequence-length 0]
	[get retina_image_sequence elt [- retina_image_sequence-length 1]]
      nil]]]

[deftypefunk isis_agent_body execute sense_proprioceptual_frame []
  [let [[isis_sense_frame [have this sense_world]]]
    [if isis_sense_frame
	[let [[sense_position_frame [have isis_sense_frame lookup `position]]]
	  [let [[left_hand_xyzhpr  [have sense_position_frame lookup `left_hand_pos]]
		[right_hand_xyzhpr [have sense_position_frame lookup `right_hand_pos]]
		[body_xyzhpr       [have sense_position_frame lookup `body_pos]]
		[neck_xyzhpr       [have sense_position_frame lookup `neck_pos]]]
	    [frame left_hand  [new moral_compass_proprioceptual_object
				   `left_hand
				   [new moral_compass_proprioceptual_position
					[get left_hand_xyzhpr elt 0]
					[get left_hand_xyzhpr elt 1]
					[get left_hand_xyzhpr elt 2]]
				   [new moral_compass_proprioceptual_orientation
					[get left_hand_xyzhpr elt 3]
					[get left_hand_xyzhpr elt 4]
					[get left_hand_xyzhpr elt 5]]]
		   right_hand [new moral_compass_proprioceptual_object
				   `right_hand
				   [new moral_compass_proprioceptual_position
					[get right_hand_xyzhpr elt 0]
					[get right_hand_xyzhpr elt 1]
					[get right_hand_xyzhpr elt 2]]
				   [new moral_compass_proprioceptual_orientation
					[get right_hand_xyzhpr elt 3]
					[get right_hand_xyzhpr elt 4]
					[get right_hand_xyzhpr elt 5]]]
		   body       [new moral_compass_proprioceptual_object
				   `body
				   [new moral_compass_proprioceptual_position
					[get body_xyzhpr elt 0]
					[get body_xyzhpr elt 1]
					[get body_xyzhpr elt 2]]
				   [new moral_compass_proprioceptual_orientation
					[get body_xyzhpr elt 3]
					[get body_xyzhpr elt 4]
					[get body_xyzhpr elt 5]]]
		   neck       [new moral_compass_proprioceptual_object
				   `neck
				   [new moral_compass_proprioceptual_position
					[get neck_xyzhpr elt 0]
					[get neck_xyzhpr elt 1]
					[get neck_xyzhpr elt 2]]
				   [new moral_compass_proprioceptual_orientation
					[get neck_xyzhpr elt 3]
					[get neck_xyzhpr elt 4]
					[get neck_xyzhpr elt 5]]]
		   ]]]]]]

[deftypefunk isis_agent_body execute sense_perception []
  [let [[retina_image           [get  this retina_image]]
	[visual_objects         [have this sense_visual_objects]]
	[left_hand_object_name  [have this sense_left_hand_object_name]]
	[right_hand_object_name [have this sense_right_hand_object_name]]
	[proprioceptual_frame   [have this sense_proprioceptual_frame]]]
    [if proprioceptual_frame
	[new moral_compass_perception
	     retina_image
	     visual_objects
	     left_hand_object_name
	     right_hand_object_name
	     proprioceptual_frame]]]]

