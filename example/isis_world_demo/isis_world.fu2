'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe isis_world [physical_world] [[initialize_events               [new redblacktree [funk [event] [have event lookup `time]] &<]]
				      [step_mutex                      [new mutex]]
				      client
				      sense_agent_frame
				      [overview_image_sequence_enabled nil]
				      [overview_image_sequence         [new image_sequence nil]]]
  [new [client]
       [construct physical_world]
       [set this client client]
       ]]

[deftypefunk isis_world execute initialize_simulation []
  [terminal_format standard-terminal '\nisis_world: initializing simulation.']
  [have initialize_events insert [frame time [time] event_type `reset         result [isis-call client meta_reset]]]
  [have initialize_events insert [frame time [time] event_type `scenario_list result [isis-call client meta_list_scenarios]]]
  [have initialize_events insert [frame time [time] event_type `load_scenario result [isis-call client meta_load_scenario scenario 'make_toast.py']]]
  [have initialize_events insert [frame time [time] event_type `task_list     result [isis-call client meta_list_tasks]]]
  [have initialize_events insert [frame time [time] event_type `load_task     result [isis-call client meta_load_task task 'task_toaster_in_view']]]
  [have initialize_events insert [frame time [time] event_type `train         result [isis-call client meta_train]]]
  [have initialize_events insert [frame time [time] event_type `pause         result [isis-call client meta_pause]]]
  [let [[agent_names [isis-call client meta_list_agents]]]
    [have initialize_events insert [frame time [time] event_type `list_agents   result agent_names]]
    [have initialize_events insert [frame time [time] event_type `step          result [have this raw_step_simulation 1.0]]]
    [if [is-type `array agent_names]
	[mapc [funk [agent_name]
		    [have initialize_events insert [frame time [time] event_type `agent_say result [isis-call client say agent agent_name message '']]]]
	      [get agent_names as-conslist]]]
    [terminal_format standard-terminal '\nisis_world: simulation initialization complete.']
    ]]


[deftypefunk isis_world execute print_initialize_events []
  [terminal_format standard-terminal '\nisis_world initialize_events:']
  [mapc [funk [event]
	      [terminal_format standard-terminal '\n  ' event]]
	[get initialize_events leaves]]]

[deftypefunk isis_world execute user_activate [agent_name layer_name agency_name resource_name :rest args]
  [set [get [get this agent_mind agent_name] agency layer_name agency_name] user_activate_resource resource_name]
  [set [get [get this agent_mimd agent_name] agency layer_name agency_name] user_activate_args     args]]

[deftypefunk isis_world execute raw_sense_world [agent_name]
  [let [[sense [isis-call [get this client] sense agent agent_name]]]
    sense]]

[deftypefunk isis_world get screenshot []
  [let [[screenshot_frame [isis-call [get this client] meta_screenshot max_x 320 max_y 240 x_offset 0 y_offset 0]]]
    [let [[width            [have screenshot_frame lookup `width]]
	  [height           [have screenshot_frame lookup `height]]
	  [rgb_data         [have screenshot_frame lookup `rgb_data]]
	  [reduction_factor [have screenshot_frame lookup `reduction_factor]]]
      [let [[actual_width  [* reduction_factor width]]
	    [actual_height [* reduction_factor height]]]
	[let [[initial_image [image-new_from_rgb_data width height rgb_data]]]
	  [if [== reduction_factor 1]
	      initial_image
	    [let [[actual_image [new image actual_width actual_height nil]]]
	      [have actual_image write_reduction_image_part initial_image reduction_factor 0 0]
	      [dotimes [x_offset reduction_factor]
		[dotimes [y_offset reduction_factor]
		  [if [or [not [== x_offset 0]] [not [== y_offset 0]]]
		      [let [[reduced_screenshot_frame [isis-call [get this client] meta_screenshot max_x 320 max_y 240 x_offset x_offset y_offset y_offset]]]
			[let [[reduced_width            [have reduced_screenshot_frame lookup `width]]
			      [reduced_height           [have reduced_screenshot_frame lookup `height]]
			      [reduced_rgb_data         [have reduced_screenshot_frame lookup `rgb_data]]
			      [reduced_reduction_factor [have reduced_screenshot_frame lookup `reduction_factor]]]
			  [let [[reduced_image [image-new_from_rgb_data reduced_width reduced_height reduced_rgb_data]]]
			    [have actual_image write_reduction_image_part reduced_image reduction_factor x_offset y_offset]]]]]]]
	      actual_image]]]]]]]

[deftypefunk isis_world execute update_overview_image_sequence []
  [let [[image [get this screenshot]]]
    [have overview_image_sequence add_image_to_end image]]]

[deftypefunk isis_world execute update_after_step_simulation []
  [if overview_image_sequence_enabled
      [have this update_overview_image_sequence]]
  [mapc [funk [agent_name]
	      [let [[agent_body [get this agent_body agent_name]]]
		[have agent_body update_after_step_simulation]]]
	[get this agent_names]]]

[deftypefunk isis_world execute raw_step_simulation [seconds]
  [isis-call [get this client] meta_step seconds seconds]
  [while [!= [isis-call [get this client] meta_physics_active] 0]
    [millisleep 100]]]

[deftypefunk isis_world execute step_simulation [seconds]
  [have step_mutex lock]
  [let [[maximum_tick_size 0.025]]
    [let [[tick [if [> seconds maximum_tick_size]
		    maximum_tick_size
		  seconds]]]
      [let [[subseconds 0.0]]
	[while [< subseconds seconds]
	  [have this raw_step_simulation tick]
	  [have this update_after_step_simulation]
	  [= subseconds [+ subseconds tick]]]]]]
  [have this step_physical_world]
  [have step_mutex unlock]]

[deftypefunk isis_world get simulator_is_stepping []
  [get step_mutex is_locked]]

[deftypefunk isis_world set all_cameras_enabled [enabled]
  [= overview_image_sequence_enabled enabled]
  [mapc [funk [agent_name]
	      [let [[agent_body [get this agent_body agent_name]]]
		[set agent_body all_cameras_enabled enabled]]]
	[get this agent_names]]]

[deftypefunk isis_world execute normal_step []
  [have this step_simulation 0.15]]

[deftypefunk isis_world execute mini_step []
  [have this step_simulation 0.02]]

[deftypefunk isis_world get all_objects_summary []
  [isis-call [get this client] meta_list_objects]]


'isis_world agent specific control functions'

[deftypefunk isis_world execute turn_right-start        [agent degrees_per_second] [isis-call [get this client] turn_right-start        agent agent speed degrees_per_second]]
[deftypefunk isis_world execute turn_right-stop         [agent]                    [isis-call [get this client] turn_right-stop         agent agent ]]
[deftypefunk isis_world execute turn_left-start         [agent degrees_per_second] [isis-call [get this client] turn_left-start         agent agent speed degrees_per_second]]
[deftypefunk isis_world execute turn_left-stop          [agent]                    [isis-call [get this client] turn_left-stop          agent agent]]
[deftypefunk isis_world execute look_right-start        [agent degrees_per_second] [isis-call [get this client] look_right-start        agent agent speed degrees_per_second]]
[deftypefunk isis_world execute look_right-stop         [agent]                    [isis-call [get this client] look_right-stop         agent agent]]
[deftypefunk isis_world execute look_left-start         [agent degrees_per_second] [isis-call [get this client] look_left-start         agent agent speed degrees_per_second]]
[deftypefunk isis_world execute look_left-stop          [agent]                    [isis-call [get this client] look_left-stop          agent agent]]
[deftypefunk isis_world execute look_up-start           [agent degrees_per_second] [isis-call [get this client] look_up-start           agent agent speed degrees_per_second]]
[deftypefunk isis_world execute look_up-stop            [agent]                    [isis-call [get this client] look_up-stop            agent agent]]
[deftypefunk isis_world execute look_down-start         [agent degrees_per_second] [isis-call [get this client] look_down-start         agent agent speed degrees_per_second]]
[deftypefunk isis_world execute look_down-stop          [agent]                    [isis-call [get this client] look_down-stop          agent agent]]
[deftypefunk isis_world execute move_forward-start      [agent meters_per_second]  [isis-call [get this client] move_forward-start      agent agent speed meters_per_second]]
[deftypefunk isis_world execute move_forward-stop       [agent]                    [isis-call [get this client] move_forward-stop       agent agent]]
[deftypefunk isis_world execute move_backward-start     [agent meters_per_second]  [isis-call [get this client] move_backward-start     agent agent speed meters_per_second]]
[deftypefunk isis_world execute move_backward-stop      [agent]                    [isis-call [get this client] move_backward-stop      agent agent]]
[deftypefunk isis_world execute drop_from_right_hand    [agent]                    [isis-call [get this client] drop_from_right_hand    agent agent]]
[deftypefunk isis_world execute drop_from_left_hand     [agent]                    [isis-call [get this client] drop_from_left_hand     agent agent]]
[deftypefunk isis_world execute pick_up_with_left_hand  [agent target]             [isis-call [get this client] pick_up_with_left_hand  agent agent target target]]
[deftypefunk isis_world execute pick_up_with_right_hand [agent target]             [isis-call [get this client] pick_up_with_right_hand agent agent target target]]
[deftypefunk isis_world execute use_right_hand          [agent target actions]     [isis-call [get this client] use_right_hand          agent agent target target action actions]]
[deftypefunk isis_world execute use_left_hand           [agent target actions]     [isis-call [get this client] use_left_hand           agent agent target target action actions]]
[deftypefunk isis_world execute open_fridge             [agent]                    [isis-call [get this client] open_fridge             agent agent]]
[deftypefunk isis_world execute say                     [agent message]            [isis-call [get this client] say                     agent agent message message]]
[deftypefunk isis_world execute sense_retina_image      [agent]                    [isis-call [get this client] sense_retina_image      agent agent max_x 320 max_y 240 x_offset 0 y_offset 0]]


[deftypefunk isis_world get as-lickable_frame []
  [frame client                     client
	 overview_image_sequence    overview_image_sequence
	 agent_body_lickable_frames [mapcar [funk [agent_body]
						  [get agent_body as-lickable_frame]]
					    [get this agent_bodies]]
	 ]]

[deftypefunk isis_world get as-chunk []
  [get [lick-new_from_object [get this as-lickable_frame]] as-chunk]]

[defunk isis_world-new_from_lickable_frame [lickable_frame]
  [let [[this [new isis_world [have lickable_frame lookup `client]]]]
    [set this overview_image_sequence [have lickable_frame lookup `overview_image_sequence]]
    [mapc [funk [agent_body_lickable_frame]
		[have this add_agent_body [isis_agent_body-new_from_lickable_frame this agent_body_lickable_frame]]]
	  [have lickable_frame lookup `agent_body_lickable_frames]]
    this]]

[defunk isis_world-new_from_chunk [chunk]
  [let [[lickable_frame [have [get chunk as-lick] unlick]]]
    [isis_world-new_from_lickable_frame lickable_frame]]]

