'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe ralph_body [isis_agent_body] []
  [new []
       [construct isis_agent_body `Ralph]
       this]]

[deframe lauren_body [isis_agent_body] []
  [new []
       [construct isis_agent_body `Lauren]
       this]]


[defunk isis_world-initialize [hostname]
  [cause-define cause-name `isis_world-initialize]
  [print 'destroying old isis_world.']
  [shelter [have isis_world destroy]]
  [print 'creating new client.']
  [let [[client [new isis_world_client hostname]]]
    [print 'creating new isis_world.']
    [let [[isis_world [new isis_world client]]]
      [print 'creating new ralph agent.']
      [have isis_world add_agent_body [new ralph_body]]
      [print 'creating new lauren agent.']
      [have isis_world add_agent_body [new lauren_body]]
      
      [cause-define cause-resource  [resource funk-user [] [print 'Warning: Funk user resource should not be activated.']]]
      [cause-define cause-time_step [get isis_world time_step]]
      
      [mind-activate [get isis_world agent_mind `Lauren] learned_reactive language    speak_language `[close the refrigerator door]]
      [mind-activate [get isis_world agent_mind `Lauren] builtin_reactive sensory     continuous_sensing]
      [mind-activate [get isis_world agent_mind `Lauren] builtin_reactive neural_plug activate_resource]
      
      [mind-activate [get isis_world agent_mind `Ralph] builtin_reactive sensory     continuous_sensing]
      [mind-activate [get isis_world agent_mind `Ralph] builtin_reactive neural_plug activate_resource]
      
      [globalize isis_world isis_world]
      [terminal_format standard-terminal '\nA new ' `isis_world ' object has been created in the global ' `isis_world ' variable!']
      
      'success']]]

[defunk test-step []
  [globalize step_fiber [fiber [funk [] [print [have isis_world normal_step]]]
			       nil]]]
[defunk test-mini []
  [globalize step_fiber [fiber [funk [] [print [have isis_world mini_step]]]
			       nil]]]


