
'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe isis_agent [agent_body] [says arm_length]
  [new [name]
       [construct agent_body name [new moral_compass]]
       [set this says       nil]
       [set this arm_length 2]
       this]]

[deftypefunk isis_agent get objects []
  [let [[reactive_sensory_sense [get this reactive_sensory_sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      nil]]]

[deftypefunk isis_agent execute user_activate [layer_name agency_name resource_name :rest args]
  [set [get [get this mind] agency layer_name agency_name] user_activate_resource resource_name]
  [set [get [get this mind] agency layer_name agency_name] user_activate_args     args]]

[deftypefunk isis_agent execute sense_world []
  [have [get this physical_world] sense_world [get this name]]]


[deframe isis_world [physical_world] [client]
  [new [client]
       [construct physical_world]
       [set this client client]
       [let [[scenario_list        [isis-call client meta_list_scenarios]]
	     [load_scenario_result [isis-call client meta_load_scenario scenario 'make_toast']]
	     [task_list            [isis-call client meta_list_tasks]]
	     [load_task_result     [isis-call client meta_load_task task 'toaster is in view']]
	     [train_result         [isis-call client meta_train]]
	     [pause_result         [isis-call client meta_pause]]]
	 [terminal_format standard-terminal '\n  scenarios...................: ' scenario_list]
	 [terminal_format standard-terminal '\n  load make_toast scenario....: ' load_scenario_result]
	 [terminal_format standard-terminal '\n  tasks.......................: ' task_list]
	 [terminal_format standard-terminal '\n  load toaster is in view task: ' load_task_result]
	 [terminal_format standard-terminal '\n  train.......................: ' train_result]
	 [terminal_format standard-terminal '\n  pause.......................: ' pause_result]
	 ]
       this]]

[deftypefunk isis_world execute user_activate [agent_name layer_name agency_name resource_name :rest args]
  [set [get [get this agent_mind agent_name] agency layer_name agency_name] user_activate_resource resource_name]
  [set [get [get this agent_mimd agent_name] agency layer_name agency_name] user_activate_args     args]]

[deftypefunk isis_world get agent_says [agent_name]
  [get [get this agent_body agent_name] says]]

[deftypefunk isis_world execute sense_world [agent_name]
  [let [[sense [isis-call [get this client] sense agent agent_name]]]
    `[let [[agent_frame [frame]]]
       [mapc [funk [sense_agent_name]
		   [if [not [eq agent_name sense_agent_name]]
		       [have agent_frame add sense_agent_name [frame distance       15.0
								     recent_actions nil
								     says           [get this agent_says sense_agent_name]]]]]
	     [get this agent_names]]
       [have sense add `agents agent_frame]]
     sense]]

[deftypefunk isis_world execute step_simulation []
  [isis-call [get this client] meta_step seconds 0.15]
  [have this step_physical_world]]

[deftypefunk isis_world execute mini_step []
  [isis-call [get this client] meta_step seconds 0.02]
  [have this step_physical_world]]


[deframe ralph_agent [isis_agent] []
  [new []
       [construct isis_agent `Ralph]
       this]]

[deframe lauren_agent [isis_agent] []
  [new []
       [construct isis_agent `Lauren]
       this]]


[defunk isis_world-initialize [hostname]
  [cause-define cause-name `isis_world-initialize]
  [print 'destroying old isis_world.']
  [shelter [have isis_world destroy]]
  [print 'creating new client.']
  [let [[client [new isis_world_client hostname]]]
    [print 'creating new isis_world.']
    [let [[isis_world [new isis_world client]]]
      [print 'creating new ralph agent.']
      [have isis_world add_agent_body [new ralph_agent]]
      [print 'creating new lauren agent.']
      [have isis_world add_agent_body [new lauren_agent]]
      
      [globalize isis_world isis_world]
      
      [cause-define cause-resource  [resource funk-user [] [print 'Warning: Funk user resource should not be activated.']]]
      [cause-define cause-time_step [get isis_world time_step]]
      
      [mind-activate [get isis_world agent_mind `Lauren] reactive speech   say                'Bad Ralph!']
      [mind-activate [get isis_world agent_mind `Lauren] reactive sensory  continuous_sensing]
      [mind-activate [get isis_world agent_mind `Lauren] reactive physical funk_user]
      
      [mind-activate [get isis_world agent_mind `Ralph] reactive sensory  continuous_sensing]
      [mind-activate [get isis_world agent_mind `Ralph] reactive physical funk_user]
      
      [terminal_format standard-terminal '\nA new ' `isis_world ' object has been created in the global ' `isis_world ' variable!']

      `[have [get isis_world agent `Ralph] find_knife]
      `[have [get isis_world agent `Ralph] find_loaf]
      `[have [get isis_world agent `Ralph] find_fridge]
      
      'success']]]

[defunk test-step []
  [globalize step_fiber [fiber [funk [] [print [have isis_world step_simulation]]]
			       nil]]]
[defunk test-mini []
  [globalize step_fiber [fiber [funk [] [print [have isis_world mini_step]]]
			       nil]]]


