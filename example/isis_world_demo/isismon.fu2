'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe isismon [frame] [isis_world
			  [initialize_mutex [new mutex]]
			  [done             nil]
			  fiber
			  window
			  vbox
			  menu_bar
			  file_menu_item
			  file_menu
			  file_exit_menu_item]
  [new [isis_world_object isis_world_object_description]
       [= isis_world isis_world_object]
       [have initialize_mutex lock]
       [= fiber [fiber [funk []
			     [= window              [gtk-window-new]]
			     [set window title      [format nil 'isismon - ' isis_world_object_description]]
			     [= vbox                [gtk-vbox-new 2]]
			     [= menu_bar            [gtk-menu_bar-new]]
			     [= file_menu_item      [gtk-menu_item-new 'File']]
			     [= file_menu           [gtk-menu-new]]
			     [= file_exit_menu_item [gtk-menu_item-new 'Exit']]
			     [have menu_bar append  file_menu_item]
			     [have file_menu append file_exit_menu_item]
			     [set file_menu_item submenu file_menu]
			     [have vbox pack_start menu_bar nil nil 0]
			     [have window add vbox]
			     
			     [have file_exit_menu_item signal_connect 'activate'
				   [funk []
					 [terminal_format standard-terminal '\n\nisismon exiting.\n']
					 [= done t]]
				   nil]
			     
			     [have window show_all]
			     [have initialize_mutex unlock]
			     [while [not done]
			       [yield]]]
		       nil]]
       [have initialize_mutex lock]
       nil]]

[defmetro isismon [:rest args]
  [let [[isis_worlds                  nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'isismon: compiling isis_world command line argument, ' arg '.\n']
					       [= isis_worlds [cons arg isis_worlds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length isis_worlds] 1]
	       [prog [format stdout 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied ' [simple_length isis_worlds] ': ' isis_worlds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length isis_worlds] 0]
	       [prog [format stdout 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'ISISMON(1)'
		'\n'   'NAME'
		'\n'   '       isismon - monitor and control an isis_world experiment.'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       isismon -h <isis_world>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The isismon program provides dynamic real-time monitoring of a running isis_world experiment.'
		'\n'   '']
      [let [[isis_world [first isis_worlds]]]
	`[prog [new isismon ,isis_world [quote ,isis_world]]
	       nil]]]]]


