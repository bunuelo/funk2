'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe isismon_agent [frame] [isis_agent
				frame
				vbox
				label
				entry
				button_hbox
				mindmon_button]
  [new [initial_isis_agent]
       [= isis_agent initial_isis_agent]
       [= frame [gtk-frame-new [format nil 'isis_agent - ' [get isis_agent name]]]]
       [= vbox  [gtk-vbox-new 2]]
       [= label [gtk-label-new '']]
       [= entry [gtk-entry-new]]
       
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     `[terminal_format standard-terminal '\nkey event: ' key_event]
		     [if [eq keyval GDK_Return]
			 [let [[text [get entry text]]]
			   [set entry text '']
			   [let [[strings [have text split ' ']]]
			     [let [[reverse_symbols nil]]
			       [mapc [funk [string]
					   [if [not [equals string '']]
					       [= reverse_symbols [cons [get string as-symbol] reverse_symbols]]]]
				     strings]
			       [let [[symbols [reverse reverse_symbols]]]
				 [terminal_format standard-terminal '\nSending symbols, ' symbols ', through ' [get isis_agent name] '\'s neural plug.']
				 [let [[activate_resource [get [get isis_agent mind] resource `reactive `neural_plug `activate_resource]]]
				   [have activate_resource command `reactive `language `hear_language_from_agent `SponsorDemo symbols]
				   [terminal_format standard-terminal '\nDone sending symbols to ' [get isis_agent name] '.']
				   ]]]]]]]]]
       
       [have vbox pack_start label t t 0]
       [have vbox pack_start entry nil nil 0]
       
       [= button_hbox    [gtk-hbox-new 2]]
       [= mindmon_button [gtk-button-new_with_label 'MindMon']]
       [have mindmon_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching MindMon to monitor ' [get this name] '\'s mind.']
		   [mindmon [get isis_agent mind]]]]
       
       [have button_hbox pack_start mindmon_button nil nil 0]
       
       [have vbox pack_start button_hbox nil nil 0]
       
       [have frame add vbox]
       nil]]

[deftypefunk isismon_agent get name []
  [get isis_agent name]]

[deftypefunk isismon_agent get widget []
  frame]

[deframe isismon [frame] [isis_world
			  [initialize_mutex [new mutex]]
			  [done             nil]
			  fiber
			  
			  window
			  vbox
			  menu_bar
			  file_menu_item
			  file_menu
			  file_exit_menu_item
			  agent_hbox
			  controller_hbox
			  play_button
			  stop_button
			  
			  [agent_frame [frame]]
			  
			  [simulation_playing           nil]
			  [tick                         0]
			  [last_stepped_simulation_tick -1000]
			  ]
  [new [isis_world_object isis_world_object_description]
       [= isis_world isis_world_object]
       [have initialize_mutex lock]
       [= fiber [fiber [funk []
			     [= window              [gtk-window-new]]
			     [set window title      [format nil 'isismon - ' isis_world_object_description]]
			     [= vbox                [gtk-vbox-new 2]]
			     [= menu_bar            [gtk-menu_bar-new]]
			     [have vbox pack_start menu_bar nil nil 0]
			     [= file_menu_item      [gtk-menu_item-new 'File']]
			     [= file_menu           [gtk-menu-new]]
			     [= file_exit_menu_item [gtk-menu_item-new 'Exit']]
			     [have menu_bar append  file_menu_item]
			     [have file_menu append file_exit_menu_item]
			     [set file_menu_item submenu file_menu]
			     [have window add vbox]
			     
			     [have file_exit_menu_item signal_connect 'activate'
				   [funk []
					 [= done t]]
				   nil]
			     
			     [= agent_hbox [gtk-hbox-new 2]]
			     [have vbox pack_start agent_hbox nil nil 0]
			     
			     [have this add_agent [get isis_world agent_body `Ralph]]
			     [have this add_agent [get isis_world agent_body `Lauren]]
			     
			     [= controller_hbox [gtk-hbox-new 2]]
			     [have vbox pack_start controller_hbox nil nil 0]
			     
			     [= play_button [gtk-button-new_with_label 'Play']]
			     [= stop_button [gtk-button-new_with_label 'Stop']]
			     [have controller_hbox pack_start play_button nil nil 0]
			     [have controller_hbox pack_start stop_button nil nil 0]
			     
			     [have play_button signal_connect 'clicked'
				   [funk []
					 [print 'Playing']
					 [= simulation_playing t]]]
			     [have stop_button signal_connect 'clicked'
				   [funk []
					 [print 'Stopped']
					 [= simulation_playing nil]]]
			     
			     [have window connect_hide_on_delete]
			     [have window show_all]
			     [have initialize_mutex unlock]
			     
			     [while [not done]
			       [if [not [get window visible]]
				   [= done t]]
			       [if [and simulation_playing [> [- tick last_stepped_simulation_tick] 5]]
				   [prog [test-step]
					 [= last_stepped_simulation_tick tick]]]
			       [sleep 1]
			       [= tick [+ tick 1]]
			       ]
			     `[terminal_format standard-terminal '\n\nisismon exiting.\n']
			     [have window destroy]]
		       nil]]
       [have initialize_mutex lock]
       nil]]

[deftypefunk isismon execute add_agent [agent]
  [let [[isismon_agent [new isismon_agent agent]]]
    [have agent_frame add [get isismon_agent name] isismon_agent]
    [have agent_hbox pack_start isismon_agent nil nil 0]]]


[defmetro isismon [:rest args]
  [let [[isis_worlds                  nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'isismon: compiling isis_world command line argument, ' arg '.\n']
					       [= isis_worlds [cons arg isis_worlds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length isis_worlds] 1]
	       [prog [format stdout 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied ' [simple_length isis_worlds] ': ' isis_worlds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length isis_worlds] 0]
	       [prog [format stdout 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'ISISMON(1)'
		'\n'   'NAME'
		'\n'   '       isismon - monitor and control an isis_world experiment.'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       isismon -h <isis_world>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The isismon program provides dynamic real-time monitoring of a running isis_world experiment.'
		'\n'   '']
      [let [[isis_world [first isis_worlds]]]
	`[prog [new isismon ,isis_world [quote ,isis_world]]
	       nil]]]]]


