'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe isismon_agent_resource_activator [frame] [isismon_agent
						   
						   window
						   vbox
						   menu_bar
						   file_menu_item
						   file_menu
						   file_exit_menu_item
						   
						   turn_right_start_resource__hbox
						   turn_right_start_resource__button
						   turn_right_stop_resource__hbox
						   turn_right_stop_resource__button
						   turn_left_start_resource__hbox
						   turn_left_start_resource__button
						   turn_left_stop_resource__hbox
						   turn_left_stop_resource__button
						   look_up_start_resource__hbox
						   look_up_start_resource__button
						   look_up_stop_resource__hbox
						   look_up_stop_resource__button
						   look_down_start_resource__hbox
						   look_down_start_resource__button
						   look_down_stop_resource__hbox
						   look_down_stop_resource__button
						   move_forward_start_resource__hbox
						   move_forward_start_resource__button
						   move_forward_stop_resource__hbox
						   move_forward_stop_resource__button
						   move_backward_start_resource__hbox
						   move_backward_start_resource__button
						   move_backward_stop_resource__hbox
						   move_backward_stop_resource__button
						   drop_from_right_hand_resource__hbox
						   drop_from_right_hand_resource__button
						   drop_from_left_hand_resource__hbox
						   drop_from_left_hand_resource__button
						   pick_up_with_right_hand_resource__hbox
						   pick_up_with_right_hand_resource__button
						   pick_up_with_right_hand_resource__target__label
						   pick_up_with_right_hand_resource__target__entry
						   pick_up_with_left_hand_resource__hbox
						   pick_up_with_left_hand_resource__button
						   pick_up_with_left_hand_resource__target__label
						   pick_up_with_left_hand_resource__target__entry
						   use_right_hand_resource__hbox
						   use_right_hand_resource__button
						   use_right_hand_resource__target__label
						   use_right_hand_resource__target__entry
						   use_right_hand_resource__action__label
						   use_right_hand_resource__action__entry
						   use_left_hand_resource__hbox
						   use_left_hand_resource__button
						   use_left_hand_resource__target__label
						   use_left_hand_resource__target__entry
						   use_left_hand_resource__action__label
						   use_left_hand_resource__action__entry
						   say_resource__hbox
						   say_resource__button
						   say_resource__message__label
						   say_resource__message__entry
						   ]
  [new [initial-isismon_agent]
       [= isismon_agent initial-isismon_agent]
       [= window [gtk-window-new]]
       [set window title [format nil 'isismon - agent resource activator - ' [get [get isismon_agent isis_agent] name]]]
       [= vbox [gtk-vbox-new 2]]

       [= menu_bar            [gtk-menu_bar-new]]
       [= file_menu_item      [gtk-menu_item-new 'File']]
       [= file_menu           [gtk-menu-new]]
       [= file_exit_menu_item [gtk-menu_item-new 'Exit']]
       [have file_exit_menu_item signal_connect 'activate'
	     [funk []
		   [have window destroy]]
	     nil]
       [have menu_bar append  file_menu_item]
       [have file_menu append file_exit_menu_item]
       [set file_menu_item submenu file_menu]
       [have vbox pack_start menu_bar nil nil 0]
       
       
       [= turn_right_start_resource__hbox [gtk-hbox-new 2]]
       [= turn_right_start_resource__button [gtk-button-new_with_label 'Turn Right - Start']]
       [have turn_right_start_resource__hbox pack_start turn_right_start_resource__button nil nil 0]
       [have vbox pack_start turn_right_start_resource__hbox nil nil 0]
       [have turn_right_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `turn_right_start]]]
       
       [= turn_right_stop_resource__hbox [gtk-hbox-new 2]]
       [= turn_right_stop_resource__button [gtk-button-new_with_label 'Turn Right - Stop']]
       [have turn_right_stop_resource__hbox pack_start turn_right_stop_resource__button nil nil 0]
       [have vbox pack_start turn_right_stop_resource__hbox nil nil 0]
       [have turn_right_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `turn_right_stop]]]
       
       [= turn_left_start_resource__hbox [gtk-hbox-new 2]]
       [= turn_left_start_resource__button [gtk-button-new_with_label 'Turn Left - Start']]
       [have turn_left_start_resource__hbox pack_start turn_left_start_resource__button nil nil 0]
       [have vbox pack_start turn_left_start_resource__hbox nil nil 0]
       [have turn_left_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `turn_left_start]]]
       
       [= turn_left_stop_resource__hbox [gtk-hbox-new 2]]
       [= turn_left_stop_resource__button [gtk-button-new_with_label 'Turn Left - Stop']]
       [have turn_left_stop_resource__hbox pack_start turn_left_stop_resource__button nil nil 0]
       [have vbox pack_start turn_left_stop_resource__hbox nil nil 0]
       [have turn_left_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `turn_left_stop]]]
       
       [= look_up_start_resource__hbox [gtk-hbox-new 2]]
       [= look_up_start_resource__button [gtk-button-new_with_label 'Look Up - Start']]
       [have look_up_start_resource__hbox pack_start look_up_start_resource__button nil nil 0]
       [have vbox pack_start look_up_start_resource__hbox nil nil 0]
       [have look_up_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `look_up_start]]]
       
       [= look_up_stop_resource__hbox [gtk-hbox-new 2]]
       [= look_up_stop_resource__button [gtk-button-new_with_label 'Look Up - Stop']]
       [have look_up_stop_resource__hbox pack_start look_up_stop_resource__button nil nil 0]
       [have vbox pack_start look_up_stop_resource__hbox nil nil 0]
       [have look_up_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `look_up_stop]]]
       
       [= look_down_start_resource__hbox [gtk-hbox-new 2]]
       [= look_down_start_resource__button [gtk-button-new_with_label 'Look Down - Start']]
       [have look_down_start_resource__hbox pack_start look_down_start_resource__button nil nil 0]
       [have vbox pack_start look_down_start_resource__hbox nil nil 0]
       [have look_down_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `look_down_start]]]
       
       [= look_down_stop_resource__hbox [gtk-hbox-new 2]]
       [= look_down_stop_resource__button [gtk-button-new_with_label 'Look Down - Stop']]
       [have look_down_stop_resource__hbox pack_start look_down_stop_resource__button nil nil 0]
       [have vbox pack_start look_down_stop_resource__hbox nil nil 0]
       [have look_down_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `look_down_stop]]]
       
       [= move_forward_start_resource__hbox [gtk-hbox-new 2]]
       [= move_forward_start_resource__button [gtk-button-new_with_label 'Move Forward - Start']]
       [have move_forward_start_resource__hbox pack_start move_forward_start_resource__button nil nil 0]
       [have vbox pack_start move_forward_start_resource__hbox nil nil 0]
       [have move_forward_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `move_forward_start]]]
       
       [= move_forward_stop_resource__hbox [gtk-hbox-new 2]]
       [= move_forward_stop_resource__button [gtk-button-new_with_label 'Move Forward - Stop']]
       [have move_forward_stop_resource__hbox pack_start move_forward_stop_resource__button nil nil 0]
       [have vbox pack_start move_forward_stop_resource__hbox nil nil 0]
       [have move_forward_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `move_forward_stop]]]
       
       [= move_backward_start_resource__hbox [gtk-hbox-new 2]]
       [= move_backward_start_resource__button [gtk-button-new_with_label 'Move Backward - Start']]
       [have move_backward_start_resource__hbox pack_start move_backward_start_resource__button nil nil 0]
       [have vbox pack_start move_backward_start_resource__hbox nil nil 0]
       [have move_backward_start_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `move_backward_start]]]
       
       [= move_backward_stop_resource__hbox [gtk-hbox-new 2]]
       [= move_backward_stop_resource__button [gtk-button-new_with_label 'Move Backward - Stop']]
       [have move_backward_stop_resource__hbox pack_start move_backward_stop_resource__button nil nil 0]
       [have vbox pack_start move_backward_stop_resource__hbox nil nil 0]
       [have move_backward_stop_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `move_backward_stop]]]
       
       [= drop_from_right_hand_resource__hbox [gtk-hbox-new 2]]
       [= drop_from_right_hand_resource__button [gtk-button-new_with_label 'Drop from Right Hand']]
       [have drop_from_right_hand_resource__hbox pack_start drop_from_right_hand_resource__button nil nil 0]
       [have vbox pack_start drop_from_right_hand_resource__hbox nil nil 0]
       [have drop_from_right_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `drop_from_right_hand]]]
       
       [= drop_from_left_hand_resource__hbox [gtk-hbox-new 2]]
       [= drop_from_left_hand_resource__button [gtk-button-new_with_label 'Drop from Left Hand']]
       [have drop_from_left_hand_resource__hbox pack_start drop_from_left_hand_resource__button nil nil 0]
       [have vbox pack_start drop_from_left_hand_resource__hbox nil nil 0]
       [have drop_from_left_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `drop_from_left_hand]]]
       
       [= pick_up_with_right_hand_resource__hbox [gtk-hbox-new 2]]
       [= pick_up_with_right_hand_resource__button [gtk-button-new_with_label 'Pick Up with Right Hand']]
       [= pick_up_with_right_hand_resource__target__label [gtk-label-new 'Target: ']]
       [= pick_up_with_right_hand_resource__target__entry [gtk-entry-new]]
       [have pick_up_with_right_hand_resource__hbox pack_start pick_up_with_right_hand_resource__button nil nil 0]
       [have pick_up_with_right_hand_resource__hbox pack_start pick_up_with_right_hand_resource__target__label nil nil 0]
       [have pick_up_with_right_hand_resource__hbox pack_start pick_up_with_right_hand_resource__target__entry t t 0]
       [have vbox pack_start pick_up_with_right_hand_resource__hbox nil nil 0]
       [have pick_up_with_right_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `pick_up_with_right_hand [get pick_up_with_right_hand_resource__target__entry text]]]]
       
       [= pick_up_with_left_hand_resource__hbox [gtk-hbox-new 2]]
       [= pick_up_with_left_hand_resource__button [gtk-button-new_with_label 'Pick Up with Left Hand']]
       [= pick_up_with_left_hand_resource__target__label [gtk-label-new 'Target: ']]
       [= pick_up_with_left_hand_resource__target__entry [gtk-entry-new]]
       [have pick_up_with_left_hand_resource__hbox pack_start pick_up_with_left_hand_resource__button nil nil 0]
       [have pick_up_with_left_hand_resource__hbox pack_start pick_up_with_left_hand_resource__target__label nil nil 0]
       [have pick_up_with_left_hand_resource__hbox pack_start pick_up_with_left_hand_resource__target__entry t t 0]
       [have vbox pack_start pick_up_with_left_hand_resource__hbox nil nil 0]
       [have pick_up_with_left_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `pick_up_with_left_hand [get pick_up_with_left_hand_resource__target__entry text]]]]
       
       [= use_right_hand_resource__hbox [gtk-hbox-new 2]]
       [= use_right_hand_resource__button [gtk-button-new_with_label 'Use Right Hand']]
       [= use_right_hand_resource__target__label [gtk-label-new 'Target: ']]
       [= use_right_hand_resource__target__entry [gtk-entry-new]]
       [= use_right_hand_resource__action__label [gtk-label-new 'Action: ']]
       [= use_right_hand_resource__action__entry [gtk-entry-new]]
       [have use_right_hand_resource__hbox pack_start use_right_hand_resource__button nil nil 0]
       [have use_right_hand_resource__hbox pack_start use_right_hand_resource__target__label nil nil 0]
       [have use_right_hand_resource__hbox pack_start use_right_hand_resource__target__entry t t 0]
       [have use_right_hand_resource__hbox pack_start use_right_hand_resource__action__label nil nil 0]
       [have use_right_hand_resource__hbox pack_start use_right_hand_resource__action__entry t t 0]
       [have vbox pack_start use_right_hand_resource__hbox nil nil 0]
       [have use_right_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `use_right_hand [get use_right_hand_resource__target__entry text] [get use_right_hand_resource__action__entry text]]]]
       
       [= use_left_hand_resource__hbox [gtk-hbox-new 2]]
       [= use_left_hand_resource__button [gtk-button-new_with_label 'Use Left Hand']]
       [= use_left_hand_resource__target__label [gtk-label-new 'Target: ']]
       [= use_left_hand_resource__target__entry [gtk-entry-new]]
       [= use_left_hand_resource__action__label [gtk-label-new 'Action: ']]
       [= use_left_hand_resource__action__entry [gtk-entry-new]]
       [have use_left_hand_resource__hbox pack_start use_left_hand_resource__button nil nil 0]
       [have use_left_hand_resource__hbox pack_start use_left_hand_resource__target__label nil nil 0]
       [have use_left_hand_resource__hbox pack_start use_left_hand_resource__target__entry t t 0]
       [have use_left_hand_resource__hbox pack_start use_left_hand_resource__action__label nil nil 0]
       [have use_left_hand_resource__hbox pack_start use_left_hand_resource__action__entry t t 0]
       [have vbox pack_start use_left_hand_resource__hbox nil nil 0]
       [have use_left_hand_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `use_left_hand [get use_left_hand_resource__target__entry text] [get use_left_hand_resource__action__entry text]]]]
       
       [= say_resource__hbox [gtk-hbox-new 2]]
       [= say_resource__button [gtk-button-new_with_label 'Say']]
       [= say_resource__message__label [gtk-label-new 'Message: ']]
       [= say_resource__message__entry [gtk-entry-new]]
       [have say_resource__hbox pack_start say_resource__button nil nil 0]
       [have say_resource__hbox pack_start say_resource__message__label nil nil 0]
       [have say_resource__hbox pack_start say_resource__message__entry t t 0]
       [have vbox pack_start say_resource__hbox nil nil 0]
       [have say_resource__button signal_connect 'clicked'
	     [funk []
		   [have this activate_resource `builtin_reactive `physical `say [get say_resource__message__entry text]]]]
       
       [have window add vbox]
       
       [have window show_all]]]


[deftypefunk isismon_agent_resource_activator execute activate_resource [layer_name agency_name resource_name :rest args]
  [let [[activate_resource [get [get [get isismon_agent isis_agent] mind] resource `builtin_reactive `neural_plug `activate_resource]]]
    [have-apply activate_resource command `[,layer_name ,agency_name ,resource_name @args]]]]



[deframe isismon_agent [frame] [isis_agent
				isismon
				
				frame
				vbox
				label
				entry
				status_button_hbox
				mindmon_button
				activator_button
				learned_reactive_physical_activator_button
				sense_button
				perception_button
				visual_objects_button
				visual_knowledge_button
				
				look_for_hbox
				look_for_button
				look_for_entry
				hold_with_right_hand_hbox
				hold_with_right_hand_button
				hold_with_right_hand_entry
				hold_with_left_hand_hbox
				hold_with_left_hand_button
				hold_with_left_hand_entry]
  [new [initial_isismon initial_isis_agent]
       [= isismon    initial_isismon]
       [= isis_agent initial_isis_agent]
       [= frame [gtk-frame-new [format nil 'isis_agent - ' [get isis_agent name]]]]
       [= vbox  [gtk-vbox-new 2]]
       [= label [gtk-label-new '']]
       [= entry [gtk-entry-new]]
       
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     `[terminal_format standard-terminal '\nkey event: ' key_event]
		     [if [eq keyval GDK_Return]
			 [let [[text [get entry text]]]
			   [set entry text '']
			   [let [[strings [have text split ' ']]]
			     [let [[reverse_symbols nil]]
			       [mapc [funk [string]
					   [if [not [equals string '']]
					       [= reverse_symbols [cons [get string as-symbol] reverse_symbols]]]]
				     strings]
			       [let [[symbols [reverse reverse_symbols]]]
				 [terminal_format standard-terminal '\nSending symbols, ' symbols ', through ' [get isis_agent name] '\'s neural plug.']
				 [let [[activate_resource [get [get isis_agent mind] resource `builtin_reactive `neural_plug `activate_resource]]]
				   [have activate_resource command `learned_reactive `language `speak_language symbols]
				   [let [[other_agent_name [if [eq [get isis_agent name] `Ralph]
							       `Lauren
							     `Ralph]]]
				     [let [[other_mind [get isis_world agent_mind other_agent_name]]]
				       [let [[other_activate_resource [get other_mind resource `builtin_reactive `neural_plug `activate_resource]]]
					 [have other_activate_resource command `learned_reactive `language `hear_language_from_agent [get isis_agent name] symbols]]]]
				   ]]]]]]]]]
       
       [have vbox pack_start label t t 0]
       [have vbox pack_start entry nil nil 0]
       
       [= status_button_hbox    [gtk-hbox-new 2]]
       
       [= mindmon_button [gtk-button-new_with_label 'MindMon']]
       [have mindmon_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching MindMon to monitor ' [get this name] '\'s mind.']
		   [mindmon [get isis_agent mind]]]]
       [have status_button_hbox pack_start mindmon_button nil nil 0]
       
       [= activator_button [gtk-button-new_with_label 'Activator']]
       [have activator_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching activator for agent ' [get this name] '.']
		   [new isismon_agent_resource_activator this]]]
       [have status_button_hbox pack_start activator_button nil nil 0]

       [= learned_reactive_physical_activator_button [gtk-button-new_with_label 'LRF_Activator']]
       [have learned_reactive_physical_activator_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching LRF_activator for agent ' [get this name] '.']
		   [new isismon_agent_learned_reactive_physical_resource_activator this]]]
       [have status_button_hbox pack_start learned_reactive_physical_activator_button nil nil 0]
       
       [= sense_button [gtk-button-new_with_label 'Sense']]
       [have sense_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\n' [get this name] '\'s sensory information:'
				    '\n  ' [have isis_agent sense_world]]]]
       [have status_button_hbox pack_start sense_button nil nil 0]
       
       [= perception_button [gtk-button-new_with_label 'Perception']]
       [have perception_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\n' [get this name] '\'s perception:'
				    '\n  ' [get [get isis_agent mind] perception]]]]
       [have status_button_hbox pack_start perception_button nil nil 0]
       
       [= visual_objects_button [gtk-button-new_with_label 'Visual Objects']]
       [have visual_objects_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\n' [get this name] '\'s visual objects:'
				    '\n  ' [get [get isis_agent mind] visual_objects]]]]
       [have status_button_hbox pack_start visual_objects_button nil nil 0]
       
       [= visual_knowledge_button [gtk-button-new_with_label 'Visual Knowledge']]
       [have visual_knowledge_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\n' [get this name] '\'s visual semantic knowledge:'
				    '\n  ' [get [get isis_agent mind] visual_knowledge]]]]
       [have status_button_hbox pack_start visual_knowledge_button nil nil 0]
       
       [have vbox pack_start status_button_hbox nil nil 0]
       
       [= look_for_hbox               [gtk-hbox-new 2]]
       [= look_for_button             [gtk-button-new_with_label 'Look for Object Type: ']]
       [= look_for_entry              [gtk-entry-new]]
       [set look_for_entry            text 'knife']
       [have look_for_hbox pack_start look_for_button nil nil 0]
       [have look_for_hbox pack_start look_for_entry  t t 0]
       [have vbox pack_start look_for_hbox nil nil 0]
       
       [have look_for_button signal_connect 'clicked'
	     [funk []
		   [have this command-look_for [get [get look_for_entry text] as-symbol]]]]
       
       [= hold_with_right_hand_hbox   [gtk-hbox-new 2]]
       [= hold_with_right_hand_button [gtk-button-new_with_label 'Hold with Right Hand: ']]
       [= hold_with_right_hand_entry  [gtk-entry-new]]
       [have hold_with_right_hand_hbox pack_start hold_with_right_hand_button nil nil 0]
       [have hold_with_right_hand_hbox pack_start hold_with_right_hand_entry  t t 0]
       [have vbox pack_start hold_with_right_hand_hbox nil nil 0]
       
       [have hold_with_right_hand_button signal_connect 'clicked'
	     [funk []
		   [have this command-hold_with_right_hand [get [get hold_with_right_hand_entry text] as-symbol]]]]
       
       [= hold_with_left_hand_hbox   [gtk-hbox-new 2]]
       [= hold_with_left_hand_button [gtk-button-new_with_label 'Hold with Left Hand: ']]
       [= hold_with_left_hand_entry  [gtk-entry-new]]
       [have hold_with_left_hand_hbox pack_start hold_with_left_hand_button nil nil 0]
       [have hold_with_left_hand_hbox pack_start hold_with_left_hand_entry  t t 0]
       [have vbox pack_start hold_with_left_hand_hbox nil nil 0]
       
       [have hold_with_left_hand_button signal_connect 'clicked'
	     [funk []
		   [have this command-hold_with_left_hand [get [get hold_with_left_hand_entry text] as-symbol]]]]
       
       [have frame add vbox]
       nil]]

[deftypefunk isismon_agent get name []
  [get isis_agent name]]

[deftypefunk isismon_agent get widget []
  frame]

[deftypefunk isismon_agent execute update_entry []
  [let [[look_for_resource [get [get isis_agent mind] resource `learned_reactive `physical `look_for]]]
    [set entry text [format nil 'look_for-current_object: \t' [have look_for_resource lookup `my_current_object]]]
    ]]

[deftypefunk isismon_agent execute update []
  nil]

[deftypefunk isismon_agent get retina_image_sequence []
  [get isis_agent retina_image_sequence]]

[deftypefunk isismon_agent execute command-look_for [object_type]
  [terminal_format standard-terminal '\nMindMon: Commanding ' [get this name] ' to look for ' object_type '.']
  [have [get [get isis_agent mind] resource `builtin_reactive `neural_plug `activate_resource]
	command `learned_reactive `physical `look_for [get [get object_type as-string] as-symbol]]
  ]

[deftypefunk isismon_agent execute command-hold_with_right_hand [object]
  [terminal_format standard-terminal '\nMindMon: Commanding ' [get this name] ' to hold with right hand ' object '.']
  ]

[deftypefunk isismon_agent execute command-hold_with_left_hand [object]
  [terminal_format standard-terminal '\nMindMon: Commanding ' [get this name] ' to hold with left hand ' object '.']
  ]


[deframe isismon_save_movie_dialog [frame] [isismon
					    window
					    vbox
					    label
					    entry
					    button_hbox
					    save_button
					    cancel_button]
  [new [initial-isismon]
       [= isismon initial-isismon]
       [= window [gtk-window-new]]
       [set window title 'isismon - save movie dialog']
       [= vbox [gtk-vbox-new 2]]
       [= label [gtk-label-new 'Please enter a filename\nwith an MPEG extension,\nto which you would like\nto save your movie.']]
       [= entry [gtk-entry-new]]
       [= button_hbox [gtk-hbox-new 2]]
       [= save_button [gtk-button-new_with_label 'Save']]
       [= cancel_button [gtk-button-new_with_label 'Cancel']]
       [have vbox pack_start label nil nil 0]
       [have vbox pack_start entry nil nil 0]
       [have button_hbox pack_start save_button nil nil 0]
       [have button_hbox pack_start cancel_button nil nil 0]
       [have vbox pack_start button_hbox nil nil 0]
       
       [have save_button signal_connect 'clicked'
	     [funk []
		   [let [[filename [get entry text]]]
		     [have isismon save_movie_as filename]
		     [have window destroy]]]]
       
       [have cancel_button signal_connect 'clicked'
	     [funk []
		   [have window destroy]]]
       
       [have window add vbox]
       [have window show_all]]]


[deframe isismon [frame] [isis_world
			  [initialize_mutex [new mutex]]
			  [done             nil]
			  fiber
			  
			  window
			  vbox
			  menu_bar
			  file_menu_item
			  file_menu
			  file_exit_menu_item
			  file_save_movie_menu_item
			  movie_gtk_image
			  scale
			  agent_hbox
			  controller_frame
			  controller_vbox
			  controller_button_hbox
			  step_size_hbox
			  step_size_label
			  step_size_entry
			  
			  play_button
			  stop_button
			  step_button
			  
			  [agent_frame [frame]]
			  
			  [simulation_playing           nil]
			  [last_stepped_simulation_time nil]
			  ]
  [new [isis_world_object isis_world_object_description]
       [= isis_world isis_world_object]
       [have initialize_mutex lock]
       [= fiber [fiber [funk []
			     [= window                    [gtk-window-new]]
			     [set window title            [format nil 'isismon - ' isis_world_object_description]]
			     [= vbox                      [gtk-vbox-new 2]]
			     [= menu_bar                  [gtk-menu_bar-new]]
			     [have vbox pack_start menu_bar nil nil 0]
			     [= file_menu_item            [gtk-menu_item-new 'File']]
			     [= file_menu                 [gtk-menu-new]]
			     [= file_exit_menu_item       [gtk-menu_item-new 'Exit']]
			     [= file_save_movie_menu_item [gtk-menu_item-new 'Save Movie...']]
			     [have menu_bar append  file_menu_item]
			     [have file_menu append file_exit_menu_item]
			     [have file_menu append file_save_movie_menu_item]
			     [set file_menu_item submenu file_menu]
			     [have window add vbox]
			     
			     [have file_exit_menu_item signal_connect 'activate'
				   [funk []
					 [= done t]]
				   nil]
			     
			     [have file_save_movie_menu_item signal_connect 'activate'
				   [funk []
					 [new isismon_save_movie_dialog this]]
				   nil]
			     
			     [= movie_gtk_image [gtk-image-new_from_image [new image [+ 640 320] 480 nil]]]
			     [have vbox pack_start movie_gtk_image nil nil 0]
			     
			     [= scale [gtk-scale-new_with_range `horizontal 0.0 1.0 1.0]]
			     [set scale digits 0]
			     [have vbox pack_start scale t t 0]
			     [let [[movie_length [get this movie_length]]]
			       [if [> movie_length 1]
				   [prog [set scale range 0.0 [- movie_length 1]]
					 [set scale value [- movie_length 1]]]]]
			     
			     [= agent_hbox [gtk-hbox-new 2]]
			     [have vbox pack_start agent_hbox nil nil 0]
			     
			     [have this add_agent [get isis_world agent_body `Ralph]]
			     [have this add_agent [get isis_world agent_body `Lauren]]
			     
			     [= controller_frame [gtk-frame-new [format nil 'isis_world']]]
			     [= controller_vbox  [gtk-vbox-new 2]]
			     
			     [= controller_button_hbox [gtk-hbox-new 2]]
			     [= play_button [gtk-button-new_with_label 'Play']]
			     [= stop_button [gtk-button-new_with_label 'Stop']]
			     [= step_button [gtk-button-new_with_label 'Step']]
			     [have controller_button_hbox pack_start play_button nil nil 0]
			     [have controller_button_hbox pack_start stop_button nil nil 0]
			     [have controller_button_hbox pack_start step_button nil nil 0]
			     [have controller_vbox pack_start controller_button_hbox nil nil 0]
			     
			     [have play_button signal_connect 'clicked'
				   [funk []
					 [terminal_format standard-terminal '\nIsisMon: Playing.']
					 [= simulation_playing t]]]
			     [have stop_button signal_connect 'clicked'
				   [funk []
					 [terminal_format standard-terminal '\nIsisMon: Stopped.']
					 [= simulation_playing nil]]]
			     [have step_button signal_connect 'clicked'
				   [funk []
					 [let [[seconds 1.0]]
					   [terminal_format standard-terminal '\nIsisMon: Stepping ' seconds ' seconds.']
					   [have isis_world raw_step_simulation seconds]]]]
			     
			     [= step_size_hbox  [gtk-hbox-new 2]]
			     [= step_size_label [gtk-label-new 'Step Size: ']]
			     [= step_size_entry [gtk-entry-new]]
			     [have step_size_hbox pack_start step_size_label nil nil 0]
			     [have step_size_hbox pack_start step_size_entry t t 0]
			     [set step_size_entry text '0.03']
			     [have controller_vbox pack_start step_size_hbox nil nil 0]
			     
			     [have controller_frame add controller_vbox nil nil 0]
			     
			     [have vbox pack_start controller_frame nil nil 0]
			     
			     [have window connect_hide_on_delete]
			     [have window show_all]
			     [have initialize_mutex unlock]
			     
			     [while [not done]
			       [have this cycle]]
			     [have window destroy]]
		       nil]]
       [have initialize_mutex lock]
       nil]]

[deftypefunk isismon execute cycle []
  [if [not [get window visible]]
      [= done t]]
  [if [and simulation_playing [or [null last_stepped_simulation_time]
				  [> [/ [- [get [time] nanoseconds_since_1970] [get last_stepped_simulation_time nanoseconds_since_1970]] 1000000000.0] 5]]]
      [let [[step_size [have [get step_size_entry text] read]]]
	[let [[as_double_funk [get [lookup_type [type step_size]] type_var_value `get `as-double nil]]]
	  [if [null as_double_funk]
	      [prog [terminal_format standard-terminal '\nStep size, \'' [get step_size_entry text] '\', cannot be recognized as a number.  Pausing IsisMon and ignoring step command.']
		    [= simulation_playing nil]]
	    [prog [have isis_world step_simulation [get step_size as-double]]
		  [have this update]
		  [let [[movie_length [get this movie_length]]]
		    [if [> movie_length 1]
			[set scale value [- movie_length 1]]]]
		  'Don\'t save movies every frame because this takes too long for now.'
		  `[let [[file_index 0]]
		     [labels [[find_nonexistent_filename []
							 [let [[filename [format nil 'isismon_movie-' file_index '.mpeg']]]
							   [if [pathname-exists filename]
							       [prog [= file_index [+ file_index 1]]
								     [find_nonexistent_filename]]
							     filename]]]]
			     [have this save_movie_as [find_nonexistent_filename]]]]
		  [= last_stepped_simulation_time [time]]]]]]]
  [have this update]
  [millisleep 100]]

[deftypefunk isismon execute add_agent [agent]
  [let [[isismon_agent [new isismon_agent this agent]]]
    [have agent_frame add [get isismon_agent name] isismon_agent]
    [have agent_hbox pack_start isismon_agent t t 0]]]

[deftypefunk isismon execute update_agents []
  [mapc [funk [agent]
	      [have agent update]]
	[get agent_frame values]]]

[deftypefunk isismon execute update []
  [let [[movie_length [get this movie_length]]]
    [if [> movie_length 1]
	[set scale range 0.0 [- movie_length 1]]]
    [let [[image_index [get [get scale value] as-integer]]]
      [if [< image_index movie_length]
	  [set movie_gtk_image image [get this movie_image image_index]]]]]
  [have this update_agents]]

[deftypefunk isismon execute step []
  [have isis_world normal_step]
  [let [[movie_length [get this movie_length]]]
    [if [> movie_length 1]
	[set scale range 0.0 [- movie_length 1]]]
    [let [[scale_value [get scale value]]]
      [if [== scale_value [- movie_length 2]]
	  [set scale value [- movie_length 1]]]]]
  [have this update]]

[deftypefunk isismon get overview_image_sequence []
  [get isis_world overview_image_sequence]]

[deftypefunk isismon get movie_length []
  [let [[overview_image_sequence [get this overview_image_sequence]]]
    [get overview_image_sequence length]]]

[deftypefunk isismon get movie_image [index]
  [let [[agent_names    [get agent_frame keys]]
	[image_sequence [new image_sequence nil]]]
    [let [[agent_count [if [null agent_names]
			   0
			 [length agent_names]]]]
      [let [[image_width [+ 1 640 1 [if agent_names
					320
				      0] 1]]
	    [image_height [+ 1 [if [> [* agent_count [+ 240 1]] [+ 480 1]]
				   [* agent_count [+ 240 1]]
				 [+ 480 1]]]]]
	[if [!= [* [/ image_width 2] 2]
		image_width]
	    [= image_width [+ image_width 1]]]
	[if [!= [* [/ image_height 2] 2]
		image_height]
	    [= image_height [+ image_height 1]]]
	[let [[image [new image image_width image_height nil]]]
	  [have image clear 0 0 0 255]
	  [let [[overview_image_sequence [get this overview_image_sequence]]]
	    [let [[overview_image [get overview_image_sequence elt index]]]
	      [have overview_image copy_rectangle_to 0 0 image 1 1 640 480]]]
	  [let [[agent_index 0]]
	    [mapc [funk [agent_name]
			[let [[isismon_agent [have agent_frame lookup agent_name]]]
			  [let [[retina_image_sequence [get isismon_agent retina_image_sequence]]]
			    [let [[retina_image [get retina_image_sequence elt index]]]
			      [have retina_image copy_rectangle_to 0 0 image [+ 1 640 1] [+ 1 [* agent_index [+ 240 1]]] 320 240]]]]
			[= agent_index [+ agent_index 1]]]
		  agent_names]]
	  image]]]]]

[deftypefunk isismon get new_movie []
  [let [[movie_length   [get this movie_length]]
	[image_sequence [new image_sequence nil]]]
    [dotimes [index movie_length]
      [have image_sequence add_image_to_end [get this movie_image index]]]
    [let [[bit_rate   5000000]
	  [frame_rate 25]]
      [movie-new_from_image_sequence [get image_sequence new_by_time_stretch 3.0] bit_rate frame_rate]]]]

[deftypefunk isismon execute save_movie_as [filename]
  [terminal_format standard-terminal '\nIsisMon Save Movie: Saving MPEG to file: ' filename]
  [have [get this new_movie] save filename]
  [terminal_format standard-terminal '\nIsisMon Save Movie: Completed saving MPEG to file: ' filename]]


[defmetro isismon [:rest args]
  [let [[isis_worlds                  nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [terminal_format standard-terminal '\nisismon: compiling isis_world command line argument, ' arg '.']
					       [= isis_worlds [cons arg isis_worlds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length isis_worlds] 1]
	       [prog [terminal_format standard-terminal 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied ' [simple_length isis_worlds] ': ' isis_worlds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length isis_worlds] 0]
	       [prog [terminal_format standard-terminal 'isismon fatal: isismon can only monitor exactly one isis_world at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[terminal_format standard-terminal 'ISISMON(1)'
			 '\n'   'NAME'
			 '\n'   '       isismon - monitor and control an isis_world experiment.'
			 '\n'   ''
			 '\n'   'SYNOPSIS'
			 '\n'   '       isismon -h <isis_world>'
			 '\n'   ''
			 '\n'   'DESCRIPTION'
			 '\n'   '       The isismon program provides dynamic real-time monitoring of a running isis_world experiment.'
			 '\n'   '']
      [let [[isis_world [first isis_worlds]]]
	`[prog [new isismon ,isis_world [quote ,isis_world]]
	       nil]]]]]


