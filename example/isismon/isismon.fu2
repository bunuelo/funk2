'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe isismon_knowledge [frame] [knowledge_name
				    
				    isismon_agent
				    
				    knowledge_expanded
				    
				    knowledge_vbox
				    knowledge_button_label_hbox
				    knowledge_expansion_button
				    knowledge_label
				    knowledge_gview_button
				    knowledge_image
				    ]
  [new [initial-isismon_agent
	initial-knowledge_name]
       [= isismon_agent  initial-isismon_agent]
       [= knowledge_name initial-knowledge_name]
       
       
       [= knowledge_vbox [gtk-vbox-new 0]]
       
       [= knowledge_button_label_hbox [gtk-hbox-new 0]]
       [have knowledge_vbox pack_start knowledge_button_label_hbox nil nil 0]
       
       [= knowledge_expansion_button [gtk-button-new_with_label '*']]
       [have knowledge_button_label_hbox pack_start knowledge_expansion_button nil nil 0]
       
       [= knowledge_label [gtk-label-new [format nil knowledge_name]]]
       [have knowledge_button_label_hbox pack_start knowledge_label t t 0]
       
       [= knowledge_gview_button [gtk-button-new_with_label 'GView']]
       [have knowledge_button_label_hbox pack_start knowledge_gview_button nil nil 0]
       [have knowledge_gview_button signal_connect 'clicked'
	     [funk []
		   [have this gview_knowledge]]
	     nil]
       
       [= knowledge_image [gtk-image-new_from_image [image-new_from_rgb_data 11 11 [new chunk [* 11 11 3]]]]]
       [have knowledge_vbox pack_start knowledge_image nil nil 0]
       
       [have knowledge_expansion_button signal_connect 'clicked'
	     [funk []
		   [= knowledge_expanded [not knowledge_expanded]]]
	     nil]
       
       ]]

[deftypefunk isismon_knowledge get widget []
  knowledge_vbox]

[deftypefunk isismon_knowledge execute update_knowledge_image []
  [if knowledge_expanded
      [prog [set knowledge_image image [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
													       [get knowledge_base as-digraph_dot_code]]
													 [conslist [get [get [get isismon_agent isis_agent] mind] semantic_knowledge_base knowledge_name]]]
												 '\n']]]]
					 [dot_code-as-image dot_code 320 240]]]
	    [have knowledge_image show_all]]
    [have knowledge_image hide_all]]]

[deftypefunk isismon_knowledge execute gview_knowledge []
  [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get isismon_agent name] '\'s ' knowledge_name ' semantic knowledge.']
  [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
									  [get knowledge_base as-digraph_dot_code]]
								    [conslist [get [get [get isismon_agent isis_agent] mind] semantic_knowledge_base knowledge_name]]]
							    '\n']]]]
    [fiber [funk [] [dot_code-gview dot_code]] nil]]]




[deframe isismon_agent_resource_menu [frame] [isismon_agent_agency_menu
					      resource
					      
					      resource_menu_item
					      resource_menu
					      
					      debugging_mode_check_menu_item
					      ]
  [new [initial-isismon_agent_agency_menu initial-resource]
       [= isismon_agent_agency_menu initial-isismon_agent_agency_menu]
       [= resource                  initial-resource]
       
       [= resource_menu_item [gtk-menu_item-new [format nil [get resource name]]]]
       [= resource_menu      [gtk-menu-new]]
       [set resource_menu_item submenu resource_menu]
       
       [= debugging_mode_check_menu_item [gtk-check_menu_item-new 'Debugging Mode']]
       [have resource_menu append debugging_mode_check_menu_item]
       
       [have debugging_mode_check_menu_item signal_connect 'toggled'
	     [funk []
		   [set resource debug [get debugging_mode_check_menu_item active]]
		   [terminal_format standard-terminal '\n' [if [get resource debug] 'Enabling' 'Disabling'] ' debugging mode for ' [get [get resource mind] name] '\'s ' [get resource name] ' resource.']]
	     nil]
       
       ]]

[deftypefunk isismon_agent_resource_menu get widget []
  resource_menu_item]


[deframe isismon_agent_agency_menu [frame] [isismon_agent_layer_menu
					    agency
					    
					    agency_menu_item
					    agency_menu]
  [new [initial-isismon_agent_layer_menu initial-agency]
       [= isismon_agent_layer_menu initial-isismon_agent_layer_menu]
       [= agency                   initial-agency]
       
       [= agency_menu_item [gtk-menu_item-new [format nil [get agency name]]]]
       [= agency_menu      [gtk-menu-new]]
       [set agency_menu_item submenu agency_menu]
       
       [mapc [funk [resource]
		   [let [[isismon_resource_menu [new isismon_agent_resource_menu this resource]]]
		     [have agency_menu append isismon_resource_menu]]]
	     [get agency resources]]
       ]]

[deftypefunk isismon_agent_agency_menu get widget []
  agency_menu_item]


[deframe isismon_agent_layer_menu [frame] [isismon_agent_mind_menu
					   layer
					   
					   layer_menu_item
					   layer_menu]
  [new [initial-isismon_agent_mind_menu initial-layer]
       [= isismon_agent_mind_menu initial-isismon_agent_mind_menu]
       [= layer                   initial-layer]
       
       [= layer_menu_item [gtk-menu_item-new [format nil [get layer name]]]]
       [= layer_menu      [gtk-menu-new]]
       [set layer_menu_item submenu layer_menu]
       
       [mapc [funk [agency]
		   [let [[isismon_agency_menu [new isismon_agent_agency_menu this agency]]]
		     [have layer_menu append isismon_agency_menu]]]
	     [get layer agencies]]
       ]]

[deftypefunk isismon_agent_layer_menu get widget []
  layer_menu_item]


[deframe isismon_agent_mind_menu [frame] [isismon_agent
					  
					  mind_menu_item
					  mind_menu]
  [new [initial-isismon_agent]
       [= isismon_agent initial-isismon_agent]
       
       [= mind_menu_item [gtk-menu_item-new 'Mind']]
       [= mind_menu      [gtk-menu-new]]
       [set mind_menu_item submenu mind_menu]
       
       [mapc [funk [layer]
		   [let [[isismon_layer_menu [new isismon_agent_layer_menu this layer]]]
		     [have mind_menu append isismon_layer_menu]]]
	     [get [get [get isismon_agent isis_agent] mind] layers]]
       ]]

[deftypefunk isismon_agent_mind_menu get widget []
  mind_menu_item]
				
				

[deframe isismon_agent [frame] [isis_agent
				
				isismon_project
				
				frame
				vbox
				
				menu_bar
				tools_menu
				tools_menu_item
				tools_mindmon_menu_item
				tools_builtin_reactive_physical_activator_menu_item
				tools_learned_reactive_physical_activator_menu_item
				view_menu
				view_menu_item
				view_sense_menu_item
				view_perception_menu_item
				view_builtin_reactive_knowledge_menu_item
				view_learned_reactive_knowledge_menu_item
				view_deliberative_knowledge_menu_item
				view_reflective_knowledge_menu_item
				view_self_reflective_knowledge_menu_item
				view_self_conscious_knowledge_menu_item
				view_all_knowledge_menu_item
				isismon_agent_mind_menu
				
				entry
				
				meta_mental_isismon_knowledge
				mental_knowledge_isismon_knowledge
				meta_physical_isismon_knowledge
				physical_isismon_knowledge
				visual_isismon_knowledge
				
				]
  [new [initial_isismon_project initial_isis_agent]
       [= isismon_project initial_isismon_project]
       [= isis_agent      initial_isis_agent]
       
       [= frame [gtk-frame-new [format nil 'isis_agent - ' [get isis_agent name]]]]
       [= vbox  [gtk-vbox-new 0]]
       
       [= menu_bar        [gtk-menu_bar-new]]
       [have vbox pack_start menu_bar nil nil 0]
       
       [= tools_menu      [gtk-menu-new]]
       [= tools_menu_item [gtk-menu_item-new 'Tools']]
       [set tools_menu_item submenu tools_menu]
       [have menu_bar append tools_menu_item]
       
       [= tools_mindmon_menu_item [gtk-menu_item-new 'MindMon']]
       [have tools_mindmon_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching MindMon to monitor ' [get this name] '\'s mind.']
		   [mindmon [get isis_agent mind]]]
	     nil]
       [have tools_menu append tools_mindmon_menu_item]
       
       [= tools_builtin_reactive_physical_activator_menu_item [gtk-menu_item-new 'Built-in Reactive Physical Activator']]
       [have tools_builtin_reactive_physical_activator_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching built-in reactive physical activator for agent ' [get this name] '.']
		   [new isismon_agent_builtin_reactive_physical_resource_activator this]]
	     nil]
       [have tools_menu append tools_builtin_reactive_physical_activator_menu_item]
       
       [= tools_learned_reactive_physical_activator_menu_item [gtk-menu_item-new 'Learned Reactive Physical Activator']]
       [have tools_learned_reactive_physical_activator_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\nLaunching learned reactive physical activator for agent ' [get this name] '.']
		   [new isismon_agent_learned_reactive_physical_resource_activator this]]
	     nil]
       [have tools_menu append tools_learned_reactive_physical_activator_menu_item]
       
       [= view_menu      [gtk-menu-new]]
       [= view_menu_item [gtk-menu_item-new 'View']]
       [set view_menu_item submenu view_menu]
       [have menu_bar append view_menu_item]
       
       [= view_sense_menu_item [gtk-menu_item-new 'Sense']]
       [have view_sense_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\n' [get this name] '\'s sensory information:'
				    '\n  ' [have isis_agent sense_world]]]
	     nil]
       [have view_menu append view_sense_menu_item]
       
       [= view_builtin_reactive_knowledge_menu_item [gtk-menu_item-new 'Builtin-Reactive Knowledge']]
       [have view_builtin_reactive_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[builtin_reactive_knowledge_base [get [get isis_agent mind] builtin_reactive_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s builtin-reactive semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist builtin_reactive_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_builtin_reactive_knowledge_menu_item]
       
       [= view_learned_reactive_knowledge_menu_item [gtk-menu_item-new 'Learned-Reactive Knowledge']]
       [have view_learned_reactive_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[learned_reactive_knowledge_base [get [get isis_agent mind] learned_reactive_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s learned-reactive semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist learned_reactive_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_learned_reactive_knowledge_menu_item]
       
       [= view_deliberative_knowledge_menu_item [gtk-menu_item-new 'Deliberative Knowledge']]
       [have view_deliberative_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[deliberative_knowledge_base [get [get isis_agent mind] deliberative_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s deliberative semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist deliberative_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_deliberative_knowledge_menu_item]
       
       [= view_reflective_knowledge_menu_item [gtk-menu_item-new 'Reflective Knowledge']]
       [have view_reflective_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[reflective_knowledge_base [get [get isis_agent mind] reflective_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s reflective semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist reflective_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_reflective_knowledge_menu_item]
       
       [= view_self_reflective_knowledge_menu_item [gtk-menu_item-new 'Self-Reflective Knowledge']]
       [have view_self_reflective_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[self_reflective_knowledge_base [get [get isis_agent mind] self_reflective_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s self-reflective semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist self_reflective_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_self_reflective_knowledge_menu_item]
       
       [= view_self_conscious_knowledge_menu_item [gtk-menu_item-new 'Self-Conscious Knowledge']]
       [have view_self_conscious_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[self_conscious_knowledge_base [get [get isis_agent mind] self_conscious_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of ' [get this name] '\'s self-conscious semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist self_conscious_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_self_conscious_knowledge_menu_item]
       
       [= view_all_knowledge_menu_item [gtk-menu_item-new 'All Knowledge']]
       [have view_all_knowledge_menu_item signal_connect 'activate'
	     [funk []
		   [let [[builtin_reactive_knowledge_base [get [get isis_agent mind] builtin_reactive_knowledge]]
			 [learned_reactive_knowledge_base [get [get isis_agent mind] learned_reactive_knowledge]]
			 [deliberative_knowledge_base     [get [get isis_agent mind] deliberative_knowledge]]
			 [reflective_knowledge_base       [get [get isis_agent mind] reflective_knowledge]]
			 [self_reflective_knowledge_base  [get [get isis_agent mind] self_reflective_knowledge]]
			 [self_conscious_knowledge_base   [get [get isis_agent mind] self_conscious_knowledge]]]
		     [terminal_format standard-terminal '\nIsisMon generating and displaying graph of all of ' [get this name] '\'s semantic knowledge.']
		     [let [[dot_code [graphviz-digraph [stringlist-intersperse [mapcar [funk [knowledge_base]
											     [get knowledge_base as-digraph_dot_code]]
										       [conslist builtin_reactive_knowledge_base
												 learned_reactive_knowledge_base
												 deliberative_knowledge_base
												 reflective_knowledge_base
												 self_reflective_knowledge_base
												 self_conscious_knowledge_base]]
									       '\n']]]]
		       [fiber [funk [] [dot_code-gview dot_code]] nil]]]]
	     nil]
       [have view_menu append view_all_knowledge_menu_item]
       
       [= isismon_agent_mind_menu [new isismon_agent_mind_menu this]]
       [have menu_bar append isismon_agent_mind_menu]
       
       
       [= entry [gtk-entry-new]]
       
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     `[terminal_format standard-terminal '\nkey event: ' key_event]
		     [if [eq keyval GDK_Return]
			 [let [[text [get entry text]]]
			   [set entry text '']
			   [let [[strings [have text split ' ']]]
			     [let [[reverse_symbols nil]]
			       [mapc [funk [string]
					   [if [not [equals string '']]
					       [= reverse_symbols [cons [get string as-symbol] reverse_symbols]]]]
				     strings]
			       [let [[symbols [reverse reverse_symbols]]]
				 [terminal_format standard-terminal '\nSending symbols, ' symbols ', through ' [get isis_agent name] '\'s neural plug.']
				 [let [[activate_resource [get [get isis_agent mind] resource `builtin_reactive `neural_plug `activate_resource]]]
				   [have activate_resource command `learned_reactive `language `speak_language [append `[I hear] symbols `[from nil]]]
				   [have activate_resource command `learned_reactive `language `hear_language_from_agent nil symbols]
				   ]]]]]]]]
	     nil]
       
       [have vbox pack_start entry nil nil 0]
       
       
       [= meta_mental_isismon_knowledge [new isismon_knowledge this `meta_mental_knowledge]]
       [have vbox pack_start [get meta_mental_isismon_knowledge widget] nil nil 0]
       
       [= mental_knowledge_isismon_knowledge [new isismon_knowledge this `mental_knowledge]]
       [have vbox pack_start [get mental_knowledge_isismon_knowledge widget] nil nil 0]
       
       [= meta_physical_isismon_knowledge [new isismon_knowledge this `meta_physical_knowledge]]
       [have vbox pack_start [get meta_physical_isismon_knowledge widget] nil nil 0]
       
       [= physical_isismon_knowledge [new isismon_knowledge this `physical_knowledge]]
       [have vbox pack_start [get physical_isismon_knowledge widget] nil nil 0]
       
       [= visual_isismon_knowledge [new isismon_knowledge this `visual_knowledge]]
       [have vbox pack_start [get visual_isismon_knowledge widget] nil nil 0]
       
       [have frame add vbox]
       nil]]

[defunk isismon_agent-new_from_name [isismon_project name]
  [let [[moral_compass [new moral_compass]]]
    [let [[isis_agent [new isis_agent_body [get isismon_project isis_world] moral_compass name]]]
      [have moral_compass activate_vital_resources]
      [new isismon_agent isismon_project isis_agent]]]]

[deftypefunk isismon_agent get name []
  [get isis_agent name]]

[deftypefunk isismon_agent get widget []
  frame]


[deftypefunk isismon_agent execute update_entry []
  [let [[look_for_resource [get [get isis_agent mind] resource `learned_reactive `physical `look_for]]]
    [set entry text [format nil 'look_for-current_object: \t' [have look_for_resource lookup `my_current_object]]]
    ]]

[deftypefunk isismon_agent execute update []
  [have meta_mental_isismon_knowledge      update_knowledge_image]
  [have mental_knowledge_isismon_knowledge update_knowledge_image]
  [have meta_physical_isismon_knowledge    update_knowledge_image]
  [have physical_isismon_knowledge         update_knowledge_image]
  [have visual_isismon_knowledge           update_knowledge_image]
  nil]

[deftypefunk isismon_agent get retina_image_sequence []
  [get isis_agent retina_image_sequence]]



[deframe isismon_export_movie_dialog [frame] [isismon
					      save_dialog]
  [new [initial-isismon]
       [= isismon initial-isismon]
       [= save_dialog [gtk-file_chooser_dialog-new_for_file_save [get isismon window]]]
       
       [have save_dialog add_file_filter_pattern 'Moving Picture Experts Group Files (*.mpeg)' '*.mpeg']
       [have save_dialog add_file_filter_pattern 'All Files (*.*)'                             '*.*']
       [set  save_dialog current_name 'Untitled Movie.mpeg']
       [set  save_dialog current_folder [get [get isismon preferences] movie_export_directory]]
       [have save_dialog response_event-signal_connect
	     [funk [event_frame]
		   [let [[response_id [have event_frame lookup `response_id]]]
		     [if [eq response_id GTK_RESPONSE_ACCEPT]
			 [let [[filename [get save_dialog filename]]]
			   [have save_dialog destroy]
			   [have isismon export_movie filename]]
		       [have save_dialog destroy]]]]
	     nil]
       [have save_dialog show_all]]]


[deframe isismon_save_project_dialog [frame] [isismon
					      save_dialog]
  [new [initial-isismon]
       [= isismon initial-isismon]
       [= save_dialog [gtk-file_chooser_dialog-new_for_file_save [get isismon window]]]
       
       [have save_dialog add_file_filter_pattern 'IsisMon Project Files (*.isis)' '*.isis']
       [have save_dialog add_file_filter_pattern 'All Files (*.*)'                '*.*']
       [set  save_dialog current_name 'Untitled Project.isis']
       [set  save_dialog current_folder [get [get isismon preferences] project_directory]]
       [have save_dialog response_event-signal_connect
	     [funk [event_frame]
		   [let [[response_id [have event_frame lookup `response_id]]]
		     [if [eq response_id GTK_RESPONSE_ACCEPT]
			 [let [[filename [get save_dialog filename]]]
			   [have save_dialog destroy]
			   [have isismon save_project filename]]
		       [have save_dialog destroy]]]]
	     nil]
       [have save_dialog show_all]]]


[deframe isismon_open_project_dialog [frame] [isismon
					      open_dialog
					      preview_label]
  [new [initial-isismon]
       [= isismon initial-isismon]
       [= open_dialog   [gtk-file_chooser_dialog-new_for_file_open [get isismon window]]]
       [= preview_label [gtk-label-new '']]
       
       [have open_dialog add_file_filter_pattern 'IsisMon Project Files (*.isis)' '*.isis']
       [have open_dialog add_file_filter_pattern 'All Files (*.*)'                '*.*']
       [set  open_dialog current_folder [get [get isismon preferences] project_directory]]
       [set  open_dialog preview_widget preview_label]
       
       [have open_dialog response_event-signal_connect
	     [funk [event_frame]
		   [let [[response_id [have event_frame lookup `response_id]]]
		     [if [eq response_id GTK_RESPONSE_ACCEPT]
			 [let [[filename [get open_dialog filename]]]
			   [have open_dialog destroy]
			   [have isismon open_project filename]]
		       [have open_dialog destroy]]]]
	     nil]
       
       [have open_dialog update_preview_event-signal_connect
	     [funk []
		   [let [[preview_filename [get open_dialog preview_filename]]]
		     [set preview_label text [stringlist-intersperse [have [format nil preview_filename] split '/'] '\n']]
		     [set open_dialog preview_widget_active t]]]
	     nil]
       
       [have open_dialog show_all]]]


[deframe isismon_preferences [frame] [isis_world_server_hostname
				      project_directory
				      movie_export_directory]
  [new []
       [shelter [mkdir [pathname-concat [getenv 'HOME'] 'IsisMon Data']]]
       [shelter [mkdir [pathname-concat [getenv 'HOME'] 'IsisMon Data/Projects']]]
       [shelter [mkdir [pathname-concat [getenv 'HOME'] 'IsisMon Data/Movies']]]
       [= isis_world_server_hostname 'psuche']
       [= project_directory          [pathname-concat [getenv 'HOME'] 'IsisMon Data/Projects']]
       [= movie_export_directory     [pathname-concat [getenv 'HOME'] 'IsisMon Data/Movies']]]]

[deftypefunk isismon_preferences execute save [filename]
  [lick-to-file this filename]]

[defunk isismon_preferences-load [filename]
  [let [[result [shelter [unlick-from-file filename]]]]
    [if [eq result `bug]
	nil
      result]]]

[deframe isismon_preference_editor [frame] [isismon
					    
					    window
					    vbox
					    menu_bar
					    file_menu_item
					    file_menu
					    file_exit_menu_item
					    
					    isis_world_server_hostname__hbox
					    isis_world_server_hostname__title_label
					    isis_world_server_hostname__data_entry
					    
					    project_directory
					    project_directory__hbox
					    project_directory__title_label
					    project_directory__select_button
					    project_directory__data_label
					    
					    movie_export_directory
					    movie_export_directory__hbox
					    movie_export_directory__title_label
					    movie_export_directory__select_button
					    movie_export_directory__data_label
					    
					    button__hbox
					    cancel_button
					    ok_button]
  [new [initial-isismon]
       [= isismon initial-isismon]
       
       [= window [gtk-window-new]]
       [have window connect_hide_on_delete]
       [set window title 'IsisMon - Edit Preferences']
       [= vbox [gtk-vbox-new 0]]
       
       [let [[isis_world_server_hostname [get [get isismon preferences] isis_world_server_hostname]]]
	 [= isis_world_server_hostname__hbox [gtk-hbox-new 0]]
	 [= isis_world_server_hostname__title_label [gtk-label-new 'IsisWorld Server Hostname: ']]
	 [= isis_world_server_hostname__data_entry  [gtk-entry-new]]
	 [set isis_world_server_hostname__data_entry text isis_world_server_hostname]
	 [have isis_world_server_hostname__hbox pack_start isis_world_server_hostname__title_label   nil nil 0]
	 [have isis_world_server_hostname__hbox pack_start isis_world_server_hostname__data_entry    nil nil 0]
	 [have vbox pack_start isis_world_server_hostname__hbox nil nil 0]]
       
       [= project_directory [get [get isismon preferences] project_directory]]
       [= project_directory__hbox [gtk-hbox-new 0]]
       [= project_directory__title_label   [gtk-label-new             'Project Directory: ']]
       [= project_directory__select_button [gtk-button-new_with_label '...']]
       [= project_directory__data_label    [gtk-label-new             project_directory]]
       [have project_directory__hbox pack_start project_directory__title_label   nil nil 0]
       [have project_directory__hbox pack_start project_directory__select_button nil nil 0]
       [have project_directory__hbox pack_start project_directory__data_label    nil nil 0]
       [have vbox pack_start project_directory__hbox nil nil 0]
       
       [have project_directory__select_button signal_connect 'clicked'
	     [funk []
		   [let [[select_dialog [gtk-file_chooser_dialog-new_for_folder_select window]]]
		     [set select_dialog current_folder project_directory]
		     [have select_dialog response_event-signal_connect
			   [funk [event_frame]
				 [let [[response_id [have event_frame lookup `response_id]]]
				   [if [eq response_id GTK_RESPONSE_ACCEPT]
				       [prog [= project_directory [get select_dialog filename]]
					     [set project_directory__data_label text project_directory]
					     ]]]
				 [have select_dialog destroy]]
			   nil]
		     [have select_dialog show_all]
		     ]]
	     nil]
       
       [= movie_export_directory [get [get isismon preferences] movie_export_directory]]
       [= movie_export_directory__hbox [gtk-hbox-new 0]]
       [= movie_export_directory__title_label   [gtk-label-new             'Movie Export Directory: ']]
       [= movie_export_directory__select_button [gtk-button-new_with_label '...']]
       [= movie_export_directory__data_label    [gtk-label-new             movie_export_directory]]
       [have movie_export_directory__hbox pack_start movie_export_directory__title_label   nil nil 0]
       [have movie_export_directory__hbox pack_start movie_export_directory__select_button nil nil 0]
       [have movie_export_directory__hbox pack_start movie_export_directory__data_label    nil nil 0]
       [have vbox pack_start movie_export_directory__hbox nil nil 0]
       
       [have movie_export_directory__select_button signal_connect 'clicked'
	     [funk []
		   [let [[select_dialog [gtk-file_chooser_dialog-new_for_folder_select window]]]
		     [set select_dialog current_folder movie_export_directory]
		     [have select_dialog response_event-signal_connect
			   [funk [event_frame]
				 [let [[response_id [have event_frame lookup `response_id]]]
				   [if [eq response_id GTK_RESPONSE_ACCEPT]
				       [prog [= movie_export_directory [get select_dialog filename]]
					     [set movie_export_directory__data_label text movie_export_directory]
					     ]]]
				 [have select_dialog destroy]]
			   nil]
		     [have select_dialog show_all]
		     ]]
	     nil]
       
       [= button__hbox [gtk-hbox-new 0]]
       [= cancel_button [gtk-button-new_with_label 'Cancel']]
       [= ok_button     [gtk-button-new_with_label 'OK']]
       [have button__hbox pack_start cancel_button nil nil 0]
       [have button__hbox pack_start ok_button t t 0]
       [have vbox pack_start button__hbox nil nil 0]
       
       [have cancel_button signal_connect 'clicked'
	     [funk []
		   [have window destroy]]
	     nil]
       
       [have ok_button signal_connect 'clicked'
	     [funk []
		   [let [[preferences [new isismon_preferences]]]
		     [set preferences isis_world_server_hostname [get isis_world_server_hostname__data_entry text]]
		     [set preferences project_directory          project_directory]
		     [set preferences movie_export_directory     movie_export_directory]
		     [set isismon preferences preferences]
		     [have isismon save_preferences]]
		   [have window destroy]]
	     nil]
       
       [have window add vbox]
       
       [have window show_all]]]


[deframe isismon_project [frame] [isismon
				  
				  initialized
				  execute_mutex
				  
				  isis_world
				  
				  vbox
				  controller_frame
				  controller_vbox
				  controller_button_hbox
				  step_size_hbox
				  step_size_label
				  step_size_entry
				  play_button
				  stop_button
				  step_button
				  
				  movie_gtk_image
				  scale
				  agent_hbox
				  
				  [agent_frame [frame]]
				  
				  [simulation_playing           nil]
				  [last_stepped_simulation_time nil]
				  ]
  [new [initial-isismon]
       [= isismon initial-isismon]
       
       [= execute_mutex [new traced_mutex]]
       [have execute_mutex lock]
       
       [= isis_world nil]
       
       'main isismon_project widget'
       [= vbox [gtk-vbox-new 0]]
       
       'simulator controller'
       
       [= controller_frame [gtk-frame-new [format nil 'isis_world']]]
       [= controller_vbox  [gtk-vbox-new 2]]
       
       [= controller_button_hbox [gtk-hbox-new 2]]
       [= play_button [gtk-button-new_with_label 'Play']]
       [= stop_button [gtk-button-new_with_label 'Stop']]
       [= step_button [gtk-button-new_with_label 'Step']]
       [have controller_button_hbox pack_start play_button nil nil 0]
       [have controller_button_hbox pack_start stop_button nil nil 0]
       [have controller_button_hbox pack_start step_button nil nil 0]
       [have controller_vbox pack_start controller_button_hbox nil nil 0]
       
       [have play_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nIsisMon: Playing.']
		   [= simulation_playing t]]
	     nil]
       [have stop_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nIsisMon: Stopped.']
		   [= simulation_playing nil]]
	     nil]
       [have step_button signal_connect 'clicked'
	     [funk []
		   [let [[seconds 1.0]]
		     [terminal_format standard-terminal '\nIsisMon: Stepping ' seconds ' seconds.']
		     [have isis_world raw_step_simulation seconds]]]
	     nil]
       
       [= step_size_hbox  [gtk-hbox-new 2]]
       [= step_size_label [gtk-label-new 'Step Size: ']]
       [= step_size_entry [gtk-entry-new]]
       [have step_size_hbox pack_start step_size_label nil nil 0]
       [have step_size_hbox pack_start step_size_entry t t 0]
       [set step_size_entry text '0.03']
       [have controller_vbox pack_start step_size_hbox nil nil 0]
       
       [have controller_frame add controller_vbox nil nil 0]
       
       [have vbox pack_start controller_frame nil nil 0]
       
       
       'movie image'
       
       [= movie_gtk_image [gtk-image-new_from_image [new image [+ 640 320] 480 nil]]]
       [have vbox pack_start movie_gtk_image nil nil 0]
       
       [= scale [gtk-scale-new_with_range `horizontal 0.0 1.0 1.0]]
       [set scale digits 0]
       [have vbox pack_start scale t t 0]
       [let [[movie_length [get this movie_length]]]
	 [if [> movie_length 1]
	     [prog [set scale range 0.0 [- movie_length 1]]
		   [set scale value [- movie_length 1]]]]]
       
       
       'agents'
       
       [= agent_hbox [gtk-hbox-new 2]]
       [have vbox pack_start agent_hbox nil nil 0]
       
       [= initialized t]
       [have execute_mutex unlock]
       ]]

[deftypefunk isismon_project execute create_new_isis_world []
  [terminal_format standard-terminal '\nIsisMon Project creating new IsisWorld.']
  [let [[isis_world_server_hostname [get [get isismon preferences] isis_world_server_hostname]]]
    [= isis_world [new isis_world [new isis_world_client isis_world_server_hostname]]]]]

[defunk isismon_project-new_from_file [isismon filename]
  [terminal_format standard-terminal '\nIsisMon Project: Loading ' filename '.']
  [let [[isis_world [isis_world-new_from_chunk [get [chunk-load filename] inflated]]]]
    [let [[this [new isismon_project isismon]]]
      [have [get this execute_mutex] lock]
      [set this isis_world isis_world]
      [mapc [funk [agent_body]
		  [terminal_format standard-terminal '\n                 Initializing agent, ' [get agent_body name] '.']
		  [let [[moral_compass [get agent_body mind]]]
		    [have moral_compass activate_vital_resources]]
		  [have this add_agent [new isismon_agent this agent_body]]]
	    [get isis_world agent_bodies]]
      [have [get this execute_mutex] unlock]
      [terminal_format standard-terminal '\n                 Load project complete.']
      this]]]

[deftypefunk isismon_project execute save [filename]
  [terminal_format standard-terminal '\nIsisMon Project: Saving ' filename '.']
  [have [get [get isis_world as-chunk] deflated] save filename]
  [terminal_format standard-terminal '\nIsisMon Project: Save project complete.']]

[deftypefunk isismon_project get widget []
  vbox]

[deftypefunk isismon_project execute add_agent [isismon_agent]
  [have agent_frame add [get isismon_agent name] isismon_agent]
  [have [get isismon_agent widget] show_all]
  [have agent_hbox pack_start isismon_agent t t 0]]

[deftypefunk isismon_project execute update_agents []
  [mapc [funk [agent]
	      [have agent update]]
	[get agent_frame values]]]

[deftypefunk isismon_project execute update []
  [let [[movie_length [get this movie_length]]]
    [if [> movie_length 1]
	[set scale range 0.0 [- movie_length 1]]]
    [let [[image_index [get [get scale value] as-integer]]]
      [if [< image_index movie_length]
	  [set movie_gtk_image image [get this movie_image image_index]]]]]
  [have this update_agents]
  [have isismon shrink_window]]

[deftypefunk isismon_project execute cycle []
  [have execute_mutex lock]
  [if initialized
      [let [[time_to_wait_for_thinking 0]]
	[if [and simulation_playing [or [null last_stepped_simulation_time]
					[> [/ [- [get [time] nanoseconds_since_1970] [get last_stepped_simulation_time nanoseconds_since_1970]] 1000000000.0] time_to_wait_for_thinking]]]
	    [let [[step_size [have [get step_size_entry text] read]]]
	      [let [[as_double_funk [get [lookup_type [type step_size]] type_var_value `get `as-double nil]]]
		[if [null as_double_funk]
		    [prog [terminal_format standard-terminal '\nStep size, \'' [get step_size_entry text] '\', cannot be recognized as a number.  Pausing IsisMon and ignoring step command.']
			  [= simulation_playing nil]]
		  [prog [terminal_format standard-terminal '\nStepping simulation by ' [get step_size as-double] ' seconds.']
			[have isis_world step_simulation [get step_size as-double]]
			[have this update]
			[let [[movie_length [get this movie_length]]]
			  [if [> movie_length 1]
			      [set scale value [- movie_length 1]]]]
			[= last_stepped_simulation_time [time]]]]]]]
	[have this update]]]
  [have execute_mutex unlock]]

[deftypefunk isismon_project get overview_image_sequence []
  [if isis_world
      [get isis_world overview_image_sequence]]]

[deftypefunk isismon_project get movie_length []
  [let [[overview_image_sequence [get this overview_image_sequence]]]
    [if overview_image_sequence
	[get overview_image_sequence length]
      0]]]

[deftypefunk isismon_project get movie_image [index]
  [let [[agent_names    [get agent_frame keys]]
	[image_sequence [new image_sequence nil]]]
    [let [[agent_count [if [null agent_names]
			   0
			 [length agent_names]]]]
      [let [[image_width [+ 1 640 1 [if agent_names
					320
				      0] 1]]
	    [image_height [+ 1 [if [> [* agent_count [+ 240 1]] [+ 480 1]]
				   [* agent_count [+ 240 1]]
				 [+ 480 1]]]]]
	[if [!= [* [/ image_width 2] 2]
		image_width]
	    [= image_width [+ image_width 1]]]
	[if [!= [* [/ image_height 2] 2]
		image_height]
	    [= image_height [+ image_height 1]]]
	[let [[image [new image image_width image_height nil]]]
	  [have image clear 0 0 0 255]
	  [let [[overview_image_sequence [get this overview_image_sequence]]]
	    [let [[overview_image [get overview_image_sequence elt index]]]
	      [have overview_image copy_rectangle_to 0 0 image 1 1 640 480]]]
	  [let [[agent_index 0]]
	    [mapc [funk [agent_name]
			[let [[isismon_agent [have agent_frame lookup agent_name]]]
			  [let [[retina_image_sequence [get isismon_agent retina_image_sequence]]]
			    [if [< index [get retina_image_sequence length]]
				[let [[retina_image [get retina_image_sequence elt index]]]
				  [have retina_image copy_rectangle_to 0 0 image [+ 1 640 1] [+ 1 [* agent_index [+ 240 1]]] 320 240]]]]]
			[= agent_index [+ agent_index 1]]]
		  agent_names]]
	  image]]]]]

[deftypefunk isismon_project get new_movie []
  [let [[movie_length   [get this movie_length]]
	[image_sequence [new image_sequence nil]]]
    [dotimes [index movie_length]
      [have image_sequence add_image_to_end [get this movie_image index]]]
    [let [[bit_rate   5000000]
	  [frame_rate 25]]
      [let [[movie_context [new movie_context [get image_sequence width] [get image_sequence height] bit_rate frame_rate]]]
	[let [[new_movie [movie-new_from_image_sequence movie_context [get image_sequence new_by_time_stretch 3.0]]]]
	  [have movie_context destroy]
	  new_movie]]]]]

[deftypefunk isismon_project execute initialize_simulation []
  [terminal_format standard-terminal '\nIsisMon: Running simulation initialization sequence.']
  [have isis_world initialize_simulation]]

[deftypefunk isismon_project execute view_initialization_events []
  [terminal_format standard-terminal '\nIsisMon ' `isis_world-initialize ' events in temporal order:']
  [mapc [funk [event]
	      [terminal_format standard-terminal '\n  ' event]]
	[get [get isis_world initialize_events] leaves]]]

[deftypefunk isismon_project execute close []
  [have execute_mutex lock]
  [if initialized
      [prog [terminal_format standard-terminal '\nIsisMon Project Closing.']
	    [have isis_world destroy]
	    [= initialized nil]]]
  [have execute_mutex unlock]]



[deframe isismon [frame] [[initialize_mutex [new mutex]]
			  [done             nil]
			  fiber
			  
			  window
			  vbox
			  
			  menu_bar
			  file_menu_item
			  file_menu
			  file_new_project_menu_item
			  file_open_project_menu_item
			  file_close_project_menu_item
			  file_save_project_menu_item
			  file_export_movie_menu_item
			  file_exit_menu_item
			  edit_menu_item
			  edit_menu
			  edit_preferences_menu_item
			  project_menu_item
			  project_menu
			  project_new_ralph_agent_menu_item
			  project_new_lauren_agent_menu_item
			  project_new_macy_agent_menu_item
			  simulation_menu_item
			  simulation_menu
			  simulation_run_initialization_sequence_menu_item
			  simulation_view_initialization_events_menu_item
			  
			  project_vbox
			  project_vbox__contained_widget
			  isismon_project
			  
			  preferences
			  ]
  [new []
       [have initialize_mutex lock]
       [= fiber [fiber [funk []
			     [have this load_preferences]
			     
			     [=    window          [gtk-window-new]]
			     [have window connect_hide_on_delete]
			     [set  window title    [format nil 'IsisMon']]
			     [=    vbox            [gtk-vbox-new 0]]
			     [have window add vbox]
			     
			     
			     'window menu'
			     
			     [=    menu_bar        [gtk-menu_bar-new]]
			     [have vbox pack_start menu_bar nil nil 0]
			     
			     [=    file_menu_item               [gtk-menu_item-new 'File']]
			     [=    file_menu                    [gtk-menu-new]]
			     [=    file_new_project_menu_item   [gtk-menu_item-new 'New Project']]
			     [=    file_open_project_menu_item  [gtk-menu_item-new 'Open Project...']]
			     [=    file_close_project_menu_item [gtk-menu_item-new 'Close Project']]
			     [=    file_save_project_menu_item  [gtk-menu_item-new 'Save Project...']]
			     [=    file_export_movie_menu_item  [gtk-menu_item-new 'Export Movie...']]
			     [=    file_exit_menu_item          [gtk-menu_item-new 'Exit']]
			     [have menu_bar       append        file_menu_item]
			     [set  file_menu_item submenu       file_menu]
			     [have file_menu      append        file_new_project_menu_item]
			     [have file_menu      append        file_open_project_menu_item]
			     [have file_menu      append        file_close_project_menu_item]
			     [have file_menu      append        file_save_project_menu_item]
			     [have file_menu      append        file_export_movie_menu_item]
			     [have file_menu      append        file_exit_menu_item]
			     
			     [have file_new_project_menu_item signal_connect 'activate'
				   [funk []
					 [have this start_new_project]]
				   nil]
			     
			     [have file_open_project_menu_item signal_connect 'activate'
				   [funk []
					 [new isismon_open_project_dialog this]]
				   nil]
			     
			     [have file_close_project_menu_item signal_connect 'activate'
				   [funk []
					 [have this close_project]]
				   nil]
			     
			     [have file_save_project_menu_item signal_connect 'activate'
				   [funk []
					 [new isismon_save_project_dialog this]]
				   nil]
			     
			     [have file_export_movie_menu_item signal_connect 'activate'
				   [funk []
					 [new isismon_export_movie_dialog this]]
				   nil]
			     
			     [have file_exit_menu_item signal_connect 'activate'
				   [funk []
					 [= done t]]
				   nil]
			     
			     [= edit_menu_item             [gtk-menu_item-new 'Edit']]
			     [= edit_menu                  [gtk-menu-new]]
			     [= edit_preferences_menu_item [gtk-menu_item-new 'Preferences...']]
			     [have menu_bar       append  edit_menu_item]
			     [set  edit_menu_item submenu edit_menu]
			     [have edit_menu      append  edit_preferences_menu_item]
			     
			     [have edit_preferences_menu_item signal_connect 'activate'
				   [funk []
					 [terminal_format standard-terminal '\nIsisMon: edit preferences.']
					 [new isismon_preference_editor this]]
				   nil]
			     
			     [= project_menu_item                  [gtk-menu_item-new 'Project']]
			     [= project_menu                       [gtk-menu-new]]
			     [= project_new_ralph_agent_menu_item  [gtk-menu_item-new 'New Ralph Agent']]
			     [= project_new_lauren_agent_menu_item [gtk-menu_item-new 'New Lauren Agent']]
			     [= project_new_macy_agent_menu_item   [gtk-menu_item-new 'New Macy Agent']]
			     [have menu_bar          append  project_menu_item]
			     [set  project_menu_item submenu project_menu]
			     [have project_menu      append  project_new_ralph_agent_menu_item]
			     [have project_menu      append  project_new_lauren_agent_menu_item]
			     [have project_menu      append  project_new_macy_agent_menu_item]
			     
			     [have project_new_ralph_agent_menu_item signal_connect 'activate'
				   [funk []
					 [have this create_new_agent `Ralph]]
				   nil]
			     
			     [have project_new_lauren_agent_menu_item signal_connect 'activate'
				   [funk []
					 [have this create_new_agent `Lauren]]
				   nil]
			     
			     [have project_new_macy_agent_menu_item signal_connect 'activate'
				   [funk []
					 [have this create_new_agent `Macy]]
				   nil]
			     
			     [= simulation_menu_item                             [gtk-menu_item-new 'Simulation']]
			     [= simulation_menu                                  [gtk-menu-new]]
			     [= simulation_run_initialization_sequence_menu_item [gtk-menu_item-new 'Run Initialization Sequence']]
			     [= simulation_view_initialization_events_menu_item  [gtk-menu_item-new 'View Initialization Events']]
			     [have menu_bar             append  simulation_menu_item]
			     [set  simulation_menu_item submenu simulation_menu]
			     [have simulation_menu      append  simulation_run_initialization_sequence_menu_item]
			     [have simulation_menu      append  simulation_view_initialization_events_menu_item]
			     
			     [have simulation_run_initialization_sequence_menu_item signal_connect 'activate'
				   [funk []
					 [have isismon_project initialize_simulation]]
				   nil]
			     
			     [have simulation_view_initialization_events_menu_item signal_connect 'activate'
				   [funk []
					 [have isismon_project view_initialization_events]]
				   nil]
			     
			     
			     [= project_vbox [gtk-vbox-new 0]]
			     [have vbox pack_start project_vbox nil nil 0]
			     
			     [= isismon_project nil]
			     [have this close_project]
			     
			     [set window default_size [+ 640 320] [+ [* 240 2] 128]]
			     
			     [have window show_all]
			     
			     [have initialize_mutex unlock]
			     
			     [while [not done]
			       [have this cycle]]
			     [have window destroy]]
		       nil]]
       [have initialize_mutex lock]
       nil]]

[deftypefunk isismon execute cycle []
  [if [not [get window visible]]
      [= done t]]
  [if isismon_project
      [have isismon_project cycle]]
  [millisleep 100]]

[deftypefunk isismon execute shrink_window []
  [set window size 1 1]]

[deftypefunk isismon execute load_preferences []
  [let [[home_dir [getenv 'HOME']]]
    [if [null home_dir]
	[prog [terminal_format standard-terminal '\nIsisMon Warning: Could not load preferences because HOME is not a defined environment variable.']
	      [= preferences [new isismon_preferences]]]
      [let [[preferences_filename [pathname-concat home_dir '.isismon']]]
	[let [[loaded_preferences [isismon_preferences-load preferences_filename]]]
	  [if [null loaded_preferences]
	      [prog [terminal_format standard-terminal '\nIsisMon Warning: Could not load preferences from ' preferences_filename '.  Creating new default preferences file.']
		    [= preferences [new isismon_preferences]]
		    [have this save_preferences]]
	    [= preferences loaded_preferences]]]]]]]

[deftypefunk isismon execute save_preferences []
  [let [[home_dir [getenv 'HOME']]]
    [if [null home_dir]
	[terminal_format standard-terminal '\nIsisMon Warning: Could not save preferences because HOME is not a defined environment variable.']
      [let [[preferences_filename [pathname-concat home_dir '.isismon']]]
	[have preferences save preferences_filename]]]]]

[deftypefunk isismon execute create_new_agent [name]
  [terminal_format standard-terminal '\nIsisMon: project new ' name ' agent.']
  [have isismon_project add_agent [isismon_agent-new_from_name isismon_project name]]
  [terminal_format standard-terminal '\nIsisMon: new ' name ' agent created successfully.']]

[deftypefunk isismon execute export_movie [filename]
  [terminal_format standard-terminal '\nIsisMon Export Movie: Saving MPEG to file: ' filename]
  [have [get isismon_project new_movie] save filename]
  [terminal_format standard-terminal '\nIsisMon Export Movie: Completed saving MPEG to file: ' filename]]

[deftypefunk isismon execute start_new_project []
  [have this close_project]
  [terminal_format standard-terminal '\nIsisMon New Project']
  [let [[new_isismon_project [new isismon_project this]]]
    [have new_isismon_project create_new_isis_world]
    [have project_vbox remove project_vbox__contained_widget]
    [have project_vbox pack_start [get new_isismon_project widget] nil nil 0]
    [have [get new_isismon_project widget] show_all]
    [= project_vbox__contained_widget [get new_isismon_project widget]]
    [= isismon_project new_isismon_project]]
  [have this enable_project_commands]]

[deftypefunk isismon execute open_project [filename]
  [have this close_project]
  [terminal_format standard-terminal '\nIsisMon Open Project: ' filename]
  [let [[new_isismon_project [isismon_project-new_from_file this filename]]]
    [if new_isismon_project
	[prog [have project_vbox remove project_vbox__contained_widget]
	      [have project_vbox pack_start [get new_isismon_project widget] nil nil 0]
	      [have [get new_isismon_project widget] show_all]
	      [= project_vbox__contained_widget [get new_isismon_project widget]]
	      [= isismon_project new_isismon_project]
	      [have this enable_project_commands]]
      [terminal_format standard-terminal '\nIsisMon Failed to Open Project: ' filename]]]]

[deftypefunk isismon execute enable_project_commands []
  [set file_close_project_menu_item                     sensitive t]
  [set file_save_project_menu_item                      sensitive t]
  [set file_export_movie_menu_item                      sensitive t]
  [set simulation_run_initialization_sequence_menu_item sensitive t]
  [set simulation_view_initialization_events_menu_item  sensitive t]
  [set project_new_ralph_agent_menu_item                sensitive t]
  [set project_new_lauren_agent_menu_item               sensitive t]
  [set project_new_macy_agent_menu_item                 sensitive t]]

[deftypefunk isismon execute disable_project_commands []
  [set file_close_project_menu_item                     sensitive nil]
  [set file_save_project_menu_item                      sensitive nil]
  [set file_export_movie_menu_item                      sensitive nil]
  [set simulation_run_initialization_sequence_menu_item sensitive nil]
  [set simulation_view_initialization_events_menu_item  sensitive nil]
  [set project_new_ralph_agent_menu_item                sensitive nil]
  [set project_new_lauren_agent_menu_item               sensitive nil]
  [set project_new_macy_agent_menu_item                 sensitive nil]]

[deftypefunk isismon execute close_project []
  [have this disable_project_commands]
  [if isismon_project
      [prog [have isismon_project close]
	    [= isismon_project nil]]]
  [if project_vbox__contained_widget
      [have project_vbox remove project_vbox__contained_widget]]
  [let [[no_project_widget [gtk-label-new 'Welcome to IsisMon']]]
    [have project_vbox pack_start no_project_widget t t 0]
    [= project_vbox__contained_widget no_project_widget]
    [have no_project_widget show_all]]
  ]

[deftypefunk isismon execute save_project [filename]
  [terminal_format standard-terminal '\nIsisMon Save Project: ' filename]
  [have isismon_project save filename]]


[defmetro isismon [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [terminal_format standard-terminal '\nisismon: unknown command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[terminal_format standard-terminal 'ISISMON(1)'
			 '\n'   'NAME'
			 '\n'   '       isismon - monitor and control an isis_world experiment.'
			 '\n'   ''
			 '\n'   'SYNOPSIS'
			 '\n'   '       isismon -h <isis_world>'
			 '\n'   ''
			 '\n'   'DESCRIPTION'
			 '\n'   '       The isismon program provides dynamic real-time monitoring of a running isis_world experiment.'
			 '\n'   '']
      `[prog [new isismon]
	     nil]]]]


