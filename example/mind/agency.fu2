'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'agency'

[deframe agency [frame] [name
			 layer
			 resource_frame
			 trace_story
			 [cause_group              [new cause_group]]
			 [other_cause_groups_mutex [new mutex]]
			 [other_cause_groups       nil]
			 runtime_metric_monitor]
  [new [new-name]
       [terminal_format standard-terminal '\ncreating ' new-name ' agency.']
       [= name                   new-name]
       [= layer                  nil] 'We set this when we add the resource to a layer.'
       [= resource_frame         [frame]]
       [= trace_story            [new story]]
       [= runtime_metric_monitor [new mind_runtime_metric_monitor cause_group]]
       this]]

[deftypefunk agency execute add_resource [resource]
  [if [get resource agency]
      [error bug_type `resource_already_part_of_an_agency resource resource agency this]]
  [if [not [is-type `resource resource]]
      [error bug_type `type_error
	     description 'resource should be type resource.']]
  [set resource agency this]
  [have resource add_cause_group cause_group]
  [have other_cause_groups_mutex lock]
  [mapc [funk [other_cause_group]
	      [have resource add_cause_group other_cause_group]]
	other_cause_groups]
  [have other_cause_groups_mutex unlock]
  [have resource_frame add [get resource name] resource]]

[deftypefunk agency execute add_cause_group [cause_group]
  [have other_cause_groups_mutex lock]
  [= other_cause_groups [cons cause_group other_cause_groups]]
  [mapc [funk [resource]
	      [have resource add_cause_group cause_group]]
	[get this resources]]
  [have other_cause_groups_mutex unlock]]

[deftypefunk agency execute save_all_plots [time_offset filename_root]
  [have runtime_metric_monitor save_all_plots time_offset [format nil filename_root '-' name]]
  [mapc [funk [resource]
	      [have resource save_all_plots time_offset [format nil filename_root '-' name]]]
	[get this resources]]]

[deftypefunk agency execute save_bytecode_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytecode_count_plot time_offset [format nil filename_root '-' name]]
  [mapc [funk [resource]
	      [have resource save_bytecode_count_plots time_offset [format nil filename_root '-' name]]]
	[get this resources]]]

[deftypefunk agency execute save_execution_nanoseconds_plots [time_offset filename_root]
  [have runtime_metric_monitor save_execution_nanoseconds_plot time_offset [format nil filename_root '-' name]]
  [mapc [funk [resource]
	      [have resource save_execution_nanoseconds_plots time_offset [format nil filename_root '-' name]]]
	[get this resources]]]

[deftypefunk agency execute save_bytes_allocated_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_allocated_count_plot time_offset [format nil filename_root '-' name]]
  [mapc [funk [resource]
	      [have resource save_bytes_allocated_count_plots time_offset [format nil filename_root '-' name]]]
	[get this resources]]]

[deftypefunk agency get resource [name]
  [let [[resource [have resource_frame lookup name]]]
    [if [null resource]
	[error bug_type      `resource_does_not_exist_in_agency
	       resource_name name]
      resource]]]

[deftypefunk agency get mind []
  [if layer
      [get layer mind]
    nil]]

[deftypefunk agency get body []
  [if layer
      [get layer body]
    nil]]

[deftypefunk agency execute call [name :rest args]
  [let [[resource [get this resource name]]]
    [have-apply resource call args]]]

[deftypefunk agency execute wait_to_call [name :rest args]
  [let [[resource [get this resource name]]]
    [have-apply resource wait_to_call args]]]

[deftypefunk agency execute activate [name :rest args]
  [let [[resource [get this resource name]]]
    [have-apply resource activate args]]]

[deftypefunk agency execute wait_to_activate [name :rest args]
  [let [[resource [get this resource name]]]
    [have-apply resource wait_to_activate args]]]

[deftypefunk agency get resources []
  [get resource_frame values]]

[deftypefunk agency get resource_names []
  [get resource_frame slots]]

[deftypefunk agency get resource_count []
  [simple_length [get this resources]]]

