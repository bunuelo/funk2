'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'mental_layer'

[deframe mental_layer [frame] [index
			       name
			       mind
			       agency_frame
			       [cause_group              [new cause_group]]
			       [other_cause_groups_mutex [new mutex]]
			       [other_cause_groups       nil]]
  [new [new-index new-name]
       [terminal_format standard-terminal '\ncreating ' new-name ' mental_layer.']
       [= index        new-index]
       [= name         new-name]
       [= mind         nil] 'We set this when we add the layer to a mind.'
       [= agency_frame [frame]]
       this]]

[deftypefunk mental_layer get body []
  [if mind
      [get mind body]
    nil]]

[deftypefunk mental_layer get agencies []
  [get agency_frame values]]

[deftypefunk mental_layer get agency_names []
  [get agency_frame slots]]

[deftypefunk mental_layer execute add_agency [agency]
  [if [get agency layer]
      [error bug_type `agency_is_already_part_of_a_mental_layer agency agency layer this]]
  [if [not [is-type `agency agency]]
      [error bug_type `type_error
	     description 'agency should be type agency.']]
  [set agency layer this]
  [have agency add_cause_group cause_group]
  [have other_cause_groups_mutex lock]
  [mapc [funk [other_cause_group]
	      [have agency add_cause_group other_cause_group]]
	other_cause_groups]
  [have other_cause_groups_mutex unlock]
  [have agency_frame add [get agency name] agency]]

[deftypefunk mental_layer execute add_cause_group [cause_group]
  [have other_cause_groups_mutex lock]
  [= other_cause_groups [cons cause_group other_cause_groups]]
  [mapc [funk [agency]
	      [have agency add_cause_group cause_group]]
	[get this agencies]]
  [have other_cause_groups_mutex unlock]]

[deftypefunk mental_layer get agency [name]
  [let [[agency [have agency_frame lookup name]]]
    [if [null agency]
	[error bug_type    `agency_does_not_exist_in_mental_layer
	       agency_name name]
      agency]]]

[deftypefunk mental_layer get resource [agency_name resource_name]
  [get [get this agency agency_name] resource resource_name]]

[deftypefunk mental_layer execute call [agency_name resource_name :rest args]
  [let [[agency [have agency_frame lookup agency_name]]]
    [have-apply agency call [cons resource_name args]]]]

[deftypefunk mental_layer execute wait_to_call [agency_name resource_name :rest args]
  [let [[agency [have agency_frame lookup agency_name]]]
    [have-apply agency wait_to_call [cons resource_name args]]]]

[deftypefunk mental_layer execute activate [agency_name resource_name :rest args]
  [let [[agency [get this agency agency_name]]]
    [have-apply agency activate [cons resource_name args]]]]

[deftypefunk mental_layer execute wait_to_activate [agency_name resource_name :rest args]
  [let [[agency [get this agency agency_name]]]
    [have-apply agency wait_to_activate [cons resource_name args]]]]

[deftypefunk mental_layer get agency_resource_count [agency_name]
  [get [get this agency agency_name] resource_count]]

[deftypefunk mental_layer get agency_resource_names [agency_name]
  [get [get this agency agency_name] resource_names]]
