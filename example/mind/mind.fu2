'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'mind'

[deframe mind [frame] [creation_time
		       [body-conditionlock [new conditionlock]]
		       [body               nil]
		       layer_frame
		       resources_waiting_for_mental_trigger_event_frame
		       knowledge_event_stream_iterator_frame
		       global_semantic_realm
		       semantic_knowledge_base_ptypehash
		       semantic_knowledge_base_add_event_callback_funks
		       [index_name_type_mutex                            [new mutex]]
		       [index_name_type_ptypehash                        [new ptypehash]]
		       [processed_physical_world_step_conditionlock      [new conditionlock]]
		       [processed_physical_world_step                    -1]
		       [cause_group                                      [mind_runtime_metric-new_cause_group]]
		       [other_cause_groups_mutex                         [new mutex]]
		       [other_cause_groups                               nil]
		       [connect_layer_cause_group_interactions_layers    nil]
		       [connect_layer_cause_group_interactions_mutex     [new mutex]] 
		       [connect_agency_cause_group_interactions_agencies nil]
		       [connect_agency_cause_group_interactions_mutex    [new mutex]] 
		       runtime_metric_monitor]
  [new []
       [terminal_format standard-terminal '\ncreating mind.']
       [cause-define semantic_frame-trace_add                            t]
       [cause-define semantic_frame-trace_remove                         t]
       [cause-define semantic_knowledge_base-trace_add_semantic_frame    t]
       [cause-define semantic_knowledge_base-trace_remove_semantic_frame t]
       [= creation_time                                    [time]]
       [= layer_frame                                      [frame]]
       [= knowledge_event_stream_iterator_frame            [frame]]
       [= semantic_knowledge_base_ptypehash                [new ptypehash]]
       [= semantic_knowledge_base_add_event_callback_funks nil]
       [= runtime_metric_monitor                           [new mind_runtime_metric_monitor cause_group]]
       this]]

[deftypefunk mind get mind []
  this]

[deftypefunk mind set processed_physical_world_step [physical_world_step]
  [have processed_physical_world_step_conditionlock lock]
  [= processed_physical_world_step physical_world_step]
  [have processed_physical_world_step_conditionlock signal]
  [have processed_physical_world_step_conditionlock unlock]]

[deftypefunk mind execute wait_for_processed_physical_world_step [wait_processed_physical_world_step]
  [have processed_physical_world_step_conditionlock lock]
  [while [< processed_physical_world_step wait_processed_physical_world_step]
    [have processed_physical_world_step_conditionlock wait]]
  [let [[result processed_physical_world_step]]
    [have processed_physical_world_step_conditionlock unlock]
    result]]

[deftypefunk mind set body [new-body]
  [have body-conditionlock lock]
  [= body new-body]
  [have body-conditionlock signal]
  [have body-conditionlock unlock]]

[deftypefunk mind execute stop_me_while_body_null []
  [have body-conditionlock lock]
  [while [null body]
    [have body-conditionlock wait]]
  [have body-conditionlock unlock]]

[deftypefunk mind get name_type_index [name_type]
  [let [[result [have index_name_type_ptypehash lookup name_type]]]
    [if [null result]
	[prog [= result 1]
	      [have index_name_type_ptypehash add name_type result]]]
    result]]

[deftypefunk mind set name_type_index [name_type index]
  [have index_name_type_ptypehash add name_type index]]

[deftypefunk mind get new-name [name_type]
  [have index_name_type_mutex lock]
  [let [[index [get this name_type_index name_type]]]
    [set this name_type_index name_type [+ 1 index]]
    [have index_name_type_mutex unlock]
    [get [string-concat [get name_type as-string] '-' [get index as-string]] as-symbol]]]

[deftypefunk mind get name []
  [if [null body]
      [error bug_name `mind_needs_body_to_have_name]
    [get body name]]]

[deftypefunk mind get all_perception_symbols []
  [if [null body]
      [error bug_name `mind_needs_body]
    [get body all_perception_symbols]]]

[deftypefunk mind get layers []
  [get [get this layer_frame] values]]

[deftypefunk mind get semantic_realm []
  [if [null global_semantic_realm]
      [= global_semantic_realm [new semantic_realm]]]
  global_semantic_realm]

[deftypefunk mind set semantic_realm [semantic_realm]
  [= global_semantic_realm semantic_realm]]

[deftypefunk mind execute add_layer [layer]
  [if [get layer mind]
      [error bug_type `layer_is_already_part_of_a_mind layer layer mind this]]
  [if [not [is-type `mental_layer layer]]
      [error bug_type `type_error
	     description 'layer should be type mental_layer.']]
  [set layer mind this]
  [have layer add_cause_group cause_group]
  [have other_cause_groups_mutex lock]
  [mapc [funk [other_cause_group]
	      [have layer add_cause_group other_cause_group]]
	other_cause_groups]
  [have other_cause_groups_mutex unlock]
  [mapc [funk [other_layer]
	      [let [[cause_group_interaction-1 [new cause_group_interaction]]
		    [cause_group_interaction-2 [new cause_group_interaction]]]
		[have [get layer       cause_group] add_cause_group_interaction [get other_layer cause_group] cause_group_interaction-1]
		[have [get other_layer cause_group] add_cause_group_interaction [get other_layer cause_group] cause_group_interaction-2]]]
	[get this layers]]
  [have [get this layer_frame] add [get layer name] layer]]

[deftypefunk mind execute add_cause_group [cause_group]
  [have other_cause_groups_mutex lock]
  [= other_cause_groups [cons cause_group other_cause_groups]]
  [mapc [funk [layer]
	      [have layer add_cause_group cause_group]]
	[get this layers]]
  [have other_cause_groups_mutex unlock]]

[deftypefunk mind execute save_all_plots [time_offset filename_root]
  [have runtime_metric_monitor save_all_plots time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_all_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_bytecode_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytecode_count_plot time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_bytecode_count_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_simulation_bytecode_rate_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytecode_rate_plot [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_simulation_bytecode_rate_plots [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_simulation_bytecode_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytecode_count_plot [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_simulation_bytecode_count_plots [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_execution_nanoseconds_plots [time_offset filename_root]
  [have runtime_metric_monitor save_execution_nanoseconds_plot time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_execution_nanoseconds_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_bytes_allocated_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_allocated_count_plot time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_bytes_allocated_count_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_bytes_freed_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_freed_count_plot time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_bytes_freed_count_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_bytes_footprint_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_footprint_plot time_offset [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_bytes_footprint_plots time_offset [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_simulation_bytes_footprint_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytes_footprint_plot [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_simulation_bytes_footprint_plots [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_simulation_semantic_frame_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_semantic_frame_count_plot [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_simulation_semantic_frame_count_plots [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[deftypefunk mind execute save_simulation_semantic_frame_value_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_semantic_frame_value_count_plot [format nil filename_root '-' [get this name]]]
  [parc [funk [layer]
	      [have layer save_simulation_semantic_frame_value_count_plots [format nil filename_root '-' [get this name]]]]
	[get this layers]]]

[defmetro mind-create_layer [mind layer_index layer_name]
  `[have ,mind add_layer [new mental_layer ,layer_index [quote ,layer_name]]]]

[deftypefunk mind get mental_layer [name]
  [let [[layer [have [get this layer_frame] lookup name]]]
    [if [null layer]
	[error bug_type   `mental_layer_does_not_exist_in_mind
	       layer_name name]
      layer]]]

[deftypefunk mind get layer [name]
  [get this mental_layer name]]

[deftypefunk mind get layer_agency_names [name]
  [get [get this layer name] agency_names]]

[defmetro mind-layer [mind layer_name]
  `[get ,mind layer [quote ,layer_name]]]

[deftypefunk mind get layer_names []
  [get [get this layer_frame] slots]]

[deftypefunk mind get layer_count []
  [simple_length [get this layer_names]]]

[deftypefunk mind get time_step []
  [get body time_step]]

[deftypefunk mind execute wait_for_time_step [wait_time_step]
  [have body wait_for_time_step wait_time_step]]

[deftypefunk mind execute create_knowledge_event_stream_iterator [knowledge_base_name knowledge_event_stream_iterator_name]
  [let [[knowledge_base [have [get this semantic_realm] lookup_semantic_knowledge_base knowledge_base_name]]]
    [if [null knowledge_base]
	[error bug_type                             `tried_to_create_knowledge_event_stream_iterator_for_nonexistent_knowledge_base
	       knowledge_base_name                  knowledge_base_name
	       knowledge_event_stream_iterator_name knowledge_event_stream_iterator_name]
      [have knowledge_event_stream_iterator_frame add knowledge_event_stream_iterator_name [get knowledge_base new-event_stream_iterator]]]]]

[deftypefunk mind get knowledge_event_stream_iterator [knowledge_event_stream_iterator_name]
  [have knowledge_event_stream_iterator_frame lookup knowledge_event_stream_iterator_name]]


[deftypefunk mind execute add_agency [layer_name agency]
  [have [get this layer layer_name] add_agency agency]]

[defmetro mind-create_agency [mind layer_name agency_name]
  `[have ,mind add_agency [quote ,layer_name] [new agency [quote ,agency_name]]]]


[deftypefunk mind get agency [layer_name agency_name]
  [get [get this layer layer_name] agency agency_name]]

[defmetro mind-agency [mind layer_name agency_name]
  `[get ,mind agency [quote ,layer_name] [quote ,agency_name]]]


[deftypefunk mind execute add_resource [layer_name agency_name resource]
  [have [get this agency layer_name agency_name] add_resource resource]]

[defmetro mind-create_resource [mind layer_name agency_name resource_name resource_args :rest resource_body]
  `[have ,mind add_resource [quote ,layer_name] [quote ,agency_name] [resource ,resource_name ,resource_args @resource_body]]]


[deftypefunk mind get layer_agency_resource_names [layer_name agency_name]
  [get [get this layer layer_name] agency_resource_names agency_name]]

[deftypefunk mind get layer_agency_resource_count [layer_name agency_name]
  [get [get this layer layer_name] agency_resource_count agency_name]]

[deftypefunk mind execute call [layer_name agency_name resource_name :rest args]
  [let [[layer_frame [get this layer_frame]]]
    [let [[layer [have layer_frame lookup layer_name]]]
      [have-apply layer call `[,agency_name ,resource_name @args]]]]]

[defmetro mind-call [mind layer_name agency_name resource_name :rest args]
  `[have ,mind call [quote ,layer_name] [quote ,agency_name] [quote ,resource_name] @args]]

[deftypefunk mind execute wait_to_call [layer_name agency_name resource_name :rest args]
  [let [[layer_frame [get this layer_frame]]]
    [let [[layer [have layer_frame lookup layer_name]]]
      [have-apply layer wait_to_call `[,agency_name ,resource_name @args]]]]]

[defmetro mind-wait_to_call [mind layer_name agency_name resource_name :rest args]
  `[have ,mind wait_to_call [quote ,layer_name] [quote ,agency_name] [quote ,resource_name] @args]]

[deftypefunk mind execute activate [layer_name agency_name resource_name :rest args]
  [let [[layer_frame [get this layer_frame]]]
    [let [[layer [get this layer layer_name]]]
      [have-apply layer activate `[,agency_name ,resource_name @args]]]]]

[defmetro mind-activate [mind layer_name agency_name resource_name :rest args]
  `[have ,mind activate [quote ,layer_name] [quote ,agency_name] [quote ,resource_name] @args]]

[deftypefunk mind execute wait_to_activate [layer_name agency_name resource_name :rest args]
  [let [[layer_frame [get this layer_frame]]]
    [let [[layer [get this layer layer_name]]]
      [have-apply layer wait_to_activate `[,agency_name ,resource_name @args]]]]]

[defmetro mind-wait_to_activate [mind layer_name agency_name resource_name :rest args]
  `[have ,mind wait_to_activate [quote ,layer_name] [quote ,agency_name] [quote ,resource_name] @args]]

[deftypefunk mind execute add_semantic_knowledge_base [semantic_knowledge_base]
  [let [[name [get semantic_knowledge_base name]]]
    [have semantic_knowledge_base_ptypehash add name semantic_knowledge_base]]
  [mapc [funk [callback_funk]
	      [funkall callback_funk semantic_knowledge_base]]
	semantic_knowledge_base_add_event_callback_funks]]

[deftypefunk mind get semantic_knowledge_base [name]
  [let [[semantic_knowledge_base [have semantic_knowledge_base_ptypehash lookup name]]]
    [if [null semantic_knowledge_base]
	[error bug_type                     `mind-get-semantic_knowledge_base-not_defined
	       semantic_knowledge_base_name name]
      semantic_knowledge_base]]]

[deftypefunk mind get semantic_knowledge_bases []
  [get semantic_knowledge_base_ptypehash values]]

[deftypefunk mind execute add_semantic_knowledge_base_add_event_callback_funk [callback_funk]
  [= semantic_knowledge_base_add_event_callback_funks [cons callback_funk semantic_knowledge_base_add_event_callback_funks]]]  

[deftypefunk mind get resource [layer_name agency_name resource_name]
  [get [get this layer layer_name] resource agency_name resource_name]]

[deftypefunk mind get resources []
  [let [[resources nil]]
    [mapc [funk [layer]
		[mapc [funk [agency]
			    [mapc [funk [resource]
					[= resources [cons resource resources]]]
				  [get agency resources]]]
		      [get layer agencies]]]
	  [get this layers]]
    resources]]

[deftypefunk mind get agencies []
  [let [[agencies nil]]
    [mapc [funk [layer]
		[mapc [funk [agency]
			    [= agencies [cons agency agencies]]]
		      [get layer agencies]]]
	  [get this layers]]
    agencies]]

[deftypefunk mind execute connect_layer_cause_group_interactions [layer]
  [have connect_layer_cause_group_interactions_mutex lock]
  [parc [funk [other_layer]
	      [let [[cause_group_interaction-1 [new cause_group_interaction]]
		    [cause_group_interaction-2 [new cause_group_interaction]]]
		[have [get layer       cause_group] add_cause_group_interaction [get other_layer cause_group] cause_group_interaction-1]
		[have [get other_layer cause_group] add_cause_group_interaction [get layer       cause_group] cause_group_interaction-2]]]
	connect_layer_cause_group_interactions_layers]
  [= connect_layer_cause_group_interactions_layers [cons layer connect_layer_cause_group_interactions_layers]]
  [have connect_layer_cause_group_interactions_mutex unlock]]

[deftypefunk mind execute connect_agency_cause_group_interactions [agency]
  [have connect_agency_cause_group_interactions_mutex lock]
  [parc [funk [other_agency]
	      [let [[cause_group_interaction-1 [new cause_group_interaction]]
		    [cause_group_interaction-2 [new cause_group_interaction]]]
		[have [get agency       cause_group] add_cause_group_interaction [get other_agency cause_group] cause_group_interaction-1]
		[have [get other_agency cause_group] add_cause_group_interaction [get agency       cause_group] cause_group_interaction-2]]]
	connect_agency_cause_group_interactions_agencies]
  [= connect_agency_cause_group_interactions_agencies [cons agency connect_agency_cause_group_interactions_agencies]]
  [have connect_agency_cause_group_interactions_mutex unlock]]

[deftypefunk mind execute connect_all_cause_group_interactions []
  [mapc [funk [agency]
	      [have this connect_agency_cause_group_interactions agency]]
	[get this agencies]]
  [mapc [funk [layer]
	      [have this connect_layer_cause_group_interactions layer]]
	[get this layers]]]

[deftypefunk mind execute activate_vital_resources []
  [terminal_format standard-terminal '\nmind: activating vital resources.']
  [mapc [funk [resource]
	      [if [is-type `vital_resource resource]
		  [prog `[terminal_format standard-terminal '\n  mind-activate_vital_resources: ' [get resource name] ' is vital.']
			[have resource stop_me_until_initialized]
			`[terminal_format standard-terminal '\n  mind-activate_vital_resources: activating ' [get resource name] '!']
			[have resource activate]]]]
	[get this resources]]]

[deftypefunk mind execute destroy []
  [mapc [funk [resource]
	      [have resource destroy]]
	[get this resources]]]

[deftypefunk mind execute quit []
  [have this destroy]
  [sleep 1]
  [mapc [funk [resource]
	      [have resource quit]]
	[get this resources]]]

[deftypefunk mind execute print_stack_traces []
  [let [[resources [get this resources]]]
    [mapc [funk [resource]
		[format stdout '\n' '***' [get resource name] '***']
		[have resource print_stack_trace]]
	  resources]]]

