'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'resource'

[deframe resource [frame] [name
			   [agency-conditionlock [new conditionlock]]
			   [agency               nil]
			   fiber
			   [active-conditionlock [new conditionlock]]
			   [active               nil]
			   active_cause_resource
			   active_cause_event
			   active_funk
			   active_args
			   result
			   done
			   [initialized-conditionlock [new conditionlock]]
			   [initialized               nil]
			   [vital                     nil]
			   [debug                     nil]
			   [cause_group               [mind_runtime_metric-new_cause_group]]
			   runtime_metric_monitor]
  [new [initial-name initial-active_funk]
       [terminal_format standard-terminal '\ncreating ' [type this] ' (' [get this as-string] ').']
       [= name                   initial-name]
       [= active_funk            initial-active_funk]
       [= runtime_metric_monitor [new mind_runtime_metric_monitor cause_group]]
       [= fiber                  [fiber [funk []
					      [cause-enable_reactive_critics [this-cause]]
					      [have [this-cause] add_cause_group cause_group]
					      
					      'Turn on appropriate causal tracing.'
					      [cause-define semantic_frame-trace_add                            t]
					      [cause-define semantic_frame-trace_remove                         t]
					      [cause-define semantic_knowledge_base-trace_add_semantic_frame    t]
					      [cause-define semantic_knowledge_base-trace_remove_semantic_frame t]
					      
					      [cause-define cause-name     `resource]
					      [cause-define resource-name  name]
					      [cause-define agency-name    nil]
					      [cause-define layer-name     nil]
					      [cause-define mind-name      nil]
					      [cause-define cause-resource this]
					      [cause-define this-resource  this]
					      
					      [have this stop_me_while_agency_null]
					      [terminal_format standard-terminal '\n' [type this] ' added to agency.']
					      [cause-define agency-name [get agency name]]
					      [have [get this agency] stop_me_while_layer_null]
					      [terminal_format standard-terminal '\n' [type this] ' added to layer.']
					      [let [[layer [get agency layer]]]
						[cause-define layer-name [get layer name]]
						[have layer stop_me_while_mind_null]
						[terminal_format standard-terminal '\n' [type this] ' added to mind.']
						[let [[mind [get layer mind]]]
						  [have mind stop_me_while_body_null]
						  [terminal_format standard-terminal '\n' [type this] ' added to body.']
						  [cause-define mind-name [get mind name]]
						  [cause-define cause-name `[,mind-name ,layer-name ,agency-name ,resource-name resource]]]]
					      
					      [terminal_format standard-terminal '\n' [type this] ' initialized.']
					      [set this initialized t]
					      [while [not done]
						[have active-conditionlock lock]
						[while [not active]
						  [have active-conditionlock wait]]
						[if active_funk
						    [= result [apply active_funk active_args]]
						  [format stdout '\nresource warning: active_funk is nil (name = ' name ').\n']]
						[= active nil]
						[have active-conditionlock unlock]]
					      [terminal_format standard-terminal '\n' [type this] ' done.']]
					nil]]
       this]]

[deftypefunk resource set agency [new-agency]
  [have agency-conditionlock lock]
  [= agency new-agency]
  [have agency-conditionlock unlock]]

[deftypefunk resource execute stop_me_while_agency_null []
  [have agency-conditionlock lock]
  [while [null agency]
    [have agency-conditionlock wait]]
  [have agency-conditionlock unlock]]

[deftypefunk resource set initialized [new-initialized]
  [have initialized-conditionlock lock]
  [= initialized new-initialized]
  [have initialized-conditionlock unlock]]

[deftypefunk resource execute stop_me_until_initialized []
  [have initialized-conditionlock lock]
  [while [not initialized]
    [have initialized-conditionlock wait]]
  [have initialized-conditionlock unlock]]

[deftypefunk resource execute save_all_plots [time_offset filename_root]
  [have runtime_metric_monitor save_all_plots time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_bytecode_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytecode_count_plot time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_simulation_bytecode_rate_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytecode_rate_plot [format nil filename_root '-' name]]]

[deftypefunk resource execute save_simulation_bytecode_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytecode_count_plot [format nil filename_root '-' name]]]

[deftypefunk resource execute save_execution_nanoseconds_plots [time_offset filename_root]
  [have runtime_metric_monitor save_execution_nanoseconds_plot time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_bytes_allocated_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_allocated_count_plot time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_bytes_freed_count_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_freed_count_plot time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_bytes_footprint_plots [time_offset filename_root]
  [have runtime_metric_monitor save_bytes_footprint_plot time_offset [format nil filename_root '-' name]]]

[deftypefunk resource execute save_simulation_bytes_footprint_plots [filename_root]
  [have runtime_metric_monitor save_simulation_bytes_footprint_plot [format nil filename_root '-' name]]]

[deftypefunk resource execute save_simulation_semantic_frame_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_semantic_frame_count_plot [format nil filename_root '-' name]]]

[deftypefunk resource execute save_simulation_semantic_frame_value_count_plots [filename_root]
  [have runtime_metric_monitor save_simulation_semantic_frame_value_count_plot [format nil filename_root '-' name]]]


[deftypefunk resource execute add_cause_group [cause_group]
  [have [get fiber cause_reg] add_cause_group cause_group]]

[deftypefunk resource get local_time []
  [get fiber bytecode_count]]

[deftypefunk resource get mind []
  [if agency
      [get agency mind]
    [error bug_type `attempted_to_get_mind_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get mental_layer []
  [if agency
      [get agency mental_layer]
    [error bug_type `attempted_to_get_layer_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get layer []
  [get this mental_layer]]

[deftypefunk resource get body []
  [if agency
      [get agency body]
    [error bug_type `attempted_to_get_body_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get world []
  [get [get this body] physical_world]]

[deftypefunk resource execute think_to_self [:rest expressions]
  [if debug
      [apply &terminal_format [cons standard-terminal `['\nThe ' ,[get this name] ' resource in the ' ,[get [get this agency] name] ' agency in the ' ,[get [get this layer] name] ' layer in ' ,[get [get this mind] name] '\'s mind thinks: ' @expressions]]]]
  nil]

[deftypefunk resource execute activate [:rest args]
  [let [[successful_activation nil]]
    [have active-conditionlock lock]
    [if [not active]
	[prog [=   active                t]
	      [=   active_cause_resource [cause-lookup cause-resource]]
	      [=   active_cause_event    [cause-lookup cause-resource_action_event]]
	      [=   active_args           args]
	      [have active-conditionlock signal]
	      [have active-conditionlock unlock]]
      [prog [have active-conditionlock unlock]
	    [error bug_object_type     `resource
		   bug_object_typefunk `activate
		   error_type      `resource-is-already-activated]]]]]

[deftypefunk resource set active [new-active]
  [have active-conditionlock lock]
  [= active new-active]
  [have active-conditionlock unlock]]

[deftypefunk resource execute wait_to_activate [:rest args]
  [have active-conditionlock lock]
  [while active
    [have active-conditionlock wait]]
  [=   active                t]
  [=   active_cause_resource [cause-lookup cause-resource]]
  [=   active_cause_event    [cause-lookup cause-resource_action_event]]
  [=   active_args           args]
  [=   successful_activation t]
  [have active-conditionlock signal]
  [have active-conditionlock unlock]
  ]

[deftypefunk resource execute finish []
  [have active-conditionlock lock]
  [while active
    [have active-conditionlock wait]]
  [= active_args           nil]
  [= active_cause_resource nil]
  [= active_cause_event    nil]
  [let [[return_result result]]
    [= result nil]
    [have active-conditionlock unlock]
    return_result]]

[deftypefunk resource execute destroy []
  [= done t]]

[deftypefunk resource execute quit []
  [have fiber quit]]

[deftypefunk resource execute call [:rest args]
  [type-have-apply resource this activate args]
  [type-have       resource this finish]]

[deftypefunk resource execute wait_to_call [:rest args]
  [type-have-apply resource this wait_to_activate args]
  [type-have       resource this finish]]

[deftypefunk resource get stack_trace []
  [get fiber stack_trace]]

[deftypefunk resource execute print_stack_trace []
  [have fiber print_stack_trace]]


[deftypefunk resource get resource_semantic_frame []
  [let [[resource_semantic_frame [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame `[resource ,[get this name]]]]]
    [if [null resource_semantic_frame]
	[prog [= resource_semantic_frame [new semantic_resource [get [get this mind] semantic_realm]]]
	      [have [get [get this mind] semantic_realm] add_phenomenon_semantic_frame `[resource ,[get this name]] resource_semantic_frame]
	      [set resource_semantic_frame resource        this]
	      [set resource_semantic_frame phenomenal_name [get this name]]
	      [set resource_semantic_frame resource_name   [get this name]]]]
    resource_semantic_frame]]

[deftypefunk resource get as-english_conslist []
  `[,name]]

[deftypefunk resource get as-english_conslist_with_arguments [arguments]
  `[,name]]

[deftypefunk resource get as-english_string []
  [conslist-as-english_string [get this as-english_conslist]]]

[deftypefunk resource get as-english_string_with_arguments [arguments]
  [conslist-as-english_string [get this as-english_conslist_with_arguments arguments]]]

[deftypefunk resource get as-string []
  [get this as-english_string]]

[deftypefunk resource get as-string_with_arguments [arguments]
  [get this as-english_string_with_arguments arguments]]

'defined in traced_resource'
[deftypefunk resource execute know_of_completed_action_sequence [action_sequence]
  nil]

