'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'resource'

[deframe resource [frame] [name
			   agency
			   fiber_starting_mutex
			   fiber
			   active_mutex
			   active
			   active_cause_resource
			   active_cause_event
			   active_funk
			   active_args
			   result
			   finished
			   done
			   trace_story
			   think_story
			   resource_initializing_mutex
			   [initialized       nil]
			   [vital             nil]
			   [debug             nil]
			   [continue_trigger  [new fiber_trigger]]
			   [activated_trigger [new fiber_trigger]]
			   [finished_trigger  [new fiber_trigger]]]
  [new [initial-name initial-active_funk]
       [terminal_format standard-terminal '\ncreating ' initial-name ' resource.']
       [= resource_initializing_mutex [new mutex]] [have resource_initializing_mutex lock]
       [= fiber_starting_mutex        [new mutex]] [have fiber_starting_mutex        lock]
       [= fiber                       [fiber [funk []
						   [cause-enable_reactive_critics [this-cause]]
						   
						   'Turn on appropriate causal tracing.'
						   [cause-define semantic_frame-trace_add                            t]
						   [cause-define semantic_frame-trace_remove                         t]
						   [cause-define semantic_knowledge_base-trace_add_semantic_frame    t]
						   [cause-define semantic_knowledge_base-trace_remove_semantic_frame t]
						   
						   [= name         initial-name]
						   [= agency       nil]  'We set this when the resource is added to an agency.'
						   [= active_funk  initial-active_funk]
						   [= active_mutex [new mutex]]
						   [= trace_story  [new story]]
						   [= think_story  [new story]]
						   [cause-define cause-name     `resource]
						   [cause-define resource-name  name]
						   [cause-define agency-name    nil]
						   [cause-define layer-name     nil]
						   [cause-define mind-name      nil]
						   [cause-define cause-resource this]
						   [cause-define this-resource  this]
						   [have resource_initializing_mutex lock]
						   [have resource_initializing_mutex unlock]
						   [have fiber_starting_mutex unlock]
						   [let [[waiting_to_be_added_to_mind t]]
						     [while waiting_to_be_added_to_mind
						       [sleep 1]
						       [if [null mind-name]
							   [if agency
							       [prog [cause-define agency-name [get agency name]]
								     [let [[mental_layer [get agency layer]]]
								       [if mental_layer
									   [prog [cause-define layer-name [get mental_layer name]]
										 [let [[mind [get mental_layer mind]]]
										   [if [and mind [get mind name]]
										       [prog [cause-define mind-name  [get mind name]]
											     [cause-define cause-name `[,mind-name ,layer-name ,agency-name ,resource-name resource]]
											     [= waiting_to_be_added_to_mind nil]]]]]]]]]]]]
						   [= initialized t]
						   [have this think_to_self 'Resource Initialized.']
						   [while [not done]
						     [have active_mutex lock]
						     [if [not active]
							 [prog [fiber [funk []
									    [while [global_scheduler-contains_active_fiber fiber]
									      [millisleep 100]]
									    [have active_mutex unlock]
									    ]
								      nil]
							       [wait-for-trigger continue_trigger]]
						       [prog [if active_funk
								 [prog [have activated_trigger trigger]
								       [= result [apply active_funk active_args]]
								       [have finished_trigger trigger]
								       ]
							       [format stdout '\nresource warning: active_funk is nil (name = ' name ').\n']]
							     [= active   nil]
							     [= finished t]
							     [have active_mutex unlock]
							     ]]
						     ]
						   [have this think_to_self 'Resource Done.']]
					     nil]]
       [have resource_initializing_mutex unlock]
       [have fiber_starting_mutex lock]
       [have fiber_starting_mutex unlock]
       this]]

[deftypefunk resource get local_time []
  [get fiber bytecode_count]]

[deftypefunk resource get mind []
  [if agency
      [get agency mind]
    [error bug_type `attempted_to_get_mind_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get layer []
  [if agency
      [get agency layer]
    [error bug_type `attempted_to_get_layer_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get body []
  [if agency
      [get agency body]
    [error bug_type `attempted_to_get_body_from_resource_that_is_not_part_of_an_agency
	   this     this]]]

[deftypefunk resource get world []
  [get [get this body] physical_world]]

[deftypefunk resource execute add_new_trace_story_event [character_name action_name prepositional_frame]
  [have trace_story add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute add_new_think_story_event [character_name action_name prepositional_frame]
  [have think_story add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute think_to_self [:rest expressions]
  [if [cause-lookup cause-resource]
      [have cause-resource add_new_think_story_event `I `think [frame direct_object expressions]]]
  [if debug
      [apply &terminal_format [cons standard-terminal `['\nThe ' ,[get this name] ' resource in the ' ,[get [get this agency] name] ' agency in the ' ,[get [get this layer] name] ' layer in ' ,[get [get this mind] name] '\'s mind thinks: ' @expressions]]]]
  nil]

[deftypefunk resource execute activate [:rest args]
  [let [[successful_activation nil]]
    [prog [have active_mutex lock]
	  [if [not active]
	      [prog [=   active                t]
		    [=   active_cause_resource [cause-lookup cause-resource]]
		    [=   active_cause_event    [cause-lookup cause-resource_action_event]]
		    [=   active_args           args]
		    [have continue_trigger trigger]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	[prog [if [cause-lookup cause-resource]
		  [prog [have this           add_new_trace_story_event [get cause-resource name] `activate [frame direct_object `me]]
			[have cause-resource add_new_trace_story_event `I                        `activate [frame direct_object name]]]]
	      nil]
      [error bug_object_type     `resource
	     bug_object_typefunk `activate
	     error_type      `resource-is-already-activated]]]]

[deftypefunk resource execute wait_to_activate [:rest args]
  [let [[successful_activation nil]
	[finished_notice       nil]]
    [while [not successful_activation]
      [prog [have active_mutex lock]
	    [if [not active]
		[prog [=   active                t]
		      [=   active_cause_resource [cause-lookup cause-resource]]
		      [=   active_cause_event    [cause-lookup cause-resource_action_event]]
		      [=   active_args           args]
		      [have continue_trigger trigger]
		      [=   successful_activation t]
		      [have active_mutex unlock]
		      ]
	      [let [[wait_mutex [new mutex]]]
		[have wait_mutex lock]
		[fiber [funk []
			     [have wait_mutex lock]
			     [millisleep 100]
			     [have active_mutex unlock]
			     ]
		       nil]
		[wait-for-trigger finished_trigger]
		]]]
      [if successful_activation
	  [prog [if [cause-lookup cause-resource]
		    [prog [have this           add_new_trace_story_event [get cause-resource name] `activate [frame direct_object `me]]
			  [have cause-resource add_new_trace_story_event `I                        `activate [frame direct_object [get this name]]]]]
		nil]]]]]

[deftypefunk resource execute finish []
  [if [cause-lookup cause-resource]
      [prog [have this           add_new_trace_story_event [get cause-resource name] `finish [frame direct_object `me]]
	    [have cause-resource add_new_trace_story_event `I                        `finish [frame direct_object name]]]]
  [let [[keep_looping  t]
	[return_result nil]]
    [while keep_looping
      [have active_mutex lock]
      [if finished
	  [prog [= active                nil]
		[= active_args           nil]
		[= active_cause_resource nil]
		[= active_cause_event    nil]
		[= result                nil]
		[= finished              nil]
		[= keep_looping          nil]
		[= return_result result]
		[have active_mutex unlock]]
	[let [[wait_mutex [new mutex]]]
	  [have wait_mutex lock]
	  [fiber [funk []
		       [have wait_mutex lock]
		       [sleep 100]
		       [have active_mutex unlock]]
		 nil]
	  [wait-for-trigger finished_trigger]]]]
    return_result]]

[deftypefunk resource execute destroy []
  [= done t]]

[deftypefunk resource execute quit []
  [have fiber quit]]

[deftypefunk resource execute call [:rest args]
  [if [cause-lookup cause-resource]
      [prog [have this           add_new_trace_story_event [get cause-resource name] `call [frame direct_object `me]]
	    [have cause-resource add_new_trace_story_event `I                        `call [frame direct_object name]]]]
  [type-have-apply resource this activate args]
  [type-have       resource this finish]]

[deftypefunk resource execute wait_to_call [:rest args]
  [if [cause-lookup cause-resource]
      [prog [have this           add_new_trace_story_event [get cause-resource name] `call [frame direct_object `me]]
	    [have cause-resource add_new_trace_story_event `I                        `call [frame direct_object name]]]]
  [type-have-apply resource this wait_to_activate args]
  [type-have       resource this finish]]

[deftypefunk resource get stack_trace []
  [get fiber stack_trace]]

[deftypefunk resource execute print_stack_trace []
  [have fiber print_stack_trace]]


[deftypefunk resource get resource_semantic_frame []
  [let [[resource_semantic_frame [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame `[resource ,[get this name]]]]]
    [if [null resource_semantic_frame]
	[prog [= resource_semantic_frame [new semantic_resource [get [get this mind] semantic_realm]]]
	      [have [get [get this mind] semantic_realm] add_phenomenon_semantic_frame `[resource ,[get this name]] resource_semantic_frame]
	      [set resource_semantic_frame resource        this]
	      [set resource_semantic_frame phenomenal_name [get this name]]
	      [set resource_semantic_frame resource_name   [get this name]]]]
    resource_semantic_frame]]

[deftypefunk resource get as-english_conslist []
  `[,name]]

[deftypefunk resource get as-string []
  [conslist-as-english_string [get this as-english_conslist]]]


