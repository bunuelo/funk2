'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'resource'

[deframe resource [frame] [name
			   agency
			   fiber_starting_mutex
			   fiber
			   active_mutex
			   active
			   active_funk
			   active_args
			   result
			   finished
			   done
			   trace_story
			   think_story
			   resource_initializing_mutex]
  [new [initial-name initial-active_funk]
       [= resource_initializing_mutex [new traced_mutex]] [have resource_initializing_mutex lock]
       [= fiber_starting_mutex        [new traced_mutex]] [have fiber_starting_mutex        lock]
       [= fiber         [fiber [funk []
				     [cause-enable_reactive_critics [this-cause]]
				     [= name         initial-name]
				     [= agency       nil]  'We set this when the resource is added to an agency.'
				     [= active_funk  initial-active_funk]
				     [= active_mutex [new traced_mutex]]
				     [= trace_story  [new story]]
				     [= think_story  [new story]]
				     [cause-define cause-name     `resource]
				     [cause-define resource-name  name]
				     [cause-define agency-name    nil]
				     [cause-define layer-name     nil]
				     [cause-define mind-name      nil]
				     [cause-define cause-resource this]
				     [have resource_initializing_mutex lock]
				     [have resource_initializing_mutex unlock]
				     [have fiber_starting_mutex unlock]
				     [while [not done]
				       [if [null mind-name]
					   [if [get this body]
					       [prog [cause-define agency-name [get agency name]]
						     [if [null layer-name]
							 [let [[mental_layer [get agency layer]]]
							   [if mental_layer
							       [prog [cause-define layer-name [get mental_layer name]]
								     [let [[mind [get mental_layer mind]]]
								       [if mind
									   [prog [cause-define mind-name [get mind name]]
										 [cause-define cause-name `[,mind-name ,layer-name ,agency-name ,resource-name resource]]]]]]]]]]]]
				       [have active_mutex lock]
				       [if [not active]
					   [let [[we_have_been_paused_mutex [new traced_mutex]]]
					     [have we_have_been_paused_mutex lock]
					     [fiber [funk []
							  [set fiber paused t]
							  [have active_mutex unlock]
							  [have we_have_been_paused_mutex unlock]]
						    nil]
					     [have we_have_been_paused_mutex lock]
					     [have we_have_been_paused_mutex unlock]]
					 [prog [if active_funk
						   [prog [= result [apply active_funk active_args]]]
						 [format stdout '\nresource warning: active_funk is nil (name = ' name ').\n']]
					       [= active   nil]
					       [= finished t]
					       [have active_mutex unlock]]]
				       ]
				     [format stdout '\nresource status: done.  (name = ' name ').\n']]
			       nil]]
       [have resource_initializing_mutex unlock]
       [have fiber_starting_mutex lock]
       [have fiber_starting_mutex unlock]
       this]]

[defmetro resource [name args :rest body]
  `[let [[this-resource [new resource [quote ,name] nil]]]
     [set this-resource active_funk [funk ,args
					   [let [[resource-name   [quote ,name]]
						 [source-filename ,[shelter source-filename]]]
					     @body]]]
     this-resource]]

[deftypefunk resource get local_time []
  [get fiber bytecode_count]]

[deftypefunk resource get mind []
  [if agency
      [get agency mind]
    nil]]

[deftypefunk resource get layer []
  [if agency
      [get agency layer]
    nil]]

[deftypefunk resource get body []
  [if agency
      [get agency body]
    nil]]

[deftypefunk resource execute add_new_trace_story_event [character_name action_name prepositional_frame]
  [have trace_story add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute add_new_think_story_event [character_name action_name prepositional_frame]
  [have think_story add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute think_to_self [:rest expressions]
  [have cause-resource add_new_think_story_event `I `think [frame direct_object expressions]]
  [apply &terminal_format [cons standard-terminal `['\nThe ' ,[get this name] ' resource in the ' ,[get [get this agency] name] ' agency in the ' ,[get [get this layer] name] ' layer in ' ,[get [get this mind] name] '\'s mind thinks: ' @expressions]]]
  `[have-apply [get this world] format `['\nAgent ' ,[get this name] ' Thinks: ' @expressions]]
   nil
   ]

[deftypefunk resource execute activate [:rest args]
  [let [[successful_activation nil]]
    [prog [have active_mutex lock]
	  [if [not active]
	      [prog [=   active                t]
		    [=   active_args           args]
		    [set fiber paused          nil]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	[prog [have this           add_new_trace_story_event [get cause-resource name] `activate [frame direct_object `me]]
	      [have cause-resource add_new_trace_story_event `I                        `activate [frame direct_object name]]
	      nil]
      [error object_type     `resource
	     object_typefunk `activate
	     error_type      `resource-is-already-activated]]]]

[deftypefunk resource execute wait_to_activate [:rest args]
  [let [[successful_activation nil]]
    [prog [have active_mutex lock]
	  [if [not active]
	      [prog [=   active                t]
		    [=   active_args           args]
		    [set fiber paused          nil]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	[prog [have this           add_new_trace_story_event [get cause-resource name] `activate [frame direct_object `me]]
	      [have cause-resource add_new_trace_story_event `I                        `activate [frame direct_object [get this name]]]
	      nil]
      [have-apply this wait_to_activate args]]]]

[deftypefunk resource execute finish []
  [have this           add_new_trace_story_event [get cause-resource name] `finish [frame direct_object `me]]
  [have cause-resource add_new_trace_story_event `I                        `finish [frame direct_object name]]
  [while [not finished]
    [have active_mutex lock]
    [if finished
	[prog [=   active        nil]
	      [=   active_args   nil]
	      [set this result   nil]
	      [set this finished nil]
	      [have active_mutex unlock]]
      [prog [have active_mutex unlock]
	    [millisleep 100]]]]
  result]

[deftypefunk resource execute destroy []
  [= done t]]

[deftypefunk resource execute quit []
  [have fiber quit]]

[deftypefunk resource execute call [:rest args]
  [have this           add_new_trace_story_event [get cause-resource name] `call [frame direct_object `me]]
  [have cause-resource add_new_trace_story_event `I                        `call [frame direct_object name]]
  [have-apply this activate args]
  [have this finish]]

[deftypefunk resource get stack_trace []
  [get fiber stack_trace]]

[deftypefunk resource execute print_stack_trace []
  [have fiber print_stack_trace]]


