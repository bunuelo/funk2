
'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'
'
todo: find out why [get [get story as-graph] as-story] is missing the prep frame
      

'







[deftypefunk story_event get as-graph []
  [let [[graph [new bruno_graph]]]
    [let* [[story_event [new bruno_graph_node `story_event]]
	   [time        [new bruno_graph_node [have this lookup `time]]]
	   [action      [new bruno_graph_node [have this lookup `action_name]]]
	   [character   [new bruno_graph_node [have this lookup `character_name]]]
	   [prep_frame  [new bruno_graph_node `prepositional_frame]]
	   [time_edge       [new bruno_graph_edge `time                story_event time]]
	   [action_edge     [new bruno_graph_edge `action              story_event action]]
	   [character_edge  [new bruno_graph_edge `character           story_event character]]
	   [prep_frame_edge [new bruno_graph_edge `prepositional_frame story_event prep_frame]]]
      [have graph add_edge time_edge]
      [have graph add_edge action_edge]
      [have graph add_edge character_edge]
      [have graph add_edge prep_frame_edge]
      [let [[prepositional_frame [have this lookup `prepositional_frame]]]
	[let [[direct_object [have prepositional_frame lookup `direct_object]]]
	  [mapcar [funk [preposition]
			[if [eq preposition `direct_object]
			    [prog [let* [[direct_object_node [new bruno_graph_node direct_object]]
					 [direct_object_edge [new bruno_graph_edge `direct_object prep_frame direct_object_node]]]
				    [have graph add_edge direct_object_edge]]]
			  [prog [let* [[preposition_node [new bruno_graph_node [have prepositional_frame lookup preposition]]]
				       [preposition_edge   [new bruno_graph_edge preposition  prep_frame preposition_node]]]
				  [have graph add_edge preposition_edge]]]]]
		  [get prepositional_frame slots]]]]]
    graph]]


[deftypefunk story get as-graph []
  [let  [[event_list [conslist-sort [get this events] [funk [event-x event-y]
							    [< [get event-x time] [get event-y time]]]]]
	 [graph [new bruno_graph]]]
    [print 'let1']
		      
    [mapc [funk [event]
		[mapc [funk [edge]
			    [have graph add_edge edge]]
		      [get [get [get event as-graph] edge_set] elements]]]
	  
	  event_list]
    [print 'mapc adds all edges']
    [print [get graph node_set]]
		      
    [defunk find_node_time [left_node]
      [let [[right_node nil]]
	[defunk iterate [node_list]
	  [if node_list
	      [if [get graph edges_with_label_between_nodes `time left_node [car node_list]]
		  [= right_node [get [car node_list] label]]
		[iterate [cdr node_list]]]
	    nil]]
	[iterate [get [get graph node_set] elements]]
	[print [get right_node type]]
	right_node]]
   
    
    [let [[nodes_list      [get [get graph node_set] elements]]
	  [event_node_list [conslist-sort [get graph nodes_with_label `story_event] [funk [node-x node-y]
											  [< [find_node_time node-x] [find_node_time node-y]]]]]]
      [print 'let2']
      
      [defunk find_previous_node [event_node  node_list]
	[let [[previous_node nil]]
	  [cond [[and [cdr node_list]       [eq event_node [car node_list]]]
		 [prog [= previous_node  [cadr node_list]]
		       previous_node]]
		[[and [null [cdr node_list]] [eq event_node [car node_list]]]
		 nil]
		[[and [cdr node_list] [null [eq event_node [car node_list]]]]
		 [find_previous_node event_node [cdr node_list]]]
		[t
		 nil]]]]
      
      [print 'defunked find_previous_node']
      [mapc [funk [event_node]
		  [if [find_previous_node event_node nodes_list]
		      [let [[happens_after 
			     [new bruno_graph_edge `happens_after 
				  event_node 
				  [find_previous_node event_node nodes_list]]]]
			[have graph add_edge happens_after]
			[print '2']
			[print graph]]
		    nil]]
	    
	    event_node_list]
      graph]]
  ]

[print 'beginning defining get as story_event']

[deftypefunk bruno_graph get as-story_event []
  [let [[prep_frame     [new frame]]
	[story_event    [new story_event `time `character_name `action_name `prep_frame]]
	[nodes_list     [get [get this node_set] elements]]
	[edges_list     [get [get this edge_set] elements]]]
    [defunk find_right_node_label [node_list left_node edge_label]
      [let [[right_node nil]]
	[defunk iterate [node_list]
	  [if node_list
	      [if [get this edges_with_label_between_nodes edge_label left_node [car node_list]]
		  [= right_node [get [car node_list] label]]
		[iterate [cdr node_list]]]
	    nil]]
	[iterate node_list]
	right_node]]
    
    [defunk find_edge_node [left_node node_list edge_list]
      [print 'debug 0.5']
      [mapcar  [funk [edge]
		     [print 'debug 0.8'] 
		     [let [[right_node    nil]
			   [edge_node_pair nil]]
		       [defunk iterate_nodes [a_node_list]
			 [if a_node_list
			     [prog [print 'debug 0.9']
				   [print [get edge label]]
				   [print [car a_node_list]]
				   [print [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]]
				   [if [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]
				       [prog [= right_node [get [car a_node_list] label]]
						  [print 'debug 0.91']
						  [= edge_node_pair [cons [get edge label] right_node]]]
					  [iterate_nodes [cdr a_node_list]]]]
				nil]
			      edge_node_pair]	    
			  [iterate_nodes nodes_list]]]
		   edges_list]]
					  
	
    [set story_event                            time                [find_right_node_label nodes_list [car [get this nodes_with_label `story_event]] `time]]
    [set story_event                            character_name      [find_right_node_label nodes_list [car [get this nodes_with_label `story_event]] `character]]
    [set story_event                            action_name         [find_right_node_label nodes_list [car [get this nodes_with_label `story_event]] `action]]
    [set story_event                            prepositional_frame prep_frame]
    [print 'debug 0']
    [mapc [funk [edge_node_pair] 
		[if edge_node_pair
		    [prog [print [car edge_node_pair]]
			  [print [cdr edge_node_pair]]
			  [have [get story_event prepositional_frame] add [car edge_node_pair] [cdr edge_node_pair]]]
		  nil]]
		
	  [find_edge_node [car [get this nodes_with_label `prepositional_frame]] nodes_list edges_list]] 
    
    story_event]]

[print 'done defining get as story_event']

[deftypefunk bruno_graph get as-story []
  [let [[story [new story]]
	[nodes_list     [get [get this node_set] elements]]
	[edges_list     [get [get this edge_set] elements]]
	[origin_this    this]]
    
    [deftypefunk bruno_graph get indiv_story_event [event_node]
      [let [[prep_frame     [new frame]]
	    [story_event    [new story_event `time `character_name `action_name `prep_frame]]]
	[defunk find_right_node [node_list left_node edge_label]
	  [print 'debug 90']
	  [print 'left_node']
	  [print left_node]
	  [print 'edge_label']
	  [print edge_label]
	  [print 'debug 95']
	  [let [[right_node nil]]
	    [print 'debug 96']
	    [print 'right_node']
	    [print right_node]
	    [defunk iteratex [node_list]
	      [print 'car node_list']
	      [if node_list [print [car node_list]] []]
	      [if node_list
		  [prog [print 'node list non empty']
			[print edge_label]
			[print left_node]
			[print [car node_list]]
			[print origin_this]
			[print [get origin_this edges_with_label_between_nodes edge_label left_node [car node_list]]]
			[if [get origin_this edges_with_label_between_nodes edge_label left_node [car node_list]]
			    [prog [= right_node [car node_list]]
				  [print 'match found']
				  [print right_node]]
			  [prog [print 'no match']
				[iteratex [cdr node_list]]]]]
		[print 'empty']]]
	    [iteratex node_list]
	    [print 'debug 100']
	    [print left_node]
	    [print edge_label]
	    [print right_node]
	    right_node]]
	
	[defunk find_edge_nodex [left_node node_list edge_list]
	  [print 'debug 0.5']
	  [mapcar  [funk [edge]
			 [print 'debug 0.8'] 
			 [let [[right_node    nil]
			       [edge_node_pair nil]]
			   [defunk iteratex_nodes [a_node_list]
			     [if [and a_node_list left_node]
				 [prog [print 'debug 0.9']
				       [print left_node]
				       [print [get edge label]]
				       [print [car a_node_list]]]
			       [if [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]
				   [print 'yes match']
				 [print 'no_match']
				 [if [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]
				     [prog [= right_node [get [car a_node_list] label]]
					   [print 'debug 0.91']
					   [= edge_node_pair [cons [get edge label] right_node]]]
				   [iteratex_nodes [cdr a_node_list]]]]
			       nil]
			     edge_node_pair]	    
			   [iteratex_nodes nodes_list]]]
		   edges_list]]
	[print  'debug 1']
	
	[set story_event                            time                [get [find_right_node  nodes_list event_node `time] label]]
	[set story_event                            character_name      [get [find_right_node  nodes_list event_node `character] label]]
	[set story_event                            action_name         [get [find_right_node  nodes_list event_node `action] label]]
	[set story_event                            prepositional_frame prep_frame]
	[print 'debug 0']
	
	[mapc [funk [edge_node_pair] 
		    [if edge_node_pair
			[prog [print [car edge_node_pair]]
			      [print [cdr edge_node_pair]]
			      [have [get story_event prepositional_frame] add [car edge_node_pair] [cdr edge_node_pair]]]
		      nil]]
	      
	      [find_edge_nodex [find_right_node nodes_list event_node `prepositional_frame] nodes_list edges_list]] 
	
	story_event]
      ]
    
    [mapc [funk [event_node]
		[print 'event_node']
		[print event_node]
		[let [[story_event [get origin_this indiv_story_event event_node]]]
		  [have story add_event [get origin_this indiv_story_event event_node]]
		  [print story_event]]]
		
	  [get this nodes_with_label `story_event]]
    
    story]]

[print 'done defining get as-story']

[globalize my_prep_frame  [new frame]]
[have my_prep_frame add `direct_object `tomato]
[have my_prep_frame add `towards `mom]
[globalize my_story_event [new story_event 140 `Ralph `sit_down  my_prep_frame]]
 
[globalize my_story [new story]]

[globalize my_prep_frame2  [new frame]]
[have my_prep_frame2 add `direct_object `potato]
[have my_prep_frame2 add `at `dad]
[globalize my_story_event2 [new story_event 100 `Lauren `stand_up  my_prep_frame2]]
 
[have my_story add_event my_story_event]
[have my_story add_event my_story_event2]


`[story-create_event my_story 100 `Lauren `stand_up `direct_object `apple `at `dad]