'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'traced_resource'

[deframe traced_resource [resource] []
  [new [initial-name initial-active_funk]
       [construct resource initial-name initial-active_funk]
       
       ]]

[deftypefunk traced_resource get resource_semantic_frame []
  [let [[resource_semantic_frame [type-get resource this resource_semantic_frame]]]
    [let [[mind_activity [get [get this mind] semantic_knowledge_base `mind_activity]]]
      [if [not [get mind_activity contains_semantic_frame resource_semantic_frame]]
	  [have mind_activity add_semantic_frame resource_semantic_frame]]]
    resource_semantic_frame]]

[deftypefunk traced_resource execute activate [:rest args]
  [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm]]]]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] add_semantic_frame semantic_resource_action_event]
    [semantic-add semantic_resource_action_event property-action_name `activate]
    [semantic-add semantic_resource_action_event relationship-agent   [get cause-resource resource_semantic_frame]]
    [semantic-add semantic_resource_action_event relationship-target  [get this           resource_semantic_frame]]
    [type-have-apply resource this activate args]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] remove_semantic_frame semantic_resource_action_event]
    ]]

[deftypefunk traced_resource execute wait_to_activate [:rest args]
  [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm]]]]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] add_semantic_frame semantic_resource_action_event]
    [semantic-add semantic_resource_action_event property-action_name `wait_to_activate]
    [semantic-add semantic_resource_action_event relationship-agent   [get cause-resource resource_semantic_frame]]
    [semantic-add semantic_resource_action_event relationship-target  [get this           resource_semantic_frame]]
    [type-have-apply resource this wait_to_activate args]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] remove_semantic_frame semantic_resource_action_event]
    ]]

[deftypefunk traced_resource execute wait_to_call [:rest args]
  [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm]]]]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] add_semantic_frame semantic_resource_action_event]
    [semantic-add semantic_resource_action_event property-action_name `wait_to_call]
    [semantic-add semantic_resource_action_event relationship-agent   [get cause-resource resource_semantic_frame]]
    [semantic-add semantic_resource_action_event relationship-target  [get this           resource_semantic_frame]]
    [type-have-apply resource this wait_to_call args]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] remove_semantic_frame semantic_resource_action_event]
    ]]

[deftypefunk traced_resource execute call [:rest args]
  [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm]]]]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] add_semantic_frame semantic_resource_action_event]
    [semantic-add semantic_resource_action_event property-action_name `call]
    [semantic-add semantic_resource_action_event relationship-agent   [get cause-resource resource_semantic_frame]]
    [semantic-add semantic_resource_action_event relationship-target  [get this           resource_semantic_frame]]
    [type-have-apply resource this call args]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] remove_semantic_frame semantic_resource_action_event]
    ]]

[deftypefunk traced_resource execute finish []
  [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm]]]]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] add_semantic_frame semantic_resource_action_event]
    [semantic-add semantic_resource_action_event property-action_name `finish]
    [semantic-add semantic_resource_action_event relationship-agent   [get cause-resource resource_semantic_frame]]
    [semantic-add semantic_resource_action_event relationship-target  [get this           resource_semantic_frame]]
    [type-have resource this finish]
    [have [get [get this mind] semantic_knowledge_base `mind_activity] remove_semantic_frame semantic_resource_action_event]
    ]]

