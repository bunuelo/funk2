'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_perception'

[deframe blocks_world_perception [reflective_mind_perception] []
  [new [perceptions
	initial-begin_time
	initial-end_time]
       [let [[retina_image           nil]
	     [visual_objects         nil]
	     [left_hand_object_name  nil]
	     [right_hand_object_name nil]
	     [proprioceptual_frame   nil]]
	 
	 [let [[visual_object_frame [new frame]]]
	   [mapc [funk [perception]
		       [let [[node_one_name [first perception]]
			     [edge_name     [second perception]]
			     [node_two_name [third perception]]]
			 [if [eq `is-a edge_name]
			     [let [[physical_object_type node_two_name]
				   [phenomenal_name      node_one_name]
				   [retina_position_horizontal nil]
				   [retina_position_vertical   nil]
				   [distance                   nil]
				   [orientation                nil]
				   [preposition_frame          [new frame]]
				   [property_frame             [new frame]]]
			       [let [[visual_object [new reflective_mind_visual_object
							 physical_object_type
							 phenomenal_name
							 retina_position_horizontal
							 retina_position_vertical
							 distance
							 orientation
							 preposition_frame
							 property_frame]]]
				 [have visual_object_frame add phenomenal_name visual_object]
				 [= visual_objects [cons visual_object visual_objects]]]]]]]
		 perceptions]
	   
	   [mapc [funk [perception]
		       [let [[node_one_name [first  perception]]
			     [edge_name     [second perception]]
			     [node_two_name [third  perception]]]
			 [cond [[eq `color edge_name]
				[let [[node_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_color         node_two_name]]
				  [let [[node_visual_object-property_frame [get node_visual_object property_frame]]]
				    [have node_visual_object-property_frame add `color [cons node_color
											     [have node_visual_object-property_frame lookup `color]]]]]]
			       [[eq `shape edge_name]
				[let [[node_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_shape         node_two_name]]
				  [let [[node_visual_object-property_frame [get node_visual_object property_frame]]]
				    [have node_visual_object-property_frame add `shape [cons node_shape
											     [have node_visual_object-property_frame lookup `shape]]]]]]
			       [[eq `movement_command edge_name]
				[let [[node_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_movement_command node_two_name]]
				  [let [[node_visual_object-property_frame [get node_visual_object property_frame]]]
				    [have node_visual_object-property_frame add `movement_command [cons node_movement_command
													[have node_visual_object-property_frame lookup `movement_command]]]]]]
			       [[eq `is edge_name]
				[cond [[eq `me node_two_name]
				       [let [[node_visual_object [have visual_object_frame lookup node_one_name]]]
					 [let [[node_visual_object-property_frame [get node_visual_object property_frame]]]
					   [have node_visual_object-property_frame add `is-me [cons t
												    [have node_visual_object-property_frame lookup `shape]]]]]]
				      ]]
			       [[eq `on edge_name]
				[let [[node_one_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_two_visual_object [have visual_object_frame lookup node_two_name]]]
				  [let [[node_one_visual_object-preposition_frame [get node_one_visual_object preposition_frame]]]
				    [have node_one_visual_object-preposition_frame add `on [cons [get node_two_visual_object phenomenal_name]
												 [have node_one_visual_object-preposition_frame lookup `on]]]]]]
			       [[eq `left-of edge_name]
				[let [[node_one_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_two_visual_object [have visual_object_frame lookup node_two_name]]]
				  [let [[node_one_visual_object-preposition_frame [get node_one_visual_object preposition_frame]]]
				    [have node_one_visual_object-preposition_frame add `left-of [cons [get node_two_visual_object phenomenal_name]
												      [have node_one_visual_object-preposition_frame lookup `left-of]]]]]]
			       [[eq `right-of edge_name]
				[let [[node_one_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_two_visual_object [have visual_object_frame lookup node_two_name]]]
				  [let [[node_one_visual_object-preposition_frame [get node_one_visual_object preposition_frame]]]
				    [have node_one_visual_object-preposition_frame add `right-of [cons [get node_two_visual_object phenomenal_name]
												       [have node_one_visual_object-preposition_frame lookup `right-of]]]]]]
			       [[eq `below edge_name]
				[let [[node_one_visual_object [have visual_object_frame lookup node_one_name]]
				      [node_two_visual_object [have visual_object_frame lookup node_two_name]]]
				  [let [[node_one_visual_object-preposition_frame [get node_one_visual_object preposition_frame]]]
				    [have node_one_visual_object-preposition_frame add `below [cons [get node_two_visual_object phenomenal_name]
												    [have node_one_visual_object-preposition_frame lookup `below]]]]]]
			       [[eq `is-holding edge_name]
				[if node_two_name
				    [let [[node_one_visual_object [have visual_object_frame lookup node_one_name]]
					  [node_two_visual_object [have visual_object_frame lookup node_two_name]]]
				      [let [[node_one_visual_object-preposition_frame [get node_one_visual_object preposition_frame]]]
					[have node_one_visual_object-preposition_frame add `is-holding [cons [get node_two_visual_object phenomenal_name]
													     [have node_one_visual_object-preposition_frame lookup `is-holding]]]]]]]
			       ]]]
		 perceptions]
	   
	   [construct reflective_mind_perception
		      initial-begin_time
		      initial-end_time
		      retina_image
		      visual_objects
		      left_hand_object_name
		      right_hand_object_name
		      proprioceptual_frame]]]]]


'mindmon_blocks_world_agent_body'

[deframe mindmon_blocks_world_agent_body [agent_body] [mindmon_blocks_world_agent
						       perceptions
						       [last_time    nil]
						       [current_time nil]]
  [new [initial-mindmon_blocks_world_agent]
       [= mindmon_blocks_world_agent initial-mindmon_blocks_world_agent]
       
       [let [[initial-physical_world [get [get mindmon_blocks_world_agent mindmon_world] physical_world]]
	     [initial-name           [get mindmon_blocks_world_agent name]]
	     [initial-mind           [get mindmon_blocks_world_agent mind]]]
	 [construct agent_body
		    initial-physical_world
		    initial-name
		    initial-mind]]
       
       ]]

[deftypefunk mindmon_blocks_world_agent_body execute update_after_step_simulation []
  [= perceptions  [have mindmon_blocks_world_agent sense_world]]
  [= last_time    current_time]
  [= current_time [time]]]

[deftypefunk mindmon_blocks_world_agent_body execute sense_perception []
  [let [[begin_time last_time]
	[end_time   current_time]]
    [new blocks_world_perception perceptions begin_time end_time]]]

[deftypefunk mindmon_blocks_world_agent_body execute move_left []
  [terminal_format standard-terminal '\nmindmon_blocks_world_agent_body: move_left.']
  [set [get mindmon_blocks_world_agent gripper] movement_command-left]]

[deftypefunk mindmon_blocks_world_agent_body execute move_right []
  [terminal_format standard-terminal '\nmindmon_blocks_world_agent_body: move_right.']
  [set [get mindmon_blocks_world_agent gripper] movement_command-right]]

[deftypefunk mindmon_blocks_world_agent_body execute grab []
  [terminal_format standard-terminal '\nmindmon_blocks_world_agent_body: grab.']
  [set [get mindmon_blocks_world_agent gripper] movement_command-grab]]

[deftypefunk mindmon_blocks_world_agent_body execute drop []
  [terminal_format standard-terminal '\nmindmon_blocks_world_agent_body: drop.']
  [set [get mindmon_blocks_world_agent gripper] movement_command-drop]]

[deftypefunk mindmon_blocks_world_agent_body execute stop []
  [terminal_format standard-terminal '\nmindmon_blocks_world_agent_body: stop.']
  [set [get mindmon_blocks_world_agent gripper] movement_command-stop]]


'mindmon_blocks_world_agent'

[deframe mindmon_blocks_world_agent [mindmon_agent] [blocks_world_reflective_mind
						     agent_body]
  [new [initial-mindmon_world
	initial-name]
       [construct mindmon_agent initial-mindmon_world initial-name]
       
       [= blocks_world_reflective_mind [new blocks_world_reflective_mind]]
       [= agent_body                   [new mindmon_blocks_world_agent_body this]]
       ]]

[deftypefunk mindmon_blocks_world_agent get gripper []
  [get [get mindmon_world blocks_world] gripper name]]

'interface functions'

[deftypefunk mindmon_blocks_world_agent get mind []
  blocks_world_reflective_mind]

[deftypefunk mindmon_blocks_world_agent get body []
  agent_body]

[deftypefunk mindmon_blocks_world_agent get knowledge_base_names []
  `[reflective_event_knowledge
    reflective_knowledge
    plan_plan_knowledge
    plan_goal_knowledge
    plan_type_knowledge
    type_copy_of_plan_knowledge
    plan_knowledge
    physical_goal_knowledge
    physical_type_knowledge
    type_copy_of_physical_knowledge
    physical_event_knowledge
    physical_knowledge
    visual_knowledge]]

[deftypefunk mindmon_blocks_world_agent get tool_names []
  `[mindmon_blocks_world_deliberative_plan_activator
    mindmon_blocks_world_deliberative_action_activator
    mindmon_blocks_world_reactive_plan_activator
    mindmon_blocks_world_reactive_action_activator]]

[deftypefunk mindmon_blocks_world_agent execute sense_world []
  [get [get this gripper] perceptions]]

[deftypefunk mindmon_blocks_world_agent execute sense_retina_image []
  nil]

[deftypefunk mindmon_blocks_world_agent get as-chunk []
  nil]



'mindmon_blocks_world'

[deframe mindmon_blocks_world [mindmon_world] [blocks_world
					       physical_world]
  [new [width height]
       [construct mindmon_world [gensym 'mindmon_blocks_world']]
       [= blocks_world   [new blocks_world [gensym 'blocks_world'] width height]]
       [= physical_world [new physical_world]]
       ]]

[deftypefunk mindmon_blocks_world get compatible_agent_types []
  `[mindmon_blocks_world_agent]]

[deftypefunk mindmon_blocks_world execute raw_step_simulation [step_size]
  [have blocks_world raw_step [get step_size as-double]]]

[deftypefunk mindmon_blocks_world execute raw_update_after_step_simulation []
  [have blocks_world calculate_perceptions]]


[deftypefunk mindmon_blocks_world execute raw_step_physical_world []
  [have physical_world step_physical_world]]

[deftypefunk mindmon_blocks_world execute destroy []
  [have blocks_world destroy]]

[deftypefunk mindmon_blocks_world execute initialize_simulation []
  [have blocks_world initialize]]

[deftypefunk mindmon_blocks_world get initialize_events []
  nil]

[deftypefunk mindmon_blocks_world get screenshot []
  [get blocks_world as-image]]

[deftypefunk mindmon_blocks_world get all_objects_summary []
  [let [[object_frame [frame]]]
    [mapc [funk [block]
		[let [[block_frame [frame]]]
		  [have block_frame add `is-a `block]
		  [have object_frame add [get block name] block_frame]]]
	  [get blocks_world blocks]]
    [mapc [funk [gripper]
		[let [[gripper_frame [frame]]]
		  [have block_frame add `is-a `gripper]
		  [have object_frame add [get gripper name] block_frame]]]
	  [get blocks_world grippers]]
    object_frame]]

[deftypefunk mindmon_blocks_world get possible_agent_names []
  [mapcar [funk [gripper]
		[get gripper name]]
	  [get blocks_world grippers]]]

[deftypefunk mindmon_blocks_world get default_step_delay []
  0.0]

[deftypefunk mindmon_blocks_world get default_step_size []
  0.25]









[new mindmon_blocks_world 640 480]

