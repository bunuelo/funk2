'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_perception'

[deframe blocks_world_perception [moral_compass_perception] []
  [new [perceptions]
       [let [[initial-begin_time             nil]
	     [initial-end_time               nil]
	     [initial-retina_image           nil]
	     [initial-visual_objects         nil]
	     [initial-left_hand_object_name  nil]
	     [initial-right_hand_object_name nil]
	     [initial-proprioceptual_frame   nil]]
	 [construct moral_compass_perception
		    initial-begin_time
		    initial-end_time
		    initial-retina_image
		    initial-visual_objects
		    initial-left_hand_object_name
		    initial-right_hand_object_name
		    initial-proprioceptual_frame]
	 ]]]


'mindmon_blocks_world_agent_body'

[deframe mindmon_blocks_world_agent_body [agent_body] [mindmon_blocks_world_agent
						       perceptions]
  [new [initial-mindmon_blocks_world_agent]
       [= mindmon_blocks_world_agent initial-mindmon_blocks_world_agent]
       
       [let [[initial-physical_world [get [get mindmon_blocks_world_agent mindmon_world] physical_world]]
	     [initial-name           [get mindmon_blocks_world_agent name]]
	     [initial-mind           [get mindmon_blocks_world_agent mind]]]
	 [construct agent_body
		    initial-physical_world
		    initial-name
		    initial-mind]]
       
       ]]

[deftypefunk mindmon_blocks_world_agent_body execute update_after_step_simulation []
  [= perceptions nil]]

[deftypefunk mindmon_blocks_world_agent_body execute sense_perception []
  [new blocks_world_perception perceptions]]



'mindmon_blocks_world_agent'

[deframe mindmon_blocks_world_agent [mindmon_agent] [blocks_world_moral_compass
						     agent_body]
  [new [initial-mindmon_world
	initial-name]
       [construct mindmon_agent initial-mindmon_world initial-name]
       
       [= blocks_world_moral_compass [new blocks_world_moral_compass]]
       [= agent_body                 [new mindmon_blocks_world_agent_body this]]
       ]]

[deftypefunk mindmon_blocks_world_agent get gripper []
  [get [get mindmon_world blocks_world] gripper name]]

'interface functions'

[deftypefunk mindmon_blocks_world_agent get mind []
  blocks_world_moral_compass]

[deftypefunk mindmon_blocks_world_agent get body []
  agent_body]

[deftypefunk mindmon_blocks_world_agent get knowledge_base_names []
  nil]

[deftypefunk mindmon_blocks_world_agent get tool_names []
  nil]

[deftypefunk mindmon_blocks_world_agent execute sense_world []
  [get [get this gripper] perceptions]]

[deftypefunk mindmon_blocks_world_agent execute sense_retina_image []
  nil]

[deftypefunk mindmon_blocks_world_agent get as-chunk []
  nil]



'mindmon_blocks_world'

[deframe mindmon_blocks_world [mindmon_world] [blocks_world
					       physical_world]
  [new [width height]
       [construct mindmon_world [gensym 'mindmon_blocks_world']]
       [= blocks_world   [new blocks_world [gensym 'blocks_world'] width height]]
       [= physical_world [new physical_world]]
       ]]

[deftypefunk mindmon_blocks_world get compatible_agent_types []
  `[mindmon_blocks_world_agent]]

[deftypefunk mindmon_blocks_world execute raw_step_simulation [step_size]
  [have blocks_world step [get step_size as-double]]]

[deftypefunk mindmon_blocks_world execute step_physical_world []
  [have physical_world step_physical_world]]

[deftypefunk mindmon_blocks_world execute destroy []
  [have blocks_world destroy]]

[deftypefunk mindmon_blocks_world execute initialize_simulation []
  [have blocks_world initialize]]

[deftypefunk mindmon_blocks_world get initialize_events []
  nil]

[deftypefunk mindmon_blocks_world get screenshot []
  [get blocks_world as-image]]

[deftypefunk mindmon_blocks_world get all_objects_summary []
  [let [[object_frame [frame]]]
    [mapc [funk [block]
		[let [[block_frame [frame]]]
		  [have block_frame add `is-a `block]
		  [have object_frame add [get block name] block_frame]]]
	  [get blocks_world blocks]]
    [mapc [funk [gripper]
		[let [[gripper_frame [frame]]]
		  [have block_frame add `is-a `gripper]
		  [have object_frame add [get gripper name] block_frame]]]
	  [get blocks_world grippers]]
    object_frame]]

[deftypefunk mindmon_blocks_world get possible_agent_names []
  [mapcar [funk [gripper]
		[get gripper name]]
	  [get blocks_world grippers]]]

[deftypefunk mindmon_blocks_world get default_step_delay []
  0.0]

[deftypefunk mindmon_blocks_world get default_step_size []
  0.25]









[new mindmon_blocks_world 640 480]

