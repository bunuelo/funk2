'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'mindmon_blocks_world_agent'

[deframe mindmon_blocks_world_agent [mindmon_agent] [blocks_world_moral_compass
						     agent_body]
  [new [initial-mindmon_world
	initial-name]
       [construct mindmon_agent initial-mindmon_world initial-name]
       
       [= blocks_world_moral_compass [new blocks_world_moral_compass]]
       [= agent_body                 [new agent_body
					  [get mindmon_world blocks_world]
					  blocks_world_moral_compass
					  name]]
       ]]

[deftypefunk mindmon_blocks_world_agent get mind []
  blocks_world_moral_compass]

[deftypefunk mindmon_blocks_world_agent get body []
  agent_body]

[deftypefunk mindmon_blocks_world_agent get knowledge_base_names []
  nil]

[deftypefunk mindmon_blocks_world_agent get tool_names []
  nil]

[deftypefunk mindmon_blocks_world_agent execute sense_world []
  nil]

[deftypefunk mindmon_blocks_world_agent get as-chunk []
  nil]



'mindmon_blocks_world'

[deframe mindmon_blocks_world [mindmon_world] [blocks_world
					       physical_world]
  [new [width height]
       [construct mindmon_world [gensym 'mindmon_blocks_world']]
       [= blocks_world   [new blocks_world [gensym 'blocks_world'] width height]]
       [= physical_world [new physical_world]]
       ]]

[deftypefunk mindmon_blocks_world get compatible_agent_types []
  `[mindmon_blocks_world_agent]]

[deftypefunk mindmon_blocks_world execute raw_step_simulation [step_size]
  [have blocks_world step [get step_size as-double]]]

[deftypefunk mindmon_blocks_world execute step_physical_world []
  [have physical_world step_physical_world]]

[deftypefunk mindmon_blocks_world execute destroy []
  [have blocks_world destroy]]

[deftypefunk mindmon_blocks_world execute initialize_simulation []
  [have blocks_world initialize]]

[deftypefunk mindmon_blocks_world get initialize_events []
  nil]

[deftypefunk mindmon_blocks_world get screenshot []
  [get blocks_world as-image]]

[deftypefunk mindmon_blocks_world get all_objects_summary []
  [let [[object_frame [frame]]]
    [mapc [funk [block]
		[let [[block_frame [frame]]]
		  [have block_frame add `is-a `block]
		  [have object_frame add [get block name] block_frame]]]
	  [get blocks_world blocks]]
    [mapc [funk [gripper]
		[let [[gripper_frame [frame]]]
		  [have block_frame add `is-a `gripper]
		  [have object_frame add [get gripper name] block_frame]]]
	  [get blocks_world grippers]]
    object_frame]]

[deftypefunk mindmon_blocks_world get possible_agent_names []
  [mapcar [funk [gripper]
		[get gripper name]]
	  [get blocks_world grippers]]]

[deftypefunk mindmon_blocks_world get default_step_delay []
  0.0]

[deftypefunk mindmon_blocks_world get default_step_size []
  0.25]









[new mindmon_blocks_world 640 480]

