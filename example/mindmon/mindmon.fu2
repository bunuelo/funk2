'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'mindmon_resource'

[deframe          mindmon_resource [frame] [mindmon layer_name agency_name resource_name text_view]]
[deftypeconstruct mindmon_resource [mindmon layer_name agency_name resource_name]
  [set this mindmon       mindmon]
  [set this layer_name    layer_name]
  [set this agency_name   agency_name]
  [set this resource_name resource_name]
  [set this text_view     [gtk-text_view-new]]
  this]

[deftypefunk mindmon_resource get widget []
  [get this text_view]]

[deftypefunk mindmon_resource execute redraw []
  [set [get [get this text_view] buffer] text [format nil  '\t\t' [get this resource_name] ' resource']]
  ]


'mindmon_agency'

[deframe          mindmon_agency [frame] [mindmon layer_name agency_name vbox text_view resource_vbox resource_array]]
[deftypeconstruct mindmon_agency [mindmon layer_name agency_name]
  [set this mindmon        mindmon]
  [set this layer_name     layer_name]
  [set this agency_name    agency_name]
  [set this vbox           [gtk-vbox-new 2]]
  [set this text_view      [gtk-text_view-new]]
  [set this resource_vbox  [gtk-vbox-new [get this resource_count]]]
  [set this resource_array [new array [get this resource_count]]]
  [let [[resource_name_index 0]
	[resource_name_iter  [get this resource_names]]]
    [while resource_name_iter
      [let [[resource_name [first resource_name_iter]]]
	[set  [get this resource_array] elt resource_name_index [new mindmon_resource mindmon layer_name agency_name resource_name]]
	[have [get this resource_vbox]  pack_start              [get [get [get this resource_array] elt resource_name_index] widget] t t 0]]
      [= resource_name_index [+    resource_name_index 1]]
      [= resource_name_iter  [next resource_name_iter]]]]
  [have [get this vbox] pack_start [get this text_view]     nil nil 0]
  [have [get this vbox] pack_start [get this resource_vbox] t t 0]
  this]

[deftypefunk mindmon_agency get widget []
  [get this vbox]]

[deftypefunk mindmon_agency execute redraw []
  [set [get [get this text_view] buffer] text [format nil  '\t\t' [get this agency_name] ' agency'
						      '\n' '\t\t' 'resource count\t' [get this resource_count]]]
  [dotimes [i [get this resource_count]]
    [have [get [get this resource_array] elt i] redraw]]]

[deftypefunk mindmon_agency get resource_count []
  [get [get [get this mindmon] mind] layer_agency_resource_count [get this layer_name] [get this agency_name]]]

[deftypefunk mindmon_agency get resource_names []
  [get [get [get this mindmon] mind] layer_agency_resource_names [get this layer_name] [get this agency_name]]]


'mindmon_layer'

[deframe          mindmon_layer [frame] [mindmon layer_name vbox text_view agency_vbox agency_array]]
[deftypeconstruct mindmon_layer [mindmon layer_name]
  [set this mindmon      mindmon]
  [set this layer_name   layer_name]
  
  [set this vbox         [gtk-vbox-new 2]]
  [set this text_view    [gtk-text_view-new]]
  [set this agency_vbox  [gtk-vbox-new [get this agency_count]]]
  [set this agency_array [new array    [get this agency_count]]]
  
  [let [[agency_names [get [get mindmon mind] layer_agency_names layer_name]]]
    [let [[agency_name_index 0]
	  [agency_name_iter  agency_names]]
      [while agency_name_iter
	[let [[agency_name [first agency_name_iter]]]
	  [let [[mindmon_agency [new mindmon_agency mindmon layer_name agency_name]]]
	    [set  [get this agency_array] elt agency_name_index mindmon_agency]
	    [have [get this agency_vbox]  pack_start [get mindmon_agency widget] t t 0]]]
	[= agency_name_index [+    agency_name_index 1]]
	[= agency_name_iter  [next agency_name_iter]]]]]
  
  [have [get this vbox] pack_start [get this text_view]   nil nil 0]
  [have [get this vbox] pack_start [get this agency_vbox] t t 0]
  this]

[deftypefunk mindmon_layer get layer []
  [get [get [get this mindmon] mind] layer [get this layer_name]]]

[deftypefunk mindmon_layer get agency_count []
  [simple_length [get [get this layer] agencies]]]

[deftypefunk mindmon_layer get widget []
  [get this vbox]]

[deftypefunk mindmon_layer execute redraw []
  [set [get [get this text_view] buffer] text [format nil  '\t' [get this layer_name] ' layer'
						      '\n' '\t' 'agency count\t' [get this agency_count]]]
  [dotimes [i [get this agency_count]]
    [have [get [get this agency_array] elt i] redraw]]]


'mindmon'

[deframe          mindmon [frame] [initialized mind fiber vbox text_view layer_vbox layer_array]]
[deftypeconstruct mindmon [mind]
  [if [not [is-type `mind mind]]
      [error bug_type `mindmon_mind_is_not_mind
	     was_type [type mind]]]
  [set this initialized nil]
  [set this mind        mind]
  [set this fiber       [fiber [funk []
				     [cause-define cause-name `mindmon]
				     [cause-enable_reactive_critics [this-cause]]
				     
				     [while [not [get this initialized]]
				       [yield]]
				     
				     [let [[win [gtk-window-new]]]
				       
				       [set this vbox       [gtk-vbox-new 2]]
				       [set this text_view  [gtk-text_view-new]]
				       [set this layer_vbox [gtk-vbox-new [get this layer_count]]]
				       
				       [have [get this vbox] pack_start [get this text_view] nil nil 0]
				       [have [get this vbox] pack_start [get this layer_vbox] t t 0]
				       
				       [have win add          [get this vbox]]
				       [set  win default_size 640 800]
				       [set  win title        'mindmon']
				       
				       [set this layer_array [new array [get this layer_count]]]
				       
				       [let [[layer_name_index 0]
					     [layer_name_iter  [get mind layer_names]]]
					 [while layer_name_iter
					   [let [[layer_name [first layer_name_iter]]]
					     [let [[mindmon_layer [new mindmon_layer this layer_name]]]
					       [set  [get this layer_array] elt layer_name_index mindmon_layer]
					       [have [get this layer_vbox]  pack_start           [get mindmon_layer widget] t t 0]]]
					   [= layer_name_index [+ layer_name_index 1]]
					   [= layer_name_iter  [next layer_name_iter]]]]
				       
				       
				       [let [[mindmon-redraw-quit_now nil]
					     [mindmon-redraw-is_done  nil]]
					 
					 [have win signal_connect 'destroy'
					       [funk []
						     [= mindmon-redraw-quit_now t]
						     [while [not mindmon-redraw-is_done]
						       [millisleep 100]]]
					       nil]
					 
					 [have win show_all]
					 
					 [while [not mindmon-redraw-quit_now]
					   [have this redraw]
					   [yield]]
					 [= mindmon-redraw-is_done t]
					 nil]]]
			       nil]]
  [set this vbox        nil]
  [set this layer_array nil]
  [set this initialized t]
  this]


[deftypefunk mindmon get layer_count []
  [simple_length [get [get this mind] layers]]]


[deftypefunk mindmon execute redraw []
  [set [get [get this text_view] buffer] text [format nil  'mind'
						      '\n' 'layer count\t' [get this layer_count]]]
  [dotimes [i [get this layer_count]]
    [have [get [get this layer_array] elt i] redraw]]]


[defmetro mindmon [:rest args]
  [let [[minds                        nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'mindmon: compiling mind command line argument, ' arg '.\n']
					       [= minds [cons arg minds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length minds] 1]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied ' [simple_length minds] ': ' minds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length minds] 0]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon -h <mind>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running mind.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[mind [first minds]]]
	`[prog [new mindmon ,mind]
	       nil]]]]]


