'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe          mindmon_mind [frame] [mind text_view]]
[deftypeconstruct mindmon_mind [mind]
  [set this mind      mind]
  [set this text_view [gtk-text_view-new]]
  this]

[deftypefunk mindmon_mind get widget []
  [get this text_view]]

[deftypefunk mindmon_mind execute redraw []
  [let [[layer_count [simple_length [get [get this mind] layers]]]]
    [set [get [get this text_view] buffer] text [format nil 'Mind with ' layer_count ' layers.']]
    ]]


[defunk mindmon-new [mind]
  [let [[win          [gtk-window-new]]
	[mindmon_mind [new mindmon_mind mind]]]
    
    [have win add          [get mindmon_mind widget]]
    [set  win default_size 640 800]
    [set  win title        'mindmon']
    
    [let [[mindmon-redraw-quit_now nil]
	  [mindmon-redraw-is_done  nil]]
      
      [have win signal_connect 'destroy'
	    [funk []
		  [= mindmon-redraw-quit_now t]
		  [while [not mindmon-redraw-is_done]
		    [millisleep 100]]]
	    nil]
      
      [have win show_all]
      
      [fiber [funk []
		   [cause-define cause-name `mindmon]
		   [cause-enable_reactive_critics [this-cause]]
		   [while [not mindmon-redraw-quit_now]
		     [have mindmon_mind redraw]
		     [yield]]
		   [= mindmon-redraw-is_done t]
		   nil]
	     nil]
      
      nil]]]

[defmetro mindmon [:rest args]
  [let [[minds                        nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nmindmon: compiling mind command line argument, ' arg '.\n']
					       [= minds [cons arg minds]]]]]]
	    [= iter [next iter]]]]]
    [if [!= [simple_length minds] 1]
	[prog [format stdout '\nmindmon fatal; mindmon can only monitor one mind at a time, user supplied: ' minds '.']
	      [= print_usage_message_and_exit t]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon mind ... -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running mind.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[mind [first minds]]]
	`[mindmon-new ,mind]]]]]


