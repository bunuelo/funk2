'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'mindmon_story'

[deframe          mindmon_story [frame] [mindmon layer_name agency_name resource_name story_name text_view]]
[deftypeconstruct mindmon_story [mindmon layer_name agency_name resource_name story_name]
  [set this mindmon       mindmon]
  [set this layer_name    layer_name]
  [set this agency_name   agency_name]
  [set this resource_name resource_name]
  [set this story_name    story_name]
  [set this text_view     [gtk-text_view-new]]
  this]

[deftypefunk mindmon_story get widget []
  [get this text_view]]

[deftypefunk mindmon_story execute redraw []
  [set [get [get this text_view] buffer] text [format nil  [get this story_name]
						      '\n' 
						      ]]
  ]



'mindmon_resource'

[deframe          mindmon_resource [frame] [mindmon
					    layer_name
					    agency_name
					    resource_name
					    
					    hbox
					    text_view
					    story_hbox
					    story_array
					    
					    last_fiber_bytecode_count
					    last_fiber_bytecode_count_time
					    
					    elapsed_bytecode_count
					    elapsed_bytecode_count_nanoseconds
					    bytecodes_per_second
					    ]]
[deftypeconstruct mindmon_resource [mindmon layer_name agency_name resource_name]
  [set this mindmon       mindmon]
  [set this layer_name    layer_name]
  [set this agency_name   agency_name]
  [set this resource_name resource_name]
  [set this hbox          [gtk-hbox-new 2]]
  [set this text_view     [gtk-text_view-new]]
  [set this story_hbox    [gtk-hbox-new [get this story_count]]]
  [set this story_array   [new array    [get this story_count]]]
  [dotimes [i [get this story_count]]
    [let [[story_name i]]
      [let [[mindmon_story [new mindmon_story mindmon layer_name agency_name resource_name story_name]]]
	[set [get this story_array] elt i mindmon_story]
	[have [get this story_hbox] pack_start [get mindmon_story widget] t t 0]]]]
  [have [get this hbox] pack_start [get this text_view]  nil nil 0]
  [have [get this hbox] pack_start [get this story_hbox] t t 0]
  this]

[deftypefunk mindmon_resource get widget []
  [get this hbox]]

[deftypefunk mindmon_resource get resource []
  [get [get [get this mindmon] mind] resource [get this layer_name] [get this agency_name] [get this resource_name]]]

[deftypefunk mindmon_resource get story_count []
  1]

[deftypefunk mindmon_resource execute redraw []
  [let [[resource [get this resource]]]
    [let [[fiber [get resource fiber]]]
      [let [[last_fiber_bytecode_count      [get this last_fiber_bytecode_count]]
	    [last_fiber_bytecode_count_time [get this last_fiber_bytecode_count_time]]]
	[if [null last_fiber_bytecode_count]
	    [= last_fiber_bytecode_count 0]]
	[if [null last_fiber_bytecode_count_time]
	    [= last_fiber_bytecode_count_time [time]]]
	[let [[fiber_bytecode_count      [get fiber bytecode_count]]
	      [fiber_bytecode_count_time [time]]]
	  [let [[elapsed_bytecode_count             [- fiber_bytecode_count                                   last_fiber_bytecode_count]]
		[elapsed_bytecode_count_nanoseconds [- [get fiber_bytecode_count_time nanoseconds_since_1970] [get last_fiber_bytecode_count_time nanoseconds_since_1970]]]]
	    [set this elapsed_bytecode_count             elapsed_bytecode_count]
	    [set this elapsed_bytecode_count_nanoseconds elapsed_bytecode_count_nanoseconds]
	    [let [[bytecodes_per_second [/ [* elapsed_bytecode_count 1000000000] elapsed_bytecode_count_nanoseconds]]]
	      [set this bytecodes_per_second               bytecodes_per_second]
	      [set this last_fiber_bytecode_count          fiber_bytecode_count]
	      [set this last_fiber_bytecode_count_time     fiber_bytecode_count_time]
	      ]]]]]
    
    [set [get [get this text_view] buffer] text [format nil  '\t\t\t' [get this resource_name]
							'\n' '\t\t\t\t' 'active\t\t'   [get resource active]
							'\n' '\t\t\t\t' 'done\t\t'     [get resource done]
							'\n' '\t\t\t\t' 'sleep time\t' [/ [get resource pole_nanoseconds] 1000000000.0] ' s'
							'\n' '\t\t\t\t' 'speed\t\t'    [/ [get this bytecodes_per_second] 1024.0] ' kBc/s'
							'\n' '\t\t\t\t' '\t\t\t\t\t\t\t\t\t\t'
							]]
    [dotimes [i [get this story_count]]
      [have [get [get this story_array] elt i] redraw]]]]



'mindmon_agency'

[deframe          mindmon_agency [frame] [mindmon
					  layer_name
					  agency_name
					  
					  vbox
					  text_view
					  resource_vbox
					  resource_array
					  
					  bytecodes_per_second
					  ]]
[deftypeconstruct mindmon_agency [mindmon layer_name agency_name]
  [set this mindmon        mindmon]
  [set this layer_name     layer_name]
  [set this agency_name    agency_name]
  [set this vbox           [gtk-vbox-new 2]]
  [set this text_view      [gtk-text_view-new]]
  [set this resource_vbox  [gtk-vbox-new [get this resource_count]]]
  [set this resource_array [new array    [get this resource_count]]]
  [let [[resource_name_index 0]
	[resource_name_iter  [get this resource_names]]]
    [while resource_name_iter
      [let [[resource_name [first resource_name_iter]]]
	[set  [get this resource_array] elt resource_name_index [new mindmon_resource mindmon layer_name agency_name resource_name]]
	[have [get this resource_vbox]  pack_start              [get [get [get this resource_array] elt resource_name_index] widget] t t 0]]
      [= resource_name_index [+    resource_name_index 1]]
      [= resource_name_iter  [next resource_name_iter]]]]
  [have [get this vbox] pack_start [get this text_view]     nil nil 0]
  [have [get this vbox] pack_start [get this resource_vbox] t t 0]
  this]

[deftypefunk mindmon_agency get widget []
  [get this vbox]]

[deftypefunk mindmon_agency execute redraw []
  [let [[agency_bytecodes_per_second 0]]
    [dotimes [i [get this resource_count]]
      [have [get [get this resource_array] elt i] redraw]
      [= agency_bytecodes_per_second [+ agency_bytecodes_per_second [get [get [get this resource_array] elt i] bytecodes_per_second]]]]
    [set this bytecodes_per_second agency_bytecodes_per_second]]
  [set [get [get this text_view] buffer] text [format nil  '\t\t' [get this agency_name] ' agency'
						      '\n' '\t\t' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]

[deftypefunk mindmon_agency get resource_count []
  [get [get [get this mindmon] mind] layer_agency_resource_count [get this layer_name] [get this agency_name]]]

[deftypefunk mindmon_agency get resource_names []
  [get [get [get this mindmon] mind] layer_agency_resource_names [get this layer_name] [get this agency_name]]]


'mindmon_layer'

[deframe          mindmon_layer [frame] [mindmon
					 layer_name
					 
					 vbox
					 text_view
					 agency_vbox
					 agency_array
					 
					 bytecodes_per_second]]
[deftypeconstruct mindmon_layer [mindmon layer_name]
  [set this mindmon      mindmon]
  [set this layer_name   layer_name]
  
  [set this vbox         [gtk-vbox-new 2]]
  [set this text_view    [gtk-text_view-new]]
  [set this agency_vbox  [gtk-vbox-new [get this agency_count]]]
  [set this agency_array [new array    [get this agency_count]]]
  
  [let [[agency_names [get [get mindmon mind] layer_agency_names layer_name]]]
    [let [[agency_name_index 0]
	  [agency_name_iter  agency_names]]
      [while agency_name_iter
	[let [[agency_name [first agency_name_iter]]]
	  [let [[mindmon_agency [new mindmon_agency mindmon layer_name agency_name]]]
	    [set  [get this agency_array] elt agency_name_index mindmon_agency]
	    [have [get this agency_vbox]  pack_start [get mindmon_agency widget] t t 0]]]
	[= agency_name_index [+    agency_name_index 1]]
	[= agency_name_iter  [next agency_name_iter]]]]]
  
  [have [get this vbox] pack_start [get this text_view]   nil nil 0]
  [have [get this vbox] pack_start [get this agency_vbox] t t 0]
  this]

[deftypefunk mindmon_layer get layer []
  [get [get [get this mindmon] mind] layer [get this layer_name]]]

[deftypefunk mindmon_layer get agency_count []
  [simple_length [get [get this layer] agencies]]]

[deftypefunk mindmon_layer get widget []
  [get this vbox]]

[deftypefunk mindmon_layer get index []
  [get [get [get [get this mindmon] mind] layer [get this layer_name]] index]]

[deftypefunk mindmon_layer execute redraw []
  [let [[layer_bytecodes_per_second 0]]
    [dotimes [i [get this agency_count]]
      [let [[mindmon_agency [get [get this agency_array] elt i]]]
	[have mindmon_agency redraw]
	[let [[bytecodes_per_second [get mindmon_agency bytecodes_per_second]]]
	  [= layer_bytecodes_per_second [+ layer_bytecodes_per_second bytecodes_per_second]]]]]
    [set this bytecodes_per_second layer_bytecodes_per_second]]
  [set [get [get this text_view] buffer] text [format nil  '\t' [get this layer_name] ' layer'
						      '\n' '\t' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]


'mindmon'

[deframe          mindmon [frame] [initialized
				   mind
				   fiber
				   
				   scrolled_window
				   vbox
				   text_view
				   layer_vbox
				   layer_array
				   
				   bytecodes_per_second]]
[deftypeconstruct mindmon [mind mind_expression]
  [if [not [is-type `mind mind]]
      [error bug_type `mindmon_mind_is_not_mind
	     was_type [type mind]]]
  [set this initialized nil]
  [set this mind        mind]
  [set this fiber       [fiber [funk []
				     [cause-define cause-name `mindmon]
				     [cause-define cause-args [frame mind_expression mind_expression]]
				     [cause-enable_reactive_critics [this-cause]]
				     
				     [while [not [get this initialized]]
				       [yield]]
				     
				     [let [[win [gtk-window-new]]]
				       
				       [set this scrolled_window [gtk-scrolled_window-new]]
				       [set this vbox            [gtk-vbox-new 2]]
				       [set this text_view       [gtk-text_view-new]]
				       [set this layer_vbox      [gtk-vbox-new [get this layer_count]]]
				       
				       [have [get this vbox] pack_start [get this text_view] nil nil 0]
				       [have [get this vbox] pack_start [get this layer_vbox] t t 0]
				       
				       [have [get this scrolled_window] add_with_viewport [get this vbox]]
				       
				       [have win add          [get this scrolled_window]]
				       [set  win default_size 640 800]
				       [set  win title        [format nil 'mindmon ' mind_expression]]
				       
				       [set this layer_array [new array [get this layer_count]]]
				       
				       [let [[layer_name_index 0]
					     [layer_name_iter  [get mind layer_names]]]
					 [while layer_name_iter
					   [let [[layer_name [first layer_name_iter]]]
					     [let [[mindmon_layer [new mindmon_layer this layer_name]]]
					       [let [[layer [get [get this mind] layer layer_name]]]
						 [let [[layer_index [get layer index]]]
						   [set  [get this layer_array] elt layer_index mindmon_layer]]]]]
					   [= layer_name_index [+ layer_name_index 1]]
					   [= layer_name_iter  [next layer_name_iter]]]]
				       
				       [dotimes [i [get mind layer_count]]
					 [let [[mindmon_layer [get [get this layer_array] elt i]]]
					   [have [get this layer_vbox] pack_start [get mindmon_layer widget] t t 0]]]
				       
				       [let [[mindmon-redraw-quit_now nil]
					     [mindmon-redraw-is_done  nil]]
					 
					 [have win signal_connect 'destroy'
					       [funk []
						     [= mindmon-redraw-quit_now t]
						     [while [not mindmon-redraw-is_done]
						       [millisleep 100]]]
					       nil]
					 
					 [have win show_all]
					 
					 [while [not mindmon-redraw-quit_now]
					   [have this redraw]
					   [yield]]
					 [= mindmon-redraw-is_done t]
					 nil]]]
			       nil]]
  [set this vbox        nil]
  [set this layer_array nil]
  [set this initialized t]
  this]


[deftypefunk mindmon get layer_count []
  [simple_length [get [get this mind] layers]]]


[deftypefunk mindmon execute redraw []
  [let [[mind_bytecodes_per_second 0]]
    [dotimes [i [get this layer_count]]
      [let [[mindmon_layer [get [get this layer_array] elt i]]]
	[have mindmon_layer redraw]
	[= mind_bytecodes_per_second [+ mind_bytecodes_per_second [get mindmon_layer bytecodes_per_second]]]]]
    [set this bytecodes_per_second mind_bytecodes_per_second]]
  [set [get [get this text_view] buffer] text [format nil  'mind'
						      '\n' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]


[defmetro mindmon [:rest args]
  [let [[minds                        nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'mindmon: compiling mind command line argument, ' arg '.\n']
					       [= minds [cons arg minds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length minds] 1]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied ' [simple_length minds] ': ' minds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length minds] 0]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon -h <mind>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running mind.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[mind [first minds]]]
	`[prog [new mindmon ,mind [quote ,mind]]
	       nil]]]]]


