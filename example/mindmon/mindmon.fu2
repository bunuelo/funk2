'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk mindmon_mind-redraw [text_view]
  [set [get text_view buffer] text [format nil 'Mind']]
  ]

[defunk mindmon_mind-new []
  [let [[text_view [gtk-text_view-new]]]
    [frame widget      text_view
	   redraw_funk [funk []
			     [mindmon_mind-redraw text_view]
			     ]]]]

[defunk mindmon-new [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout '\nmindmon fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon -h'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running system.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[win  [gtk-window-new]]
	    [mind [mindmon_mind-new]]]
	[let [[mind_widget      [have mind lookup `widget]]
	      [mind_redraw_funk [have mind lookup `redraw_funk]]]
	  
	  [have win              add          mind_widget]
	  [set  win              default_size 640 800]
	  [set  win              title        'mindmon']
	  
	  [let [[mindmon-redraw-quit_now nil]
		[mindmon-redraw-is_done  nil]]
	    
	    [have win signal_connect 'destroy'
		  [funk []
			[= mindmon-redraw-quit_now t]
			[while [not mindmon-redraw-is_done]
			  [millisleep 100]]]
		  nil]
	    
	    [have win show_all]
	    
	    [fiber [funk []
			 [cause-define cause-name `mindmon]
			 [cause-enable_reactive_critics [this-cause]]
			 [while [not mindmon-redraw-quit_now]
			   [apply mind_redraw_funk nil]
			   [yield]]
			 [= mindmon-redraw-is_done t]
			 nil]
		   nil]
	    
	    nil]]]]]]

[defmetro mindmon [:rest args]
  `[mindmon-new @[mapcar [funk [arg] `[quote ,arg]] args]]]


