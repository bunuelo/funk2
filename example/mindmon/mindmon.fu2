'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[defunk gtk-left_label-new [text]
  [let [[this [gtk-label-new text]]]
    [set this alignment  0.0 0.0]
    `[set this selectable t]
    this]]

'mindmon_resource_trace_story'

[deframe mindmon_resource_trace_story [frame] [mindmon layer_name agency_name resource_name story_name title_label scrolled_window label]
  [new [mindmon layer_name agency_name resource_name story_name]
       [set this mindmon         mindmon]
       [set this layer_name      layer_name]
       [set this agency_name     agency_name]
       [set this resource_name   resource_name]
       [set this story_name      story_name]
       [set this title_label     [gtk-label-new [format nil story_name]]]
       [set this scrolled_window [gtk-scrolled_window-new]]
       [set this label           [gtk-left_label-new '']]
       [have [get this scrolled_window] request_size      600 200]
       [have [get this scrolled_window] add_with_viewport [get this label]]
       this]]

[deftypefunk mindmon_resource_trace_story get widget []
  [get this scrolled_window]]

[deftypefunk mindmon_resource_trace_story get story []
  [let [[resource [get [get [get this mindmon] mind] resource [get this layer_name] [get this agency_name] [get this resource_name]]]]
    [cond [[eq [get this story_name] `trace_story] [get resource trace_story]]
	  [[eq [get this story_name] `think_story] [get resource think_story]]
	  [t                                       [error bug_type `invalid_story_name]]]]]

[deftypefunk mindmon_resource_trace_story execute redraw []
  [let [[story [get this story]]]
    [set [get this label] text [stringlist-concat [mapcar [funk [event]
								[format nil [get event as-list]
									'\n']]
							  [get story events]]]]
    ]]

'activating dialog'

[deframe mindmon_user_activating_dialog [frame] [[fiber         nil]
						 [window        [gtk-window-new]]
						 [vbox          [gtk-vbox-new 2]]
						 [label         [gtk-label-new 'You have chosen to user activate this resource. Please enter arguments for this activation']]
						 [entry         [gtk-entry-new]]
						 [hbox          [gtk-hbox-new 2]]
						 [cancel_button [gtk-button-new_with_label 'Cancel']]
						 [okay_button   [gtk-button-new_with_label 'Okay']]
						 [done          nil]
						 
						 mindmon
						 layer_name
						 agency_name
						 resource_name  ]
  [new [mindmon my_layer_name my_agency_name my_resource_name]
       
       
       [= mindmon                    my_mindmon]
       [= layer_name                 my_layer_name]
       [= agency_name                my_agency_name]
       [= resource_name              my_resource_name]
       [set  window title 'mindmon - user activate']
       [have window connect_hide_on_delete]
       [have window add vbox]
       [have vbox pack_start label nil nil 0]
       [have vbox pack_start entry nil nil 0]
       [have vbox pack_start hbox  nil nil 0]
       [have hbox pack_start cancel_button nil nil 0]
       [have hbox pack_start okay_button   nil nil 0]
       [have cancel_button signal_connect 'clicked'
	     [funk []
		   [print 'clicked cancel.']
		   [= done t]]
	     nil]
       [have okay_button signal_connect 'clicked'
	     [funk []
		   [print 'clicked okay.']
		   [let [[argus      [mapcar [funk [item] 
						   [string-read item]]
					     [have [get entry text] split ' ']]]]
				     
		     [eval `[have ,[get [get this mindmon] mind] user_activate ,layer_name ,agency_name ,resource_name @argus]]
		     [terminal_format standard-terminal '\nactivating resource' resource_name '.\n']
		     [= done t]]
	     nil]]
       [have window show_all]
       [fiber [funk []
		    [while  [and [get window visible] [not done]]
		      [sleep 1]]
		    [have window destroy]]
	      nil]
       ]]

'mindmon_resource'

[deframe mindmon_resource [frame] [mindmon
				   layer_name
				   agency_name
				   resource_name
				   
				   frame
				   vbox
				   menu_bar
				   command_menu_item
				   command_menu
				   command_activate_menu_item
				   hbox
				   label
				   story_notebook
				   story_array
				   
				   last_fiber_bytecode_count
				   last_fiber_bytecode_count_time
				   
				   elapsed_bytecode_count
				   elapsed_bytecode_count_nanoseconds
				   bytecodes_per_second
				   ]
  [new [new-mindmon new-layer_name new-agency_name new-resource_name]
       [= mindmon                    new-mindmon]
       [= layer_name                 new-layer_name]
       [= agency_name                new-agency_name]
       [= resource_name              new-resource_name]
       [= frame                      [gtk-frame-new [format nil layer_name '-' agency_name '-' resource_name]]]
       [= vbox                       [gtk-vbox-new 2]]
       [= menu_bar                   [gtk-menu_bar-new]]
       [= command_menu_item          [gtk-menu_item-new 'Command']]
       [= command_menu               [gtk-menu-new]]
       [= command_activate_menu_item [gtk-menu_item-new 'User_activate Resource']]
       [= hbox                       [gtk-hbox-new 2]]
       [= label                      [gtk-left_label-new '']]
       [= story_notebook             [gtk-notebook-new]]
       [= story_array                [new array [get this story_count]]]
       
       [have menu_bar append command_menu_item]
       [have command_menu append command_activate_menu_item]
       [set command_menu_item submenu command_menu]
       [have vbox pack_start menu_bar nil nil 0]
       [have vbox pack_start hbox     t t 0]
       
       [have command_activate_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\n\nmindmon activating resource.\n']
                  'make new dialog'
		  [new mindmon_user_activate_dialog fiber layer_name agency_name resource_name]
		   'activate resource here.'   
		   ]
	     nil]
       
       [let [[index 0]]
	 [mapc [funk [story_name]
		     [let [[mindmon_resource_trace_story [new mindmon_resource_trace_story mindmon layer_name agency_name resource_name story_name]]]
		       [set [get this story_array] elt index mindmon_resource_trace_story]
		       [have [get this story_notebook] append_page [get mindmon_resource_trace_story widget] [get mindmon_resource_trace_story title_label]]]
		     [= index [+ 1 index]]]
	       `[trace_story
		 think_story]]]
       [have hbox  pack_start label          nil nil 0]
       [have hbox  pack_start story_notebook t t 0]
       [have frame add        vbox]
       this]]

[deftypefunk mindmon_resource get widget []
  [get this frame]]

[deftypefunk mindmon_resource get resource []
  [get [get [get this mindmon] mind] resource [get this layer_name] [get this agency_name] [get this resource_name]]]


[deftypefunk mindmon_resource get story_count []
  2]

[deftypefunk mindmon_resource execute redraw []
  [let [[resource [get this resource]]]
    [let [[fiber [get resource fiber]]]
      [let [[last_fiber_bytecode_count      [get this last_fiber_bytecode_count]]
	    [last_fiber_bytecode_count_time [get this last_fiber_bytecode_count_time]]]
	[let [[fiber_bytecode_count      [get fiber bytecode_count]]
	      [fiber_bytecode_count_time [time]]]
	  [let [[elapsed_bytecode_count             [if last_fiber_bytecode_count
							[- fiber_bytecode_count last_fiber_bytecode_count]
						      0]]
		[elapsed_bytecode_count_nanoseconds [if last_fiber_bytecode_count_time
							[- [get fiber_bytecode_count_time nanoseconds_since_1970] [get last_fiber_bytecode_count_time nanoseconds_since_1970]]
						      0]]]
	    [set this elapsed_bytecode_count             elapsed_bytecode_count]
	    [set this elapsed_bytecode_count_nanoseconds elapsed_bytecode_count_nanoseconds]
	    [let [[bytecodes_per_second [if [!= elapsed_bytecode_count_nanoseconds 0]
					    [/ [* elapsed_bytecode_count 1000000000] elapsed_bytecode_count_nanoseconds]
					  0]]]
	      [set this bytecodes_per_second               bytecodes_per_second]
	      [set this last_fiber_bytecode_count          fiber_bytecode_count]
	      [set this last_fiber_bytecode_count_time     fiber_bytecode_count_time]
	      
	      [set [get this label] text [format nil  '\t' [get this resource_name]
						 '\n' '\t\t' 'active\t\t' [get resource active]
						 '\n' '\t\t' 'done\t\t'   [get resource done]
						 '\n' '\t\t' 'speed\t\t'  [/ [get this bytecodes_per_second] 1024.0] ' kBc/s'
						 '\n' '\t\t' 'paused\t\t' [get fiber paused]
						 '\n' '\t\t' 'complete\t' [get fiber is_complete]
						 '\n' '\t\t' '\t\t\t\t\t\t\t\t\t\t'
						 ]]
	      [dotimes [i [get this story_count]]
		[have [get [get this story_array] elt i] redraw]]]]]]]]]



'mindmon_agency'

[deframe mindmon_agency [frame] [mindmon
				 layer_name
				 agency_name
				 
				 label
				 scrolled_window
				 resource_vbox
				 resource_array
				 
				 bytecodes_per_second
				 ]
  [new [mindmon layer_name agency_name]
       [set this mindmon         mindmon]
       [set this layer_name      layer_name]
       [set this agency_name     agency_name]
       [set this label           [gtk-label-new [get agency_name as-string]]]
       [set this scrolled_window [gtk-scrolled_window-new]]
       [set this resource_vbox   [gtk-vbox-new [get this resource_count]]]
       [set this resource_array  [new array    [get this resource_count]]]
       [let [[resource_name_index 0]
	     [resource_name_iter  [get this resource_names]]]
	 [while resource_name_iter
	   [let [[resource_name [first resource_name_iter]]]
	     [set  [get this resource_array] elt resource_name_index [new mindmon_resource mindmon layer_name agency_name resource_name]]
	     [have [get this resource_vbox]  pack_start              [get [get [get this resource_array] elt resource_name_index] widget] nil t 0]]
	   [= resource_name_index [+    resource_name_index 1]]
	   [= resource_name_iter  [next resource_name_iter]]]]
       [have [get this scrolled_window] add_with_viewport [get this resource_vbox]]
       this]]

[deftypefunk mindmon_agency get widget []
  [get this scrolled_window]]

[deftypefunk mindmon_agency execute redraw []
  [let [[agency_bytecodes_per_second 0]]
    [dotimes [i [get this resource_count]]
      [have [get [get this resource_array] elt i] redraw]
      [= agency_bytecodes_per_second [+ agency_bytecodes_per_second [get [get [get this resource_array] elt i] bytecodes_per_second]]]]
    [set this bytecodes_per_second agency_bytecodes_per_second]]
  [set [get this label] text [format nil  [get this agency_name] ' agency'
				     '\n' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]

[deftypefunk mindmon_agency get resource_count []
  [get [get [get this mindmon] mind] layer_agency_resource_count [get this layer_name] [get this agency_name]]]

[deftypefunk mindmon_agency get resource_names []
  [get [get [get this mindmon] mind] layer_agency_resource_names [get this layer_name] [get this agency_name]]]


'mindmon_layer'

[deframe mindmon_layer [frame] [mindmon
				layer_name
				
				label
				agency_notebook
				agency_array
				
				bytecodes_per_second]
  [new [mindmon layer_name]
       [set this mindmon      mindmon]
       [set this layer_name   layer_name]
       
       [set this label           [gtk-label-new [get layer_name as-string]]]
       [set this agency_notebook [gtk-notebook-new]]
       [set this agency_array    [new array [get this agency_count]]]
       
       [let [[agency_names [get [get mindmon mind] layer_agency_names layer_name]]]
	 [let [[agency_name_index 0]
	       [agency_name_iter  agency_names]]
	   [while agency_name_iter
	     [let [[agency_name [first agency_name_iter]]]
	       [let [[mindmon_agency [new mindmon_agency mindmon layer_name agency_name]]]
		 [set  [get this agency_array] elt agency_name_index mindmon_agency]
		 [have [get this agency_notebook] append_page [get mindmon_agency widget] [get mindmon_agency label]]]]
	     [= agency_name_index [+    agency_name_index 1]]
	     [= agency_name_iter  [next agency_name_iter]]]]]
       
       this]]

[deftypefunk mindmon_layer get layer []
  [get [get [get this mindmon] mind] layer [get this layer_name]]]

[deftypefunk mindmon_layer get agency_count []
  [simple_length [get [get this layer] agencies]]]

[deftypefunk mindmon_layer get widget []
  [get this agency_notebook]]

[deftypefunk mindmon_layer get index []
  [get [get [get [get this mindmon] mind] layer [get this layer_name]] index]]

[deftypefunk mindmon_layer execute redraw []
  [let [[layer_bytecodes_per_second 0]]
    [dotimes [i [get this agency_count]]
      [let [[mindmon_agency [get [get this agency_array] elt i]]]
	[have mindmon_agency redraw]
	[let [[bytecodes_per_second [get mindmon_agency bytecodes_per_second]]]
	  [= layer_bytecodes_per_second [+ layer_bytecodes_per_second bytecodes_per_second]]]]]
    [set this bytecodes_per_second layer_bytecodes_per_second]]
  [set [get this label] text [format nil  [get this layer_name] ' layer'
				     '\n' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]

'mindmon_mind'

[deframe mindmon_mind [frame] [mind
			       vbox
			       label
			       layer_notebook
			       layer_array
			       
			       bytecodes_per_second]
  [new [mind]
       [set this mind mind]
       
       [set this vbox            [gtk-vbox-new 2]]
       [set this label           [gtk-left_label-new '']]
       [set this layer_notebook  [gtk-notebook-new]]
       
       [have [get this vbox] pack_start [get this label]          nil nil 0]
       [have [get this vbox] pack_start [get this layer_notebook] t t 0]
       
       [set this layer_array [new array [get this layer_count]]]
       
       [let [[layer_name_index 0]
	     [layer_name_iter  [get mind layer_names]]]
	 [while layer_name_iter
	   [let [[layer_name [first layer_name_iter]]]
	     [let [[mindmon_layer [new mindmon_layer this layer_name]]]
	       [let [[layer [get [get this mind] layer layer_name]]]
		 [let [[layer_index [get layer index]]]
		   [set  [get this layer_array] elt layer_index mindmon_layer]]]]]
	   [= layer_name_index [+ layer_name_index 1]]
	   [= layer_name_iter  [next layer_name_iter]]]]
       
       [dotimes [i [get mind layer_count]]
	 [let [[mindmon_layer [get [get this layer_array] elt i]]]
	   [have [get this layer_notebook] append_page [get mindmon_layer widget] [get mindmon_layer label]]]]
       
       this]]

[deftypefunk mindmon_mind get widget []
  [get this vbox]]

[deftypefunk mindmon_mind get layer_count []
  [simple_length [get [get this mind] layers]]]

[deftypefunk mindmon_mind execute redraw []
  [let [[mind_bytecodes_per_second 0]]
    [dotimes [i [get this layer_count]]
      [let [[mindmon_layer [get [get this layer_array] elt i]]]
	[have mindmon_layer redraw]
	[= mind_bytecodes_per_second [+ mind_bytecodes_per_second [get mindmon_layer bytecodes_per_second]]]]]
    [set this bytecodes_per_second mind_bytecodes_per_second]]
  [set [get this label] text [format nil  'mind'
				     '\n' [/ [get this bytecodes_per_second] 1024.0] ' kBc/s']]]


'mindmon'

[deframe mindmon [frame] [initialized
			  fiber
			  
			  mindmon_mind
			  ]
  [new [mind mind_expression]
       [if [not [is-type `mind mind]]
	   [error bug_type `mindmon_mind_is_not_mind
		  was_type [type mind]]]
       [= initialized nil]
       [= fiber [fiber [funk []
			     [cause-define cause-name `mindmon]
			     [cause-define cause-args [frame mind_expression mind_expression]]
			     [cause-enable_reactive_critics [this-cause]]
			     
			     [while [not initialized]
			       [yield]]
			     
			     [let [[win [gtk-window-new]]]
			       
			       [= mindmon_mind [new mindmon_mind mind]]
			       
			       [have win add          [get [get this mindmon_mind] widget]]
			       [set  win default_size 640 800]
			       [set  win title        [format nil 'mindmon ' mind_expression]]
			       
			       [let [[mindmon-redraw-quit_now nil]]
				 
				 [have win connect_hide_on_delete]
				 [have win show_all]
				 
				 [while [not mindmon-redraw-quit_now]
				   [have this redraw]
				   [if [not [get win visible]]
				       [= mindmon-redraw-quit_now t]]
				   [yield]]
				 
				 [have win destroy]
				 nil]]]
		       nil]]
       [= initialized t]
       this]]

[deftypefunk mindmon execute redraw []
  [have [get this mindmon_mind] redraw]]


[defmetro mindmon [:rest args]
  [let [[minds                        nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'mindmon: compiling mind command line argument, ' arg '.\n']
					       [= minds [cons arg minds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length minds] 1]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied ' [simple_length minds] ': ' minds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length minds] 0]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon -h <mind>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running mind.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[mind [first minds]]]
	`[prog [new mindmon ,mind [quote ,mind]]
	       nil]]]]]


