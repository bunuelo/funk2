'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe          mindmon_layer [frame] [mindmon text_view]]
[deftypeconstruct mindmon_layer [mindmon]
  [set this mindmon   mindmon]
  [set this text_view [gtk-text_view-new]]
  this]

[deftypefunk mindmon_layer get widget []
  [get this text_view]]

[deftypefunk mindmon_layer execute redraw []
  [set [get [get this text_view] buffer] text [format nil 'Mind Layer.']]
  ]

[deframe          mindmon [frame] [initialized mind fiber vbox text_view layer_vbox layer_array]]
[deftypeconstruct mindmon [mind]
  [if [not [is-type `mind mind]]
      [error bug_type `mindmon_mind_is_not_mind
	     was_type [type mind]]]
  [set this initialized nil]
  [set this mind        mind]
  [set this fiber       [fiber [funk []
				     [cause-define cause-name `mindmon]
				     [cause-enable_reactive_critics [this-cause]]
				     
				     [while [not [get this initialized]]
				       [yield]]
				     
				     [let [[win [gtk-window-new]]]
				       
				       [set this vbox       [gtk-vbox-new 2]]
				       [set this text_view  [gtk-text_view-new]]
				       [set this layer_vbox [gtk-vbox-new [get this layer_count]]]
				       
				       [have [get this vbox] pack_start text_view nil nil 0]
				       [have [get this vbox] pack_start layer_vbox t t 0]
				       
				       [have win add          [get this vbox]]
				       [set  win default_size 640 800]
				       [set  win title        'mindmon']
				       
				       [set this layer_array [new array [get this layer_count]]]
				       
				       [dotimes [i [get this layer_count]]
					 [let [[mindmon_layer [new mindmon_layer this]]]
					   [set [get this layer_array] elt i mindmon_layer]
					   [have [get this vbox] pack_start [get mindmon_layer widget] t t 0]]]
				       
				       [let [[mindmon-redraw-quit_now nil]
					     [mindmon-redraw-is_done  nil]]
					 
					 [have win signal_connect 'destroy'
					       [funk []
						     [= mindmon-redraw-quit_now t]
						     [while [not mindmon-redraw-is_done]
						       [millisleep 100]]]
					       nil]
					 
					 [have win show_all]
					 
					 [while [not mindmon-redraw-quit_now]
					   [have this redraw]
					   [yield]]
					 [= mindmon-redraw-is_done t]
					 nil]]]
			       nil]]
  [set this vbox        nil]
  [set this layer_array nil]
  [set this initialized t]
  this]


[deftypefunk mindmon get layer_count []
  [simple_length [get [get this mind] layers]]]


[deftypefunk mindmon execute redraw []
  [set [get [get this text_view] buffer] text [format nil 'Mind.']]
  [dotimes [i [get this layer_count]]
    [have [get [get this layer_array] elt i] redraw]]]


[defmetro mindmon [:rest args]
  [let [[minds                        nil]
	[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [format stdout 'mindmon: compiling mind command line argument, ' arg '.\n']
					       [= minds [cons arg minds]]]]]]
	    [= iter [next iter]]]]]
    [if [not print_usage_message_and_exit]
	[cond [[> [simple_length minds] 1]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied ' [simple_length minds] ': ' minds '.\n']
		     [= print_usage_message_and_exit t]]]
	      [[== [simple_length minds] 0]
	       [prog [format stdout 'mindmon fatal: mindmon can only monitor exactly one mind at a time, user supplied none.\n']
		     [= print_usage_message_and_exit t]]]]]
    [if print_usage_message_and_exit
	[format stdout 'MINDMON(1)'
		'\n'   'NAME'
		'\n'   '       mindmon - display mind resources'
		'\n'   ''
		'\n'   'SYNOPSIS'
		'\n'   '       mindmon -h <mind>'
		'\n'   ''
		'\n'   'DESCRIPTION'
		'\n'   '       The mindmon program provides a dynamic real-time view of a running mind.  It can '
		'\n'   '       display system summary information as well as a list of resources currently being managed '
		'\n'   '       by the mind.'
		'\n'   ''
		'\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[mind [first minds]]]
	`[prog [new mindmon ,mind]
	       nil]]]]]


