'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe mindmon_define_object_dialog [frame] [[object        nil]
					       [object_type   nil]
					       [window        [gtk-window-new]]
					       [vbox          [gtk-vbox-new 2]]
					       [label         nil]
					       [entry         [gtk-entry-new]]
					       [hbox          [gtk-hbox-new 2]]
					       [cancel_button [gtk-button-new_with_label 'Cancel']]
					       [okay_button   [gtk-button-new_with_label 'Okay']]
					       [done          nil]]
  [new [define_object define_object_type]
       [= object      define_object]
       [= object_type define_object_type]
       [= label       [gtk-label-new [format nil 'You have chosen to define this ' object_type '.\nPlease enter a global name for this ' object_type '.']]]
       [set  window title 'MindMon - define ' object_type ' dialog']
       [have window connect_hide_on_delete]
       [have window add vbox]
       [have vbox pack_start label nil nil 0]
       [have vbox pack_start entry nil nil 0]
       [have vbox pack_start hbox  nil nil 0]
       [have hbox pack_start cancel_button nil nil 0]
       [have hbox pack_start okay_button   nil nil 0]
       [have cancel_button signal_connect 'clicked'
	     [funk []
		   [= done t]]
	     nil]
       [have okay_button signal_connect 'clicked'
	     [funk []
		   [have this define_and_close]]
	     nil]
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     [if [eq keyval GDK_Return]
			 [have this define_and_close]]]]
	     nil]
       
       [have window show_all]
       [fiber [funk []
		    [while [and [get window visible] [not done]]
		      [sleep 1]]
		    [have window destroy]]
	      nil]
       ]]

[deftypefunk mindmon_define_object_dialog execute define_and_close []
  [let [[object_name [get [get entry text] as-symbol]]]
    [terminal_format standard-terminal '\nDefining ' object_type ' as ' object_name '.\n']
    [eval `[globalize ,object_name ,object]]]
  [= done t]]



[deframe mindmon_agent_widget_resource_menu [frame] [mindmon_agent_widget_agency_menu
					      resource
					      
					      resource_menu_item
					      resource_menu
					      
					      debugging_mode_check_menu_item
					      print_to_terminal_menu_item
					      define_globally_menu_item
					      ]
  [new [initial-mindmon_agent_widget_agency_menu initial-resource]
       [= mindmon_agent_widget_agency_menu initial-mindmon_agent_widget_agency_menu]
       [= resource                  initial-resource]
       
       [= resource_menu_item [gtk-menu_item-new [format nil [get resource name] ' Resource']]]
       [= resource_menu      [gtk-menu-new]]
       [set resource_menu_item submenu resource_menu]
       
       [= debugging_mode_check_menu_item [gtk-check_menu_item-new 'Debugging Mode']]
       [have resource_menu append debugging_mode_check_menu_item]
       
       [have debugging_mode_check_menu_item signal_connect 'toggled'
	     [funk []
		   [set this debug_all [get debugging_mode_check_menu_item active]]]
	     nil]
       
       [= print_to_terminal_menu_item [gtk-menu_item-new 'Print to Terminal']]
       [have print_to_terminal_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\n' resource]]
	     nil]
       [have resource_menu append print_to_terminal_menu_item]
       
       [= define_globally_menu_item [gtk-menu_item-new 'Define Globally']]
       [have define_globally_menu_item signal_connect 'activate'
	     [funk []
		   [get mindmon_define_object_dialog resource `resource]]
	     nil]
       [have resource_menu append define_globally_menu_item]
       
       ]]

[deftypefunk mindmon_agent_widget_resource_menu get widget []
  resource_menu_item]

[deftypefunk mindmon_agent_widget_resource_menu set debug_all [debug]
  [terminal_format standard-terminal '\n' [if debug 'Enabling' 'Disabling'] ' debugging mode for ' [get [get resource mind] name] '\'s ' [get resource name] ' resource.']
  [set debugging_mode_check_menu_item active debug]
  [set resource debug debug]]


[deframe mindmon_agent_widget_agency_menu [frame] [mindmon_agent_widget_layer_menu
					    agency
					    
					    agency_menu_item
					    agency_menu
					    
					    enable_debugging_all_menu_item
					    disable_debugging_all_menu_item
					    
					    mindmon_resource_menus
					    ]
  [new [initial-mindmon_agent_widget_layer_menu initial-agency]
       [= mindmon_agent_widget_layer_menu initial-mindmon_agent_widget_layer_menu]
       [= agency                   initial-agency]
       
       [= agency_menu_item [gtk-menu_item-new [format nil [get agency name] ' Agency']]]
       [= agency_menu      [gtk-menu-new]]
       [set agency_menu_item submenu agency_menu]
       
       [= enable_debugging_all_menu_item [gtk-menu_item-new 'Enable Debugging All']]
       [have agency_menu append enable_debugging_all_menu_item]
       [have enable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all t]]
	     nil]
       
       [= disable_debugging_all_menu_item [gtk-menu_item-new 'Disable Debugging All']]
       [have agency_menu append disable_debugging_all_menu_item]
       [have disable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all nil]]
	     nil]
       
       [mapc [funk [resource]
		   [let [[mindmon_resource_menu [new mindmon_agent_widget_resource_menu this resource]]]
		     [= mindmon_resource_menus [cons mindmon_resource_menu mindmon_resource_menus]]
		     [have agency_menu append mindmon_resource_menu]]]
	     [get agency resources]]
       
       ]]

[deftypefunk mindmon_agent_widget_agency_menu get widget []
  agency_menu_item]

[deftypefunk mindmon_agent_widget_agency_menu set debug_all [debug]
  [mapc [funk [mindmon_resource_menu]
	      [set mindmon_resource_menu debug_all debug]]
	mindmon_resource_menus]]



[deframe mindmon_agent_widget_layer_menu [frame] [mindmon_agent_widget_mind_menu
					   layer
					   
					   layer_menu_item
					   layer_menu
					   
					   enable_debugging_all_menu_item
					   disable_debugging_all_menu_item
					   
					   mindmon_agency_menus
					   ]
  [new [initial-mindmon_agent_widget_mind_menu initial-layer]
       [= mindmon_agent_widget_mind_menu initial-mindmon_agent_widget_mind_menu]
       [= layer                   initial-layer]
       
       [= layer_menu_item [gtk-menu_item-new [format nil [get layer name] ' Layer']]]
       [= layer_menu      [gtk-menu-new]]
       [set layer_menu_item submenu layer_menu]
       
       [= enable_debugging_all_menu_item [gtk-menu_item-new 'Enable Debugging All']]
       [have layer_menu append enable_debugging_all_menu_item]
       [have enable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all t]]
	     nil]
       
       [= disable_debugging_all_menu_item [gtk-menu_item-new 'Disable Debugging All']]
       [have layer_menu append disable_debugging_all_menu_item]
       [have disable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all nil]]
	     nil]
       
       [mapc [funk [agency]
		   [let [[mindmon_agency_menu [new mindmon_agent_widget_agency_menu this agency]]]
		     [= mindmon_agency_menus [cons mindmon_agency_menu mindmon_agency_menus]]
		     [have layer_menu append mindmon_agency_menu]]]
	     [get layer agencies]]
       ]]

[deftypefunk mindmon_agent_widget_layer_menu get widget []
  layer_menu_item]

[deftypefunk mindmon_agent_widget_layer_menu set debug_all [debug]
  [mapc [funk [mindmon_agency_menu]
	      [set mindmon_agency_menu debug_all debug]]
	mindmon_agency_menus]]


[deframe mindmon_agent_widget_mind_menu [frame] [mindmon_agent_widget
					  
					  mind_menu_item
					  mind_menu
					  
					  enable_debugging_all_menu_item
					  disable_debugging_all_menu_item
					  
					  mindmon_layer_menus
					  ]
  [new [initial-mindmon_agent_widget]
       [= mindmon_agent_widget initial-mindmon_agent_widget]
       
       [= mind_menu_item [gtk-menu_item-new 'Mind']]
       [= mind_menu      [gtk-menu-new]]
       [set mind_menu_item submenu mind_menu]
       
       [= enable_debugging_all_menu_item [gtk-menu_item-new 'Enable Debugging All']]
       [have mind_menu append enable_debugging_all_menu_item]
       [have enable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all t]]
	     nil]
       
       [= disable_debugging_all_menu_item [gtk-menu_item-new 'Disable Debugging All']]
       [have mind_menu append disable_debugging_all_menu_item]
       [have disable_debugging_all_menu_item signal_connect 'activate'
	     [funk []
		   [set this debug_all nil]]
	     nil]
       
       'We finish creating mind menu in parallel for quicker initial load appearance.'
       [fiber [funk []
		    [mapc [funk [layer]
				[let [[mindmon_layer_menu [new mindmon_agent_widget_layer_menu this layer]]]
				  [= mindmon_layer_menus [cons mindmon_layer_menu mindmon_layer_menus]]
				  [have [get mindmon_layer_menu widget] show_all]
				  [have mind_menu append mindmon_layer_menu]]]
			  [have [get [get [get mindmon_agent_widget mindmon_agent] mind] layers] sort [funk [x y] [< [get x index] [get y index]]]]]
		    [have mind_menu_item show_all]
		    ]
	      nil]
       
       nil]]

[deftypefunk mindmon_agent_widget_mind_menu get widget []
  mind_menu_item]
				
[deftypefunk mindmon_agent_widget_mind_menu set debug_all [debug]
  [mapc [funk [mindmon_layer_menu]
	      [set mindmon_layer_menu debug_all debug]]
	mindmon_layer_menus]]



[deframe mindmon_save_agent_dialog [frame] [mindmon_agent_widget
					    mindmon
					    save_dialog]
  [new [initial-mindmon_agent_widget]
       [= mindmon_agent_widget initial-mindmon_agent_widget]
       [= mindmon       [get [get mindmon_agent_widget mindmon_project] mindmon]]
       
       [= save_dialog [gtk-file_chooser_dialog-new_for_file_save [get mindmon window]]]
       
       [have save_dialog add_file_filter_pattern 'MindMon Agent Files (*.isis-agent)' '*.isis-agent']
       [have save_dialog add_file_filter_pattern 'All Files (*.*)'                    '*.*']
       [set  save_dialog current_name 'Untitled Agent.isis-agent']
       [set  save_dialog current_folder [get [get mindmon preferences] agent_directory]]
       [have save_dialog response_event-signal_connect
	     [funk [event_frame]
		   [let [[response_id [have event_frame lookup `response_id]]]
		     [if [eq response_id GTK_RESPONSE_ACCEPT]
			 [let [[filename [get save_dialog filename]]]
			   [have save_dialog destroy]
			   [have mindmon_agent_widget save filename]]
		       [have save_dialog destroy]]]]
	     nil]
       [have save_dialog show_all]]]


[deframe mindmon_agent_widget [frame] [mindmon_agent
				       
				       mindmon_project
				       
				       frame
				       vbox
				       
				       menu_bar
				       file_menu_item
				       file_menu
				       file_save_agent_menu_item
				       tools_menu
				       tools_menu_item
				       view_menu
				       view_menu_item
				       view_sense_menu_item
				       view_perception_menu_item
				       view_visual_objects_menu_item
				       view_proprioceptual_frame_menu_item
				       view_visualization_menu_item
				       mindmon_agent_widget_mind_menu
				       
				       entry
				       
				       [mindmon_knowledge_mutex     [new mutex]]
				       [mindmon_knowledge_ptypehash [new ptypehash]]
				       
				       ]
  [new [initial_mindmon_project initial_mindmon_agent]
       [= mindmon_project initial_mindmon_project]
       [= mindmon_agent   initial_mindmon_agent]
       
       [= frame [gtk-frame-new [format nil 'mindmon_agent - ' [get mindmon_agent name]]]]
       [= vbox  [gtk-vbox-new 0]]
       
       [= menu_bar        [gtk-menu_bar-new]]
       [have vbox pack_start menu_bar nil nil 0]
       
       [= file_menu_item            [gtk-menu_item-new 'File']]
       [= file_menu                 [gtk-menu-new]]
       [= file_save_agent_menu_item [gtk-menu_item-new 'Save Agent...']]
       [have file_menu append file_save_agent_menu_item]
       [set file_menu_item submenu file_menu]
       [have menu_bar append file_menu_item]
       
       [have file_save_agent_menu_item signal_connect 'activate'
	     [funk []
		   [new mindmon_save_agent_dialog this]]
	     nil]
       
       [= tools_menu      [gtk-menu-new]]
       [= tools_menu_item [gtk-menu_item-new 'Tools']]
       [set tools_menu_item submenu tools_menu]
       [have menu_bar append tools_menu_item]
       
       [mapc [funk [tool_name]
		   [let [[mindmon_agent_tool [object_type-new tool_name mindmon_agent]]]
		     [let [[mindmon_agent_tool_widget [new mindmon_agent_tool_widget mindmon_agent_tool]]]
		       [have tools_menu append mindmon_agent_tool_widget]]]]
	     [get mindmon_agent tool_names]]
       
       `[
	 [= tools_builtin_reactive_physical_activator_menu_item [gtk-menu_item-new 'Built-in Reactive Physical Activator']]
	 [have tools_builtin_reactive_physical_activator_menu_item signal_connect 'activate'
	       [funk []
		     [terminal_format standard-terminal '\nLaunching built-in reactive physical activator for agent ' [get this name] '.']
		     [new mindmon_agent_builtin_reactive_physical_resource_activator this]]
	       nil]
	 [have tools_menu append tools_builtin_reactive_physical_activator_menu_item]
	 
	 [= tools_learned_reactive_physical_activator_menu_item [gtk-menu_item-new 'Learned Reactive Physical Activator']]
	 [have tools_learned_reactive_physical_activator_menu_item signal_connect 'activate'
	       [funk []
		     [terminal_format standard-terminal '\nLaunching learned reactive physical activator for agent ' [get this name] '.']
		     [new mindmon_agent_learned_reactive_physical_resource_activator this]]
	       nil]
	 [have tools_menu append tools_learned_reactive_physical_activator_menu_item]
	 
	 [= tools_deliberative_goal_activator_menu_item [gtk-menu_item-new 'Deliberative Goal Activator']]
	 [have tools_deliberative_goal_activator_menu_item signal_connect 'activate'
	       [funk []
		     [terminal_format standard-terminal '\nLaunching deliberative goal activator for agent ' [get this name] '.']
		     [new mindmon_agent_deliberative_goal_resource_activator this]]
	       nil]
	 [have tools_menu append tools_deliberative_goal_activator_menu_item]
	 ]
       
       [= view_menu      [gtk-menu-new]]
       [= view_menu_item [gtk-menu_item-new 'View']]
       [set view_menu_item submenu view_menu]
       [have menu_bar append view_menu_item]
       
       [= view_sense_menu_item [gtk-menu_item-new 'Sense']]
       [have view_sense_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal
				    '\n' [get this name] '\'s sensory information:'
				    '\n  ' [have mindmon_agent sense_world]]]
	     nil]
       [have view_menu append view_sense_menu_item]
       
       [= view_perception_menu_item [gtk-menu_item-new 'Perception']]
       [have view_perception_menu_item signal_connect 'activate'
	     [funk []
		   [let [[perception [get [get mindmon_agent mind] perception]]]
		     [if [null perception]
			 [terminal_format standard-terminal '\n' [get this name] ' has no perception']
		       [terminal_format standard-terminal
					'\n' [get this name] '\'s perception:'
					'\n  ' [get [get mindmon_agent mind] perception]]]]]
	     nil]
       [have view_menu append view_perception_menu_item]
       
       [= view_visual_objects_menu_item [gtk-menu_item-new 'Visual Objects']]
       [have view_visual_objects_menu_item signal_connect 'activate'
	     [funk []
		   [let [[perception [get [get mindmon_agent mind] perception]]]
		     [if [null perception]
			 [terminal_format standard-terminal '\n' [get this name] ' has no perception']
		       [terminal_format standard-terminal
					'\n' [get this name] '\'s visual objects:'
					'\n  ' [have perception lookup `visual_objects]]]]]
	     nil]
       [have view_menu append view_visual_objects_menu_item]
       
       [= view_proprioceptual_frame_menu_item [gtk-menu_item-new 'Proprioceptual Frame']]
       [have view_proprioceptual_frame_menu_item signal_connect 'activate'
	     [funk []
		   [let [[perception [get [get mindmon_agent mind] perception]]]
		     [if [null perception]
			 [terminal_format standard-terminal '\n' [get this name] ' has no perception']
		       [terminal_format standard-terminal
					'\n' [get this name] '\'s proprioceptual frame:'
					'\n  ' [have [get [get mindmon_agent mind] perception] lookup `proprioceptual_frame]]]]]
	     nil]
       [have view_menu append view_proprioceptual_frame_menu_item]
       
       [= view_visualization_menu_item [gtk-menu_item-new 'Visualization']]
       [have view_visualization_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\nStarting Python visualization.']
		   [shelter [new mindmon_agent_visualization this]]]
	     nil]
       [have view_menu append view_visualization_menu_item]
       
       [= mindmon_agent_widget_mind_menu [new mindmon_agent_widget_mind_menu this]]
       [have menu_bar append mindmon_agent_widget_mind_menu]
       
       
       [= entry [gtk-entry-new]]
       
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     `[terminal_format standard-terminal '\nkey event: ' key_event]
		     [if [eq keyval GDK_Return]
			 [let [[text [get entry text]]]
			   [set entry text '']
			   [let [[strings [have text split ' ']]]
			     [let [[reverse_symbols nil]]
			       [mapc [funk [string]
					   [if [not [equals string '']]
					       [= reverse_symbols [cons [get string as-symbol] reverse_symbols]]]]
				     strings]
			       [let [[symbols [reverse reverse_symbols]]]
				 [terminal_format standard-terminal '\nSending symbols, ' symbols ', through ' [get mindmon_agent name] '\'s neural plug.']
				 [let [[activate_resource [get [get mindmon_agent mind] resource `builtin_reactive `neural_plug `activate_resource]]]
				   [have activate_resource command `learned_reactive `language `speak_language [append `[I hear] symbols `[from nil]]]
				   [have activate_resource command `learned_reactive `language `hear_language_from_agent nil symbols]
				   ]]]]]]]]
	     nil]
       
       [have vbox pack_start entry nil nil 0]
       
       [have frame add vbox]
       
       [mapc [funk [knowledge_base_name]
		   [have this add_mindmon_knowledge knowledge_base_name]]
	     [get mindmon_agent knowledge_base_names]]
       
       [mapc [funk [semantic_knowledge_base]
		   [let [[name [get semantic_knowledge_base name]]]
		     [if [not [get mindmon_knowledge_ptypehash contains name]]
			 [have this add_mindmon_knowledge name]]]]
	     [get [get mindmon_agent mind] semantic_knowledge_bases]]
       
       [have [get mindmon_agent mind] add_semantic_knowledge_base_add_event_callback_funk [funk [semantic_knowledge_base]
												[let [[name [get semantic_knowledge_base name]]]
												  [have this add_mindmon_knowledge name]]]]
       
       [have [get this widget] show_all]
       [have this update]
       
       nil]]

[deftypefunk mindmon_agent_widget execute add_mindmon_knowledge [mindmon_knowledge_name]
  [have mindmon_knowledge_mutex lock]
  [let [[mindmon_knowledge [new mindmon_knowledge this mindmon_knowledge_name]]]
    [have mindmon_knowledge_ptypehash add mindmon_knowledge_name mindmon_knowledge]
    [have vbox pack_start mindmon_knowledge nil nil 0]]
  [have mindmon_knowledge_mutex unlock]]

[defunk mindmon_agent_widget-new_from_name [mindmon_project name]
  [let [[mindmon_agent [have [get mindmon_project mindmon_world] create_agent name]]]
    [let [[this [new mindmon_agent_widget mindmon_project mindmon_agent]]]
      [set mindmon_agent mindmon_agent_widget this]
      [have [get mindmon_agent mind] activate_vital_resources]
      this]]]

[deftypefunk mindmon_agent_widget get name []
  [get mindmon_agent name]]

[deftypefunk mindmon_agent_widget get widget []
  frame]

[deftypefunk mindmon_agent_widget get window []
  [get mindmon_project window]]

[deftypefunk mindmon_agent_widget execute update_entry []
  [let [[look_for_resource [get [get mindmon_agent mind] resource `learned_reactive `physical `look_for]]]
    [set entry text [terminal_format standard-terminal 'look_for-current_object: \t' [have look_for_resource lookup `my_current_object]]]
    ]]

[deftypefunk mindmon_agent_widget execute update []
  [mapc [funk [mindmon_knowledge]
	      [if mindmon_knowledge [have mindmon_knowledge update]]]
	[get mindmon_knowledge_ptypehash values]]
  nil]

[deftypefunk mindmon_agent_widget get retina_image_sequence []
  [get mindmon_agent retina_image_sequence]]

[deftypefunk mindmon_agent_widget execute save [filename]
  [let [[chunk [shelter [get mindmon_agent as-chunk]]]]
    [if [is-type `bug chunk]
	[terminal_format standard-terminal '\nMindMon Agent: Saving broken in ' [type mindmon_agent] ' mindmon_agent.']
      [prog [terminal_format standard-terminal '\nMindMon Agent: Saving ' filename '.']
	    [have [get chunk deflated] save filename]
	    [terminal_format standard-terminal '\nMindMon Agent: Save agent complete.']]]]]

[defunk mindmon_agent_widget-new_from_file [mindmon_project filename]
  [terminal_format standard-terminal '\nMindMon Agent: Loading ' filename '.']
  [error bug_name `not_yet_implemented]
  `[let [[isis_agent_body [isis_agent_body-new_from_chunk [get mindmon_project isis_world] [get [chunk-load filename] inflated]]]]
     [let [[this [new mindmon_agent_widget mindmon_project isis_agent_body]]]
       [terminal_format standard-terminal '\nMindMon Agent: Load agent complete.']
       this]]]
