'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'mindmon_file'

[deframe mindmon_file [frame] [name
			       object]
  [new [initial-name initial-object]
       [= name   initial-name]
       [= object initial-object]]]


'mindmon_directory_contents'

[deframe mindmon_directory_contents [frame] [[frame [new frame]]]]

[deftypefunk mindmon_directory_contents execute add_file [mindmon_file]
  [have frame add [get mindmon_file name] mindmon_file]]

[deftypefunk mindmon_directory_contents get files []
  [get frame values]]

'mindmon_directory'

[deframe mindmon_directory [mindmon_file] []
  [new [initial-name]
       [construct mindmon_file initial-name [new mindmon_directory_contents]]]]

[deftypefunk mindmon_directory execute add_file [mindmon_file]
  [have object add_file mindmon_file]]

[deftypefunk mindmon_directory get files []
  [get object files]]


'mindmon_root_directory'

[globalize mindmon_root_directory [new mindmon_directory nil]]


'mindmon_file_chooser'

[deframe mindmon_file_chooser [frame] [mindmon
				       directory
				       selection_callback
				       mode
				       
				       window
				       vbox
				       
				       top_label
				       table
				       
				       selection]
  [new [initial-mindmon
	initial-directory
	initial-selection_callback
	initial-mode]
       [let [[result [shelter [terminal_format standard-terminal '\nmindmon_file_chooser: creating.']
			      [= mindmon            initial-mindmon]
			      [= directory          [if initial-directory
							initial-directory
						      mindmon_root_directory]]
			      [= selection_callback initial-selection_callback]
			      [= mode               initial-mode]
			      
			      [= window [gtk-window-new]]
			      [set window transient_for [get mindmon window]]
			      [set window destroy_with_parent t]
			      [have window connect_hide_on_delete]
			      [cond [[eq mode `save] [set window title 'MindMon - Save File Chooser']]
				    [[eq mode `open] [set window title 'MindMon - Open File Chooser']]
				    [t               [error bug_name  `mindmon_file_chooser-invalid_mode
							    mindmon   mindmon
							    directory directory
							    mode      mode]]]
			      [= vbox [gtk-vbox-new 0]]
			      
			      [let* [[files        [get directory files]]
				     [files-length [length files]]]
				
				[= top_label [gtk-label-new [format nil files-length ' ' [if [== files-length 1] 'file' 'files'] ' in this directory.']]]
				[have vbox pack_start top_label nil nil 0]
				
				[= table [gtk-table-new [+ files-length 1] 3 nil]]
				
				[dotimes [index files-length]
				  [let [[row index]]
				    [let* [[file        [get files elt index]]
					   [file_button [gtk-button-new_with_label [format nil [get file name]]]]]
				      [let [[column 0]] [have table attach [gtk-label-new [format nil [type file] ': ']] column [+ column 1] row [+ row 1] 0 0]]
				      [let [[column 1]] [have table attach file_button                                   column [+ column 2] row [+ row 1] 0 0]]
				      [have file_button signal_connect 'clicked'
					    [funk []
						  [= selection file]
						  [have window destroy]
						  [funkall selection_callback selection]]
					    nil]]]]
				
				[let [[row files-length]
				      [new_project_button [gtk-button-new_with_label 'New Project']]
				      [new_project_entry  [gtk-entry-new]]]
				  [let [[column 0]] [have table attach [gtk-label-new ''] column [+ column 1] row [+ row 1] 0 0]]
				  [let [[column 1]] [have table attach new_project_button column [+ column 1] row [+ row 1] 0 0]]
				  [let [[column 2]] [have table attach new_project_entry  column [+ column 1] row [+ row 1] 0 0]]
				  [labels [[select_new_project []
							       [let* [[new_file_name [get [get new_project_entry text] as-symbol]]
								      [new_file      [new mindmon_file new_file_name nil]]]
								 [have directory add_file new_file]
								 [= selection new_file]]
							       [have window destroy]
							       [funkall selection_callback selection]]]
					  [have new_project_button signal_connect 'clicked'
						[funk []
						      [select_new_project]]
						nil]
					  [have new_project_entry key_press_event-signal_connect
						[funk [key_event]
						      [let [[keyval [have key_event lookup `keyval]]]
							[if [eq keyval GDK_Return]
							    [select_new_project]]]]
						nil]]]
				
				[have vbox pack_start table nil nil 0]]
			      
			      [have window add vbox]
			      
			      [have window show_all]
			      [terminal_format standard-terminal '\nmindmon_file_chooser: created.']
			      ]]]
	 [if [is-type `bug result]
	     [let [[bug result]]
	       [terminal_format standard-terminal '\nmindmon_file_chooser encountered bug.']
	       [inspect bug]]]]]]


[deframe mindmon_save_file_chooser [mindmon_file_chooser] []
  [new [initial-mindmon
	initial-directory
	initial-selection_callback]
       [construct mindmon_file_chooser
		  initial-mindmon
		  initial-directory
		  initial-selection_callback
		  `save]]]

[deframe mindmon_open_file_chooser [mindmon_file_chooser] []
  [new [initial-mindmon
	initial-directory
	initial-selection_callback]
       [construct mindmon_file_chooser
		  initial-mindmon
		  initial-directory
		  initial-selection_callback
		  `open]]]

