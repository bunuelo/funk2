'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[globalize mindmon_world-current_active_frame [frame]]

[deframe mindmon_world [frame] [name
				[agent_frame                     [frame]]
				[step_mutex                      [new mutex]]
				[overview_image_sequence_enabled nil]
				[overview_image_sequence         [new image_sequence nil]]]
  [new [initial-name]
       [= name initial-name]
       
       [have mindmon_world-current_active_frame add name this]
       ]]

[deftypefunk mindmon_world execute update_overview_image_sequence []
  [let [[image [get this screenshot]]]
    [have overview_image_sequence add_image_to_end image]]]

[deftypefunk mindmon_world get agent_names []
  [get agent_frame keys]]

[deftypefunk mindmon_world get agents []
  [get agent_frame values]]

[deftypefunk mindmon_world get agent [agent_name]
  [have agent_frame lookup agent_name]]

[deftypefunk mindmon_world execute update_after_step_simulation []
  [if overview_image_sequence_enabled
      [have this update_overview_image_sequence]]
  [mapc [funk [agent_name]
	      [let [[mindmon_agent [get this agent agent_name]]]
		[have mindmon_agent update_after_step_simulation]]]
	[get this agent_names]]]

[deftypefunk mindmon_world execute step_simulation [seconds]
  [have step_mutex lock]
  [let [[maximum_tick_size 0.025]]
    [let [[tick [if [> seconds maximum_tick_size]
		    maximum_tick_size
		  seconds]]]
      [let [[subseconds 0.0]]
	[while [< subseconds seconds]
	  [have this raw_step_simulation tick]
	  [have this update_after_step_simulation]
	  [= subseconds [+ subseconds tick]]]]]]
  [have step_mutex unlock]]

[deftypefunk mindmon_world get simulator_is_stepping []
  [get step_mutex is_locked]]

[deftypefunk mindmon_world set all_cameras_enabled [enabled]
  [= overview_image_sequence_enabled enabled]
  [mapc [funk [agent_name]
	      [let [[mindmon_agent [get this agent agent_name]]]
		[set mindmon_agent all_cameras_enabled enabled]]]
	[get this agent_names]]]

[deftypefunk mindmon_world execute __add_agent [name agent]
  [if [get agent_frame contains name]
      [error bug_name   agent_already_part_of_this_mindmon_world
	     agent_name name
	     agent      agent]
    [have agent_frame add name agent]]]

[deftypefunk mindmon_world execute create_agent_type [agent_type agent_name]
  [if [not [get [get this compatible_agent_types] contains agent_type]]
      [error bug_name   `agent_type_is_not_in_compatible_agent_types
	     agent_type agent_type
	     agent_name agent_name]
    [let [[result [shelter [object_type-new agent_type this agent_name]]]]
      [if [is-type `bug result]
	  [error bug_name   `error_creating_agent_type
		 subbug     result
		 agent_type agent_type
		 agent_name agent_name]
	result]]]]

[deftypefunk mindmon_world execute create_agent [agent_name]
  [if [null [get this compatible_agent_types]]
      [error bug_name   `no_compatible_agent_types
	     agent_name agent_name]
    [let [[agent_type [car [get this compatible_agent_types]]]]
      [have this create_agent_type agent_type agent_name]]]]


'The following interface must be implemented by children of the mindmon_world object type.'

[deftypefunk mindmon_world get compatible_agent_types []
  [terminal_format standard-terminal '\nmindmon_world-get-compatible_agent_types not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world execute raw_step_simulation [step_size]
  [terminal_format standard-terminal '\nmindmon_world-execute-raw_step_simulation not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world execute destroy []
  [terminal_format standard-terminal '\nmindmon_world-execute-destroy not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world execute initialize_simulation []
  [terminal_format standard-terminal '\nmindmon_world-execute-initialize_simulation not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world get initialize_events []
  [terminal_format standard-terminal '\nmindmon_world-get-initialize_events not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world get screenshot []
  [terminal_format standard-terminal '\nmindmon_world-get-screenshot not implemented in ' [type this] ' interface.']
  nil]

[deftypefunk mindmon_world get all_objects_summary []
  [terminal_format standard-terminal '\nmindmon_world-get-all_objects_summary not implemented in ' [type this] ' interface.']
  nil]

