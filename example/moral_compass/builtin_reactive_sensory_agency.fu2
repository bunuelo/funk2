'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe continuous_sensing_resource [traced_resource] [visual_objects
							retina_image
							left_hand_object_name
							right_hand_object_name
							perception
							[perception_trigger [new fiber_trigger]]]
  [new []
       [construct traced_resource `continuous_sensing
		  [funk []
			[have this think_to_self 'Continuous sensing is starting.']
			[let* [[body              [get this body]]
			       [time_step_trigger [get body time_step_trigger]]]
			  [while t
			    [wait-for-trigger time_step_trigger]
			    [have this think_to_self 'starting perception.']
			    [= visual_objects         [have body sense_visual_objects]]
			    [= retina_image           [get  body retina_image]]
			    [= left_hand_object_name  [have body sense_left_hand_object_name]]
			    [= right_hand_object_name [have body sense_right_hand_object_name]]    
			    [= perception             [have body sense_perception]]
			    [have this think_to_self 'finished perception.']
			    [have perception_trigger trigger]
			    ]]]]
       [= vital t]
       nil]]



[deframe propogate_visual_objects_to_visual_knowledge_resource [traced_resource] []
  [new []
       [construct traced_resource `propogate_visual_objects_to_visual_knowledge
		  [funk []
			[have this update_visual_knowledge_from_visual_objects]]]
       [= vital t]
       nil]]

[deftypefunk propogate_visual_objects_to_visual_knowledge_resource execute create_knowledge []
  [new semantic_knowledge_base `visual_knowledge [get [get this mind] semantic_realm]]]

[deftypefunk propogate_visual_objects_to_visual_knowledge_resource execute connect_knowledge_reflection []
  nil]

[deftypefunk propogate_visual_objects_to_visual_knowledge_resource execute update_visual_knowledge_from_visual_objects []
  [while t
    [wait-for-trigger [get [get [get this mind] resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
    
    [let [[visual_objects [get [get this mind] visual_objects]]]
      [have [get [get this mind] visual_knowledge] remove_all]
      [let [[semantic_realm        [get [get this mind] semantic_realm]]
	    [semantic_object_frame [frame]]]
	[mapc [funk [object]
		    [let [[semantic_visual_object [new semantic_visual_object semantic_realm]]
			  [phenomenal_name        [get object phenomenal_name]]]
		      [semantic-add semantic_visual_object visual_phenomenal_name phenomenal_name]
		      [have [get [get this mind] visual_knowledge] add_semantic_frame semantic_visual_object]
		      [have semantic_object_frame add phenomenal_name semantic_visual_object]]]
	      visual_objects]
	[mapc [funk [visual_object]
		    [let [[semantic_object [have semantic_object_frame lookup [get visual_object phenomenal_name]]]]
		      [let [[preposition_frame [get visual_object preposition_frame]]]
			[mapc [funk [preposition]
				    [let [[prepositional_object_names [have preposition_frame lookup preposition]]]
				      [mapc [funk [prepositional_object_name]
						  [let [[prepositional_semantic_object [have semantic_object_frame lookup prepositional_object_name]]]
						    [if [null prepositional_semantic_object]
							[terminal_format standard-terminal '\nupdate_visual_knowledge_from_visual_objects warning: don\'t know of prepositional object, ' prepositional_object_name '.']
						      [cond [[eq preposition `in] [semantic-add semantic_object preposition-in prepositional_semantic_object]]
							    [[eq preposition `on] [semantic-add semantic_object preposition-on prepositional_semantic_object]]
							    [t                    [terminal_format standard-terminal '\n\nupdate_visual_knowledge_from_visual_objects warning: don\'t know of preposition, ' preposition '.']]]]]]
					    prepositional_object_names]]]
			      [get preposition_frame keys]]]
		      [if [is-type `moral_compass_visual_agent visual_object]
			  [let [[agent_name [get visual_object phenomenal_name]]]
			    [have this think_to_self '\nmoral_compass_visual_agent: ' agent_name]
			    [let [[semantic_agent [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame `[agent ,agent_name]]]]
			      [if [null semantic_agent]
				  [prog [= semantic_agent [new semantic_agent [get [get this mind] semantic_realm]]]
					[have [get [get this mind] semantic_realm]                                  add_phenomenon_semantic_frame `[agent ,agent_name] semantic_agent]
					[have [get [get this mind] semantic_knowledge_base `other_agents_knowledge] add_semantic_frame                                 semantic_agent]]]
			      [let [[actions [get visual_object actions]]]
				[have this think_to_self '\nagent ' agent_name ' actions: ' actions]
				[mapc [funk [action]
					    [let [[start_time     [get action start_time]]
						  [action_name    [get action action_name]]
						  [argument_frame [get action argument_frame]]
						  [result         [get action result]]]
					      [let [[action_semantic_frame [new semantic_action_event [get [get this mind] semantic_realm]]]]
						[have [get [get this mind] visual_knowledge] add_semantic_frame action_semantic_frame]
						[semantic-add action_semantic_frame agent       semantic_object]
						[semantic-add action_semantic_frame action_name action_name]
						'should add argument frame for each action specifically.'
						]]]
				      actions]
				]]]]]]
	      visual_objects]
	]]]]


[deframe builtin_reactive_sensory_agency [agency] []
  [new []
       [construct agency `sensory]
       
       [have this add_resource [new continuous_sensing_resource]]
       [have this add_resource [new propogate_visual_objects_to_visual_knowledge_resource]]
       
       this]]

[deftypefunk builtin_reactive_sensory_agency execute create_knowledge []
  [have [get this resource `propogate_visual_objects_to_visual_knowledge] create_knowledge]]

[deftypefunk builtin_reactive_sensory_agency execute connect_knowledge_reflection []
  [have [get this resource `propogate_visual_objects_to_visual_knowledge] connect_knowledge_reflection]]

[deftypefunk builtin_reactive_sensory_agency get perception []
  [get [get this resource `continuous_sensing] perception]]

[deftypefunk builtin_reactive_sensory_agency get visual_objects []
  [get [get this resource `continuous_sensing] visual_objects]]

[deftypefunk builtin_reactive_sensory_agency get right_hand_object_name []
  [get [get this resource `continuous_sensing] right_hand_object_name]]

[deftypefunk builtin_reactive_sensory_agency get left_hand_object_name  []
  [get [get this resource `continuous_sensing] left_hand_object_name]]

