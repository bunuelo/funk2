
'

[globalize test_semantic_realm [new semantic_realm]]
[make_test_physical_knowledge]
[make_test_event_knowledge]
[make_test_situation_knowledge]
[make_test_transitions]
'

[defunk t []
  [require semantic_situation_transition]
  [load 'example/moral_compass/deliberative_forward_planner_agency-test.fu2']]


[defunk make_test_physical_knowledge []
  [globalize test_physical_knowledge [new semantic_event_knowledge_base `test_physical_knowledge test_semantic_realm]]

  [globalize test_physical_object1 [new semantic_physical_object test_semantic_realm]]
  [globalize test_physical_object2 [new semantic_physical_object test_semantic_realm]]
  [globalize test_physical_object3 [new semantic_physical_object test_semantic_realm]]
  [globalize test_physical_object4 [new semantic_physical_object test_semantic_realm]]
  [globalize test_physical_object5 [new semantic_physical_object test_semantic_realm]]
  
  [globalize test_object_list `[,test_physical_object1  
				,test_physical_object2  
				,test_physical_object3  
				,test_physical_object4  
				,test_physical_object5]]
  
  [mapc [funk [object]
	      [have test_physical_knowledge add_semantic_frame object]]
	test_object_list]
  
  [mapc [funk [object]
	    [semantic-add test_physical_object1 preposition-in object]]
	test_object_list]
  
  [mapc [funk [object]
	      [semantic-add test_physical_object2 preposition-on object]]
      test_object_list]]

[defunk make_test_event_knowledge []
  [globalize test_event_knowledge [new semantic_event_knowledge_base `test_event_knowledge test_semantic_realm]]
  
  [globalize test_event1 [new semantic_event test_semantic_realm `1]]
  [globalize test_event2 [new semantic_event test_semantic_realm `2]]
  [globalize test_event3 [new semantic_event test_semantic_realm `3]]
  [globalize test_event4 [new semantic_event test_semantic_realm `4]]
  [globalize test_event5 [new semantic_event test_semantic_realm `5]]

  [globalize test_goal_event1 [new semantic_event test_semantic_realm `1]]
  [globalize test_goal_event2 [new semantic_event test_semantic_realm `2]]

  [globalize test_event_list `[,test_event1  
			       ,test_event2  
			       ,test_event3  
			       ,test_event4  
			       ,test_event5]]


  [mapc [funk [object]
	      [have test_event_knowledge add_semantic_frame object]]
	      test_event_list]
  ]

[defunk make_test_situation_knowledge []
  [globalize test_situation_knowledge [new semantic_event_knowledge_base `test_situation_knowledge test_semantic_realm]]
  [globalize test_situation1 [new semantic_situation test_semantic_realm]]
  [globalize test_situation2 [new semantic_situation test_semantic_realm]]
  [globalize test_situation3 [new semantic_situation test_semantic_realm]]
  [globalize test_situation4 [new semantic_situation test_semantic_realm]]
  [globalize test_situation5 [new semantic_situation test_semantic_realm]]
  
  [globalize test_situation_list `[,test_situation1  
				   ,test_situation2  
				   ,test_situation3  
				   ,test_situation4  
				   ,test_situation5]]
 [let [[i 0]]
   [while [< i 4]
     [let [[situation [get [get test_situation_list as-array] elt i]]]
       [mapc [funk [event]
		   [if [> [semantic-get event action_name]  i]
			[semantic-add situation event event]]]
	     test_event_list]]
     [= i [+ 1 i]]]]
   
  
  [mapc [funk [object]
	      [have test_situation_knowledge add_semantic_frame object]]
	test_situation_list]
  
  ]
  

[defunk make_test_transitions []
  [globalize test_situation_transition1 [new semantic_situation_transition test_semantic_realm]]
  [globalize test_situation_transition2 [new semantic_situation_transition test_semantic_realm]]
  [globalize test_situation_transition3 [new semantic_situation_transition test_semantic_realm]]
  [globalize test_situation_transition4 [new semantic_situation_transition test_semantic_realm]]
  [globalize test_situation_transition5 [new semantic_situation_transition test_semantic_realm]]
  
  [globalize test_situation_transition_list `[,test_situation_transition1  
					      ,test_situation_transition2  
					      ,test_situation_transition3  
					      ,test_situation_transition4  
					      ,test_situation_transition5]]

 [let [[i 0]]
   [while [< i 4]
     [let [[transition [get [get test_situation_transition_list as-array] elt i]]]
       [mapc [funk [event]
		   [if [> [semantic-get event action_name]  i]
			[semantic-add transition add_event event]
		     [semantic-add transition remove_event event]]
		   ]
	     test_event_list]]
     [= i [+ 1 i]]]]
   
  
  [mapc [funk [object]
	      [have test_situation_knowledge add_semantic_frame object]]
	test_situation_list]
  
  ]


[deftypefunk semantic_situation get contains_event [goal_event]
  [let [[matching_event nil]]
    [mapc [funk [event] 
		
		[if [and [= [semantic-get event type]
			    [semantic-get goal_event type]]
			 [= [semantic-get event action_name]
			    [semantic-get goal event action_name]]]
		    [= matching_event event]]]
	  [semantic-lookup_set situation event]]
    matching_event]]

[defunk test_goal [situation]
  [if [and [contains_event situation test_goal_event1]
	   [contains_event situation test_goal_event2]]
      t]]

[deftypefunk knowledge get as-situation []
  [let [[situation [new semantic_situation]]]
    [mapc [funk [event]
		[semantic-add situation event event]]
	  [get this semantic_frames]]
    situation]]

'only for event knowledge bases'

[defunk apply_transition_to_situation [transition situation]
  [let [[new_situation situation]]
    [mapc [funk [event_to_add]
		[if [null [contains_event situation event_to_add]]
		    [semantic-add new_situation event event_to_add]]]
	  [semantic-lookup_set transition add-event]]
    [mapc [funk [event_to_remove]
		[if [contains_event situation event_to_remove]
		    [semantic-remove new_situation event event_to_remove]]]
	  [semantic-lookup_set transition remove-event]]
    new_situation]]
  

[defunk BFS-test [init_knowledge transition_list]
  [let* [[init_state      `[,[get init_knowledge as situation][]]]
	[forward_list     [list init_state]]
	[explored_states  [new set]]
	[current_state    `init_state]
	]
    [have explored_states add init_state]

    [labels [[find_path [state]
			[let [[path []]
			      [current_state state]]
			  [while [cdr current_state]
			    [= path [have path add [cdr current_state]]]]]]
	     [search    [state]
			[let [[destination nil]]
			  [if [test_goal state]
			      [= destination state]
			    [prog [mapc [funk [transition]
					      [let [[new_situation [apply_transition_to_situation state transition]]]
						[if [null [get explored_states contain new_situation]]
						    [prog [have explored_states add new_situation]
							  [have forward_list add new_situation]]]]]
					[transition_list]]
				  [= current_state [car forward_list]]
				  [= forward_list [cdr forward_list]]]]]]]
	    [search current_state]]
    ]]




[deftypefunk semantic_event_knowledge_base get difference []
  nil]
'compare 2 knowledge bases'

`[deframe action [] [name
		    [state_transform_funk [funk [knowledge_base]
						nil]]
		    [resource resource ]
		    [new [name resource state_transform_funk]
			 [= resource resource]
			 [= name name]
			 [= state_transform_funk state_transform_funk]
			 nil]]]

[deftypefunk action execute apply_transformation [state]
  [apply [get this state_transform_funk] state]]

[deframe copy_physical_knowlege_base_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk []
			[have this-resource think_to_self 'copy physical knowledge base']
			[get [get [get isismon_agent isis_agent] mind] semantic_knowledge_base knowledge_name]
			
			nil]]
       nil]]

[deframe compare_to_goal_state_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk [state goal_state]
			[have this-resource think_to_self 'compare state to goal state']
			[equals [get state state_hash] 
				[get goal_state state_hash]]]]
       nil]]
'BFS'

[deframe forward_search_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk [state goal_state]
			[have this-resource think_to_self 'forward search']
			nil]]
       nil]]

