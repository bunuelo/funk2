'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'
'
knowledge base = semantic frames
add, remove, set, get etc
copy physical knowledge
action type objects
apply action
goal tests
goal state


'
[deftypefunk meta_semantic_knowledge_base get state_hash []
  nil]

[deframe action [] [name
		    [ state_transform_funk [funk [knowledge_base]
						  nil]]
		    [resource resource ]
  [new [name resource state_transform_funk]
       [= resource resource]
       [= name name]
       [= state_transform_funk state_transform_funk]
       nil]]

[deftypefunk action execute apply_transformation [state]
  [apply [get this state_transform_funk] state]]

[deframe copy_physical_knowlege_base_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk []
			[have this-resource think_to_self 'copy physical knowledge base']
			nil]]
       nil]]

[deframe compare_to_goal_state_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk [state goal_state]
			[have this-resource think_to_self 'compare state to goal state']
			[equals [get state state_hash] 
				[get goal_state state_hash]]]]
       nil]]
'BFS'
[deframe forward_search_resource [traced_resource] []
  [new []
       [construct traced_resource [type this]
		  [funk [state goal_state]
			[have this-resource think_to_self 'forward search']
			nil]]
       nil]]

[deframe deliberative_forward_planner_agency [agency] []
  [new []
       [construct agency `forward_planner]
       
       [have this add_resource [new forward_search_resource]]
       
       this]]


