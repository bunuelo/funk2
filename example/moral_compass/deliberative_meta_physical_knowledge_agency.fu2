'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe deliberative_meta_physical_knowledge_agency [agency] []
  [new []
       [construct agency `meta_physical_knowledge]
       
       [have this add_resource [new translate_physical_knowledge_to_meta_physical_knowledge_resource]]
       
       nil]]


[deftypefunk deliberative_meta_physical_knowledge_agency execute create_knowledge []
  [new meta_semantic_knowledge_base `meta_physical_knowledge [get [get this mind] semantic_realm]]]

[deftypefunk deliberative_meta_physical_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `physical_knowledge `physical_knowledge->meta_physical_knowledge]]


[deframe translate_physical_knowledge_to_meta_physical_knowledge_resource [traced_resource] [[existence_physical_phenomenon_hash [hash]]]
  [new []
       [construct traced_resource `translate_physical_knowledge_to_meta_physical_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       [= vital t]
       nil]]

[deftypefunk translate_physical_knowledge_to_meta_physical_knowledge_resource get physical_phenomenon_existence [physical_phenomenon]
  [let [[existence_event [have existence_physical_phenomenon_hash lookup physical_phenomenon]]]
    [if [null existence_event]
	[prog [= existence_event [new semantic_know_of_existence_event [get [get this mind] semantic_realm] physical_phenomenon]]
	      [have existence_physical_phenomenon_hash add physical_phenomenon existence_event]
	      [have [get [get this mind] semantic_knowledge_base `meta_physical_knowledge] add_semantic_frame existence_event]]]
    existence_event]]

[deftypefunk translate_physical_knowledge_to_meta_physical_knowledge_resource execute execute_resource_raw_funk []
  [let [[physical_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `physical_knowledge->meta_physical_knowledge]]]
    [while t
      [let [[event [have physical_knowledge_iterator wait_for_current]]]
	[if [not [null event]]
	    [prog [if [get this debug] [terminal_format standard-terminal '\n  translate physical->meta_physical event: ' event]]
		  [let [[event_type [get event event_type]]]
		    [cond [[and [is-type `semantic_knowledge_base_event event]
				[eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										 [let [[physical_phenomenon [have semantic_frame lookup_single_value `property `physical_phenomenon]]]
										   [let [[existence_event [get this physical_phenomenon_existence physical_phenomenon]]]
										     [semantic-set existence_event absolute_start_time [get event time]]
										     ]]]]
			  [[and [is-type `semantic_frame_event event]
				[eq event_type `add]]                          [let [[key_type [get event key_type]]
										     [key      [get event key]]]
										 ]]
			  ]]]]
	[have physical_knowledge_iterator increment]]]]]



