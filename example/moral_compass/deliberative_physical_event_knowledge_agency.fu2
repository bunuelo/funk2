'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'deliberative_physical_event_knowledge_agency'

[deframe deliberative_physical_event_knowledge_agency [agency] []
  [new []
       [construct agency `physical_event_knowledge]
       
       [have this add_resource [new translate_physical_knowledge_to_physical_event_knowledge_resource]]
       [have this add_resource [new translate_physical_type_knowledge_to_physical_type_event_knowledge_resource]]
       
       nil]]


[deftypefunk deliberative_physical_event_knowledge_agency execute create_knowledge []
  [new semantic_event_knowledge_base `physical_event_knowledge      [get [get this mind] semantic_realm]]
  [new semantic_event_knowledge_base `physical_type_event_knowledge [get [get this mind] semantic_realm]]
  ]

[deftypefunk deliberative_physical_event_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `physical_knowledge      `physical_knowledge->physical_event_knowledge]
  [have [get this mind] create_knowledge_event_stream_iterator `physical_type_knowledge `physical_type_knowledge->physical_type_event_knowledge]
  ]


'translate_physical_knowledge_to_physical_event_knowledge_resource'

[deframe translate_physical_knowledge_to_physical_event_knowledge_resource [traced_resource] [[existence_phenomenal_name_ptypehash       [new ptypehash]]
											      [existence_physical_relationship_ptypehash [new ptypehash]]
											      [end_of_physical_event_changes_trigger     [new fiber_trigger]]]
  [new []
       [construct traced_resource `translate_physical_knowledge_to_physical_event_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       [= vital t]
       nil]]

[deftypefunk translate_physical_knowledge_to_physical_event_knowledge_resource get phenomenal_name_existence [phenomenal_name]
  [let [[existence_event [have existence_phenomenal_name_ptypehash lookup phenomenal_name]]]
    [if [null existence_event]
	[prog [= existence_event [new semantic_know_of_existence_event [get [get this mind] semantic_realm] phenomenal_name]]
	      [have existence_phenomenal_name_ptypehash add phenomenal_name existence_event]
	      [have [get [get this mind] semantic_knowledge_base `physical_event_knowledge] add_semantic_frame existence_event]]]
    existence_event]]

[deftypefunk translate_physical_knowledge_to_physical_event_knowledge_resource get physical_relationship_existence [physical_relationship]
  [let [[relationship_event [have existence_physical_relationship_ptypehash lookup physical_relationship]]]
    [if [null relationship_event]
	[prog [= relationship_event [new semantic_know_of_relationship_event [get [get this mind] semantic_realm] physical_relationship]]
	      [have existence_physical_relationship_ptypehash add physical_relationship relationship_event]
	      [have [get [get this mind] semantic_knowledge_base `physical_event_knowledge] add_semantic_frame relationship_event]]]
    relationship_event]]

[deftypefunk translate_physical_knowledge_to_physical_event_knowledge_resource execute physical_relationship_existence-remove [physical_relationship]
  [have existence_physical_relationship_ptypehash remove physical_relationship]]

[deftypefunk translate_physical_knowledge_to_physical_event_knowledge_resource execute execute_resource_raw_funk []
  [let [[physical_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `physical_knowledge->physical_event_knowledge]]]
    [while t
      [let [[event [have physical_knowledge_iterator wait_for_current]]]
	[if [not [null event]]
	    [prog [if [get this debug] [terminal_format standard-terminal '\n  translate physical->physical_event event: ' event]]
		  [let [[event_type [get event event_type]]]
		    [cond [[and [is-type `semantic_knowledge_base_event event]
				[eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										 [let [[phenomenal_name [get semantic_frame phenomenal_name]]]
										   [let [[existence_event [get this phenomenal_name_existence phenomenal_name]]]
										     [set existence_event absolute_start_time [new semantic_time [get event time]]]
										     ]]]]
			  [[and [is-type `semantic_frame_event event]
				[eq event_type `add]]                          [let [[event-semantic_frame [get event semantic_frame]]
										     [event-key_type       [get event key_type]]
										     [event-key            [get event key]]
										     [event-value          [get event value]]]
										 [cond [[and [is-type `semantic_physical_object event-semantic_frame]
											     [is-type `semantic_physical_object event-value]]
											[let [[physical_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
															   event-semantic_frame event-key_type event-key event-value]]]
											  [let [[relationship_event [get this physical_relationship_existence physical_relationship]]]
											    [set relationship_event absolute_start_time [new semantic_time [get event time]]]
											    ]]]
										       ]
										 ]]
			  [[and [is-type `semantic_frame_event event]
				[eq event_type `remove]]                       [let [[event-semantic_frame [get event semantic_frame]]
										     [event-key_type       [get event key_type]]
										     [event-key            [get event key]]
										     [event-value          [get event value]]]
										 [cond [[and [is-type `semantic_physical_object event-semantic_frame]
											     [is-type `semantic_physical_object event-value]]
											[let [[physical_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
															   event-semantic_frame event-key_type event-key event-value]]]
											  [let [[relationship_event [get this physical_relationship_existence physical_relationship]]]
											    [set relationship_event absolute_end_time [new semantic_time [get event time]]]
											    [have this physical_relationship_existence-remove physical_relationship]
											    ]]]
										       ]
										 ]]
			  [[and [is-type `semantic_knowledge_base_event event]
				[eq event_type `end_of_physical_changes]]      [prog [have end_of_physical_event_changes_trigger trigger]
										     nil]]
			  ]]]]
	[have physical_knowledge_iterator increment]]]]]



'translate_physical_type_knowledge_to_physical_type_event_knowledge_resource'

[deframe translate_physical_type_knowledge_to_physical_type_event_knowledge_resource [traced_resource] [[existence_phenomenal_name_ptypehash            [new ptypehash]]
													[existence_physical_type_relationship_ptypehash [new ptypehash]]
													[end_of_physical_type_event_changes_trigger     [new fiber_trigger]]]
  [new []
       [construct traced_resource `translate_physical_type_knowledge_to_physical_type_event_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       [= vital t]
       nil]]

[deftypefunk translate_physical_type_knowledge_to_physical_type_event_knowledge_resource get phenomenal_name_existence [phenomenal_name]
  [let [[existence_event [have existence_phenomenal_name_ptypehash lookup phenomenal_name]]]
    [if [null existence_event]
	[prog [= existence_event [new semantic_know_of_existence_event [get [get this mind] semantic_realm] phenomenal_name]]
	      [have existence_phenomenal_name_ptypehash add phenomenal_name existence_event]
	      [have [get [get this mind] semantic_knowledge_base `physical_type_event_knowledge] add_semantic_frame existence_event]]]
    existence_event]]

[deftypefunk translate_physical_type_knowledge_to_physical_type_event_knowledge_resource get physical_type_relationship_existence [physical_type_relationship]
  [let [[relationship_event [have existence_physical_type_relationship_ptypehash lookup physical_type_relationship]]]
    [if [null relationship_event]
	[prog [= relationship_event [new semantic_know_of_relationship_event [get [get this mind] semantic_realm] physical_type_relationship]]
	      [have existence_physical_type_relationship_ptypehash add physical_type_relationship relationship_event]
	      [have [get [get this mind] semantic_knowledge_base `physical_type_event_knowledge] add_semantic_frame relationship_event]]]
    relationship_event]]

[deftypefunk translate_physical_type_knowledge_to_physical_type_event_knowledge_resource execute physical_type_relationship_existence-remove [physical_type_relationship]
  [have existence_physical_type_relationship_ptypehash remove physical_type_relationship]]

[deftypefunk translate_physical_type_knowledge_to_physical_type_event_knowledge_resource execute execute_resource_raw_funk []
  [let [[physical_type_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `physical_type_knowledge->physical_type_event_knowledge]]]
    [while t
      [let [[event [have physical_type_knowledge_iterator wait_for_current]]]
	[if [not [null event]]
	    [prog [if [get this debug] [terminal_format standard-terminal '\n  translate physical_type->physical_type_event event: ' event]]
		  [let [[event_type [get event event_type]]]
		    [cond [[and [is-type `semantic_knowledge_base_event event]
				[eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										 [let [[phenomenal_name [get semantic_frame phenomenal_name]]]
										   [let [[existence_event [get this phenomenal_name_existence phenomenal_name]]]
										     [set existence_event absolute_start_time [new semantic_time [get event time]]]
										     ]]]]
			  [[and [is-type `semantic_frame_event event]
				[eq event_type `add]]                          [let [[event-semantic_frame [get event semantic_frame]]
										     [event-key_type       [get event key_type]]
										     [event-key            [get event key]]
										     [event-value          [get event value]]]
										 [cond [[and [is-type `semantic_physical_object_type          event-semantic_frame]
											     [is-type `semantic_physical_object_type_relation event-value]]
											[let [[physical_type_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
																event-semantic_frame event-key_type event-key event-value]]]
											  [let [[relationship_event [get this physical_type_relationship_existence physical_type_relationship]]]
											    [set relationship_event absolute_start_time [new semantic_time [get event time]]]
											    ]]]
										       ]
										 ]]
			  [[and [is-type `semantic_frame_event event]
				[eq event_type `remove]]                       [let [[event-semantic_frame [get event semantic_frame]]
										     [event-key_type       [get event key_type]]
										     [event-key            [get event key]]
										     [event-value          [get event value]]]
										 [cond [[and [is-type `semantic_physical_object_type          event-semantic_frame]
											     [is-type `semantic_physical_object_type_relation event-value]]
											[let [[physical_type_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
																event-semantic_frame event-key_type event-key event-value]]]
											  [let [[relationship_event [get this physical_type_relationship_existence physical_type_relationship]]]
											    [set relationship_event absolute_end_time [new semantic_time [get event time]]]
											    [have this physical_type_relationship_existence-remove physical_type_relationship]
											    ]]]
										       ]
										 ]]
			  [[and [is-type `semantic_knowledge_base_event event]
				[eq event_type `end_of_physical_type_changes]] [prog [have end_of_physical_type_event_changes_trigger trigger]
										     nil]]
			  ]]]]
	[have physical_type_knowledge_iterator increment]]]]]



