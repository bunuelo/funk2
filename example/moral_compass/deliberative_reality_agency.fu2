'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe include_reactive_stories_into_deliberative_story [resource] [[last_time_step -1]]
  [new []
       [construct resource [type this]
		  [funk []
			[let [[body [get this body]]]
			  [cause-define cause-time_step [get body time_step]]
			  [cause-define cause-name      `[deliberative reality interpret_senses_into_current_story]]
			  [let [[time_step [get body time_step]]]
			    [if [!= [get this last_time_step] time_step]
				[let [[reactive_sensory_story [get [mind-agency [get this mind] reactive sensory] reactive_sensory_story]]]
				  [if [null reactive_sensory_story]
				      [have this-resource think_to_self 'Reactive sensory story does not exist.']
				    [prog [have this-resource think_to_self 'Including reactive sensory story into deliberative story: ' [get reactive_sensory_story as-list]]
					  [let [[reality_story [get [get [get this agency] deliberative_reality_story] union reactive_sensory_story]]]
					    [set [get this agency] deliberative_reality_story reality_story]]
					  [set this last_time_step time_step]]]]]
			    ]]]]
       nil]]

[deframe infer_intended_use_for_agent_picking_up_tool [resource] []
  [new []
       [construct resource [type this]
		  [funk [agent tool]
			[have this think_to_self 'Inferring intended use for ' agent ' picking up tool, ' tool '.']
			]]
       nil]]

[deframe infer_reason_for_agent_physical_action [resource] []
  [new []
       [construct resource [type this]
		  [funk [agent action]
			[have this think_to_self 'Inferring goal for ' agent '\'s physical action, ' action '.']
			]]
       nil]]

[deframe infer_mental_state_causing_agent_facial_expression [resource] []
  [new []
       [construct resource [type this]
		  [funk [agent facial_expression]
			[have this think_to_self 'Inferring ' agent '\'s mental state for facial expression, ' facial_expression '.']
			[cond [[eq facial_expression `smile]            [have this think_to_self 'Smiling sometimes means happiness, which means a goal was just successfully accomplished.']]
			      [[eq facial_expression `lowered_eyebrows] [have this think_to_self 'Lowered eyebrows sometimes means beginning a new plan toward a goal.']]
			      [[eq facial_expression `raised_eyebrows]  [have this think_to_self 'Raised eyebrows sometimes means finishing deliberation and finding a potentially successful plan for accomplishing a goal.']]
			      [t                                        [have this think_to_self 'I do not recognize the facial expression, ' facial_expression ', on ' agent '\'s face.']]]]]
       nil]]





[deframe deliberative_reality_agency [agency] [deliberative_reality_story]
  [new []
       [construct agency `reality]
       [set this deliberative_reality_story [new story]]
       
       [have this add_resource [new include_reactive_stories_into_deliberative_story]]
       [have this add_resource [new infer_intended_use_for_agent_picking_up_tool]]
       [have this add_resource [new infer_reason_for_agent_physical_action]]
       [have this add_resource [new infer_mental_state_causing_agent_facial_expression]]
       
       this]]


