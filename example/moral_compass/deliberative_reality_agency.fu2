'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe deliberative_reality_agency [agency] [last_time_step
					       deliberative_reality_story]
  [new []
       [construct agency `reality]
       [set this last_time_step             -1]
       [set this deliberative_reality_story [new story]]
       [have this add_resource [resource include_reactive_stories_into_deliberative_story []
					 [have this-resource think_to_self 'cheech 0']
					 [let [[body [get this body]]]
					   [have this-resource think_to_self 'cheech 1']
					   [cause-define cause-time_step [get body time_step]]
					   [have this-resource think_to_self 'cheech 2']
					   [cause-define cause-name      `[deliberative reality interpret_senses_into_current_story]]
					   [have this-resource think_to_self 'cheech 3']
					   [let [[time_step [get body time_step]]]
					     [have this-resource think_to_self 'cheech 4']
					     [if [!= [get this last_time_step] time_step]
						 [let [[reactive_sensory_story [get [mind-agency [get this mind] reactive sensory] reactive_sensory_story]]]
						   [have this-resource think_to_self 'cheech 5']
						   [if [null reactive_sensory_story]
						       [have this-resource think_to_self 'Reactive sensory story does not exist.']
						     [prog [have this-resource think_to_self 'Including reactive sensory story into deliberative story: ' [get reactive_sensory_story as-list]]
							   [let [[reality_story [get [get this deliberative_reality_story] union reactive_sensory_story]]]
							     [set this deliberative_reality_story reality_story]]
							   [set this last_time_step time_step]]]]]
					     [print 'cheech 6']
					     ]]]]
       this]]


