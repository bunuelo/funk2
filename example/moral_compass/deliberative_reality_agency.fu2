'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe include_learned_reactive_visual_knowledge_into_deliberative_knowledge [resource] [[last_time_step    -1]
											   [reality_knowledge [new semantic_knowledge_base]]]
  [new []
       [construct resource [type this]
		  [funk []
			[let [[body [get this body]]]
			  [let [[time_step [get body time_step]]]
			    [if [!= [get this last_time_step] time_step]
				[let [[visual_knowledge [get [get [get this mind] resource `learned_reactive `sensory `propogate_visual_objects_to_visual_knowledge] visual_knowledge]]]
				  [if [null visual_knowledge]
				      [have this-resource think_to_self 'Learned reactive visual knowledge does not exist.']
				    [prog [have this-resource think_to_self 'Including learned reactive visual knowledge into deliberative reality knowledge: ' visual_knowledge '.']
					  [let [[new_reality_knowledge [new semantic_knowledge_base]]]
					    'should incorporate visual knowledge into current reality knowledge.'
					    [= reality_knowledge new_reality_knowledge]]
					  [set this last_time_step time_step]]]]]
			    ]]]]
       nil]]

[deframe infer_reason_for_agent_physical_action [resource] []
  [new []
       [construct resource [type this]
		  [funk [agent action]
			[have this think_to_self 'Inferring goal for ' agent '\'s physical action, ' action '.']
			]]
       nil]]

[deframe infer_mental_state_causing_agent_facial_expression [resource] []
  [new []
       [construct resource [type this]
		  [funk [agent facial_expression]
			[have this think_to_self 'Inferring ' agent '\'s mental state for facial expression, ' facial_expression '.']
			[cond [[eq facial_expression `smile]            [have this think_to_self 'Smiling sometimes means happiness, which means a goal was just successfully accomplished.']]
			      [[eq facial_expression `lowered_eyebrows] [have this think_to_self 'Lowered eyebrows sometimes means beginning a new plan toward a goal.']]
			      [[eq facial_expression `raised_eyebrows]  [have this think_to_self 'Raised eyebrows sometimes means finishing deliberation and finding a potentially successful plan for accomplishing a goal.']]
			      [t                                        [have this think_to_self 'I do not recognize the facial expression, ' facial_expression ', on ' agent '\'s face.']]]]]
       nil]]

[deframe listen_to_language_from_agent [resource] [[english_command_frame [new natural_language_command_frame]]]
  [new []
       [construct resource [type this]
		  [funk [agent_description parse_trees]
			[have this think_to_self 'Listening to language parses heard from ' agent_description ': ' parse_trees '.']
			[let [[reality_agency [get [get this mind] agency `deliberative `reality]]]
			  [let [[reality_semantic_knowledge_base [get reality_agency reality_semantic_knowledge_base]]]
			    'we arbitrary choose the first parse here...'
			    [let [[parse_tree [first parse_trees]]]
			      [have parse_tree gview]
			      [have english_command_frame execute_parse_tree parse_tree]
			      ]]]]]
       [have english_command_frame add_command `[pick up] `[direct_object] []
	     [funk [direct_object]
		   [terminal_format standard-terminal '\nPicking up ' [get direct_object leaf_symbols] '.']]]
       ]]



[deframe deliberative_reality_agency [agency] [reality_semantic_knowledge_base]
  [new []
       [construct agency `reality]
       
       [= reality_semantic_knowledge_base [let [[semantic_knowledge_base [new semantic_knowledge_base]]]
					    [let [[knife_semantic_frame        [new visual_object_semantic_frame]]
						  [toaster_semantic_frame      [new visual_object_semantic_frame]]
						  [counter_semantic_frame      [new visual_object_semantic_frame]]
						  [kitchen_semantic_frame      [new visual_object_semantic_frame]]
						  [refrigerator_semantic_frame [new visual_object_semantic_frame]]
						  [butter_semantic_frame       [new visual_object_semantic_frame]]
						  [Ralph_semantic_frame        [new visual_object_semantic_frame]]
						  [Lauren_semantic_frame       [new visual_object_semantic_frame]]]
					      [have knife_semantic_frame        add_noun        `knife]
					      [have knife_semantic_frame        add_classifier  `butter]
					      [have knife_semantic_frame        add_preposition `on counter_semantic_frame]
					      [have knife_semantic_frame        add_preposition `in kitchen_semantic_frame]
					      [have toaster_semantic_frame      add_noun        `toaster]
					      [have toaster_semantic_frame      add_preposition `on counter_semantic_frame]
					      [have toaster_semantic_frame      add_preposition `in kitchen_semantic_frame]
					      [have counter_semantic_frame      add_noun        `counter]
					      [have counter_semantic_frame      add_classifier  `kitchen]
					      [have counter_semantic_frame      add_preposition `in kitchen_semantic_frame]
					      [have kitchen_semantic_frame      add_noun        `kitchen]
					      [have refrigerator_semantic_frame add_noun        `refrigerator]
					      [have refrigerator_semantic_frame add_preposition `in kitchen_semantic_frame]
					      [have butter_semantic_frame       add_noun        `butter]
					      [have butter_semantic_frame       add_preposition `in kitchen_semantic_frame]
					      [have butter_semantic_frame       add_preposition `in refrigerator_semantic_frame]
					      [have Ralph_semantic_frame        add_noun        `Ralph]
					      [have Ralph_semantic_frame        add_preposition `in kitchen_semantic_frame]
					      [have Lauren_semantic_frame       add_noun        `Lauren]
					      [have Lauren_semantic_frame       add_preposition `in kitchen_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame knife_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame toaster_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame counter_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame kitchen_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame refrigerator_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame butter_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame Ralph_semantic_frame]
					      [have semantic_knowledge_base add_semantic_frame Lauren_semantic_frame]
					      semantic_knowledge_base]]]
       
       [have this add_resource [new include_learned_reactive_visual_knowledge_into_deliberative_knowledge]]
       [have this add_resource [new infer_reason_for_agent_physical_action]]
       [have this add_resource [new infer_mental_state_causing_agent_facial_expression]]
       [have this add_resource [new listen_to_language_from_agent]]
       
       this]]


