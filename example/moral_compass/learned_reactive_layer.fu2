'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'learned_reactive_layer'

[deframe learned_reactive_layer [mental_layer] [[learned_reactive_knowledge [new meta_semantic_knowledge_base nil]]]
  [new []
       [construct mental_layer 1 `learned_reactive]
       [have this add_agency [new learned_reactive_sensory_agency]]
       [have this add_agency [new learned_reactive_physical_agency]]
       [have this add_agency [new learned_reactive_language_agency]]
       this]]

[deftypefunk learned_reactive_layer execute reflectively_know_of_addition_of_semantic_frame_value [semantic_frame key_type key value]
  [let [[added_relationship [new relationship_meta_semantic_object semantic_frame key_type key value]]]
    [have meta_semantic_knowledge_base add_semantic_frame added_relationship]
    [have added_relationship add `instant_event `added_at_time [time]]]]

[deftypefunk learned_reactive_layer execute reflectively_know_of_removal_of_semantic_frame_value [semantic_frame key_type key value]
  [let [[added_relationship [new relationship_meta_semantic_object semantic_frame key_type key value]]]
    [have meta_semantic_knowledge_base add_semantic_frame added_relationship]
    [have added_relationship add `instant_event `removed_at_time [time]]]]

[deftypefunk learned_reactive_layer execute setup_knowledge []
  'set up reflective callbacks over this layer'
  `...
  'set up reflective input to this layer'
  [let [[builtin_reactive_knowledge [get [get this mind] builtin_reactive_knowledge]]]
    [have builtin_reactive_knowledge add_trace_callback_funk `add_semantic_frame_value
	  [funk [semantic_knowledge_base semantic_frame key_type key value]
		[if [eq semantic_knowledge_base builtin_reactive_knowledge]
		    [have this reflective_know_of_addition_of_semantic_frame_value semantic_frame key_type key value]]]]
    [have builtin_reactive_knowledge add_trace_callback_funk `remove_semantic_frame_value
	  [funk [semantic_knowledge_base semantic_frame key_type key value]
		[if [eq semantic_knowledge_base builtin_reactive_knowledge]
		    [have this reflectively_know_of_removal_of_semantic_frame_value semantic_frame key_type key value]]]]
    ]]

