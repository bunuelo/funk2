'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'now when activating resource, have to set the slots in funk_user the resource. how to?'
'so how does resource access the mind?  correct?

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
command `builtin_reactive `physical `move_forward_start]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] command 
`builtin_reactive `physical `pick_up_with_left_hand `table+174518476]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `physical] resources ] command `learned_reactive `physical `turn_left_resource 1]



[have [get [get [get [get isis_world agent_mind `Ralph] layer `learned_reactive] agency `physical] resources] lookup `walk_directly_towards_resource]


[fiber [funk []
	     [cause-define cause-name `demo_hold]
	     [demo_hold `knife]][]]

ODD: =.= walk_directly_towards resource has "resource" in its name =.=

nextstep: test pick up : now left hand call the walk_directly_towards_resource however it is named wrongly. 
right hand calls name walk_directly_towards.

builtin pick up resource acting funny
learned pick up activated builtin pickup (needs to be verified)

right now, changed [get mind objects] to [get mind isis_object_frame], which still deals with isis_world. Potentially, need to change to [get mind visual knowledge]
[get body objects]==>
[get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `sensory] visual_objects]


hold objects, test ralph overshoot. make movies!
use object

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `empty_right_hand `loaf+167743436]
does empty right hand need argument target??!?!?!?!?!?!?!? fghjkl
'


[defunk get_visual_objects [mind]
  [get [get [get mind layer `builtin_reactive] agency `sensory] visual_objects]]

[defunk get_left_hand_object_name [mind]
 [get [get [get mind layer `builtin_reactive] agency `sensory] left_hand_object_name]]

[defunk get_right_hand_object_name [mind]
 [get [get [get mind layer `builtin_reactive] agency `sensory] right_hand_object_name]]




[defunk demo_pick_up_loaf_and_butter []
  [print 1]
  [have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_for_vertically `loaf]
  [while [null [have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
			  resource `look_for_vertically] lookup `my_current_object]]
    [sleep 3]]
  [have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `hold_with_right_hand 
	[have [get [get [get [get isis_world agent_mind `Ralph] layer `learned_reactive] agency `physical] 
		   resource `look_for_vertically] lookup `my_current_object]]
  
  [have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_for_vertically `butter]

  [while [null [string-contains [get [have [get [get [get [get isis_world agent_mind `Ralph] layer `learned_reactive] agency `physical] 
		   resource `look_for_vertically] lookup `my_current_object] as-string] 'butter']]
    [sleep 3]]
  
  [have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `hold_with_right_hand 
	[have [get [get [get [get isis_world agent_mind `Ralph] layer `learned_reactive] agency `physical] 
		   resource `look_for_vertically] lookup `my_current_object]]]
  

[defunk demo_hold [object_name]
  [print 1]
  [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_for object_name]
  [print 2]
  [while [null [have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
			  resource `look_for] lookup `my_current_object]]
    [sleep 3]]
  [print 4]
  [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `hold_with_right_hand 
	[have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
		   resource `look_for] lookup `my_current_object]]]





[defunk list-contains_substring [sequence subexp]
  [let [[match nil]]
    [mapc [funk [exp]
		[if [string-contains [get exp as-string] [get subexp as-string]]
		    [= match exp]]]
	  sequence]
    match]]

[defunk visual_objects_contain_object_type [visual_objects object_type] 
  [let [[list_of_object_names
	 [mapcar      [funk [object]
			    [have object lookup `phenomenal_name]]
		      visual_objects]]]
    
    
    [list-contains_substring list_of_object_names object_type]
    ]]

[defunk lookup_visual_object [visual_objects object_name]
  [let [[ match nil]]
    [mapc [funk [object]
		[if [eq [have object lookup `phenomenal_name] object_name]
		    [= match object]]]
		visual_objects]
  match]]



[deframe turn_right_resource [resource] []
  [new []
       [construct resource `turn_right
		  [funk [steps]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Turning right is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical turn_right_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical turn_right_stop]]]]]
       nil]]
[deframe turn_left_resource [resource] []
  [new []
       [construct resource `turn_left
		  [funk [steps]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [print [type mind]]
			  [have this-resource think_to_self 'Turning left is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical turn_left_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical turn_left_stop]]]]]
       nil]]

[deframe look_down_resource [resource] []
  [new []
       [construct resource `look_down
		  [funk [steps]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Looking down is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_down_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_down_stop]]]]]
       nil]]

[deframe look_up_resource [resource] []
  [new []
       [construct resource `look_up
		  [funk [steps]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Looking up is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_up_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_up_stop]]]]]
       nil]]

`[deframe level_head_resource [resource] []
  [new []
       [construct resource `level_head
		  [funk [steps]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Leveling head is starting.']
			  [while [
			  [mind-wait_to_activate mind builtin_reactive physical look_up_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_up_stop]]]]]
       nil]]]]


[deframe move_forward_resource [resource] []
  [new []
       [construct resource `move_forward
		  [funk [steps]
			
			[print 'move_forward resource']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Moving forward is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical move_forward_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical move_forward_stop]]]
			]]
			
       nil]]

[deframe move_backward_resource [resource] []
  [new []
       [construct resource `move_backward
		  [funk [steps]
			[print 'reached move_backward']
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'moving backward is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical move_backward_start]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical move_backward_stop]]]]]
       nil]]

[deframe empty_left_hand_resource [resource] []
  [new []
       [construct resource `empty_left_hand
		  [funk [target]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Emptying left  hand is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical drop_from_left_hand target]]]]
       
       nil]]

[deframe empty_right_hand_resource [resource] []
  [new []
       [construct resource `empty_right_hand
		  [funk [target]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]
			      ]
			  [have this-resource think_to_self 'Emptying right hand is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical drop_from_right_hand target]]]]
       nil]]


[deframe hold_with_right_hand_resource [resource] []
  [new []
       [construct resource `hold_with_right_hand
		  [funk [target]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ] 
			  [have this-resource think_to_self 'hold with right hand is starting']
			  [print target]
			  [if [get_visual_objects mind]
			      [prog [print 11]
				    [if [lookup_visual_object [get_visual_objects mind] target]
					[if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] target] lookup `distance]]
					    [prog [print 22]
						  [if [equals '' [get_right_hand_object_name mind]]
						      [prog [print 'nothing in right hand'] 
							    [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]
							    [print 'activated built-in pick_up']]
						    [mind-wait_to_activate mind learned_reactive physical empty_right_hand [get_right_hand_object_name mind]]]]
					  [prog 
					   [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
					   [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]
				      [prog 
				       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				       [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]]
			    [prog 
			     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
			     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]
			  ]]]
       
       nil]]


[deframe hold_with_left_hand_resource [resource] []
  [new []
       [construct resource `hold_with_left_hand
		  [funk [target]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			      ] 
			  [have this-resource think_to_self 'hold with left hand is starting']
			  [print target]
			  [if [get_visual_objects mind]
			      [if [lookup_visual_object [get_visual_objects mind] target]
				  [if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] target]lookup  `distance]]
				      [if [eq '' [get_left_hand_object_name mind]]
					  [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]
					[mind-wait_to_activate mind learned_reactive physical empty_left_hand [get_right_hand_object_name mind]]]
				    [prog 
				     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
				[prog 
				 [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				 [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
			    [prog 
			     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
			     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
			  ]]]
		  
       nil]]



[deframe open_fridge_resource [resource] []
  [new []
       [construct resource `open_fridge
		  [funk []
			
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [print 'now']
			  [mind-wait_to_activate mind learned_reactive physical look_for `fridge]
			  [print 'now1']
			  [let[[ fridge [have [get [get [get mind layer `builtin_reactive] agency `physical] resource `look_for_resource] lookup `my_current_object]]]
			    [print 'ha']
			    
			    [if [get_visual_objects mind]
				[if [lookup_visual_object [get_visual_objects mind] fridge]
				    [if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] fridge] lookup  `distance]]
					[mind-wait_to_activate mind builtin_reactive physical open_fridge]
				      [prog 
				       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
				       [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
				  [prog 
				   [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
				   [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
			      [prog 
			       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
			       [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
			    ]]]]
       
       
       nil]]

[deframe slice_toast_resource [resource] []
  [new []
       [construct resource `slice_toast
		  [funk []
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [format stdout '/n slice_toast']
			  [mind-wait_to_activate mind learned_reactive physical hold_with_left_hand `knife]
			  [while [null [string-contains [get mind left_hand_object_name] 'knife']]
			    [sleep 3]]
			  [mind-wait_to_activate mind learned_reactive physical hold_with_left_hand  `loaf]
			  [while [null [string-contains [get mind right\t_hand_object_name] 'loaf']]
			    [sleep 3]]
			  [mind-wait_to_activate mind builtin_reactive physical use_left_hand  `loaf `divide]]]]
		  
       nil]] 
'make the resouce *use* in isis_world.fu2'

[deframe center_body_on_resource [resource] []
  [new []
       [construct resource `center_body_on
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [have this-resource think_to_self 'center_body_on_object activated']
			  [labels[[ turn_left_and_right []
							[print 'here']
							[if [get_visual_objects mind]
							    [if [lookup_visual_object [get_visual_objects mind] desired_object] 
								[let [[retina_position_horizontal [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `retina_position_horizontal]]]
								  [cond [[>  retina_position_horizontal 0.4]
									 [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical turn_right 1]
									       [have this-resource think_to_self   'i turned right']
									       [turn_left_and_right]]]
									[[< retina_position_horizontal [- 0 0.4]]
									 [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical turn_left 1]
									       [have this-resource think_to_self 'i turned left']
									       [turn_left_and_right]]]
									[t
									 [have this-resource think_to_self 'centered']]]]
							      [prog [have this-resource think_to_self   'no objects in view']
								    [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								    [turn_left_and_right]]]
							  [prog [have this-resource think_to_self   'my_object not in view']
								[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								[turn_left_and_right]]]]]
			  [turn_left_and_right]]]]]
       
       
       
       nil]]

[deframe walk_towards_resource [resource] []
  [new []
       [construct resource `walk_towards
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
			  [labels [[cautiously_walk []
						    [cond [[and [null [have this check_obstacle]] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							   [prog [mind-wait_to_activate mind learned_reactive physical move_forward 1]
								 [cautiously_walk]]]
							  [[> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
							 nil]
							  [[and [have this check_obstacle] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							   [mind-wait_to_activate mind learned_reactive physical avoid_obstacle desired_object [have this check_obstacle]]]
							  [t
							   [print 'weird, no conditions applied']]]]
				   [cautiously_walk]]]]]]
       
       
       nil]]


[deframe walk_directly_towards_resource [resource] []
  [new []
       [construct resource `walk_directly_towards
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[achieved nil]]
			    [have this-resource think_to_self ' walk_directly_towards activated!']
			    [while  [null achieved]
			      [have this-resource think_to_self ' not achieved']
			      
			      [if [get_visual_objects mind]
				  [if [lookup_visual_object [get_visual_objects mind] desired_object]
				      [if [< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
					  [prog 
					   [have this-resource think_to_self 'current distance:' [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
					   [while [< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
					     [have this-resource think_to_self 'yes object, activating center on']
					     [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
					     
					     [have this-resource think_to_self 'activating move_forward']
					     [mind-wait_to_activate mind learned_reactive physical move_forward 1]
					     
					     [print 'end of while loop']
					     [have this-resource think_to_self 'current distance:' [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
					     [print 'printed current distance']]
					   [have this-resource think_to_self 'object within arm_length now']]
					[prog [have this-resource think_to_self 'finally got it']
					    [= achieved t]]]
				    [prog [have this-resource think_to_self 'dont have object, activating search']
					  [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
					  ]]   
				[prog [have this-resource think_to_self 'dont have object, activating search']
				      [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
				      ]]]
			    [have this-resource think_to_self 'finished walking towards']]]]]
       
       nil]]






[deframe look_for_resource [resource] [[my_current_object nil]]
  [new []
       [construct resource `look_for
		  [funk [desired_object_type]
			[print 'look for']
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 15]]
			    [have this-resource think_to_self 'look_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [print 'here']

			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical turn_left 1]
				   ]
				[if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical turn_left 1]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
					[have this-resource think_to_self 'found'my_current_object ]
					]]]]
			    [if [null my_current_object]
				[mind-wait_to_activate mind learned_reactive physical look_for_vertically desired_object_type]
			      [have this-resource think_to_self 'finished searching']]]]]]
       nil]]

[deframe look_for_vertically_resource [resource] [[my_current_object nil]]
  [new []
       [construct resource `look_for_vertically
		  [funk [desired_object_type]
			[print 'look for']
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 10]]
			    [have this-resource think_to_self 'look_for_vertically activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical look_down 1]
				   ]
				[if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical look_down 1]
					  [print 'activated look_down']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
					[have this-resource think_to_self 'found'my_current_object ]
					]]]]
			    [have this-resource think_to_self 'finished searching vertically']]]]]
       nil]]

'[while [neck position not the lowest]
   [look down]]
 [while [neck position not the highest]
   [look up]
 [if no found]
   [level head]'
 

[deframe search_for_resource [resource] []
  [new []
       [construct resource `search_for
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[patience 30]]
			    [have this-resource think_to_self 'search_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']

			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical turn_left 1]
				   ]
				[if [null [lookup_visual_object [get_visual_objects mind] desired_object]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical turn_left 1]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[have this-resource think_to_self 'found it!']]]]]
			    [have this-resource think_to_self 'finished searching']]]]]
       nil]]

[deframe avoid_obstacle_resource [resource] []
  [new []
       [construct resource `avoid_obstacle
		  [funk [desired_object obstacle]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
			  [labels [[walk_around [if_left]
						[mind-wait_to_activate mind learned_reactive physical center_body_on obstacle]
						[let [[patience 30]]
						  [if if_left
						      [prog [mind-wait_to_activate mind learned_reactive physical turn_right 5]
							    [while [and [have this check_obstacle desired_object] [> patience 0]]
							      [mind-wait_to_activate mind learned_reactive physical move_forward 3]
							      [mind-wait_to_activate mind learned_reactive physical center_head_on obstacle]
							      [let [[distance [have [have [get_visual_objects mind] lokup desired_object] lookup `distance]]]
								[cond [[> distance 8]
								       [mind-wait_to_activate mind learned_reactive physical turn_left 2]]
								      [[> distance 2]
								       [mind-wait_to_activate mind learned_reactive physical turn_right 2]]
								      [t
								       [mind-wait_to_activate mind learned_reactive physical move_forward 2]]]
								[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								[= patience [patience -1]]]]]
						    [prog [mind-wait_to_activate mind learned_reactive physical turn_left 5]
							  [while [and [have this check_obstacle desired_object] [patience >0]]
							    [mind-wait_to_activate mind learned_reactive physical move_forward 3]
							    [mind-wait_to_activate mind learned_reactive physical center_head_on obstacle]
							    [let [[distance [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							      [cond [[> distance 8]
								     [mind-wait_to_activate mind learned_reactive physical turn_right 2]]
								    [[> distance 2]
								     [mind-wait_to_activate mind learned_reactive physical turn_left 2]]
								    [t
								     [mind-wait_to_activate mind learned_reactive physical move_forward 2]]]
							      [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
							      [= patience [patience -1]]]]]]]]]
				  [walk_around [> 0 [have [lookup_visual_object [get_visual_objects mind] obstacle] lookup `retina_position_horizontal]]]]
			  [mind-wait_to_activate mind learned_reactive physical walk_directly_towards desired_object]]]]
		  
		  nil]]


[deframe learned_reactive_physical_agency [agency] []
  [new []
       [construct agency `physical]

       [have this add_resource [new look_up_resource]]
       [have this add_resource [new look_down_resource]]
       [have this add_resource [new turn_right_resource]]
       [have this add_resource [new turn_left_resource]]
       [have this add_resource [new move_forward_resource]]			
       [have this add_resource [new move_backward_resource]]
       [have this add_resource [new empty_left_hand_resource]]
       [have this add_resource [new empty_right_hand_resource]]
       [have this add_resource [new hold_with_right_hand_resource]]
       [have this add_resource [new hold_with_left_hand_resource]]
       [have this add_resource [new open_fridge_resource]]
       [have this add_resource [new slice_toast_resource]]
       [have this add_resource [new center_body_on_resource]]
       [have this add_resource [new walk_towards_resource]]
       [have this add_resource [new walk_directly_towards_resource]]
       [have this add_resource [new search_for_resource]]
       [have this add_resource [new avoid_obstacle_resource]]
       [have this add_resource [new look_for_resource]]
       [have this add_resource [new look_for_vertically_resource]]
       
       this]]

[defmetro JJ-init []
  `[isis_world-initialize '18.85.59.46']]


