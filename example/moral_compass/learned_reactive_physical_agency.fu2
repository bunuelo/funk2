'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'
[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `use_left_hand `loaf+183833060 `divide]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `level_pitch]

[have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `center_body_on `knife+166631700]


[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_right 1 300.0]
'


[globalize step_factor 10]
[globalize level_neck_pitch 0]
'**********basic resources*************'
[deframe use_left_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `use_left_hand
		  [funk [target action]
			[have this-resource use_left_hand target action]]]
       nil]]

[deframe use_right_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `use_right_hand
		  [funk [target action]
			[have this-resource use_right_hand target action]]]
       nil]]


[deframe look_right_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_right
		  [funk [steps speed]
			[have this-resource look_right steps speed]]]
       nil]]



[deframe look_left_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_left
		  [funk [steps speed]
			[have this-resource look_left steps speed]]]
       nil]]


[deframe turn_right_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `turn_right
		  [funk [steps speed]
			[= achieved nil]
			[format stdout ' turn_right']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  [have this-resource think_to_self 'Turning right is starting.speed:' speed ' degrees/sec;' [/ speed step_factor] 'degrees/step']
			  [mind-wait_to_activate mind builtin_reactive physical turn_right_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]
			  [mind-wait_to_call mind builtin_reactive physical turn_right_stop]]]
		  [= achieved t]]
       nil]]

[deframe turn_left_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `turn_left
		  [funk [steps speed]
			[= achieved nil]
			[format stdout ' turn_left']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  [print [type mind]]
			  [have this-resource think_to_self 'Turning left is starting, speed: ' speed ' degrees/sec' [/ speed step_factor] 'degrees/step']
			  [mind-wait_to_call mind builtin_reactive physical turn_left_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]
			    [mind-wait_to_call mind builtin_reactive physical turn_left_stop]]]
			[= achieved t]]
       nil]]


'looking'
[deframe look_down_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_down
		  [funk [steps speed]
			[= achieved nil]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  [have this-resource think_to_self 'Looking down is starting, speed:' speed  ' degrees/sec' [/ speed step_factor] 'degrees/step']
			  [mind-wait_to_call mind builtin_reactive physical look_down_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]
			  [mind-wait_to_call mind builtin_reactive physical look_down_stop]]]
			[= achieved t]]
  nil]]

[deframe look_up_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_up
		  [funk [steps speed]
			[= achieved nil]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  [have this-resource think_to_self 'Looking up is starting, speed: ' speed ' degrees/sec' [/ speed step_factor] 'degrees/step']
			  [mind-wait_to_call mind builtin_reactive physical look_up_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]			  
			  [mind-wait_to_call mind builtin_reactive physical look_up_stop]]]
			[= achieved t]]
  nil]]

'leveling'
[deframe level_pitch_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `level_pitch
		  [funk []
			[have this-resource level_pitch]]]
       nil]]



[deframe look_at_floor_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_at_floor
		  [funk []
			[have this-resource look_at_floor]]]
       nil]]


[deframe look_at_sky_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `look_at_sky
		  [funk []
			[have this-resource look_at_sky]]]
       nil]]

[deframe align_body_with_neck_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `align_body_with_neck
		  [funk []
			[have this-resource align_body_with_neck]]]
       nil]]

	
'moving'
[deframe move_forward_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `move_forward
		  [funk [steps speed]
			
			[print 'move_forward resource']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  [have this-resource think_to_self 'Moving forward is starting.speed:' speed]
			  
			  [mind-wait_to_call mind builtin_reactive physical move_forward_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]
			  [mind-wait_to_call mind builtin_reactive physical move_forward_stop]]]]
       nil]]

[deframe move_backward_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `move_backward
		  [funk [steps speed]
			[print 'move_backward resource']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [counter            0]]
			  
			  [have this-resource think_to_self 'moving backward is starting.speed:' speed]
			  [mind-wait_to_call mind builtin_reactive physical move_backward_start speed]
			  [while [< counter steps]
			    [wait-for-trigger [get mind time_step_trigger]] 
			    [= counter [+ counter 1]]
			    ]
			    [mind-wait_to_call mind builtin_reactive physical move_backward_stop]]]]
       nil]]

'emptying'
[deframe empty_left_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `empty_left_hand
		  [funk []
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Emptying left  hand is starting.']
			  [mind-wait_to_call mind builtin_reactive physical drop_from_left_hand]]]]
       
       nil]]

[deframe empty_right_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `empty_right_hand
		  [funk []
			[have this-resource empty_right_hand]]]
       nil]]

[deftypefunk empty_right_hand_resource execute empty_right_hand []
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 ]
    [have this-resource think_to_self 'Emptying right hand is starting.']
    [mind-wait_to_call mind builtin_reactive physical drop_from_right_hand]]]

'holding'
[deframe hold_with_right_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `hold_with_right_hand
		  [funk [target]
			[have this-resource hold_with_right_hand target]]]
       nil]]




[deframe hold_with_left_hand_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `hold_with_left_hand
		  [funk [target]
			[have this-resource hold_with_left_hand target]]]
       nil]]

'*********************fancy resources*******************'
[deframe learned_open_fridge_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `learned_open_fridge
		  [funk []
			[have this-resource learned_open_fridge]]]
       nil]]

`[deftypefunk learned_open_fridge_resource execute learned_open_fridge []
  
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [print 'now']
			  [mind-wait_to_call mind learned_reactive physical look_for `fridge]
			  [print 'now1']
			  [let[[ fridge [have [get [get [get mind layer `builtin_reactive] agency `physical] resource `look_for_resource] lookup `my_current_object]]]
			    [if [get_visual_objects mind]
				[if [lookup_visual_object [get_visual_objects mind] fridge]
				    [if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] fridge] lookup  `distance]]
					[mind-wait_to_call mind builtin_reactive physical open_fridge]
				      [prog 
				       [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
				       [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
				  [prog 
				   [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
				   [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
			      [prog 
			       [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
			       [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
			    ]]]

[deframe slice_toast_resource [traced_resource] []
  [new []
       [construct traced_resource `slice_toast
		  [funk []
			[have this-resource slice_toast []]]]nil]]


'**************************centering*****************************************************'
[deframe center_body_horizontally_on_resource [traced_resource] []
  [new []
       [construct traced_resource `center_body_horizontally_on
		  [funk [desired_object]
			[have this center_body_horizontally_on desired_object]]]]]
[deframe continuously_center_resource [traced_resource] []
  [new []
       [construct traced_resource `continuously_center
		  [funk [desired_object]
			[have this continuously_center desired_object]]]]]
[deframe center_body_on_resource [traced_resource] []
  [new []
       [construct traced_resource `center_body_on
		  [funk [desired_object]
			[have this center_body_on desired_object]]]]]

[deframe center_head_on_resource [traced_resource] []
  [new []
       [construct traced_resource `center_head_on
		  [funk [desired_object]
			[have this-resource center_head_on desired_object]]]]]


'walking'
[deframe walk_directly_towards_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `walk_directly_towards
		  [funk [desired_object]
			[have this-resource walk_directly_towards desired_object]]]
       
       nil]]


[deframe track_mother_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `track_mother 
		  [funk [attention]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			    [have this-resource think_to_self ' tracking Lauren activated!']
			    [while  [< 0 attention]
			      [= attention [- attention 1]]
			      [have this-resource think_to_self 'still has ' attention 'attention']
			      [if [get [get this agency] visual_objects]
				  [if [lookup_visual_object [get [get this agency] visual_objects] `Lauren]
				      [prog [have this-resource think_to_self 'yes agent, activating center on']
					     [mind-wait_to_call mind learned_reactive physical center_body_on `Lauren]]
				    [prog [have this-resource think_to_self 'dont see Lauren, activating search']
					  [mind-wait_to_call mind learned_reactive physical search_for `Lauren]
					  ]]  
				[prog [have this-resource think_to_self 'dont see any objects, activating search']
				      [mind-wait_to_call mind learned_reactive physical search_for `Lauren]
				      ]]]
			    [have this-resource think_to_self 'attention ran out']]]]
       
       nil]]

[deframe stand_in_front_of_resource [traced_resource] [[init_orientation             nil]
						       [init_orientation_difference  nil]
						       [init_distance                nil]
						       [move_forward                 nil]
						       [init_turning_angle           nil]
						       [init_turning_speed           nil]
						       [desired_init_orientation     nil]
						       [init_angle                   nil]
						       [init_speed                   nil]
						       [final_neck_angle             nil]
						       [final_distance               nil]
						       
						       [turn_right                   nil]
						       [current_distance             nil]
						       
						       
						      ]
  [new []
       [construct traced_resource `stand_in_front_of
		  [funk [object]
			[have this-resource stand_in_front_of object]]]
       nil]]

'****************************Look carefully for************************************************************'

[deframe look_carefully_for_resource [traced_resource] [[my_current_object nil]
							[achieved          nil]] 
  [new []
       [construct traced_resource `look_carefully_for
		  [funk [desired_object_type]
			[have this-resource look_carefully_for desired_object_type]]]
	       nil]]



'****************************************************************************************'



[deframe look_for_vertically_resource [traced_resource] [[my_current_object nil]
							 [achieved          nil]]
  [new []
       [construct traced_resource `look_for_vertically
		  [funk [desired_object_type]
			[have this-resource look_for_vertically desired_object_type]]]
		
       nil]]



[deframe search_for_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `search_for
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[patience 30]]
			    [have this-resource think_to_self 'search_for activated' desired_object]
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			      [if [null [get [get this agency] visual_objects]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_call mind learned_reactive physical turn_left 1 360]
				   ]
				[if [null [lookup_visual_object [get [get this agency] visual_objects] desired_object]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get [get this agency] visual_objects]]
					  [mind-wait_to_call mind learned_reactive physical turn_left 1 360]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[have this-resource think_to_self 'found it!']]]]]
			    [have this-resource think_to_self 'achieved searching']]]]]
       nil]]

[deframe look_for_resource [traced_resource] [[my_current_object nil]
					      [achieved nil]]
  [new []
       [construct traced_resource `look_for
		  [funk [desired_object_type]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 35]]
			    [have this-resource think_to_self 'look_for activated' desired_object_type]
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have' patience ' patience']
			      [print 'here']
			      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			      [if [null [get [get this agency] visual_objects]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_call mind learned_reactive physical turn_left 1 360]
				   ]
				[if [null [visual_objects_contain_object_type [get [get this agency] visual_objects] desired_object_type]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get [get this agency] visual_objects]]
					  [mind-wait_to_call mind learned_reactive physical turn_left 1 360]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[= my_current_object [visual_objects_contain_object_type [get [get this agency] visual_objects] desired_object_type] ]
					[have this-resource think_to_self 'found'my_current_object ]
					]]]]
			    [if [null my_current_object]
				[mind-wait_to_call mind learned_reactive physical look_for_vertically desired_object_type]
			      [have this-resource think_to_self 'achieved looking']]]]]]
       nil]]





[deframe pick_up_loaf_and_butter_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `pick_up_loaf_and_butter
		  [funk []
			[have this-resource think_to_self 'Pick up loaf and butter is starting.']
			[have this-resource pick_up_loaf_and_butter]]]
       nil]]


[deframe make_toast_resource [traced_resource] [[achieved nil]]
  [new []
       [construct traced_resource `make_toast
		  [funk []
			[have this-resource make_toast]]]
       nil]]






'************************************unused resources**********************************************'

`[deframe walk_towards_resource [traced_resource] []
  [new []
       [construct traced_resource `walk_towards
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_call mind learned_reactive physical center_body_on desired_object]
			  [labels [[cautiously_walk []
						    [cond [[and [null [have this check_obstacle]] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
							   [prog [mind-wait_to_call mind learned_reactive physical move_forward 1]
								 [cautiously_walk]]]
							  [[> [get [get this body] arm_length] [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]
							 nil]
							  [[and [have this check_obstacle] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
							   [mind-wait_to_call mind learned_reactive physical avoid_obstacle desired_object [have this check_obstacle]]]
							  [t
							   [print 'weird, no conditions applied']]]]
				   [cautiously_walk]]]]]]
       
       
       nil]]

`[deframe avoid_obstacle_resource [traced_resource] []
  [new []
       [construct traced_resource `avoid_obstacle
		  [funk [desired_object obstacle]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_call mind learned_reactive physical center_body_on desired_object]
			  [labels [[walk_around [if_left]
						[mind-wait_to_call mind learned_reactive physical center_body_on obstacle]
						[let [[patience 30]]
						  [if if_left
						      [prog [mind-wait_to_call mind learned_reactive physical turn_right 5]
							    [while [and [have this check_obstacle desired_object] [> patience 0]]
							      [mind-wait_to_call mind learned_reactive physical move_forward 3]
							      [mind-wait_to_call mind learned_reactive physical center_head_on obstacle]
							      [let [[distance [have [have [get [get this agency] visual_objects] lokup desired_object] lookup `distance]]]
								[cond [[> distance 8]
								       [mind-wait_to_call mind learned_reactive physical turn_left 2]]
								      [[> distance 2]
								       [mind-wait_to_call mind learned_reactive physical turn_right 2]]
								      [t
								       [mind-wait_to_call mind learned_reactive physical move_forward 2]]]
								[mind-wait_to_call mind learned_reactive physical search_for desired_object]
								[= patience [patience -1]]]]]
						    [prog [mind-wait_to_call mind learned_reactive physical turn_left 5]
							  [while [and [have this check_obstacle desired_object] [patience >0]]
							    [mind-wait_to_call mind learned_reactive physical move_forward 3]
							    [mind-wait_to_call mind learned_reactive physical center_head_on obstacle]
							    [let [[distance [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
							      [cond [[> distance 8]
								     [mind-wait_to_call mind learned_reactive physical turn_right 2]]
								    [[> distance 2]
								     [mind-wait_to_call mind learned_reactive physical turn_left 2]]
								    [t
								     [mind-wait_to_call mind learned_reactive physical move_forward 2]]]

							      [mind-wait_to_call mind learned_reactive physical search_for desired_object]
							      [= patience [patience -1]]]]]]]]]
				  [walk_around [> 0 [have [lookup_visual_object [get [get this agency] visual_objects] obstacle] lookup `retina_position_horizontal]]]]
			  [mind-wait_to_call mind learned_reactive physical walk_directly_towards desired_object]]]]
		  
		  nil]]



'***************************************************************************************************************'

[deframe learned_reactive_physical_agency [agency] []
  [new []
       [construct agency `physical]
       [have this add_resource [new use_left_hand_resource]]
       [have this add_resource [new use_right_hand_resource]]
       [have this add_resource [new look_up_resource]]
       [have this add_resource [new look_down_resource]]
       [have this add_resource [new look_left_resource]]
       [have this add_resource [new look_right_resource]]
       [have this add_resource [new turn_right_resource]]
       [have this add_resource [new turn_left_resource]]
       [have this add_resource [new move_forward_resource]]			
       [have this add_resource [new move_backward_resource]]
       [have this add_resource [new empty_left_hand_resource]]
       [have this add_resource [new empty_right_hand_resource]]
       [have this add_resource [new hold_with_right_hand_resource]]
       [have this add_resource [new hold_with_left_hand_resource]]
       [have this add_resource [new learned_open_fridge_resource]]
       [have this add_resource [new slice_toast_resource]]
       [have this add_resource [new center_body_on_resource]]
       [have this add_resource [new continuously_center_resource]]
       [have this add_resource [new center_body_horizontally_on_resource]]
       [have this add_resource [new center_head_on_resource]]
      `[have this add_resource [new walk_towards_resource]]
       [have this add_resource [new walk_directly_towards_resource]]
       [have this add_resource [new search_for_resource]]
      `[have this add_resource [new avoid_obstacle_resource]]
       [have this add_resource [new look_for_resource]]
       [have this add_resource [new look_for_vertically_resource]]
       [have this add_resource [new level_pitch_resource]]
       [have this add_resource [new track_mother_resource]]
       [have this add_resource [new look_carefully_for_resource]]
       [have this add_resource [new pick_up_loaf_and_butter_resource]]  
       [have this add_resource [new make_toast_resource]]
       [have this add_resource [new stand_in_front_of_resource]]
       [have this add_resource [new align_body_with_neck_resource]]
       [have this add_resource [new look_at_sky_resource]]
       [have this add_resource [new look_at_floor_resource]]
       this]]




