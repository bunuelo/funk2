'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'now when activating resource, have to set the slots in funk_user the resource. how to?'
'so how does resource access the mind?  correct?

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
command `builtin_reactive `physical `move_forward_start]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] command 
`builtin_reactive `physical `pick_up_with_left_hand `table+174518476]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `physical] resources ] command `learned_reactive `physical `turn_left_resource 1]



[have [get [get [get [get isis_world agent_mind `Ralph] layer `learned_reactive] agency `physical] resources] lookup `walk_directly_towards_resource]


[fiber [funk []
	     [cause-define cause-name `demo_hold]
	     [demo_hold `knife]][]]

ODD: =.= walk_directly_towards resource has "resource" in its name =.=

nextstep: test pick up : now left hand call the walk_directly_towards_resource however it is named wrongly. 
right hand calls name walk_directly_towards.

builtin pick up resource acting funny
learned pick up activated builtin pickup (needs to be verified)

right now, changed [get mind objects] to [get mind isis_object_frame], which still deals with isis_world. Potentially, need to change to [get mind visual knowledge]
[get body objects]==>
[get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `sensory] visual_objects]


hold objects, test ralph overshoot. make movies!
use object
[[
[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `empty_right_hand `loaf+167743436]
does empty right hand need argument target??!?!?!?!?!?!?!? fghjkl

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `turn_right 1 5.0]
dont think drop from right hand works
[isis-call [get isis_world client] drop_from_right_hand agent `Ralph]

fix make toast
look_left
add rel orientation




[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `use_left_hand `loaf+183833060 `divide]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `level_pitch]

[have [get [get [get [get isis_world agent_mind `Ralph] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `move_backward 1]
'


'*********visual objects helper funktions**************'
[globalize arm_length 3]

[defunk abs [x]
  [if [< 0 x]
      x
    [- 0 x]]]
[defunk calculate_turning_speed [angle]
  [/  [/ angle 0.0258] 0.03]]


[defunk factorial [n]
  [defunk helper [n so-far]
    [if [= n 1]
	1
      [helper [- n 1] [* so-far n]]]]
  [helper n 1]]

[defunk mod [x y]
  [if [> y 0]
      [while [>= x y]
	[= x [- x y]]]
    [= x 0]]
  x]

[defunk power [a b]
  [let [[blah 0]]
    [if [= b 1]
	[= blah 1]
      [if [= [mod b 2] 0]
	  [= blah [* [power a [/ b 2]] [power a [/ b 2]]]]
	[= blah [* [* [power a [/ [- b 1] 2]] [power a [/ [- b 1] 2]]] a]]]]
    blah]]
  
[defunk degree_to_rad [x]
  [*[/ x 180] pi]]

[defunk sine [x]
  [+ 
   [- 
    [+ 
     [- x 
	[/ [power x 3] [factorial 3]]] 
     [/ [power x 5] [factorial 5]]] 
    [/ [power x 7] [factorial 7]]]]]

[defunk arcsin [x]
  [+ 
   [- 
    [+ 
     [- x 
	[* 0.5 [/ [power x 3] 3]]]
     [ * 0.385 [/ [power x 5] [factorial 5]]]] 
    [* 0.3125 [/ [power x 7] [factorial 7]]]]]]


[globalize level_neck_pitch 0]

[defunk globalize_isis_world []
  [globalize isis_world [get [get isismon isismon_project] isis_world]]]

[defunk get_visual_objects [mind]
  [if [get mind perception]
      [get [get mind perception] visual_objects]]]



[defunk get_left_hand_object_name [mind]
   [if [get mind perception]
       [get[get mind perception] left_hand_object_name]]]

[defunk get_right_hand_object_name [mind]
  [if [get mind perception]
      [get [get mind perception] right_hand_object_name]]]

[defunk get_neck_pitch [mind]
  [if [get mind perception]
      [have [have [have [get [get mind perception] proprioceptual_frame] lookup `neck] lookup `orientation] lookup `pitch]]]

[defunk get_object_x_orientation [visual_objects object_name] 
  [have [have visual_objects lookup object_name] lookup `orientation]]
						   
[defunk list-contains_substring [sequence subexp]
  [let [[match nil]]
    [mapc [funk [exp]
		[if [string-contains [get exp as-string] [get subexp as-string]]
		    [= match exp]]]
	  sequence]
    match]]

[defunk visual_objects_contain_object_type [visual_objects object_type] 
  [let [[list_of_object_names
	 [mapcar      [funk [object]
			    [have object lookup `phenomenal_name]]
		      visual_objects]]]
    
    
    [list-contains_substring list_of_object_names object_type]
    ]]

[defunk lookup_visual_object [visual_objects object_name]
  [let [[ match nil]]
    [mapc [funk [object]
		[if [eq [have object lookup `phenomenal_name] object_name]
		    [= match object]]]
		visual_objects]
  match]]



'**********basic resources*************'
[deframe use_left_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `use_left_hand
		  [funk [target action]
			[have this-resource use_left_hand target action]]]
       nil]]

[deftypefunk use_left_hand_resource execute use_left_hand [target action]
[format stdout '/n use_left_hand' target action]
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [mind-wait_to_activate mind builtin_reactive physical use_left_hand target action]]]

[deframe use_right_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `use_right_hand
		  [funk [target action]
			[have this-resource use_right_hand target action]]]
       nil]]

[deftypefunk use_right_hand_resource execute use_right_hand [target action]
   [format stdout '/n use right hand' action target]
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [mind-wait_to_activate mind builtin_reactive physical use_right_hand target action]]]


		  
'turning'
[deframe look_right_resource [traced_resource] []
  [new []
       [construct traced_resource `look_right
		  [funk [steps speed]
			[format stdout '/n look_right']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Looking right is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_right_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_right_stop]]]]]
       nil]]

[deframe look_left_resource [traced_resource] []
  [new []
       [construct traced_resource `look_left
		  [funk [steps speed]
			[format stdout '/n look_left']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [print [type mind]]
			  [have this-resource think_to_self 'Looking left is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_left_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical look_left_stop]]]]]
       nil]]

[deframe turn_right_resource [traced_resource] []
  [new []
       [construct traced_resource `turn_right
		  [funk [steps speed]
			[format stdout '/n turn_right']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Turning right is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical turn_right_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical turn_right_stop]]]]]
       nil]]

[deframe turn_left_resource [traced_resource] []
  [new []
       [construct traced_resource `turn_left
		  [funk [steps speed]
			[format stdout '/n turn_left']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [print [type mind]]
			  [have this-resource think_to_self 'Turning left is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical turn_left_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical turn_left_stop]]]]]
       nil]]


'looking'
[deframe look_down_resource [traced_resource] []
  [new []
       [construct traced_resource `look_down
		  [funk [steps speed]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Looking down is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_down_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_down_stop]]]]]
       nil]]

[deframe look_up_resource [traced_resource] []
  [new []
       [construct traced_resource `look_up
		  [funk [steps speed]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Looking up is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical look_up_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 100]]
			    [mind-wait_to_activate mind builtin_reactive physical look_up_stop]]]]]
       nil]]

'leveling'
[deframe level_pitch_resource [traced_resource] []
  [new []
       [construct traced_resource `level_pitch
		  [funk []
			[have this-resource level_pitch]]]
       nil]]

[deftypefunk level_pitch_resource execute level_pitch[]
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [let[[level_neck_pitch 0]
	 [slightly_looking_up 10]
	 [slightly_looking_down [- 0 10]]]
      
      [have this-resource think_to_self 'Leveling pitch is starting.']
      [while [ > [- [get_neck_pitch mind] level_neck_pitch] slightly_looking_up]
	[mind-wait_to_activate mind learned_reactive physical look_down 1 [degree_to_rad [* [get_neck_pitch mind] 33]]]]
      [while [ < [- [get_neck_pitch mind] level_neck_pitch] slightly_looking_down]
	[mind-wait_to_activate mind learned_reactive physical look_up 1  [degree_to_rad [* [- 0 [get_neck_pitch mind] 33] ]]]]
      [have this-resource think_to_self 'I am looking forward']]]]

[deframe align_body_with_neck_resource [traced_resource] []
  [new []
       [construct traced_resource `align_body_with_neck
		  [funk []
			[have this-resource align_body_with_neck]]]
       nil]]

[deftypefunk align_body_with_neck_resource execute align_body_with_neck[]
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [let[[slightly_looking_left 10]
	 [slightly_looking_right [- 0 10]]]
      
      [have this-resource think_to_self 'aligning body with neck is starting.']
      [while [ > [- [get_neck_angle mind] 0] slightly_looking_left]
	[mind-wait_to_activate mind learned_reactive physical turn_left 1 [* 33 [degree_to_rad [get_neck_angle mind]]]]
	[mind-wait_to_activate mind learned_reactive physical look_right 1 [* 33 [degree_to_rad [get_neck_angle mind]]]]]
      [while [ < [- [get_neck_pitch mind] 0] slightly_looking_right]
	[mind-wait_to_activate mind learned_reactive physical turn_right 1 [* 33 [degree_to_rad [get_neck_angle mind]]]]
	[mind-wait_to_activate mind learned_reactive physical look_left 1 [* 33 [degree_to_rad [get_neck_angle mind]]]]]
      [have this-resource think_to_self 'I am looking forward']]]]]]

'moving'
[deframe move_forward_resource [traced_resource] []
  [new []
       [construct traced_resource `move_forward
		  [funk [steps speed]
			
			[print 'move_forward resource']
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [have this-resource think_to_self 'Moving forward is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical move_forward_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical move_forward_stop]]]
			]]
			
       nil]]

[deframe move_backward_resource [traced_resource] []
  [new []
       [construct traced_resource `move_backward
		  [funk [steps speed]
			[print 'reached move_backward']
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'moving backward is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical move_backward_start speed]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [mind-wait_to_activate mind builtin_reactive physical move_backward_stop]]]]]
       nil]]
'emptying'
[deframe empty_left_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `empty_left_hand
		  [funk []
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Emptying left  hand is starting.']
			  [mind-wait_to_activate mind builtin_reactive physical drop_from_left_hand]]]]
       
       nil]]

[deframe empty_right_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `empty_right_hand
		  [funk []
			[have this-resource empty_right_hand]]]
       nil]]

[deftypefunk empty_right_hand_resource execute empty_right_hand []
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 ]
    [have this-resource think_to_self 'Emptying right hand is starting.']
    [mind-wait_to_activate mind builtin_reactive physical drop_from_right_hand]]]

'holding'
[deframe hold_with_right_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `hold_with_right_hand
		  [funk [target]
			[let* [[body  [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ] 
			  [have this-resource think_to_self 'hold with right hand is starting']
			  [print target]
			  [if [get_visual_objects mind]
			      [prog [print 11]
				    [if [lookup_visual_object [get_visual_objects mind] target]
					[if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] target] lookup `distance]]
					    [prog [print 22]
						  [if [null [get_right_hand_object_name mind]]
						      [prog [print 'nothing in right hand'] 
							    [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]
							    [print 'activated built-in pick_up']]
						    [mind-wait_to_activate mind learned_reactive physical empty_right_hand ]]]
					  [prog 
					   [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
					   [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]
				      [prog 
				       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				       [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]]
			    [prog 
			     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
			     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_right_hand target]]]
			  ]]]
       
       nil]]


[deframe hold_with_left_hand_resource [traced_resource] []
  [new []
       [construct traced_resource `hold_with_left_hand
		  [funk [target]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			      ] 
			  [have this-resource think_to_self 'hold with left hand is starting']
			  [print target]
			  [if [get_visual_objects mind]
			      [if [lookup_visual_object [get_visual_objects mind] target]
				  [if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] target]lookup  `distance]]
				      [if [null [get_left_hand_object_name mind]]
					  [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]
					[mind-wait_to_activate mind learned_reactive physical empty_left_hand ]]
				    [prog 
				     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
				[prog 
				 [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
				 [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
			    [prog 
			     [mind-wait_to_activate mind learned_reactive physical walk_directly_towards target]
			     [mind-wait_to_activate mind builtin_reactive physical pick_up_with_left_hand target]]]
			  ]]]
		  
       nil]]

'*********************fancy resources*******************'
[deframe learned_open_fridge_resource [traced_resource] []
  [new []
       [construct traced_resource `learned_open_fridge
		  [funk []
			[have this-resource learned_open_fridge]]]
       nil]]

[deftypefunk learned_open_fridge_resource execute learned_open_fridge []
  
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [print 'now']
			  [mind-wait_to_activate mind learned_reactive physical look_for `fridge]
			  [print 'now1']
			  [let[[ fridge [have [get [get [get mind layer `builtin_reactive] agency `physical] resource `look_for_resource] lookup `my_current_object]]]
			    [if [get_visual_objects mind]
				[if [lookup_visual_object [get_visual_objects mind] fridge]
				    [if [> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] fridge] lookup  `distance]]
					[mind-wait_to_activate mind builtin_reactive physical open_fridge]
				      [prog 
				       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
				       [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
				  [prog 
				   [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
				   [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
			      [prog 
			       [mind-wait_to_activate mind learned_reactive physical walk_directly_towards fridge]
			       [mind-wait_to_activate mind builtin_reactive physical open_fridge]]]
			    ]]]

[deframe slice_toast_resource [traced_resource] []
  [new []
       [construct traced_resource `slice_toast
		  [funk []
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [format stdout '/n slice_toast']
			  [if [null [string-contains [get mind left_hand_object_name] 'knife']]
			      [mind-wait_to_activate mind learned_reactive physical hold_with_left_hand `knife]]
			  [while [null [string-contains [get mind left_hand_object_name] 'knife']]
			    [sleep 3]]
			  [if [null [string-contains [get mind right_hand_object_name] 'loaf']]
			      [mind-wait_to_activate mind learned_reactive physical hold_with_left_hand  `loaf]]
			  [while [null [string-contains [get mind right_hand_object_name] 'loaf']]
			    [sleep 3]]
			  [mind-wait_to_activate mind learned_reactive physical use_left_hand  [get mind right_hand_object_name] `divide]
			  [mind-wait_to_activate mind learned_reactive physical look_for `toaster]
			  [mind-wait_to_activate mind learned_reactive physical use_right_hand `put_in [have [get [get [get mind layer `learned_reactive] agency `physical] resource `look_for] lookup `my_current_object]]
			  ]]]
       nil]]
'make the resouce *use* in isis_world.fu2'

'**************************centering*****************************************************'

[deframe center_body_on_resource [traced_resource] []
  [new []
       [construct traced_resource `center_body_on
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [have this-resource think_to_self 'center_body_on_object activated']
			  [labels[[ turn_left_and_right []
							`[print 'here']
							[if [get_visual_objects mind]
							    [if [lookup_visual_object [get_visual_objects mind] desired_object] 
								[let [[retina_position_horizontal [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `retina_position_horizontal]]
								      [retina_position_vertical   [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `retina_position_vertical]]]
								  [cond [[>  retina_position_horizontal 0.4]
									 [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical turn_right 1 retina_position_horizontal]
									       [have this-resource think_to_self   'i turned right']
									       [turn_left_and_right]]]
									[[< retina_position_horizontal [- 0 0.4]]
									 [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical turn_left 1 retina_position_horizontal]
									       [have this-resource think_to_self 'i turned left']
									       [turn_left_and_right]]]
									[t
									 [have this-resource think_to_self 'centered']]]
								  [cond [[>  retina_position_vertical 0.4]
									 [prog [have this-resource think_to_self   'y too positive' retina_position_vertical]
									       [mind-wait_to_activate mind learned_reactive physical look_down 1 retina_position_vertical]
									       [have this-resource think_to_self   'i looked down']
									       [turn_left_and_right]]]
									[[< retina_position_vertical [- 0 0.4]]
									 [prog [have this-resource think_to_self   'y too negative' retina_position_vertical]
									       [mind-wait_to_activate mind learned_reactive physical look_up 1 retina_position_vertical] 
									       [have this-resource think_to_self 'i looked up']
									       [turn_left_and_right]]]
									[t
									 [have this-resource think_to_self 'centered']]]]
							      [prog [have this-resource think_to_self   'no objects in view']
								    [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								    [turn_left_and_right]]]
							  [prog [have this-resource think_to_self   'my_object not in view']
								[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								[turn_left_and_right]]]]]
			  [turn_left_and_right]]]]]
       
       
       
       nil]]

[deframe center_head_on_resource [traced_resource] []
  [new []
       [construct traced_resource `center_head_on
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [have this-resource think_to_self 'center_head_on_object activated']
			  [labels[[ look_left_and_right []
							`[print 'here']
							[if [get_visual_objects mind]
							    [if [lookup_visual_object [get_visual_objects mind] desired_object] 
								[let [[retina_position_horizontal [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `retina_position_horizontal]]]
								  [cond [[>  retina_position_horizontal 0.4]
									 [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical look_right 1]
									       [have this-resource think_to_self   'i looked right']
									       [look_left_and_right]]]
									[[< retina_position_horizontal [- 0 0.4]]
									 [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
									       [mind-wait_to_activate mind learned_reactive physical look_left 1]
									       [have this-resource think_to_self 'i looked left']
									       [look_left_and_right]]]
									[t
									 [have this-resource think_to_self 'centered']]]]
							      [prog [have this-resource think_to_self   'no objects in view']
								    [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								    [look_left_and_right]]]
							  [prog [have this-resource think_to_self   'my_object not in view']
								[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								[look_left_and_right]]]]]
			  [look_left_and_right]]]]]
       
       
       
       nil]]

'walking'
[deframe walk_directly_towards_resource [traced_resource] []
  [new []
       [construct traced_resource `walk_directly_towards
		  [funk [desired_object]
			[have this-resource walk_directly_towards desired_object]]]
       
       nil]]

[deftypefunk walk_directly_towards_resource execute walk_directly_towards  [desired_object]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 ]
    [let [[achieved nil]]
      [have this-resource think_to_self ' walk_directly_towards activated!']
      [while  [null achieved]
	[have this-resource think_to_self ' not achieved']
	
	[if [get_visual_objects mind]
	    [if [lookup_visual_object [get_visual_objects mind] desired_object]
		[if [< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
		    [prog 
		     [have this-resource think_to_self 'current distance:' [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
		     [while [< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
		       [have this-resource think_to_self 'yes object, activating center on']
		       [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
		       
		       [have this-resource think_to_self 'activating move_forward']
		       [mind-wait_to_activate mind learned_reactive physical move_forward 1 30]
		       
		       `[print 'end of while loop']
		       [have this-resource think_to_self 'current distance:' [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
		       `[print 'printed current distance']]
		     [have this-resource think_to_self 'object within arm_length now']]
		  [prog [have this-resource think_to_self 'finally got it']
			[= achieved t]]]
	      [prog [have this-resource think_to_self 'dont have object, activating search']
		    [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
		    ]]   
	  [prog [have this-resource think_to_self 'dont have object, activating search']
		[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
		]]]
      [have this-resource think_to_self 'finished walking towards']]]]



[deframe track_mother_resource [traced_resource] []
  [new []
       [construct traced_resource `track_mother 
		  [funk [attention]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			    [have this-resource think_to_self ' tracking Lauren activated!']
			    [while  [< 0 attention]
			      [= attention [- attention 1]]
			      [have this-resource think_to_self 'still has ' attention 'attention']
			      [if [get_visual_objects mind]
				  [if [lookup_visual_object [get_visual_objects mind] `Lauren]
				      [prog [have this-resource think_to_self 'yes agent, activating center on']
					     [mind-wait_to_activate mind learned_reactive physical center_body_on `Lauren]]
				    [prog [have this-resource think_to_self 'dont see Lauren, activating search']
					  [mind-wait_to_activate mind learned_reactive physical search_for `Lauren]
					  ]]  
				[prog [have this-resource think_to_self 'dont see any objects, activating search']
				      [mind-wait_to_activate mind learned_reactive physical search_for `Lauren]
				      ]]]
			    [have this-resource think_to_self 'attention ran out']]]]
       
       nil]]




[deframe look_for_resource [traced_resource] [[my_current_object nil]]
  [new []
       [construct traced_resource `look_for
		  [funk [desired_object_type]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 35]]
			    [have this-resource think_to_self 'look_for activated' desired_object_type]
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have' patience ' patience']
			      [print 'here']

			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical turn_left 1 [degree_to_rad 400.0]]
				   ]
				[if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical turn_left 1 [degree_to_rad 400.0]]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
					[have this-resource think_to_self 'found'my_current_object ]
					]]]]
			    [if [null my_current_object]
				[mind-wait_to_activate mind learned_reactive physical look_for_vertically desired_object_type]
			      [have this-resource think_to_self 'finished looking']]]]]]
       nil]]



`[deframe stand_in_front_of_resource [traced_resource] []
  [new []
       [construct traced_resource `stand_in_front_of
		  [funk [object]
			[have this-resource stand_in_front_of object]]]
       nil]]

`[deftypefunk stand_in_front_of_resource execute stand_in_front_of [object]
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [labels [[get_orientation [object_name]
			       [get_object_x_orientation [get mind perception] object_name]]			      ]
	     [get_distance    [object]
			      [have [have [get mind perception] lookup object] lookup `distance]
			      ]
	     [find_final_distance [init_orientation init_distance]
				  [let [[c 
					 [sqrt [- [+ [* init_distance init_distance] 
						     25]
						  [* [* [degree_cosine init_orientation] init_distance ] 10]]]]
					]
				    c]]
	     [find_init_angle [init_orientation init_distance]
			      [let* [[c 
				      [sqrt [- [+ [* init_distance init_distance] 
						  25]
					       [* [* [degree_cosine init_orientation] init_distance ] 10]]]]
				     [cos_beta
				      [/ [- [+ [* init_distance init_distance]
					       [* c c]]
					    25]
					 [* init_distance ]]]
				     [beta [degree_arccosine cos_beta]]
				     ]
				beta]]
	     
	     [find_turning_speed [init_angle]
				 [* [degree_to_rad [init_angle]] 33]]
	     [should_i_turn_right [init_orientation]
				  [if [< init_orientation 0]
				      t
				    nil]]
	     [should_i_move_forward [turn_right current_neck_angle final_angle]
				    ]]

    [if [or [null [get_visual_objects mind]] [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]]
	[mind-wait_to_activate mind learned_reactive physical search_for object]]
    [while [or [null [get_visual_objects mind]] [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]]
      [sleep 5]]
    [let* [[init_orientation            [get_orientation object]]
	   [init_orientation_difference [abs [- 180 init_orientation]]]
	   [init_distance               [get_distance object]]
	   [init_angle                  [find_init_angle init_orientation init_distance]]
	   [final_neck_angle            [+ [ init_orientation_difference init_angle]]]
	   [final_distance              [find_final_distance init_orientation init_distance]]
	   [init_turning_speed          [find_turning_speed init_angle]]
	   [turn_right                  [should_i_turn_right init_orientation]]
	   ]

      [if turn_right
	  [prog [mind-wait_to_activate mind learned_reactive physical look_right 1 init_speed]
		[mind-wait_to_activate mind learned_reactive physical turn_left 1 init_speed]]
	[prog [mind-wait_to_activate mind learned_reactive physical look_left 1 init_speed]
		   [mind-wait_to_activate mind learned_reactive physical turn_right 1 init_speed]]]
      
      [while [> [abs [-[get_neck_angle mind] final_angle]] 3]
	[if [should_i_move_forward turn_right [get_orientation object] init_orientation]
	    [mind-wait_to_activate mind learned_reactive physical move_forward 1 30]
	       [mind-wait_to_activate mind learned_reactive physical move_back 1 30]]
	[mind-wait_to_activate mind learned_reactive physical center_head_on object]
	[mind-wait_to_activate mind learned_reactive physical align_body_with_neck]]      
      
      ]]]]]]]

'****************************************************************************************'
[deframe look_carefully_for_resource [traced_resource] [[my_current_object nil]]
  [new []
       [construct traced_resource `look_carefully_for
		  [funk [desired_object_type]
			[have this-resource look_carefully_for desired_object_type]]]
	       nil]]

[deftypefunk look_carefully_for_resource execute look_carefully_for [desired_object_type]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 ]
    [let [[patience 15]]
      [have this think_to_self 'look_carefully_for activated' desired_object_type]
      [while [> patience 0]
	[have this think_to_self 'I still have patience']
	[mind-wait_to_activate mind learned_reactive physical level_pitch]
	[while [ > [abs [- [get_neck_pitch mind] 0]] 10]
	  [sleep 5]] 
	[print 'here']
	

	  [if [or [null [get_visual_objects mind]] [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]]
	      [prog [have this think_to_self  'no objects in view']
		    [let [[current_pitch [get_neck_pitch mind]]]
		      [while [> 90 [abs [- current_pitch [get_neck_pitch mind]]]]
			[print 'activated looking down']
			[mind-wait_to_activate mind learned_reactive physical look_down [degree_to_rad 900.0]]]]
		    [if [or [null [get_visual_objects mind]] [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]]
			[prog [have this think_to_self 'still no objects in view after looking down, preparing to look up']
			      [mind-wait_to_activate mind learned_reactive physical level_pitch]
			      [while [ > [abs [- [get_neck_pitch mind] 0]] 10]
				[sleep 5]] 
			      [let [[current_pitch [get_neck_pitch mind]]]
				[while [> 90 [abs [- current_pitch [get_neck_pitch mind]]]]
				  [print 'activated looking up']
				  [mind-wait_to_activate mind learned_reactive physical look_up 1 [degree_to_rad 900.0]]]]
			      [if [or [null [get_visual_objects mind]] [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]] 
				  [prog [have this think_to_self 'still no objects in view after looking up, preparing to level pitch and turn left']
					[mind-wait_to_activate mind learned_reactive physical level_pitch]
					[while [ > [abs [- [get_neck_pitch mind] 0]] 10]
					  [sleep 5]] 
					[mind-wait_to_activate mind learned_reactive physical turn_left 1 [degree_to_rad 400.0]]
					[= patience [- patience 1]]]
				[= patience 0]]] 
		      [= patience 0]]]
	    [= patience 0]]]
      
      [have this think_to_self 'finished looking carefully for']]]]
  

'****************************************************************************************'

`[deframe look_for_vertically_resource [traced_resource] [[my_current_object nil]]
  [new []
       [construct traced_resource `look_for_vertically
		  [funk [desired_object_type]
			[print 'look for_vertically']
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 50]]
			    [have this-resource think_to_self 'look_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [print 'here']

			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical look_down 1]
				   ]
				[if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical look_down 1]
					  [print 'activated look_down']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
					[have this-resource think_to_self 'found' my_current_object ]
					]]]]
			    
			    [have this-resource think_to_self 'finished searching']]]
			'success']]
       nil]]

[deframe look_for_vertically_resource [traced_resource] [[my_current_object nil]]
  [new []
       [construct traced_resource `look_for_vertically
		  [funk [desired_object_type]
			[have this-resource look_for_vertically desired_object_type]]]
		
       nil]]


[deftypefunk look_for_vertically_resource execute look_for_vertically [desired_object_type]

  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [looking_at_floor [- 0 23]]
	 [looking_at_sky 23]
	 [already_searched_down nil]
	 ]
    [let [[patience 50]]
      [have this-resource think_to_self 'look_for_vertically activated' desired_object_type]
      [while [> patience 0]
	[if [null already_searched_down]
	    [prog 
	     [= already_searched_down 1]
	     [print [get_neck_pitch mind]]
	     [while [and [> patience 0] [> [get_neck_pitch mind] looking_at_floor]]
		    
		    [have this-resource think_to_self 'I still have patience, and im searching downward']
		    [if [null [get_visual_objects mind]]
			[prog 
			 [have this-resource think_to_self  'no objects in view']
			 [mind-wait_to_activate mind learned_reactive physical look_down 1 [degree_to_rad 500.0]]
			 ]
		      [if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
			  [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
				[mind-wait_to_activate mind learned_reactive physical look_down 1 [degree_to_rad 500.0]]
				[print 'activated look_down']
				[= patience [- patience 1]]
				]
			[prog [= patience 0]
			      [= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
			      [have this-resource think_to_self 'found' my_current_object ]
			      ]]]]]
	  [prog [while [and [> patience 0] [< [get_neck_pitch mind] looking_at_sky]]
		  [have this-resource think_to_self 'I still have patience, and im searching upward']
		  [if [null [get_visual_objects mind]]
		      [prog 
		       [have this-resource think_to_self  'no objects in view']
		       [mind-wait_to_activate mind learned_reactive physical look_up 1 [degree_to_rad 500.0]]
		       ]
		    [if [null [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type]]
			[prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
			      [mind-wait_to_activate mind learned_reactive physical look_up 1 [degree_to_rad 500.0]]
			      [print 'activated look_up']
			      [= patience [- patience 1]]
			      ]
		      [prog [= patience 0]
			    [= my_current_object [visual_objects_contain_object_type [get_visual_objects mind] desired_object_type] ]
			    [have this-resource think_to_self 'found' my_current_object ]
			    ]]]]]]]
      [have this-resource think_to_self 'finished searching vertically']]]]


[deframe search_for_resource [traced_resource] []
  [new []
       [construct traced_resource `search_for
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[patience 30]]
			    [have this-resource think_to_self 'search_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']

			      [if [null [get_visual_objects mind]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind learned_reactive physical turn_left 1 [degree_to_rad 400.0]]
				   ]
				[if [null [lookup_visual_object [get_visual_objects mind] desired_object]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get_visual_objects mind]]
					  [mind-wait_to_activate mind learned_reactive physical turn_left 1 [degree_to_rad 400.0]]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[have this-resource think_to_self 'found it!']]]]]
			    [have this-resource think_to_self 'finished searching']]]]]
       nil]]



[defunk demo_hold [object_name]
  [print 1]
  [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_for object_name]
  [print 2]
  [while [null [have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
			  resource `look_for] lookup `my_current_object]]
    [sleep 3]]
  [print 4]
  [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `hold_with_right_hand 
	[have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
		   resource `look_for] lookup `my_current_object]]]


[deframe pick_up_loaf_and_butter_resource [traced_resource] []
  [new []
       [construct traced_resource `pick_up_loaf_and_butter
		  [funk []
			[have this-resource think_to_self 'Pick up loaf and butter is starting.']
			[have this-resource pick_up_loaf_and_butter]]]
       nil]]

[deftypefunk pick_up_loaf_and_butter_resource execute pick_up_loaf_and_butter []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [if [null  [string-contains [get [get_right_hand_object_name mind] as-string] 'loaf']]
	[prog 
	      [mind-wait_to_activate mind learned_reactive physical look_for_vertically `loaf]
	      [while [null [have [get [get [get mind layer `learned_reactive] agency `physical] 
				      resource `look_for_vertically] lookup `my_current_object]]
		[sleep 3]]
	      [mind-wait_to_activate mind learned_reactive physical hold_with_right_hand  
				     [have [get [get [get mind layer `learned_reactive] agency `physical] 
						resource `look_for_vertically] lookup `my_current_object]]]]

    [if [null [string-contains [get [get_left_hand_object_name mind] as-string] 'butter']]
	[prog [mind-wait_to_activate mind learned_reactive physical look_for_vertically `butter]
	      [while [null [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
							    resource `look_for_vertically] lookup `my_current_object]as-string] 'butter']]
		[sleep 3]]
	      [mind-wait_to_activate mind learned_reactive physical hold_with_left_hand 
				     [have [get [get [get mind layer `learned_reactive] agency `physical] 
						resource `look_for_vertically] lookup `my_current_object]]]]]]


[deframe make_toast_resource [traced_resource] []
  [new []
       [construct traced_resource `make_toast
		  [funk []
			[have this-resource make_toast]]]
       nil]]

[deftypefunk make_toast_resource execute make_toast []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [print [get_left_hand_object_name mind]]
    [print [get_right_hand_object_name mind]]
    [if [null [and [string-contains [get [get_left_hand_object_name mind] as-string]'butter']
		      [string-contains [get [get_right_hand_object_name mind] as-string] 'loaf']]]
	[mind-wait_to_activate mind learned_reactive physical pick_up_loaf_and_butter]]
    [while [null [and [string-contains [get [get_left_hand_object_name mind] as-string]'butter']
		      [string-contains [get [get_right_hand_object_name mind]as-string] 'loaf']]]
      [sleep 3]]
    [mind-wait_to_activate mind learned_reactive physical level_pitch]
    [print 'leveling pitch']
    [mind-wait_to_activate mind learned_reactive physical move_backward 1 150]
    [print 'moving backward']
    [mind-wait_to_activate mind learned_reactive physical look_for `knife]    
    [while [or [null [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
				     resource `look_for] lookup `my_current_object]]]
	       [null [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
					 resource `look_for] lookup `my_current_object]as-string] 'knife']]]
      [print 'looking for knife, sleeping while waiting']
      [sleep 5]]
    [mind-wait_to_activate mind learned_reactive physical look_for `table]
    [while [or [null [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
				     resource `look_for] lookup `my_current_object]]]
	       [null [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
					 resource `look_for] lookup `my_current_object]as-string] 'table']]]
      [print 'looking for table, sleeping while waiting']
      [sleep 5]]
    [if [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
					 resource `look_for] lookup `my_current_object]as-string] 'table']
	[mind-wait_to_activate mind learned_reactive physical walk_directly_towards  
			       [have [get [get [get mind layer `learned_reactive] agency `physical] 
					  resource `look_for] lookup `my_current_object]]
      [have this-resource think_to_self 'not doing anything because cannot find table']]

    [mind-wait_to_activate mind learned_reactive physical use_left_hand [have [get [get [get mind layer `learned_reactive] agency `physical] resource `look_for] lookup `my_current_object] `put_on ]
      [mind-wait_to_activate mind learned_reactive physical look_for `knife]    
      [while [or [null [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
				     resource `look_for] lookup `my_current_object]]]
	       [null [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
					 resource `look_for] lookup `my_current_object]as-string] 'knife']]]
      [sleep 5]]
    [if [string-contains [get [have [get [get [get mind layer `learned_reactive] agency `physical] 
					 resource `look_for] lookup `my_current_object]as-string] 'knife']
	[mind-wait_to_activate mind learned_reactive physical hold_with_left_hand `knife]
      [have this-resource think_to_self 'not doing anything because cannot find knife']]
        [mind-wait_to_activate mind learned_reactive physical slice_toast]
    ]]





'************************************unused resources**********************************************'

[deframe walk_towards_resource [traced_resource] []
  [new []
       [construct traced_resource `walk_towards
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
			  [labels [[cautiously_walk []
						    [cond [[and [null [have this check_obstacle]] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							   [prog [mind-wait_to_activate mind learned_reactive physical move_forward 1]
								 [cautiously_walk]]]
							  [[> [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]
							 nil]
							  [[and [have this check_obstacle] 
								[< [get [get this body] arm_length] [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							   [mind-wait_to_activate mind learned_reactive physical avoid_obstacle desired_object [have this check_obstacle]]]
							  [t
							   [print 'weird, no conditions applied']]]]
				   [cautiously_walk]]]]]]
       
       
       nil]]

[deframe avoid_obstacle_resource [traced_resource] []
  [new []
       [construct traced_resource `avoid_obstacle
		  [funk [desired_object obstacle]
			[let* [[body [get this body]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_activate mind learned_reactive physical center_body_on desired_object]
			  [labels [[walk_around [if_left]
						[mind-wait_to_activate mind learned_reactive physical center_body_on obstacle]
						[let [[patience 30]]
						  [if if_left
						      [prog [mind-wait_to_activate mind learned_reactive physical turn_right 5]
							    [while [and [have this check_obstacle desired_object] [> patience 0]]
							      [mind-wait_to_activate mind learned_reactive physical move_forward 3]
							      [mind-wait_to_activate mind learned_reactive physical center_head_on obstacle]
							      [let [[distance [have [have [get_visual_objects mind] lokup desired_object] lookup `distance]]]
								[cond [[> distance 8]
								       [mind-wait_to_activate mind learned_reactive physical turn_left 2]]
								      [[> distance 2]
								       [mind-wait_to_activate mind learned_reactive physical turn_right 2]]
								      [t
								       [mind-wait_to_activate mind learned_reactive physical move_forward 2]]]
								[mind-wait_to_activate mind learned_reactive physical search_for desired_object]
								[= patience [patience -1]]]]]
						    [prog [mind-wait_to_activate mind learned_reactive physical turn_left 5]
							  [while [and [have this check_obstacle desired_object] [patience >0]]
							    [mind-wait_to_activate mind learned_reactive physical move_forward 3]
							    [mind-wait_to_activate mind learned_reactive physical center_head_on obstacle]
							    [let [[distance [have [lookup_visual_object [get_visual_objects mind] desired_object] lookup `distance]]]
							      [cond [[> distance 8]
								     [mind-wait_to_activate mind learned_reactive physical turn_right 2]]
								    [[> distance 2]
								     [mind-wait_to_activate mind learned_reactive physical turn_left 2]]
								    [t
								     [mind-wait_to_activate mind learned_reactive physical move_forward 2]]]
							      [mind-wait_to_activate mind learned_reactive physical search_for desired_object]
							      [= patience [patience -1]]]]]]]]]
				  [walk_around [> 0 [have [lookup_visual_object [get_visual_objects mind] obstacle] lookup `retina_position_horizontal]]]]
			  [mind-wait_to_activate mind learned_reactive physical walk_directly_towards desired_object]]]]
		  
		  nil]]



'***************************************************************************************************************'

[deframe learned_reactive_physical_agency [agency] []
  [new []
       [construct agency `physical]
       
       [have this add_resource [new look_up_resource]]
       [have this add_resource [new look_down_resource]]
       [have this add_resource [new look_left_resource]]
       [have this add_resource [new look_right_resource]]
       [have this add_resource [new turn_right_resource]]
       [have this add_resource [new turn_left_resource]]
       [have this add_resource [new move_forward_resource]]			
       [have this add_resource [new move_backward_resource]]
       [have this add_resource [new empty_left_hand_resource]]
       [have this add_resource [new empty_right_hand_resource]]
       [have this add_resource [new hold_with_right_hand_resource]]
       [have this add_resource [new hold_with_left_hand_resource]]
       [have this add_resource [new learned_open_fridge_resource]]
       [have this add_resource [new slice_toast_resource]]
       [have this add_resource [new center_body_on_resource]]
       [have this add_resource [new walk_towards_resource]]
       [have this add_resource [new walk_directly_towards_resource]]
       [have this add_resource [new search_for_resource]]
       [have this add_resource [new avoid_obstacle_resource]]
       [have this add_resource [new look_for_resource]]
       [have this add_resource [new look_for_vertically_resource]]
       [have this add_resource [new level_pitch_resource]]
       [have this add_resource [new track_mother_resource]]
       [have this add_resource [new look_carefully_for_resource]]
       [have this add_resource [new pick_up_loaf_and_butter_resource]]  
       [have this add_resource [new make_toast_resource]]
       this]]




