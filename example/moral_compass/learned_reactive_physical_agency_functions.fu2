'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'
ideas: look carefully for - move to a different place in order to see

'


[defunk l []
  [load 'example/moral_compass/learned_reactive_physical_agency_functions.fu2']]
[globalize step_factor 10]
[globalize arm_length 4.5]

'**************** functions****************'

`[deftypefunk mind get look_for-current_object []
   [have [get [get [get this layer `learned_reactive] agency `physical] 
	      resource `look_for] lookup `my_current_object]]



[deftypefunk learned_reactive_physical_agency get look_for-current_object []
  [have [get this resource `look_for] lookup `my_current_object]]



`[deftypefunk mind get resource_achieved [resource]
   [have [get [get [get this layer `learned_reactive] agency `physical] 
	      resource resource] lookup `achieved]]

`[defunk get_visual_objects [mind]
   [if [get mind perception]
       [get [get mind perception] visual_objects]]]


[deftypefunk learned_reactive_physical_agency get visual_objects []
  [if [get [get this mind] perception]
      [get [get [get this mind] perception] visual_objects]]]



`[deftypefunk mind get resource_achieved [resource]
   [have [get [get [get this layer `learned_reactive] agency `physical] 
	      resource resource] lookup `achieved]]

`[defunk get_visual_objects [mind]
   [if [get mind perception]
       [get [get mind perception] visual_objects]]]


[deftypefunk learned_reactive_physical_agency get visual_objects []
  [if [get [get this mind] perception]
      [get [get [get this mind] perception] visual_objects]]]


`[defunk get_left_hand_object_name [mind]
   [if [get mind perception]
       [get [get mind perception] left_hand_object_name]]]

[deftypefunk learned_reactive_physical_agency get left_hand_object_name []
  [if [get [get this mind] perception]
      [prog [print 'debug']
	    [get [get [get this mind] perception] left_hand_object_name]]]]

`[defunk get_right_hand_object_name [mind]
   [if [get mind perception]
       [get [get mind perception] right_hand_object_name]]]


[deftypefunk learned_reactive_physical_agency get right_hand_object_name []
  [if [get [get this mind] perception]
      [get [get [get this mind] perception] right_hand_object_name]]]

`[defunk get_neck_pitch [mind]
   [if [get mind perception]
       [have [have [have [get [get mind perception] proprioceptual_frame] lookup `neck] lookup `orientation] lookup `pitch]]]


[deftypefunk learned_reactive_physical_agency get neck_pitch []
  [if [get [get this mind] perception]
      [have [have [have [get [get [get this mind] perception] proprioceptual_frame] lookup `neck] lookup `orientation] lookup `pitch]]]

`[defunk get_neck_heading [mind]
  [if [get mind perception]
      [have [have [have [get [get mind perception] proprioceptual_frame] lookup `neck] lookup `orientation] lookup `heading]]]

[deftypefunk learned_reactive_physical_agency get neck_heading []
  [if [get [get this mind] perception]
      [have [have [have [get [get [get this  mind] perception] proprioceptual_frame] lookup `neck] lookup `orientation] lookup `heading]]]

`[defunk get_object_distance [mind object_name]
[have [lookup_visual_object [get [get this agency] visual_objects] object_name] lookup `distance]]


[deftypefunk learned_reactive_physical_agency get object_distance [object_name]
   [have [lookup_visual_object [get this visual_objects] object_name] lookup `distance]]

`[defunk get_object_orientation [mind object_name]
  [print 'get_object_orientation']
  [have [lookup_visual_object [get [get this agency] visual_objects] object_name] lookup `orientation]]

[deftypefunk learned_reactive_physical_agency get object_orientation [object_name]
  [have [lookup_visual_object [get this visual_objects] object_name] lookup `orientation]]




'***************'

[defunk list-contains_substring_multiple_match [sequence subexp]
  [let [[match [new list]]]
    [mapc [funk [exp]
		[if [string-contains [get exp as-string] [get subexp as-string]]
		    [have match add exp]]]
	  sequence]
    [format stdout 'match' match]
    match
    ]]

[deftypefunk learned_reactive_physical_agency execute find_closest_object [list_of_obj]
  [let [[obj []]]
    [mapc [funk [object_name]
		[if obj
		    [if [< [have [lookup_visual_object [get this visual_objects] object_name] lookup `distance]
			   [have [lookup_visual_object [get this visual_objects] obj] lookup `distance]]
			[= obj object_name]]
		  [= obj object_name]]]
	  list_of_obj]
    obj]]

[defunk list-contains_substring [sequence subexp]
  [let [[match []]]
    [mapc [funk [exp]
		[if [string-contains [get exp as-string] [get subexp as-string]]
		    [= match exp]]]
	  sequence]
    match]]

[defunk visual_objects_contain_physical_object_type [visual_objects physical_object_type] 
  [let [[list_of_object_names
	 [mapcar      [funk [object]
			    [have object lookup `phenomenal_name]]
		      visual_objects]]]
    
    
    [list-contains_substring list_of_object_names physical_object_type]
    ]]

[deftypefunk learned_reactive_physical_agency get visual_objects_contain_physical_object_type_closest_match [visual_objects physical_object_type] 
  [let [[list_of_object_names
	 [mapcar      [funk [object]
			    [have object lookup `phenomenal_name]]
		      visual_objects]]]
    
    
    [have this find_closest_object [list-contains_substring_multiple_match list_of_object_names physical_object_type]]
    ]]


[defunk lookup_visual_object [visual_objects object_name]
  [let [[ match nil]]
    [mapc [funk [object]
		[if [eq [have object lookup `phenomenal_name] object_name]
		    [= match object]]]
		visual_objects]
  match]]



[defunk get_object_x_orientation [visual_objects object_name] 
  [have [have visual_objects lookup object_name] lookup `orientation]]


'*******************resourece functions***********************'

[deftypefunk use_left_hand_resource execute use_left_hand [target actions]
  [format stdout  'use_left_hand' target actions]
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [print 'in the middle of use left hand']
    [mind-wait_to_activate mind builtin_reactive physical use_left_hand target actions]]]

[deftypefunk use_right_hand_resource execute use_right_hand [target actions]
  [format stdout ' use right hand' actions target]
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [print 'in the middle of use right hand']
    [mind-wait_to_call mind builtin_reactive physical use_right_hand target actions]]]



[deftypefunk hold_with_right_hand_resource execute hold_with_right_hand [target]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [arm_length       2.5]]
        [have this-resource think_to_self 'hold with right hand is starting' target]
    [labels [[try_to_hold []
			  [print arm_length]
			  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			  [print 'try to hold']
			  [if [null [eq target [get [get this agency] right_hand_object_name]]]
			      [if [get [get this agency] visual_objects]
				  [if [lookup_visual_object [get [get this agency] visual_objects] target]
				      [prog [if [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] 
						[prog [if [have [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] lookup `in]
							  [let [[prep_obj [car [have [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] lookup `in]]]]
							    [if [have [get prep_obj as-string] contains 'fridge']
								[= arm_length 4.5]]]]
						      ]]
					    
					    [if [>  arm_length [have [lookup_visual_object [get [get this agency] visual_objects] target]lookup `distance]]
						[if [null [get [get this agency] right_hand_object_name]]
						    [mind-wait_to_call mind builtin_reactive physical pick_up_with_right_hand target]
						  [prog [mind-wait_to_call mind learned_reactive physical empty_right_hand]
							[try_to_hold]]]
					      [prog 
					       [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
					       
					       [try_to_hold]]]]
				    [prog 
				     [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
				     
				     [try_to_hold]]]
				[prog 
				 [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
				 
				 [try_to_hold]]]]
			  ]]
	    [try_to_hold]]]]

[deftypefunk hold_with_left_hand_resource execute hold_with_left_hand [target]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [arm_length       2.5]]
        [have this-resource think_to_self 'hold with left hand is starting' target]
    [labels [[try_to_hold []
			  [print arm_length]
			  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			  [print 'try to hold']
			  [if [null [eq target [get [get this agency] left_hand_object_name]]]
			      [if [get [get this agency] visual_objects]
				  [if [lookup_visual_object [get [get this agency] visual_objects] target]
				      [prog [if [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] 
						[prog [if [have [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] lookup `in]
							  [let [[prep_obj [car [have [have [lookup_visual_object [get [get this agency] visual_objects] target] lookup `preposition_frame] lookup `in]]]]
							    [if [have [get prep_obj as-string] contains 'fridge']
								[= arm_length 4.5]]]]
						      ]]
					    
					    [if [>  arm_length [have [lookup_visual_object [get [get this agency] visual_objects] target]lookup `distance]]
						[if [null [get [get this agency] left_hand_object_name]]
						    [mind-wait_to_call mind builtin_reactive physical pick_up_with_left_hand target]
						  [prog [mind-wait_to_call mind learned_reactive physical empty_left_hand]
							[try_to_hold]]]
					      [prog 
					       [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
					       
					       [try_to_hold]]]]
				    [prog 
				     [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
				     
				     [try_to_hold]]]
				[prog 
				 [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
				 
				 [try_to_hold]]]]
			  ]]
	    [try_to_hold]]]]

'idea: whenever walk_directly_towards stops moving forward, it returns failure; when it fails, activate stand_in_front_of'

`[deftypefunk hold_with_left_hand_resource execute hold_with_left_hand [target]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [arm_length       2.5]]

    [if [or [have [get target as-string] contains 'fridge']
	    [have [get target as-string] contains 'oven']]
	[= arm_length 4.5]]
    [if [have [get target as-string] contains 'table']
	[= arm_length 3.5]]

    [have this-resource think_to_self 'hold with left hand is starting' target]
    [labels [[try_to_hold []
			  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			  [print 'try to hold']
			   [if [null [eq target [get [get this agency] left_hand_object_name]]]
			
			      [if [get [get this agency] visual_objects]
				  [if [lookup_visual_object [get [get this agency] visual_objects] target]
				      [if [> arm_length [have [lookup_visual_object [get [get this agency] visual_objects] target]lookup `distance]]
					  [if [null [get [get this agency] left_hand_object_name]]
					      [mind-wait_to_call mind builtin_reactive physical pick_up_with_left_hand target]
					    [prog [mind-wait_to_call mind learned_reactive physical empty_left_hand]
						  [try_to_hold]]]
					[prog 
					 [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
					 
					 [try_to_hold]]]
				[prog 
				 [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
				 
				 [try_to_hold]]]
				[prog 
				 [mind-wait_to_call mind learned_reactive physical stand_in_front_of target]
			     
				 [try_to_hold]]]]
			  ]]
	    [try_to_hold]]]]


[deftypefunk look_right_resource execute look_right [steps speed]
  [format stdout ' look_right']
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [counter            0]]
    [have this-resource think_to_self 'Looking right is starting.speed:' speed ' degrees/sec' [/ speed step_factor] 'degrees/step']
    [mind-wait_to_activate mind builtin_reactive physical look_right_start speed]
    [while [< counter steps]
      [wait-for-trigger [get mind time_step_trigger]] 
      [= counter [+ counter 1]]
      ]
    [mind-wait_to_call mind builtin_reactive physical look_right_stop]]
  ]

[deftypefunk look_left_resource execute look_left [steps speed]
  
  [format stdout ' look_left']
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [counter            0]]
    [have this-resource think_to_self 'Looking left is starting.speed:' speed ' degrees/sec' [/ speed step_factor] 'degrees/step']
  [mind-wait_to_activate mind builtin_reactive physical look_left_start speed]
  [while [< counter steps]
    [wait-for-trigger [get mind time_step_trigger]] 
    [= counter [+ counter 1]]
    ]
  [mind-wait_to_activate mind builtin_reactive physical look_left_stop]]
  
  [print 'achieved']]

[deftypefunk level_pitch_resource execute level_pitch[]
  
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [let[[level_neck_pitch [- 0 15]]
	 [slightly_looking_up 5]
	 [slightly_looking_down [- 0 24]]]
      [labels [[adjust_neck []
			    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			    [cond [[ > [- [get [get this agency] neck_pitch] level_neck_pitch] slightly_looking_up]
				   [prog [have this-resource think_to_self 'looking down, pitch = '[get [get this agency] neck_pitch]]
					[mind-wait_to_call mind learned_reactive physical look_down 1 
							   [* [ abs [get [get this agency] neck_pitch]] step_factor]]]]
				  [[ < [- [get [get this agency] neck_pitch] level_neck_pitch] slightly_looking_down]
				   [prog [have this-resource think_to_self 'looking up, pitch = ' [get [get this agency] neck_pitch]]
					 [mind-wait_to_call mind learned_reactive physical look_up 1  [* [ abs [get [get this agency] neck_pitch]] step_factor]]
					 [adjust_neck]]]
				  [t
				   [have this-resource think_to_self 'pitch leveled']]]]]
	      [adjust_neck]]]]
  [have this-resource think_to_self 'leveling pitch finished']]

[deftypefunk look_at_floor_resource execute look_at_floor[]
  
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	  [name  [get body name]]]
    [let[[floor_pitch [- 0 40]]
	 [off_set          10]]
      [labels [[adjust_neck []
			    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			    [if [> [get [get this agency] neck_pitch][+ 2 floor_pitch]]
				[prog [have this-resource think_to_self 'looking down, pitch = '[get [get this agency] neck_pitch]]
				      [mind-wait_to_call mind learned_reactive physical look_down 1 
							 [* [abs [- [get [get this agency] neck_pitch] floor_pitch ]] step_factor]]
				      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				      [adjust_neck]]
			      [have this-resource think_to_self 'already looking at floor']]]]
	      [adjust_neck]]]]
  [have this-resource think_to_self 'looking at floor finished']]

[deftypefunk look_at_sky_resource execute look_at_sky[]
  
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	  [name  [get body name]]]
    [let[[sky_pitch 28]
	 [off_set          10]]
      [labels [[adjust_neck []
			    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			    [if [> [get [get this agency] neck_pitch] [-  sky_pitch 2]]
				[prog [have this-resource think_to_self 'looking up, pitch = '[get [get this agency] neck_pitch]]
				      [mind-wait_to_call mind learned_reactive physical look_up1 
							 [* [abs [- [get [get this agency] neck_pitch] sky_pitch ]] step_factor]]
				      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				      [adjust_neck]]
			      [have this-resource think_to_self 'already looking at sky']]]]
	      [adjust_neck]]]]
  [have this-resource think_to_self 'looking at sky finished']]

[deftypefunk align_body_with_neck_resource execute align_body_with_neck []
  
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
    [let[[init_diff [get [get this agency] neck_heading]]
	 [slightly_looking_left 8]
	 [slightly_looking_right [- 0 8]]]
      [labels [[adjust_neck [patience]
			    [print 'adjusting neck']
			    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			    [if [> patience 0]
				[cond [[ > [get [get this agency] neck_heading] slightly_looking_left]
				       [prog [print 'my head is facing the left']
					     [mind-wait_to_call mind learned_reactive physical look_right 1 [* 10 [abs [get [get this agency] neck_heading]]]]
					     
					     [adjust_neck [- patience 1]]]]
				      [[ < [get [get this agency] neck_heading] slightly_looking_right]
				       [prog [print 'my head is facing the right']
					     [mind-wait_to_call mind learned_reactive physical look_left 1 [* 10 [abs [get [get this agency] neck_heading]]]]
					     
					     [adjust_neck [- patience 1]]]]
				      [t
				       [have this-resource think_to_self 'I am looking forward']]]
			      [have this-resource think_to_self 'I give up']]]]
	       
	      [adjust_neck 15]
	      [cond [[ > [- init_diff 0] slightly_looking_left]
		     [mind-wait_to_call mind learned_reactive physical turn_left 3 [/ [* step_factor init_diff] 3]]]
		    [[ < [- init_diff 0] slightly_looking_right]
		     [mind-wait_to_call mind learned_reactive physical turn_right 3[/ [* step_factor [abs init_diff]] 3]]]
		    [t
		     [have this-resource think_to_self 'no need to turn']]]
	      
	      [have this-resource think_to_self 'finished']]]]]



[deftypefunk learned_open_fridge_resource execute learned_open_fridge []
  
  
			[let* [[body [get this body]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [print 'now']
			  [mind-wait_to_call mind learned_reactive physical look_for `fridge]
			  [print 'now1']
			  [let[[ fridge [have [get [get [get mind layer `builtin_reactive] agency `physical] resource `look_for] lookup `my_current_object]]]
			    [if [get [get this agency] visual_objects]
				[if [lookup_visual_object [get [get this agency] visual_objects] fridge]
				    [if [> [get [get this body] arm_length] [have [lookup_visual_object [get [get this agency] visual_objects] fridge] lookup  `distance]]
					[mind-wait_to_call mind builtin_reactive physical open_fridge]
				      [prog 
				       [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
				       [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
				  [prog 
				   [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
				   [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
			      [prog 
			       [mind-wait_to_call mind learned_reactive physical walk_directly_towards fridge]
			       [mind-wait_to_call mind builtin_reactive physical open_fridge]]]
			    
			    ]]]



'***************************Centering************************************'
[deftypefunk center_body_horizontally_on_resource execute center_body_horizontally_on [desired_object]
  
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [have this-resource think_to_self 'center_body_horizontally_on_object activated' desired_object]
    [labels[[turn_left_and_right []
				 
				  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				  [if [get [get this agency] visual_objects]
				      [if [lookup_visual_object [get [get this agency] visual_objects] desired_object] 
					  [let [[retina_position_horizontal [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_horizontal]]
						[retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]
						[distance                   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
					    [cond [[>  retina_position_horizontal 0.02]
						   [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
							 [mind-wait_to_call mind learned_reactive physical turn_right 1 [+ 55.0 [* 600 retina_position_horizontal]]]
							 [have this-resource think_to_self   'i turned right']
							 
							 [turn_left_and_right]]]
						  [[< retina_position_horizontal [- 0 0.02]]
						   [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
							 [mind-wait_to_call mind learned_reactive physical turn_left 1 [+ 55.0 [ abs [* 600 retina_position_horizontal]]]]							 
							 [have this-resource think_to_self 'i turned left']
							 
							 [turn_left_and_right]]]
						  [t
						   [have this-resource think_to_self 'centered' retina_position_horizontal]]]]
					[prog [have this-resource think_to_self   'no objects in view']
					      [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					      [turn_left_and_right]]]
				    [prog [have this-resource think_to_self   'my_object not in view']
					  [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					  [turn_left_and_right]]]]
	    ]
	    [turn_left_and_right]]]]

[deftypefunk center_body_on_resource execute center_body_on [desired_object]
  
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 ]
    [have this-resource think_to_self 'center_body_on_object activated' desired_object]
    [labels[[look_up_and_down []
			      [turn_left_and_right]
			      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			      [if [get [get this agency] visual_objects]
				  [if [lookup_visual_object [get [get this agency] visual_objects] desired_object] 
				      [let [[retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]
					    [distance                   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
					[cond [[>  retina_position_vertical [+ 0.15 [/ distance 100]]]
					       [prog [have this-resource think_to_self   'y too positive' retina_position_vertical]
						     [mind-wait_to_call mind builtin_reactive physical look_up_start [+ 70.0 [* 200 retina_position_vertical]]]
						     [have this-resource think_to_self   'i looked up']
						     
						     [look_up_and_down]]]
					      [[< retina_position_vertical [- 0.15 [+ 0.15 [/ distance 100]]]]
					       [prog [have this-resource think_to_self   'y too negative' retina_position_vertical]
						     [mind-wait_to_call mind builtin_reactive physical look_down_start [+ 70.0 [- 0 [* 200 retina_position_vertical]]]]
						     [have this-resource think_to_self 'i looked down']
						     
						     [look_up_and_down]]]
					      [t
					       [prog [mind-wait_to_call mind builtin_reactive physical look_down_stop]
						     [mind-wait_to_call mind builtin_reactive physical look_up_stop]
						     [have this-resource think_to_self 'centered vertically' retina_position_vertical]]]]]
				    [have this-resource think_to_self   'my object not in view']
				    ]
				[have this-resource think_to_self   'no object in view']
				]]
	    [turn_left_and_right []
				 
				  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				  [if [get [get this agency] visual_objects]
				      [if [lookup_visual_object [get [get this agency] visual_objects] desired_object] 
					  [let [[retina_position_horizontal [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_horizontal]]
						[retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]
						[distance                   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
					    [cond [[>  retina_position_horizontal 0.015]
						   [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
							 [mind-wait_to_call mind builtin_reactive physical turn_right_start [+ 60.0 [* 700 retina_position_horizontal]]]
							 [have this-resource think_to_self   'i turned right']
							 
							 [turn_left_and_right]]]
						  [[< retina_position_horizontal [- 0 0.015]]
						   [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
							 [mind-wait_to_call mind builtin_reactive physical turn_left_start [+ 60.0 [ abs [* 700 retina_position_horizontal]]]]							 
							 [have this-resource think_to_self 'i turned left']
							 
							 [turn_left_and_right]]]
						  [t
						   [prog [mind-wait_to_call mind builtin_reactive physical turn_left_stop]
							 [mind-wait_to_call mind builtin_reactive physical turn_right_stop]
							 [have this-resource think_to_self 'centered' retina_position_horizontal]]]]]
					[prog [have this-resource think_to_self   'no objects in view']
					      [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					      [turn_left_and_right]]]
				    [prog [have this-resource think_to_self   'my_object not in view']
					  [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					  [turn_left_and_right]]]]
	    ]
	   [look_up_and_down]]]]


[deftypefunk center_head_on_resource execute center_head_on [desired_object]
  [let* [[body [get this body]]
	 [mind  [get body mind]] 
	 [name  [get body name]]
	 [arm_length         3]]

    

    [have this-resource think_to_self 'center_head_on_object activated' desired_object]
    [labels[ [look_up_and_down []
			       [look_left_and_right]
			       [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			       [if [get [get this agency] visual_objects]
				   [if [lookup_visual_object [get [get this agency] visual_objects] desired_object] 
				       [let [
					     [retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]
					     [distance                   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
					 [cond [[>  retina_position_vertical [+ 0.4 [/ 0.3 distance]]]
						[prog [have this-resource think_to_self   'y too positive' retina_position_vertical]
						      
						      [mind-activate mind builtin_reactive physical look_up_start  [min 200.0 [* 200 retina_position_vertical]]]
						      [have this-resource think_to_self   'i looked up']
						      
						      [look_up_and_down]]]
					       [[< retina_position_vertical [- 0 [+ 0.4 [/ 0.3 distance]]]]
						[prog [have this-resource think_to_self   'y too negative' retina_position_vertical 'compared to' [- 0 [+ 0.3 [/ 0.3 distance]]]]
						      
						      [mind-activate mind builtin_reactive physical look_down_start [min 200.0 [abs [* 200 retina_position_vertical]]]] 
						      [have this-resource think_to_self 'i looked down']
						      
						      [look_up_and_down]]]
					       [t
						[prog  
						 [mind-activate mind builtin_reactive physical look_down_stop]
						 [mind-activate mind builtin_reactive physical look_up_stop]
						 [have this-resource think_to_self 'centered vertically']]]]]
				     [have this-resource think_to_self   'no objects in view']
				     ]
				 [have this-resource think_to_self   'my_object not in view']]]
	     [look_left_and_right []
				  `[print 'here']
				  
				  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				  [if [get [get this agency] visual_objects]
				      [if [lookup_visual_object [get [get this agency] visual_objects] desired_object] 
					  [let [[retina_position_horizontal [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_horizontal]]
						[retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]
						[distance                   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
					    [cond [[>  retina_position_horizontal [min [* 0.01  distance] 0.01]]
						   [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
							 
							 [mind-wait_to_call mind builtin_reactive physical look_right_start [abs [* step_factor [/ [* 600  retina_position_horizontal] distance]]]]
							 [have this-resource think_to_self   'I looked right']
							 
							 [look_left_and_right]]]
						  [[< retina_position_horizontal [max [- 0 [* 0.01  distance]][- 0 0.01]]]
						   [prog [have this-resource think_to_self   'x too negative'   retina_position_horizontal]
							 
							 [mind-wait_to_call mind builtin_reactive physical look_left_start [abs [* step_factor [/ [* 600  retina_position_horizontal] distance]]]]
							 [have this-resource think_to_self 'I looked left']
							 
							 [look_left_and_right]]]
						  [t
						   [prog  
						    [mind-activate mind builtin_reactive physical look_left_stop]
						    [mind-activate mind builtin_reactive physical look_right_stop]
						    [have this-resource think_to_self 'centered horizontally' retina_position_horizontal]]]]
					    ]
					
					[prog [have this-resource think_to_self   'no objects in view']
					      [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					      [look_left_and_right]]]
				    [prog [have this-resource think_to_self   'my_object not in view']
					  [mind-wait_to_call mind learned_reactive physical search_for desired_object]
					  [look_left_and_right]]]]]
	   [look_up_and_down]]]]


'**********************Walk and Stand********************************'

`[deftypefunk walk_directly_towards_resource execute walk_directly_towards  [desired_object]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [arm_length 5]]
    
    [if [or [have [get desired_object as-string] contains 'fridge']
	    [have [get desired_object as-string] contains 'oven']]
	[= arm_length 5.5]]
    
    [have this-resource think_to_self 'walk_directly_towards activated' desired_object]
    [labels [[walk []
		   [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
		   [if [get [get this agency] visual_objects]
		       [if [lookup_visual_object [get [get this agency] visual_objects] desired_object]
			   [let [[distance [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
			     [have this-resource think_to_self 'current distance: ' distance]
			     [if [> arm_length distance]
				 [have this-resource think_to_self 'object within arm_length now']
			       [prog [have this-resource think_to_self 'yes object, activating center on']
				     [mind-wait_to_call mind learned_reactive physical center_body_on desired_object]
				     [have this-resource think_to_self 'activating move_forward']
				     [mind-wait_to_call mind learned_reactive physical move_forward 1 [* distance 3]]
				     [have this-resource think_to_self 'distance after walking: ' [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]
				     [walk]]]]
			 [prog [have this-resource think_to_self 'dont have desired object, activating search']
			       [mind-wait_to_call mind learned_reactive physical search_for desired_object]
			       [walk]]]
		     [prog [have this-resource think_to_self 'dont have objects, activating search']
			   [mind-wait_to_call mind learned_reactive physical search_for desired_object]
			   [walk]
			   ]]]]
	    [walk]]]]

'[if [> distance [+ arm_length 1]]
					[mind-activate mind learned_reactive physical move_forward  [get [/ distance 10] as-integer] 10]
				      [mind-activate mind learned_reactive physical move_forward 1 [* [- distance arm_length] 11]]]'

[deftypefunk walk_directly_towards_resource execute walk_directly_towards  [desired_object]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [arm_length 2.5]
	 [in_fridge  []]]

    [if [or [have [get desired_object as-string] contains 'fridge']
	    [have [get desired_object as-string] contains 'oven']]
	[= arm_length 4.5]]
    [if [have [get desired_object as-string] contains 'table']
	[= arm_length 3.5]]
    
    [have this-resource think_to_self 'walk_continously_towards activated' desired_object]
    [labels [[start_off []  
		       [print 'startoff']
		       [if [get [get this agency] visual_objects]
			   [if [lookup_visual_object [get [get this agency] visual_objects] desired_object]
			       [prog 
				[if [and [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `preposition_frame] 
					 [have [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `preposition_frame] lookup `in]]
				    [let [[prep_obj [car [have [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `preposition_frame] lookup `in]]]]
				      [if [have [get prep_obj as-string] contains 'fridge']
					  [prog [= arm_length 4.5]
						[= in_fridge  t]]]]]
				
				[let [[distance [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]]
				  [if [> arm_length distance]
				      [have this-resource think_to_self 'object within arm_length']
				    [prog
				     [mind-wait_to_call mind learned_reactive physical center_body_on desired_object]
				     [have this-resource think_to_self 'activating move_forward']
				     [mind-activate mind builtin_reactive physical move_forward_start 11]
				     [walk]]]]]
			     
			     [prog [have this-resource think_to_self 'dont have desired object, activating search']
				   [mind-wait_to_call mind learned_reactive physical search_for desired_object]
				   [start_off]]]  
			 [prog [have this-resource think_to_self 'dont have desired object, activating search']
			       [mind-wait_to_call mind learned_reactive physical search_for desired_object]
			       [start_off]]]]  
	     [walk []
		   [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
		   [if [get [get this agency] visual_objects]
		       [if [lookup_visual_object [get [get this agency] visual_objects] desired_object]
			   [let [[distance [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `distance]]
				 [retina_position_horizontal   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_horizontal]]
				 [retina_position_vertical   [have [lookup_visual_object [get [get this agency] visual_objects] desired_object] lookup `retina_position_vertical]]]
			     [have this-resource think_to_self 'current distance: ' distance]
			     [if [> arm_length distance]
				 [prog [have this-resource think_to_self 'object within arm_length now']
				       [mind-activate mind builtin_reactive physical move_forward_stop]
				       [mind-activate mind builtin_reactive physical turn_left_stop]
				       [mind-activate mind builtin_reactive physical turn_right_stop]
				      [mind-activate mind builtin_reactive physical look_up_stop]
				      [mind-activate mind builtin_reactive physical look_down_stop]]
			       [prog [have this-resource think_to_self 'yes object, activating center on']
				     [cond [[>  retina_position_horizontal 0.015]
					    [prog [have this-resource think_to_self   'x too positive' retina_position_horizontal]
						  [mind-activate mind builtin_reactive physical turn_right_start  [+ 40.0 [* 800 retina_position_horizontal]]]
						  [have this-resource think_to_self   'i turne right']]]
					   [[< retina_position_horizontal [- 0 0.015]]
					    [prog [have this-resource think_to_self   'x too negative' retina_position_horizontal]
						  [mind-activate mind builtin_reactive physical turn_left_start [+ 40.0 [ abs [* 800 retina_position_horizontal]]]]							 
						  [have this-resource think_to_self 'i turned left']
						  ]]
					   [t
					    [have this-resource think_to_self 'centered horizontally' retina_position_horizontal]]]
				     [cond [[>  retina_position_vertical [+ 0.4 [/ 0.3 distance]]]
					   [prog [have this-resource think_to_self   'y too positive' retina_position_vertical]
						 
						 [mind-activate mind builtin_reactive physical look_up_start [min 200.0 [* 200 retina_position_vertical]]]
						 [have this-resource think_to_self   'i looked up']
						 
						 ]]
					   [[< retina_position_vertical [- 0 [+ 0.4 [/ 0.3 distance]]]]
					    [prog [have this-resource think_to_self   'y too negative' retina_position_vertical 'compared to' [- 0 [+ 0.3 [/ 0.3 distance]]]]
						 
						  [mind-activate mind builtin_reactive physical look_down_start  [min 200.0 [abs [* 200 retina_position_vertical]]]] 
						  [have this-resource think_to_self 'i looked down']
						  
						  ]]
					   [t
					    [have this-resource think_to_self 'centered vertically']]]
				     
				     [walk]]]]
			 [prog [have this-resource think_to_self 'dont have desired object, activating search']
			       [mind-activate mind builtin_reactive physical move_forward_stop]
			       [mind-wait_to_call mind learned_reactive physical search_for desired_object]
			       [walk]]]
		    [prog [have this-resource think_to_self 'dont have objects, activating search']
			  [mind-activate mind builtin_reactive physical move_forward_stop]
			   [mind-wait_to_call mind learned_reactive physical search_for desired_object]
			   [walk]
			   ]]]]
    [start_off]]]]

[deftypefunk stand_in_front_of_resource execute  walk_forward_or_back [object]
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
    [if [null [or [get [get this agency] visual_objects] [lookup_visual_object [get [get this agency] visual_objects] object]]]
	[have this think_to_self 'cannot see object anymore']
      [prog [= current_distance [get [get this agency] object_distance object]]
	    [if [> [abs [- current_distance 5]] 1]
		[if [< current_distance 5]
		    [prog [print 'Its facing me, Im moving backward']
			  [mind-wait_to_call mind learned_reactive physical move_backward 1 [* step_factor [- 5 init_distance]]]
			  [have this-resource walk_forward_or_back object]]
		  [prog [print 'Its facing me, Im moving forward']
			[mind-wait_to_call mind learned_reactive physical move_forward 1 [* step_factor [- init_distance 5]]]
			[have this-resource walk_forward_or_back object]]]
	      [print 'at 5 meters away']]]]]]

[deftypefunk stand_in_front_of_resource execute  turn_for_fixed_angle [turn_right init_turning_angle]
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [desired_heading init_turning_angle]]
    [format stdout 'init_turning_angle' init_turning_angle 'd_heading' desired_heading]
    [if [null  turn_right] [= desired_heading [- 0 init_turning_angle]]]
    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
    [labels [[turn_left_and_right []
				  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				  [let [[heading [get [get this agency] neck_heading]]]
				    [format stdout 'init_turning_angle' init_turning_angle 'd_heading' desired_heading]
				    [cond 
					  [[< [-  heading  desired_heading]  [- 0 4]]
					   [prog [have this-resource think_to_self   'orientation too negative'  heading]
						 [mind-wait_to_call mind learned_reactive physical turn_right 1 [min 360 [* 9 [abs[-  heading  desired_heading] ]]]]
							 [have this-resource think_to_self   'I turned_right']
							 [mind-wait_to_call mind learned_reactive physical look_left 1 [min 360 [* 9 [abs [-  heading  desired_heading] ]]]]
							 
							 [turn_left_and_right]]]
					  [[> [-  heading  desired_heading] 4 ]
					   [prog [have this-resource think_to_self   'heading too positive' heading]
						 [mind-wait_to_call mind learned_reactive physical turn_left 1 [min 360 [* 9 [abs [-  heading  desired_heading]]]]]
						 [have this-resource think_to_self   'I turned_left']
						 [mind-wait_to_call mind learned_reactive physical look_right 1 [min 360 [* 9 [abs[-  heading  desired_heading] ]]]]
						 
						 [turn_left_and_right]]]
					  [t
					   [have this-resource think_to_self 'facing the right direction']]]
				    
				    ]]]
	    [turn_left_and_right]]]
  ]




'***************************Look carefully for********************'
[deftypefunk look_carefully_for_resource execute look_carefully_for [desired_physical_object_type]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [let [[patience 15]]
      [have this think_to_self 'look_carefully_for activated' desired_physical_object_type]
      [while [> patience 0]
	[have this think_to_self 'I still have ' patience 'patience']
	[wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
	[mind-wait_to_call mind learned_reactive physical level_pitch]
	`[print [get [get this agency] visual_objects]]
	`[print [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]
	[if [or [null [get [get this agency] visual_objects]]
		[null [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]]
	    [prog [have this think_to_self  'no objects in view']
		  [mind-wait_to_call mind learned_reactive physical look_at_floor]
		  [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
		  [if [or [null [get [get this agency] visual_objects]]
			  [null [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]]
		      [prog [have this think_to_self 'still no objects in view after looking down, preparing to look up']
			    [mind-wait_to_call mind learned_reactive physical look_at_sky]
			    [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			    [if [or [null [get [get this agency] visual_objects]] 
				    [null [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]] 
				[prog [have this think_to_self 'still no objects in view after looking up, preparing to level pitch and turn left']
				      [mind-wait_to_call mind learned_reactive physical level_pitch]
				      [mind-wait_to_call mind learned_reactive physical turn_left 1  200.0]
				      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				      [= patience [- patience 1]]]
			      [= patience 0]]] 
		    [= patience 0]]]
	  [= patience 0]]]
      [have this think_to_self 'finished looking carefully for']]]]




[deftypefunk stand_in_front_of_resource execute stand_in_front_of [init_object]
  [have this-resource think_to_self 'stand_in_front_of' init_object 'activated!']
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [object init_object]]
    
    [labels [[find_final_distance       [orientation_diff init_distance]
					[print 'find_final_distance']
					[let [[c 
					       [get [- [+ [* init_distance init_distance] 
							  25]
						       [* [* [get [abs orientation_diff] degree_cosine] init_distance ] 10.0]] power 0.5]]
					      ]
					  c]]

	     [find_init_angle           [orientation_diff final_distance]
					[print 'find_init_angle']
					[let* [[sine_of_diff [get orientation_diff degree_sine]]
					       [sine_beta [/ [* 5 sine_of_diff]
							     final_distance]]
					       [beta         [get sine_beta degree_arcsine]]]
					  beta]]
	     [find_turning_speed        [init_angle]
					[print 'find turning speed']
					[* init_angle step_factor]]
	     [should_i_turn_right       [init_orientation init_angle]
					  [print 'should i turn right?']
					  [if [< init_orientation 0]
					      [if [< [+ init_orientation_difference init_angle] 120]
						  t
						nil]
					    [if [< [+ init_orientation_difference init_angle] 120]
						nil
					      t]]]
	     [should_i_move_forward     [current_neck_angle final_angle]
					[print 'should i move forward?']
					[if [< [abs current_neck_angle][abs final_angle]]
					    t
					  nil]]
	     [find_desired_init_orientation        [turn_right init_turning_angle init_orientation]
						   [let [[raw 0]]
						     [if turn_right 
							 [= raw [+ init_turning_angle init_orientation]] 
						       [ = raw [- init_orientation init_turning_angle]]]
						     [if [< raw -180]
							 [+ 360 raw]
						       [if [> raw 180]
							   [- raw 360]
							 raw]
						       raw]]]
				
	     [find_walking_speed        [alpha heading]
					[let* [[dist  [* [/ [get alpha degree_sine] [get heading degree_sine]] 5]]
					       [speed [min [* dist 4] 10]]]
					    [format stdout 'dist'  dist 'alpha' alpha 'heading' heading]
					    speed]]
	     [decide                    []
					[mind-wait_to_call mind learned_reactive physical align_body_with_neck]
				       [print 'hi']
				       [print object]
				       [mind-wait_to_call mind learned_reactive physical search_for init_object] 
				       [if [and [and [and [get [get this agency] visual_objects]
							  [lookup_visual_object [get [get this agency] visual_objects] object]]
						     [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame]]
						[have [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame] lookup `in]]
					   [let [[prep_objects [have [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame] lookup `in]]]
					     [if prep_objects
						 [let [[prep_object [car prep_objects]]]
						   [if prep_object
						       [= object prep_object]]]]]]
				       [if [and [and [and [get [get this agency] visual_objects]
							  [lookup_visual_object [get [get this agency] visual_objects] object]]
						     [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame]]
						[have [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame] lookup `in]]
					   [let [[prep_objects [have [have [lookup_visual_object [get [get this agency] visual_objects] object] lookup `preposition_frame] lookup `on]]]
					     [let [[prep_object [car prep_objects]]]
					       [if prep_object
						   [= object prep_object]]]]]
				       
				       [mind-wait_to_call mind learned_reactive physical center_body_horizontally_on object]
				       [= init_orientation            [get [get this agency] object_orientation  object]]
				       [= init_orientation_difference [ - 180 [abs init_orientation]]]
				       [= init_distance               [get [get this agency] object_distance object]]
				       
				       [if [or [and [< init_orientation_difference 15]
						    [and [>  init_distance 3.7]
							 [<  init_distance 6]]]
					       [and [< init_orientation_difference 25]
						    [and [>  init_distance 4]
							 [<  init_distance 5.5]]]]
					   [have this-resource think_to_self 'already in front of']
					 [prep]]]

					
	     [prep                     []
				       [= final_distance              [find_final_distance init_orientation_difference init_distance]]
				       [= init_angle                  [find_init_angle init_orientation_difference final_distance]]
				       [= init_turning_angle          [if [< [+ init_orientation_difference init_angle] 120]
									  init_angle
									[- 180 init_angle]]]
				       [= turn_right                  [should_i_turn_right init_orientation init_angle]]
				       [= desired_init_orientation    [find_desired_init_orientation turn_right init_turning_angle init_orientation]]
				       [= final_neck_angle            [if [> [+ init_orientation_difference init_angle] 120]
									  [- [- 180 init_angle] init_orientation_difference]
									[+ init_orientation_difference init_angle]]]
				       [= init_turning_speed          [find_turning_speed init_turning_angle]]
				       [= current_distance            nil]
				       [format stdout 'init_orientation' init_orientation 'init_diff' init_orientation_difference 'init_distance'  init_distance 'init_angle'  init_angle 'final_neck_angle'  final_neck_angle 'final distance' final_distance 'init_turning_angle' init_turning_angle 'desired_init_orientation' desired_init_orientation]
				       [walk]]
	     [walk                     []
				       [if [< [abs init_orientation_difference] 5]
					   
					   [have this-resource walk_forward_or_back object]
					 
					 [prog [have this-resource turn_for_fixed_angle turn_right init_turning_angle]
					       
					       [if [should_i_move_forward [get [get this agency] neck_heading] final_neck_angle]
						   [prog 
						    [let [[walking_speed 12]
							  [steps          1]]
						      [if [< final_distance 1]
							  [= walking_speed [* 11 final_distance]]
							[= steps  [+ 1 [get final_distance as-integer]]]]
						      [have this-resource think_to_self 'steps' steps]
						      [mind-activate mind learned_reactive physical move_forward steps walking_speed]
						      [mind-wait_to_call  mind learned_reactive physical center_head_on object]
						      [mind-wait_to_call mind learned_reactive physical align_body_with_neck]]]
						 [prog 
						    [let [[walking_speed 12]
							  [steps          1]
							  [final_distance [- [get [+ 25
										     [get init_distance power 2.0]]
										  power 0.5]
									     final_distance ]]]
						      [if [< final_distance 1]
							  [= walking_speed [* 11 final_distance]]
							[= steps [+ 1 [get final_distance as-integer]]]]
						      [mind-activate mind learned_reactive physical move_backward steps walking_speed]
						      [mind-wait_to_call  mind learned_reactive physical center_head_on object]
						      [mind-wait_to_call mind learned_reactive physical align_body_with_neck]]]]]]
				       [decide]]]
	    [decide]
	    [print 'finished']
	    [mind-wait_to_call mind learned_reactive physical walk_directly_towards init_object]
	    [have this-resource think_to_self 'finished walking_directly_towards']
	    ]]]

'*****************Look for vertically*******************************'


[deftypefunk look_for_vertically_resource execute look_for_vertically [desired_physical_object_type]
  
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [looking_at_floor [- 0 45]]
	 [looking_at_sky 45]
	 [already_searched_down nil]
	 [my_current_object nil]
	 
	 ]
    [have this-resource think_to_self 'look_for_vertically activated' desired_physical_object_type]
    [labels [[vertical_search []
			      [wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
			      [if [and [get [get this agency] visual_objects] 
				       [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]
				  [= my_current_object [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]
				[prog 
				 [if [null already_searched_down]
				     [prog [= already_search_down t]
					   [have this-resource think_to_self 'havent found '  desired_physical_object_type  ',searching downward']
					   [mind-wait_to_call mind learned_reactive physical look_down 1 250]
					   [vertical_search]
					   ]
				   [prog [have this-resource think_to_self 'havent found '  desired_physical_object_type  ',searching upward']	
					 [mind-wait_to_call mind learned_reactive physical look_up 1 500]
					 [horizontal_search]
					 ]]]]]

	     [horizontal_search []
				
				[wait-for-trigger [get [get mind resource `builtin_reactive `sensory `continuous_sensing] perception_trigger]]
				[if [and [get [get this agency] visual_objects] 
					 [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]
				    [= my_current_object [visual_objects_contain_physical_object_type [get [get this agency] visual_objects] desired_physical_object_type]]
				  [prog 
					 [have this-resource think_to_self  'no desired object type in view']
					 [mind-wait_to_call mind learned_reactive physical level_pitch]
					 [mind-wait_to_call mind learned_reactive physical turn_left 1 250]
					 [= already_search_down nil]
					 [vertical_search]
					 ]]
				]]
	    [vertical_search]
	    [mind-wait_to_call mind learned_reactive physical level_pitch]
	   
	    [have this-resource think_to_self 'finished searching vertically']]]]

'*************************Make toast********************************'




[deftypefunk slice_toast_resource execute slice_toast [table knife loaf butter]
  [let* [[body [get this body]]
	 [mind [get body mind]]
	 [name [get body name]]]
    [format stdout 'butter' butter]
    [format stdout 'slice_toast']
    [print 'put_on 1']
    [mind-wait_to_call mind builtin_reactive physical use_right_hand table `put_on ]
    
    [mind-wait_to_call mind learned_reactive physical use_left_hand loaf `divide]
    [print 'divide loaf']
    [mind-wait_to_call mind learned_reactive physical look_for `toaster]
    [let 
	[[toaster   [have [get [get [get mind layer `learned_reactive] agency `physical] resource `look_for] lookup `my_current_object]]
	 [slice     [get [get this agency] right_hand_object_name]]]
      [mind-wait_to_call mind learned_reactive physical stand_in_front_of toaster]
      [mind-wait_to_call mind learned_reactive physical use_right_hand toaster `put_in ]
      [mind-wait_to_call mind learned_reactive physical use_right_hand toaster `turn_on]
      
      `[mind-wait_to_call mind learned_reactive physical hold_with_right_hand slice ]
      [print 'debug 1000']
      [mind-wait_to_call mind learned_reactive physical butter_toast table knife slice butter]
      ]]]

[deftypefunk butter_toast_resource execute butter_toast [table knife slice butter]
  [let* [[body [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [format stdout 'butter_toast']
    [mind-wait_to_call mind learned_reactive physical hold_with_right_hand butter]
    [mind-wait_to_call mind learned_reactive physical use_left_hand butter `scoop]
    [print 'put_on 2']
    [mind-wait_to_call mind builtin_reactive physical use_right_hand table `put_on ]
    
    [mind-wait_to_call mind learned_reactive physical hold_with_right_hand slice]
    [mind-wait_to_call mind learned_reactive physical use_left_hand slice `wipe]]]

'Ralph\'s goals'
'pick up loaf and butter'
'put down butter on table'
'pick up knife'
'cut bread'
'put slice in toaster'
'turn toaster on'
'get slice of bread'
'scoop butter with knife'
'wipe knife on slice'


'Lauren\'s goals'
'pick up egg-carton and butter'
'put egg-carton on table'
'scoop knife with butter'
'wipe knife on frying-pan'
'get egg from egg-carton'
'put egg in flying pan'
'turn-on stove'
'turn-off stove'




[deftypefunk pick_up_loaf_and_butter_resource execute pick_up_loaf_and_butter []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [loaf               []]
	 [butter             []]
	 [table              []]
	 [knife              []]
	 [butter             []]]

    [if [null [string-contains [get [get [get this agency] right_hand_object_name] as-string] 'loaf']]
	[prog [mind-wait_to_call mind learned_reactive physical look_for `loaf]
	      [mind-wait_to_call mind learned_reactive physical hold_with_right_hand  
				 [have [get [get [get mind layer `learned_reactive] agency `physical] 
					    resource `look_for] lookup `my_current_object]]]]
    
    [if [null [string-contains [get [get [get this agency] left_hand_object_name] as-string] 'butter']]
	[prog [mind-wait_to_call mind learned_reactive physical look_for `butter]
	      [mind-wait_to_call mind learned_reactive physical hold_with_left_hand 
				 [have [get [get [get mind layer `learned_reactive] agency `physical] 
					    resource `look_for] lookup `my_current_object]]]]
    
    [= loaf  [get [get this agency] right_hand_object_name]]
    
    [format stdout 'butter' butter]
    [mind-wait_to_call mind learned_reactive physical look_for `knife]   
    [= knife [get [get this agency] look_for-current_object]]
    [= butter [get [get this agency] left_hand_object_name]]
    [mind-wait_to_call mind learned_reactive physical look_for `table]
    
    [= table [get [get this agency] look_for-current_object]]
    [format stdout 'table '  table]

    [if [string-contains [get table  as-string] 'table']
	[mind-wait_to_call mind learned_reactive physical walk_directly_towards  
			   table]
      [have this-resource think_to_self 'not doing anything because cannot find table']]
    [print 'put_on 3']
    [mind-wait_to_call mind builtin_reactive physical use_left_hand table `put_on ]
    
    [mind-wait_to_call mind learned_reactive physical hold_with_left_hand 
		       knife]
    [format stdout 'lefthand ' [get [get this agency] left_hand_object_name]]
    [print 'debug table bug']
    [print table]
    [mind-wait_to_call mind learned_reactive physical slice_toast table knife loaf butter]
    ]]


[deftypefunk make_toast_resource execute make_toast []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    [print [get [get this agency] left_hand_object_name]]
    [print [get [get this agency] right_hand_object_name]]
   
    `[if [null [and [string-contains [get [get [get this agency] left_hand_object_name] as-string]'butter']
		   [string-contains [get [get [get this agency] right_hand_object_name] as-string] 'loaf']]]
	[mind-wait_to_call mind learned_reactive physical pick_up_loaf_and_butter]]

    [mind-wait_to_call mind learned_reactive physical pick_up_loaf_and_butter]
    

    ]]

'******************************make egg*****************************'

`[deftypefunk make_egg_resource execute make_egg []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]]
    
    `[print [get [get this agency] left_hand_object_name]]
    `[print [get [get this agency] right_hand_object_name]]
   
    [if [null [and [string-contains [get [get [get this agency] left_hand_object_name] as-string]'butter']
		   [string-contains [get [get [get this agency] right_hand_object_name] as-string] 'egg']]]
	[mind-wait_to_call mind learned_reactive physical pick_up_egg_and_butter]]

    ]]

`[deftypefunk pick_up_egg_and_butter_resource execute pick_up_egg_and_butter []
  [let* [[body  [get this body]]
	 [mind  [get body mind]]
	 [name  [get body name]]
	 [loaf               []]
	 [egg                []]
	 [table              []]
	 [knife              []]
	 [butter             []]]
    
    [if [null [string-contains [get [get [get this agency] right_hand_object_name] as-string] 'egg']]
	[prog [mind-wait_to_call mind learned_reactive physical look_for `egg]
	      [mind-wait_to_call mind learned_reactive physical hold_with_right_hand  
				 [have [get [get [get mind layer `learned_reactive] agency `physical] 
					    resource `look_for] lookup `my_current_object]]]]
    
    [if [null [string-contains [get [get [get this agency] left_hand_object_name] as-string] 'butter']]
	[prog [mind-wait_to_call mind learned_reactive physical look_for `butter]
	      [mind-wait_to_call mind learned_reactive physical hold_with_left_hand 
				 [have [get [get [get mind layer `learned_reactive] agency `physical] 
					    resource `look_for] lookup `my_current_object]]]]
    
    [= egg  [get [get this agency] right_hand_object_name]]
    [= butter [get [get this agency] left_hand_object_name]]
    
    [mind-wait_to_call mind learned_reactive physical look_for `knife]   
    [= knife [get [get this agency] look_for-current_object]]
    
    [mind-wait_to_call mind learned_reactive physical look_for `table]
    
    [= table [get [get this agency] look_for-current_object]]
    [print table]

    [if [string-contains [get table  as-string] 'table']
	[mind-wait_to_call mind learned_reactive physical walk_directly_towards  
			   table]
      [have this-resource think_to_self 'not doing anything because cannot find table']]
    [print 'put_on 4']
    [mind-wait_to_call mind builtin_reactive physical use_right_hand table `put_on ]
    [mind-wait_to_call mind learned_reactive physical hold_with_right_hand 
		       knife]

    [mind-wait_to_call mind learned_reactive physical butter_pan table knife egg butter]
    ]]


`[deftypefunk butter_pan_resource execute butter_pan [table knife egg butter]
  [let* [[body [get this body]]
	 [mind [get body mind]]
	 [name [get body name]]
	 [oven              []]]
    [format stdout 'slice_toast']

    `[mind-wait_to_call mind learned_reactive physical use_right_hand table `put_on ]
    [mind-wait_to_call mind learned_reactive physical use_right_hand butter `scoop]
    [mind-wait_to_call mind learned_reactive physical look_for `pan]
    [let 
	[[pan   [have [get [get [get mind layer `learned_reactive] agency `physical] resource `look_for] lookup `my_current_object]]]
      
      [mind-wait_to_call mind learned_reactive physical hold_with_left_hand pan]
      [mind-wait_to_call mind learned_reactive physical use_right_hand pan `wipe]
      [mind-wait_to_call mind learned_reactive physical look_for `oven]
      [= oven [have [get [get [get mind layer `learned_reactive] agency `physical] resource `look_for] lookup `my_current_object]]
      [mind-wait_to_call mind learned_reactive physical walk_directly_towards oven]      
      [mind-wait_to_call mind learned_reactive physical use_left_hand oven put_on]
      [mind-wait_to_call mind learned_reactive physical use_right_hand oven `turn_on]
      [mind-wait_to_call mind learned_reactive physical hold_with_left_hand egg]
      [mind-wait_to_call mind learned_reactive physical walk_directly_towards pan]
      `[mind-wait_to_call mind learned_reactive physical use_left_hand egg `open]
      [mind-wait_to_call mind learned_reactive physical use_left_hand pan `put_on]
      [mind-wait_to_call mind learned_reactive physical use_right_hand oven `turn_off]
      ]]]

'*******************demo**********************************************'
[defunk globalize_isis_world []
  [globalize isis_world [get [get isismon isismon_project] isis_world]]]

[defunk demo_hold [object_name]
  [globalize_isis_world]
   [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `look_for object_name]
   [have [get [get [get [get isis_world agent_mind `Lauren] layer `builtin_reactive] agency `neural_plug] resource `activate_resource] 
	command `learned_reactive `physical `hold_with_right_hand 
	[have [get [get [get [get isis_world agent_mind `Lauren] layer `learned_reactive] agency `physical] 
		   resource `look_for] lookup `my_current_object]]]

'************************math***********************'


[defunk max [x y]
  [if [> x y]
      x
    y]]

[defunk min [x y]
  [if [< x y]
      x
    y]]

[defunk abs [x]
  [if [< 0 x]
      x
    [- 0 x]]]

[defunk calculate_turning_speed [angle]
  [/  [/ angle 0.0258] 0.03]]

[defunk degree_to_radian [x]
  [*[/ x 180] pi]]

