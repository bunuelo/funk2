'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe learned_reactive_physical_knowledge_agency [agency] []
  [new []
       [construct agency `physical_knowledge]
       [have this add_resource [new translate_visual_knowledge_to_physical_knowledge_resource]]
       this]]


[deftypefunk learned_reactive_physical_knowledge_agency execute create_knowledge []
  [new meta_semantic_knowledge_base `physical_knowledge [get [get this mind] semantic_realm]]]

[deftypefunk learned_reactive_physical_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `visual_knowledge `visual_knowledge->physical_knowledge]]


[deframe translate_visual_knowledge_to_physical_knowledge_resource [resource] []
  [new []
       [construct resource `translate_visual_knowledge_to_physical_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       nil]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute execute_resource_raw_funk []
  [terminal_format standard-terminal '\ntranslating visual knowledge to physical knowledge.']
  [let [[visual_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `visual_knowledge->physical_knowledge]]]
    [let [[done nil]]
      [while [let [[event [get visual_knowledge_iterator current]]]
	       [if [not [null event]]
		   [prog [terminal_format standard-terminal '\n  translate visual->physical visual event: ' event]
			 [let [[event_type [get event event_type]]]
			   [cond [[and [is-type `semantic_knowledge_base_event]
				       [eq event_type `add_semantic_frame]]     [let [[semantic_frame [get event semantic_frame]]]
										  [if [semantic-is-type `semantic_visual_object semantic_frame]
										      [let [[visual_phenomenal_name [have semantic_frame lookup_single_value `property `visual_phenomenal_name]]]
											[let [[phenomenon_semantic_frame [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame visual_phenomenal_name]]]
											  [if [null phenomenon_semantic_frame]
											      [prog [= phenomenon_semantic_frame [new semantic_frame [get [get this mind] semantic_realm]]]
												    [have [get [get this mind] semantic_realm] add_phenomenon_semantic_frame visual_phenomenal_name phenomenon_semantic_frame]
												    [have [get [get this mind] semantic_knowledge_base `physical_knowledge] add_semantic_frame phenomenon_semantic_frame]
												    [have phenomenon_semantic_frame add `property `physical_phenomenon `[physical ,visual_phenomenal_name]]]]
											  ]]]]]
				 [[and [is-type `semantic_frame_event]
				       [eq event_type `add]]                    [let [[key_type       [get event key_type]]
										      [key            [get event key]]]
										  [cond [[eq key_type `preposition] [cond [[eq key `in] [let [[subject [get event semantic_frame]]
																	      [object  [get event value]]]
																	  [let [[subject-visual_phenomenal_name [have subject lookup_single_value `property `visual_phenomenal_name]]
																		[object-visual_phenomenal_name  [have object  lookup_single_value `property `visual_phenomenal_name]]]
																	    [let [[subject-phenomenon_semantic_frame [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame subject-visual_phenomenal_name]]
																		  [object-phenomenon_semantic_frame  [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame object-visual_phenomenal_name]]]
																	      [have subject-phenomenon_semantic_frame assure_exists `preposition `in object-phenomenon_semantic_frame]]]]]
															  [[eq key `on] [let [[subject [get event semantic_frame]]
																	      [object  [get event value]]]
																	  [let [[subject-visual_phenomenal_name [have subject lookup_single_value `property `visual_phenomenal_name]]
																		[object-visual_phenomenal_name  [have object  lookup_single_value `property `visual_phenomenal_name]]]
																	    [let [[subject-phenomenon_semantic_frame [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame subject-visual_phenomenal_name]]
																		  [object-phenomenon_semantic_frame  [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame object-visual_phenomenal_name]]]
																	      [have subject-phenomenon_semantic_frame assure_exists `preposition `on object-phenomenon_semantic_frame]]]]]
															  ]]
											]]]
				 ]]]]
	       [have visual_knowledge_iterator increment]]]]]]


