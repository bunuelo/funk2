'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[defunk visual_semantic_knowledge-new_from_visual_objects [visual_objects semantic_realm]
  [let [[semantic_knowledge_base [new semantic_knowledge_base]]]
    [let [[semantic_object_frame [frame]]]
      [mapc [funk [object]
		  [let [[visual_object_semantic_frame [new visual_object_semantic_frame semantic_realm]]
			[phenomenal_name              [get object phenomenal_name]]]
		    [have visual_object_semantic_frame add_visual_object_name phenomenal_name]
		    [have semantic_knowledge_base add_semantic_frame visual_object_semantic_frame]
		    [have semantic_object_frame add phenomenal_name visual_object_semantic_frame]]]
	    visual_objects]
      [let [[object_iter_one visual_objects]]
	[while object_iter_one
	  [let [[object_one      [car object_iter_one]]
		[object_iter_two [cdr object_iter_one]]]
	    [let [[semantic_object_one [have semantic_object_frame lookup [get object_one phenomenal_name]]]]
	      [while object_iter_two
		[let [[object_two [car object_iter_two]]]
		  [let [[semantic_object_two [have semantic_object_frame lookup [get object_two phenomenal_name]]]]
		    'pairwise pattern recognitions between objects'
		    
		    [cond [[> [get object_one retina_position_vertical]
			      [get object_two retina_position_vertical]]
			   [have semantic_object_one add_preposition `visually_above semantic_object_two]]
			  [[< [get object_one retina_position_vertical]
			      [get object_two retina_position_vertical]]
			   [have semantic_object_two add_preposition `visually_above semantic_object_one]]]
		    
		    '...more tests for object x object patterns...'
		    
		    ]]
		[= object_iter_two [cdr object_iter_two]]]]]
	  [= object_iter_one [cdr object_iter_one]]]]
      [mapc [funk [visual_object]
		  [let [[semantic_object [have semantic_object_frame lookup [get visual_object phenomenal_name]]]]
		    [let [[preposition_frame [get semantic_object preposition_frame]]]
		      [mapc [funk [preposition]
				  [let [[prepositional_object_names [have preposition_frame lookup preposition]]]
				    [mapc [funk [prepositional_object_name]
						[let [[prepositional_semantic_object [have semantic_object_frame lookup prepositional_object_name]]]
						  [if [null prepositional_semantic_object]
						      [terminal_format standard-terminal '\nvisual_semantic_knowledge-new_from_visual_objects warning: don\'t know of prepositional object, ' prepositional_object_name '.']
						    [have semantic_object add_preposition preposition prepositional_semantic_object]]]]
					  prepositional_object_names]]]
			    [get preposition_frame keys]]]]]
	    visual_objects]]
    semantic_knowledge_base]]






[deframe propogate_visual_objects_to_visual_knowledge_resource [resource] [visual_knowledge]
  [new []
       [construct resource `propogate_visual_objects_to_visual_knowledge
		  [funk []
			[let [[body [get this body]]]
			  [let [[visual_objects [get [get this mind] visual_objects]]]
			    `[have this-resource think_to_self 'Propogating visual objects to visual knowledge.']
			    [let [[new_visual_knowledge [visual_semantic_knowledge-new_from_visual_objects visual_objects [get [get this mind] semantic_realm]]]]
			      [= visual_knowledge new_visual_knowledge]
			      [mind-wait_to_activate [get this mind] deliberative reality include_learned_reactive_visual_knowledge_into_deliberative_knowledge]
			      `[have this-resource think_to_self 'I created this knowledge: ' visual_knowledge '.']
			      ]]]]]
       nil]]


[deframe learned_reactive_sensory_agency [agency] []
  [new []
       [construct agency `sensory]
       
       [have this add_resource [new propogate_visual_objects_to_visual_knowledge_resource]]
       
       this]]

[deftypefunk learned_reactive_sensory_agency get visual_knowledge []
  [get [get this resource `propogate_visual_objects_to_visual_knowledge] visual_knowledge]]




