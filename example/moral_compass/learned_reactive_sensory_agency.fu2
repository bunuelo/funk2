'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe propogate_sense_to_story_resource [resource] []
  [new []
       [construct resource `propogate_sense_to_story
		  [funk []
			[let [[body [get this body]]]
			  [let [[sense [get [get [get this mind] agency `builtin_reactive `sensory] builtin_reactive_sensory_sense]]]
			    [have this-resource think_to_self 'Propogating sense->story.']
			    [let [[sense_agent_frame [have sense lookup `agents]]
				  [story             [new story]]]
			      [let [[agent_names [get sense_agent_frame slots]]]
				[if agent_names
				    [have this-resource think_to_self 'While propogating sense->story, I can see agents, ' agent_names '.']
				  [have this-resource think_to_self 'While propogating sense->story, I cannot see any other agents.']]
				[mapc [funk [agent_name]
					    [let [[agent [have sense_agent_frame lookup agent_name]]]
					      [have story add_new_character agent_name]
					      [story-create_event story [get body time_step] `I `sees agent_name]
					      [let [[says [have agent lookup `says]]]
						[if says
						    [mapc [funk [say]
								[have this-resource think_to_self 'While propogating sense->story, I can hear ' agent_name ' saying, "' say '"']
								[story-create_event story [get body time_step] agent_name `says say]
								]
							  says]]]]]
				      agent_names]]
			      [set this learned_reactive_sensory_story story]
			      [mind-wait_to_activate [get this mind] deliberative reality include_learned_reactive_stories_into_deliberative_story]
			      [have this-resource think_to_self 'While propogating sense->story, I created this story: ' [get story as-list] '.']
			      ]]]]]
       nil]]


[deframe learned_reactive_sensory_agency [agency] [learned_reactive_sensory_story]
  [new []
       [construct agency `sensory]
       
       [have this add_resource [new propogate_sense_to_story_resource]]
       
       this]]




