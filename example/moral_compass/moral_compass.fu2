'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe moral_compass [traced_mind] []
  [new []
       [terminal_format standard-terminal '\nmoral_compass: creating new mind.']
       [construct traced_mind]
       [have this add_layer [new builtin_reactive_layer]]
       [have this add_layer [new learned_reactive_layer]]
       [have this add_layer [new deliberative_layer]]
       [have this add_layer [new reflective_layer]]
       [have this add_layer [new self_reflective_layer]]
       [have this add_layer [new self_conscious_layer]]
       [have this create_knowledge]
       [have this connect_knowledge_reflection]
       [have this create_builtin_goals]
       this]]

[deftypefunk moral_compass execute create_knowledge []
  [terminal_format standard-terminal '\nmoral_compass: creating knowledge.']
  [have [get this layer `builtin_reactive] create_knowledge]
  [have [get this layer `learned_reactive] create_knowledge]
  [have [get this layer `deliberative]     create_knowledge]
  [have [get this layer `reflective]       create_knowledge]
  [have [get this layer `self_reflective]  create_knowledge]
  [have [get this layer `self_conscious]   create_knowledge]]

[deftypefunk moral_compass execute connect_knowledge_reflection []
  [terminal_format standard-terminal '\nmoral_compass: connecting knowledge reflection.']
  [have [get this layer `builtin_reactive] connect_knowledge_reflection]
  [have [get this layer `learned_reactive] connect_knowledge_reflection]
  [have [get this layer `deliberative]     connect_knowledge_reflection]
  [have [get this layer `reflective]       connect_knowledge_reflection]
  [have [get this layer `self_reflective]  connect_knowledge_reflection]
  [have [get this layer `self_conscious]   connect_knowledge_reflection]]

[deftypefunk moral_compass execute create_builtin_goals []
  [terminal_format standard-terminal '\nmoral_compass: creating built-in goals.']
  [have [get this layer `deliberative] create_builtin_goals]]

[deftypefunk moral_compass get as-lickable_frame []
  [frame semantic_realm                        [get this semantic_realm]
	 knowledge_event_stream_iterator_frame [get this knowledge_event_stream_iterator_frame]
	 ]]

[deftypefunk moral_compass get as-chunk []
  [get [lick-new_from_object [get this as-lickable_frame]] as-chunk]]

[defunk moral_compass-new_from_lickable_frame [lickable_frame]
  [let [[this [new moral_compass]]]
    [set this semantic_realm                        [have lickable_frame lookup `semantic_realm]]
    [set this knowledge_event_stream_iterator_frame [have lickable_frame lookup `knowledge_event_stream_iterator_frame]]
    [have this connect_knowledge_reflection]
    this]]

[defunk moral_compass-new_from_chunk [chunk]
  [let [[lickable_frame [have [get chunk as-lick] unlick]]]
    [moral_compass-new_from_lickable_frame lickable_frame]]]

'pre-knowledge perception functions'

[deftypefunk moral_compass get perception []
  [get [get this layer `builtin_reactive] perception]]

[deftypefunk moral_compass get visual_objects []
  [print 'moral_compass-visual_objects deprecated (use moral_compass-perception instead)']
  [get [get this perception] visual_objects]]

'knowledge and meta-knowledge functions'

`[deftypefunk moral_compass get builtin_reactive_knowledge [] [have [get this semantic_realm] lookup_semantic_knowledge_base `builtin_reactive_knowledge]]
`[deftypefunk moral_compass get learned_reactive_knowledge [] [have [get this semantic_realm] lookup_semantic_knowledge_base `learned_reactive_knowledge]]
`[deftypefunk moral_compass get deliberative_knowledge     [] [have [get this semantic_realm] lookup_semantic_knowledge_base `deliberative_knowledge]]
`[deftypefunk moral_compass get old_reflective_knowledge   [] [have [get this semantic_realm] lookup_semantic_knowledge_base `old_reflective_knowledge]]
`[deftypefunk moral_compass get self_reflective_knowledge  [] [have [get this semantic_realm] lookup_semantic_knowledge_base `self_reflective_knowledge]]
`[deftypefunk moral_compass get self_conscious_knowledge   [] [have [get this semantic_realm] lookup_semantic_knowledge_base `self_conscious_knowledge]]
`[deftypefunk moral_compass get visual_knowledge           [] [have [get this semantic_realm] lookup_semantic_knowledge_base `visual_knowledge]]
`[deftypefunk moral_compass get physical_knowledge         [] [have [get this semantic_realm] lookup_semantic_knowledge_base `physical_knowledge]]

[deftypefunk moral_compass get objects []
  [print 'get-moral_compass-objects is deprecated.']
  [let [[reactive_sensory_sense [get [get this agency `builtin_reactive `sensory] builtin_reactive_sensory_sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      nil]]]

[deftypefunk moral_compass get isis_sense_frame []
  [print 'get-moral_compass-isis_sense_frame is deprecated.']
  [let [[reactive_sensory_sense [get [get this agency `builtin_reactive `sensory] builtin_reactive_sensory_sense]]]
    reactive_sensory_sense]]

[deftypefunk moral_compass get sense []
  [print 'get-moral_compass-sense is deprecated.']
  [get this isis_sense_frame]]

[deftypefunk moral_compass get isis_object_frame []
  [print 'get-moral_compass-isis_object_frame is deprecated.']
  [let [[reactive_sensory_sense [get this sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      [frame]]]]

[deftypefunk moral_compass get objects []
  [print 'This function is deprecated.']
  [get this isis_object_frame]]

