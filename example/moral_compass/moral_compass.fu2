'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe moral_compass [mind] []
  [new []
       [construct mind]
       [have this add_layer [new builtin_reactive_layer]]
       [have this add_layer [new learned_reactive_layer]]
       [have this add_layer [new deliberative_layer]]
       [have this add_layer [new reflective_layer]]
       [have this add_layer [new self_reflective_layer]]
       [have this add_layer [new self_conscious_layer]]
       this]]

[deftypefunk moral_compass get objects []
  [print 'get-moral_compass-objects is deprecated.']
  [let [[reactive_sensory_sense [get [get this agency `builtin_reactive `sensory] builtin_reactive_sensory_sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      nil]]]

[deftypefunk moral_compass get isis_sense_frame []
  [print 'get-moral_compass-isis_sense_frame is deprecated.']
  [let [[reactive_sensory_sense [get [get this agency `builtin_reactive `sensory] builtin_reactive_sensory_sense]]]
    reactive_sensory_sense]]

[deftypefunk moral_compass get sense []
  [print 'get-moral_compass-sense is deprecated.']
  [get this isis_sense_frame]]

[deftypefunk moral_compass get isis_object_frame []
  [print 'get-moral_compass-isis_object_frame is deprecated.']
  [let [[reactive_sensory_sense [get this sense]]]
    [if reactive_sensory_sense
	[have reactive_sensory_sense lookup `objects]
      [frame]]]]

[deftypefunk moral_compass get objects []
  [print 'This function is deprecated.']
  [get this isis_object_frame]]

[deftypefunk moral_compass get visual_objects []
  [print 'get-moral_compass-visual_objects is deprecated.']
  [let [[visual_objects nil]]
    [let [[isis_object_frame [get this isis_object_frame]]]
      [if isis_object_frame
	  [mapc [funk [isis_name]
		      [let [[visual_object [new isis_visual_object isis_name [have isis_object_frame lookup isis_name]]]]
			[= visual_objects [cons visual_object visual_objects]]]]
		[get isis_object_frame keys]]]]
    visual_objects]]

[deftypefunk moral_compass get visual_semantic_knowledge []
  [let [[semantic_knowledge_base [new semantic_knowledge_base]]]
    [let [[visual_objects [get this visual_objects]]]
      [let [[semantic_objects nil]]
	[mapc [funk [object]
		    [let [[visual_object_semantic_frame [new visual_object_semantic_frame]]
			  [phenomenal_name              [get object phenomenal_name]]]
		      [have visual_object_semantic_frame add_visual_object_name phenomenal_name]
		      [have semantic_knowledge_base add_semantic_frame visual_object_semantic_frame]
		      [= semantic_objects [cons visual_object_semantic_frame semantic_objects]]]]
	      visual_objects]
	[let [[object_iter_one semantic_objects]]
	  [while object_iter_one
	    [let [[object_one      [car object_iter_one]]
		  [object_iter_two [cdr object_iter_one]]]
	      [while object_iter_two
		[let [[object_two [car object_iter_two]]]
		  'pairwise pattern recognitions between objects'
		  
		  [if [> [get object_one retina_position_vertical]
			 [get object_two retina_position_vertical]]
		      [have object_one add_preposition `on object_two]]
		  
		  '...'
		  
		  ]]
	      [= object_iter_two [cdr object_iter_two]]]]
	  [= object_iter_one [cdr object_iter_one]]]]]
    semantic_knowledge_base]]


