'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe old_reflective_event_knowledge_agency [agency] []
  [new []					 
       [construct agency `old_reflective_event_knowledge]

       [have this add_resource [new translate_old_reflective_knowledge_to_old_reflective_event_knowledge_resource]]
       
       this]]

[deftypefunk old_reflective_event_knowledge_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new semantic_event_knowledge_base `old_reflective_event_knowledge [get [get this mind] semantic_realm]]]]

[deftypefunk old_reflective_event_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `old_reflective_knowledge `old_reflective_knowledge->old_reflective_event_knowledge]]


[deframe translate_old_reflective_knowledge_to_old_reflective_event_knowledge_resource [traced_resource] []
  [new []
       [construct traced_resource `translate_old_reflective_knowledge_to_old_reflective_event_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       [= vital t]
       nil]]

[deftypefunk translate_old_reflective_knowledge_to_old_reflective_event_knowledge_resource execute execute_resource_raw_funk []
  `[= debug t]
  [let [[old_reflective_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `old_reflective_knowledge->old_reflective_event_knowledge]]
	[old_reflective_event_knowledge    [get [get this mind] semantic_knowledge_base         `old_reflective_event_knowledge]]]
    [while t
      [let [[event [have old_reflective_knowledge_iterator wait_for_current]]]
	[if [not [null event]]
	    [prog [let [[event_type [get event event_type]]]
		    [cond [[is-type `semantic_knowledge_base_event event]
			   
			   [cond [[eq event_type `add_semantic_frame]
				  
				  [let [[semantic_frame [get event semantic_frame]]]
				    [cond [[is-type `semantic_resource_action_event semantic_frame]
					   
					   [let [[action_name [get semantic_frame action_name]]
						 [agent       [get semantic_frame agent]]
						 [target      [get semantic_frame target]]]
					     [cond [[eq action_name `cause_being_active]
						    [let [[absolute_start_time [get semantic_frame absolute_start_time]]]
						      [let [[current_action_sequence [new semantic_resource_action_sequence
											  [get [get this mind] semantic_realm]
											  `event_sequence
											  target]]]
							[set current_action_sequence absolute_start_time absolute_start_time]
							[let [[causes_set [semantic-lookup_set semantic_frame is_caused_by]]]
							  [if [not [null causes_set]]
							      [mapc [funk [cause]
									  [semantic-add current_action_sequence is_caused_by cause]]
								    [get causes_set elements]]]]
							[if agent
							    [if [not [get old_reflective_event_knowledge contains_semantic_frame agent]]
								[have old_reflective_event_knowledge add_semantic_frame agent]]]
							[if [not [get old_reflective_event_knowledge contains_semantic_frame target]]
							    [have old_reflective_event_knowledge add_semantic_frame target]]
							[have old_reflective_event_knowledge add_semantic_frame current_action_sequence]
							[semantic-add target action_sequence         current_action_sequence]
							[set target current_action_sequence current_action_sequence]]]]
						   [t
						    [if agent
							[let [[current_action_sequence [get agent current_action_sequence]]]
							  [if [null current_action_sequence]
							      [prog `[error bug_type `current_action_sequence_is_nil
									    funkname `translate_old_reflective_knowledge_to_old_reflective_event_knowledge_resource-execute_resource_raw_funk
									    event    event]]
							    [let [[semantic_event semantic_frame]]
							      [have current_action_sequence        add_to_end         semantic_event]
							      [have old_reflective_event_knowledge add_semantic_frame semantic_event]
							      '  => add to action_sequence_cause_frame for the affected agent.']]]]]]
					     ]]
					  ]
				    ]]
				 [[eq event_type `remove_semantic_frame]
				  [let [[semantic_frame [get event semantic_frame]]]
				    [cond [[is-type `semantic_resource_action_event semantic_frame]
					   
					   [let [[action_name       [get semantic_frame action_name]]
						 [agent             [get semantic_frame agent]]
						 [target            [get semantic_frame target]]
						 [absolute_end_time [get semantic_frame absolute_end_time]]]
					     [cond [[eq action_name `cause_being_active]
						    
						    [let [[current_action_sequence [get target current_action_sequence]]]
						      [set current_action_sequence absolute_end_time absolute_end_time]
						      [set target current_action_sequence nil]]]]
					     ]]
					  ]
				    ]]]]
			  [[is-type `semantic_frame_event event]
			   
			   [cond [[eq event_type `add]
				  [let [[semantic_frame [get event semantic_frame]]
					[key_type       [get event key_type]]
					[key            [get event key]]
					[value          [get event value]]]
				    [cond [[is-type `semantic_event semantic_frame]
					   [let [[semantic_event semantic_frame]]
					     [cond [[and [eq `property key_type] [eq `absolute_end_time key]]
						    [have this think_to_self '\n  found added absolute_end_time update!']
						    [let [[contains_set [semantic-lookup_set semantic_event contains]]]
						      [if contains_set
							  [mapc [funk [contained_event]
								      [if [is-type `semantic_event_sequence contained_event]
									  [prog [have this think_to_self '\n  updating start and end times of contained sequence.']
										[have semantic_event update_parent_container_start_and_end_times_with_child_event contained_event]]]]
								[get contains_set elements]]]]
						    ]
						   ]]]
					  ]]]
				 ]]
			  ]]]]
	[have old_reflective_knowledge_iterator increment]]]]]



