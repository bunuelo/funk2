'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'now resources interact w/ simulator through (get body).'

'now when activating resource, have to set the slots in funk_user the resource. how to?'
'gotta check if things work...'



[deframe funk_user  [resource] [[user_activate_resource nil]
				[user_activate_args     nil]]

  [new []
       [construct resource [type this]
		  [funk [][while t
			  `[print 'waiting for user to activate']
			   [if [null [get this user_activate_resource]]
			       [sleep 1]
			     [prog [have-apply mind activate [print `[reactive physical ,[get this user_activate_resource] @[get this user_activate_args]]]]
				   [set this user_activate_resource nil]
				   [set this user_activate_args nil]
				   ]]]]]
       nil]]

[deframe turn_right [resource] []
  [new []
       [construct resource [type this]
		  [funk [steps]
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'Turning right is starting.']
			  [have world turn_right-start [get this name]]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world turn_right-stop [get this name]]]]]]
       nil]]

[deframe turn_left [resource] []
  [new []
       [construct resource [type this]
		  [funk [steps]
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'Turning left is starting.']
			  [have world turn_left-start [get this name]]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
					       [millisleep 50]]
			    [have world turn_left-stop [get this name]]]]
			
       nil]]

[deframe move_forward [resource] []
  [new []
       [construct resource [type this]
		  [funk [steps]
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'Moving forward is starting.']
			  [have world move_forward-start [get this name]]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world move_forward-stop [get this name]]]]]]
			
       nil]]

[deframe move_backward [resource] []
  [new []
       [construct resource [type this]
		  [funk [steps]
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'moving backward is starting.']
			  [have world move_backward-start [get this name]]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world move_backward-stop [get this name]]]]]]
       
       nil]]

[deframe drop_from_left_hand [resource] []
  [new []
       [construct resource [type this]
		  [funk []
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'Droping from right hand is starting.']
			  [have world drop_from_left_hand agent [get this name]]]]]
       
       nil]]
[deframe drop_from_right_hand [resource] []
  [new []
       [construct resource [type this]
		  [funk []
			[let [[body [get this body]]
			      [world [get this physical_world]]]
			  [have this-resource think_to_self 'Droping from right hand is starting.']
			  [have world drop_from_right_hand agent [get this name]]]]]
       
       nil]]
[deframe pick_up_with_right_hand [resource] []
  [new []
       [construct resource [type this]
		  [funk [target]
			[have this-resource think_to_self 'Picking up with right hand is starting']
			[while [null [get this reactive_sensory_sense]] 
			  [millisleep 100]]
			[if [get this objects]
			    [if [have [get this objects] lookup target]
				[if [> arm_length [have [have [get this objects] lookup target] `distance]]
				    [if [null [have [get this reactive_sensory_sense] lookup `right_hand]]
					[isis-call [get [get this world] client] pick_up_with_right_hand agent [get this name] target target]
				      [mind-wait_to_activate [get this mind] reactive physical drop_from_right_hand]]
				  [prog 
				   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
				   [isis-call [get [get this world] client] pick_up_with_right_hand agent [get this name] target target]]]
			      [prog 
						[mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
						[isis-call [get [get this world] client] pick_up_with_right_hand agent [get this name] target target]]]
			  [prog 
			   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
			   [isis-call [get [get this world] client] pick_up_with_right_hand agent [get this name] target target]]]
			[get body sense]]]
       
       nil]]
[deframe  pick_up_with_left_hand [resource] []
  [new []
       [construct resource [type this]
		  [funk [target]
			[have this-resource think_to_self 'Picking up with left hand is starting']
			[while [null [get this reactive_sensory_sense]] 
			  [millisleep 100]]
			[if [get this objects]
			    [if [have [get this objects] lookup target]
				[if [> arm_length [have [have [get this objects] lookup target] `distance]]
				    [if [null [have [get this reactive_sensory_sense] lookup `left_hand]]
					[isis-call [get [get this world] client] pick_up_with_left_hand agent [get this name] target target]
				      [mind-wait_to_activate [get this mind] reactive physical drop_from_left_hand]]
				  [prog 
				   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
				   [isis-call [get [get this world] client] pick_up_with_left_hand agent [get this name] target target]]]
			      [prog 
			       [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
			       [isis-call [get [get this world] client] pick_up_with_left_hand agent [get this name] target target]]]
			  [prog 
			   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards target]
			   [isis-call [get [get this world] client] pick_up_with_left_hand agent [get this name] target target]]]
			[get body sense]]]
       nil]]

[deframe open_fridge [resource] []
  [new []
       [construct resource [type this]
		  [funk []
			[format stdout '\n  open_fridge']
			[while [null [get this reactive_sensory_sense]] 
			  [millisleep 100]]
			[if [get this objects]
			    [if [have [get this objects] lookup fridge]
				[if [> arm_length [have [get this objects] lookup `distance]]
				    [isis-call [get [get this world] client] agent [get this name] open_fridge]
				  [prog 
				   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards fridge]
				   [isis-call [get [get this world] client] agent [get this name] open_fridge]]]
			      [prog 
			       [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards fridge]
			       [isis-call [get [get this world] client] agent [get this name] open_fridge]]]
			  [prog 
			   [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards fridge]
			   [isis-call [get [get this world] client] agent [get this name] open_fridge]]]
			[get body sense]]]
			
       
       nil]]
[deframe  slice_toast[resource] []
  [new []
       [construct resource [type this]
		  [funk []
				 [format stdout '/n slice_toast']
					 [mind-wait_to_activate [get this mind] reactive physical pick_up_with_left_hand knife]
					 [while [have [get this reactive_sensory_sense] lookup `left_hand]
					   [sleep 1]]
					 [mind-wait_to_activate [get this mind] reactive physical walk_directly_towards loaf]
					 [while [get [get [get this mind] resource `reactive `physical `walk_directly_towards] active]
					   [sleep 1]]
					 [isis-call [get [get this world] client] agent [get this name] use_left_hand object knife target loaf]]]
       
       nil]]
[deframe center_body_on_object [resource] []
  [new []
       [construct resource [type this]
		  [funk [desired_object]
			[have this-resource think_to_self 'center_body_on_object activated']
			[labels [[turn_left_and_right []
						      [while [null [get this reactive_sensory_sense]] 
							[millisleep 100]]
						      [if [get this objects]
							  [if [have [get this objects] lookup desired_object] 
							      [let [[x_pos [have [have [get this objects] lookup desired_object] lookup `x_pos]]]
								[cond [[>  x_pos 0.4]
								       [prog [have this-resource think_to_self   'x too positive' x_pos]
									     [mind-wait_to_activate [get this mind] reactive physical turn_right 1]
									     [have this-resource think_to_self   'i turned right']
									     [turn_left_and_right]]]
								      [[< x_pos [- 0 0.4]]
								       [prog [have this-resource think_to_self   'x too negative' x_pos]
									     [mind-wait_to_activate [get this mind] reactive physical turn_left 1]
									     [have this-resource think_to_self 'i turned left']
									     [turn_left_and_right]]]
								      [t
								       [have this-resource think_to_self 'centered']]]]
							    [prog [have this-resource think_to_self   'no objects in view']
								  [mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
								  [turn_left_and_right]]]
							[prog [have this-resource think_to_self   'my_object not in view']
							      [mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
							      [turn_left_and_right]]]]
				 [turn_left_and_right]]]]]
       
       			
       
       nil]]
[deframe  walk_towards [resource] []
  [new []
       [construct resource [type this]
		  [funk [desired_object]
			[mind-wait_to_activate [get this mind] reactive physical center_body_on desired_object]
			[labels [[cautiously_walk []
						  [cond [[and [null [have this check_obstacle]] 
							      [< arm_length [have [have [get this objects] lookup desired_object] lookup `distance]]]
							 [prog [mind-wait_to_activate [get this mind] reactive physical move_forward 1]
							       [cautiously_walk]]]
							[[> arm_length [have [have [get this objects] lookup desired_object] lookup `distance]]
							 nil]
							[[and [have this check_obstacle] 
							      [< arm_length [have [have [get this objects] lookup desired_object] lookup `distance]]]
							 [mind-wait_to_activate [get this mind] reactive physical avoid_obstacle desired_object [have this check_obstacle]]]
							[t
							 [print 'weird, no conditions applied']]]]
				 [cautiously_walk]]]]]
       
       
       nil]]


[deframe walk_directly_towards [resource] []
  [new []
       [construct resource [type this]
		  [funk [desired_object]
			[let [[achieved nil]]
			  [have this-resource think_to_self ' walk_directly_towards activated!']
			  [while  [null achieved]
			    [have this-resource think_to_self ' not achieved']
			    [while [null [get this reactive_sensory_sense]]
			      [have this-resource think_to_self ' sense not ready yet, sleep']
			      [millisleep 100]]
			    [if [get this objects]
				[if [have [get this objects] lookup desired_object]
				    [if [< arm_length [have [have [get this objects] lookup desired_object] lookup `distance]]
					[prog 
					 [have this-resource think_to_self 'current distance:' [have [have [get this objects] lookup desired_object] lookup `distance]]
					 [while [< arm_length [have [have [get this objects] lookup desired_object] lookup `distance]]
					   [have this-resource think_to_self 'yes object, activating center on']
					   [mind-wait_to_activate [get this mind] reactive physical center_body_on desired_object]
					   
					   [have this-resource think_to_self 'activating move_forward']
					   [mind-wait_to_activate [get this mind] reactive physical move_forward 1]
					   
					   [print 'end of while loop']
					   [have this-resource think_to_self 'current distance:' [have [have [get this objects] lookup desired_object] lookup `distance]]]
					 [have this-resource think_to_self 'object within arm_length now']]
				      [prog [have this-resource think_to_self 'finally got it']
					    [= achieved t]]]
				  [prog [have this-resource think_to_self 'dont have object, activating search']
					[mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
					]]   
			      [prog [have this-resource think_to_self 'dont have object, activating search']
				    [mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
				    ]]]
			  [have this-resource think_to_self 'finished walking towards']]]]
       
       nil]]

[deframe search_for [resource] []
  [new []
       [construct resource [type this]
		  [funk [desired_object]
			[let [[patience 30]]
			  [have this-resource think_to_self 'search_for activated']
			  [while 
			      [> patience 0]
			    [have this-resource think_to_self 'I still have patience']
			    [while [null [get this reactive_sensory_sense]] 
			      [millisleep 100]]
			    [if [null [get this objects]]
				[prog 
				 [have this-resource think_to_self  'no objects in view']
				 [mind-wait_to_activate [get this mind] reactive physical turn_left 1]
				 ]
			      [if [null [have [get this objects] lookup desired_object]]
				  [prog [have this-resource think_to_self 'i see these objects:' [get this objects]]
					[mind-wait_to_activate [get this mind] reactive physical turn_left 1]
					[print 'activated turn-left']
					[= patience [- patience 1]]
					]
				[prog [= patience 0]
				      [have this-resource think_to_self 'found it!']]]]]
			  [have this-resource think_to_self 'finished searching']]]]
       nil]]
[deframe avoid_obstacle [resource] []
  [new []
       [construct resource [type this]
		  [funk [desired_object obstacle]
			[mind-wait_to_activate [get this mind] reactive physical center_body_on desired_object]
			[labels [[walk_around [if_left]
					      [mind-wait_to_activate [get this mind] reactive physical center_body_on obstacle]
					      [let [[patience 30]]
						[if if_left
						    [prog [mind-wait_to_activate [get this mind] reactive physical turn_right 5]
							  [while [and [have this check_obstacle desired_object] [> patience 0]]
							    [mind-wait_to_activate [get this mind] reactive physical move_forward 3]
							    [mind-wait_to_activate [get this mind] reactive physical center_head_on obstacle]
							    [let [[distance [have [have [get this objects] lokup desired_object] lookup `distance]]]
							      [cond [[> distance 8]
								     [mind-wait_to_activate [get this mind] reactive physical turn_left 2]]
								    [[> distance 2]
								     [mind-wait_to_activate [get this mind] reactive physical turn_right 2]]
								    [t
								     [mind-wait_to_activate [get this mind] reactive physical move_forward 2]]]
							      [mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
							      [= patience [patience -1]]]]]
						  [prog [mind-wait_to_activate [get this mind] reactive physical turn_left 5]
							[while [and [have this check_obstacle desired_object] [patience >0]]
							  [mind-wait_to_activate [get this mind] reactive physical move_forward 3]
							  [mind-wait_to_activate [get this mind] reactive physical center_head_on obstacle]
							  [let [[distance [have [have [get this objects] lookup desired_object] lookup `distance]]]
							    [cond [[> distance 8]
								   [mind-wait_to_activate [get this mind] reactive physical turn_right 2]]
								  [[> distance 2]
								   [mind-wait_to_activate [get this mind] reactive physical turn_left 2]]
								  [t
								   [mind-wait_to_activate [get this mind] reactive physical move_forward 2]]]
							    [mind-wait_to_activate [get this mind] reactive physical search_for desired_object]
							    [= patience [patience -1]]]]]]]]]
				[walk_around [> 0 [have [have [get this objects] lookup obstacle] lookup `x_pos]]]]
			[mind-wait_to_activate [get this mind] reactive physical walk_directly_towards desired_object]]]
       
       nil]]


[deframe reactive_physical_agency [agency] []
  [new []
       [construct agency `physical]
       
       [have this add_resource [new turn_right]]
       [have this add_resource [new turn_left]]
       [have this add_resource [new move_forward]]			
       [have this add_resource [new move_backward]]
       [have this add_resource [new drop_from_left_hand]]
       [have this add_resource [new drop_from_right_hand]]
       [have this add_resource [new pick_up_with_right_hand]]
       [have this add_resource [new pick_up_with_left_hand]]
       [have this add_resource [new open_fridge]]
       [have this add_resource [new slice_toast]]
       [have this add_resource [new center_body_on]]
       [have this add_resource [new walk_towards]]
       [have this add_resource [new walk_directly_towards]]
       [have this add_resource [new search_for]]
       [have this add_resource [new avoid_obstacle]]
       [have this add_resource [new funk_user]] 
	
	this]]

