'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'now resources interact w/ simulator through (get body).'

'now when activating resource, have to set the slots in funk_user the resource. how to?'
'gotta check if things work...'
'so how does resource access the mind?  correct?

[have [get [get [get [get isis_world agent_mind `Ralph] layer `reactive] agency `physical] resource `funk_user] user_activate 
`open_fridge `[]]
[get [get isis_world agent_mind `Ralph] sense]


[defunk loop []
  [let [[i 10]]
    [while [> i 0]
      [test-step]
      [sleep 5]
      [= i [- i 1]]]]]
[defunk play []
  [globalize switch t]
  [while switch
    [test-mini]
    [sleep 2]]]

[defunk pause []
  [globalize switch nil]]
  
[pause]


'



[defunk list-contains_substring [sequence subexp]
  [let [[match nil]]
    [mapc [funk [exp]
		[if [string-contains [get exp as-string] [get subexp as-string]]
		    [= match exp]]]
	  sequence]
    match]]


[deframe funk_user  [resource] [[user_activate_mutex    [new traced_mutex]]
				[user_activate_resource nil]
				[user_activate_args     nil]]

  [new []
       [construct resource [type this]
		  [funk [][while t
			  `[print 'waiting for user to activate']
			   [if [null [get this user_activate_resource]]
			       [sleep 1]
			     [prog [have user_activate_mutex lock]
				   [print 'have lock']
			           [have-apply [get this mind] activate [print `[reactive physical ,[get this user_activate_resource] @[get this user_activate_args]]]]
				   [print 'activated']
				   [set this user_activate_resource nil]
				   [set this user_activate_args nil]
				   [print 'finish setting']
				   [have user_activate_mutex unlock]
				   ]]]]]
       nil]]

[deftypefunk funk_user execute user_activate [resource args]
  [print 'have funk_user user_activate']
  [have user_activate_mutex lock]
  [print 'lock']
  [set this user_activate_resource resource]
  [print 'set resources']
  [set this user_activate_args     args]
  [print 'set args']
  [have user_activate_mutex unlock]
  [print 'unlock']]

[deframe turn_right_resource [resource] []
  [new []
       [construct resource `turn_right
		  [funk [steps]
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Turning right is starting.']
			  [have world turn_right-start name]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world turn_right-stop name]]]]]
       nil]]

[deframe turn_left_resource [resource] []
  [new []
       [construct resource `turn_left
		  [funk [steps]
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Turning left is starting.']
			  [have world turn_left-start name]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
					       [millisleep 50]]
			    [have world turn_left-stop name]]]]]
			
       nil]]

[deframe move_forward_resource [resource] []
  [new []
       [construct resource `move_forward
		  [funk [steps]
			
			[print this]
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Moving forward is starting.']
			  [have world move_forward-start name]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world move_forward-stop name]]]
			]]
			
       nil]]

[deframe move_backward_resource [resource] []
  [new []
       [construct resource `move_backward
		  [funk [steps]
			[print 'reached move_backward']
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'moving backward is starting.']
			  [have world move_backward-start  name]
			  [let [[starting_time [get body time_step]]]
			    [while [< [- [get body time_step] starting_time] steps] 
			      [millisleep 50]]
			    [have world move_backward-stop  name]]]]]
       
       nil]]

[deframe drop_from_left_hand_resource [resource] []
  [new []
       [construct resource `drop_from_left_hand
		  [funk []
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]]
			  [have this-resource think_to_self 'Droping from right hand is starting.']
			  [have world drop_from_left_hand name]]]]
       
       nil]]

[deframe drop_from_right_hand_resource [resource] []
  [new []
       [construct resource `drop_from_right_hand
		  [funk []
			[let* [[body [get this body]]
			      [world [get body physical_world]]
			      [name  [get body name]]
			      ]
			  [have this-resource think_to_self 'Droping from right hand is starting.']
			  [have world drop_from_right_hand name]]]]
       
       nil]]


[deframe pick_up_with_right_hand_resource [resource] []
  [new []
       [construct resource `pick_up_with_right_hand
		  [funk [target]
			[let* [[body [get this body]]
			      [world [get body physical_world]] 
			      [mind  [get body mind]]
			      [name  [get body name]]
			      ] 
			  [have this-resource think_to_self 'Picking up with right hand is starting']
			  [if [get [get mind objects]]
			      [if [have [get mind objects] lookup target]
				  [if [> [get [get this body] arm_length] [have [have [get mind objects] lookup target]lookup  `distance]]
				      [if [null [have [get sensory reactive_sensory_sense] lookup `right_hand]]
					  [have world pick_up_with_right_hand name target]
					[mind-wait_to_activate mind reactive physical drop_from_right_hand]]
				    [prog 
				     [mind-wait_to_activate mind reactive physical walk_directly_towards target]
				     [have world  pick_up_with_right_hand name target]]]
				[prog 
				 [mind-wait_to_activate mind reactive physical walk_directly_towards target]
				 [have world  pick_up_with_right_hand name target]]]
			    [prog 
			     [mind-wait_to_activate mind reactive physical walk_directly_towards target]
			     [have world  pick_up_with_right_hand name target]]]
			  [get mind sense]]]]
		  
       nil]]

[deframe pick_up_with_left_hand_resource [resource] []
  [new []
       [construct resource `pick_up_with_left_hand
		  [funk [target]
			[let* [[body [get this body]]
			      [world [get body physical_world]] 
			      [mind  [get body mind]]
			      [name  [get body name]]
			      ] 
			  [have this-resource think_to_self 'Picking up with left hand is starting']
			  
			  [if [get [get mind objects]]
			      [if [have [get mind objects] lookup target]
				  [if [> [get [get this body] arm_length] [have [have [get mind objects] lookup target]lookup  `distance]]
				      [if [null [have [get sensory reactive_sensory_sense] lookup `left_hand]]
					  [have world pick_up_with_left_hand name target]
					[mind-wait_to_activate mind reactive physical drop_from_left_hand]]
				    [prog 
				     [mind-wait_to_activate mind reactive physical walk_directly_towards target]
				     [have world  pick_up_with_left_hand name target]]]
				[prog 
				 [mind-wait_to_activate mind reactive physical walk_directly_towards target]
				 [have world  pick_up_with_left_hand name target]]]
			    [prog 
			     [mind-wait_to_activate mind reactive physical walk_directly_towards target]
			     [have world  pick_up_with_left_hand name target]]]
			  [get mind sense]]]]
		  
       nil]]



[deframe open_fridge_resource [resource] []
  [new []
       [construct resource `open_fridge
		  [funk []
			
			[let* [[body [get this body]]
			       [world [get body physical_world]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [print 'now']
			  [mind-wait_to_activate mind reactive physical look_for `fridge]
			  [print 'now1']
			  [let[[ fridge [have look_for lookup `my_current_object]]]
			    [print 'ha']
			    
			    [if [get mind objects]
				[if [have [get mind objects] lookup fridge]
				    [if [> [get [get this body] arm_length] [have [have [get mind objects] lookup fridge] lookup  `distance]]
					[have world open_fridge name]
				      [prog 
				       [mind-wait_to_activate mind reactive physical walk_directly_towards fridge]
				       [have world  open_fridge name]]]
				  [prog 
				   [mind-wait_to_activate mind reactive physical walk_directly_towards fridge]
				   [have world open_fridge name]]]
			      [prog 
			       [mind-wait_to_activate mind reactive physical walk_directly_towards fridge]
			       [have world open_fridge name]]]
			    ]]]]
       
       
       nil]]

[deframe slice_toast_resource [resource] []
  [new []
       [construct resource `slice_toast
		  [funk []
			[let* [[body [get this body]]
			       [world [get body physical_world]] 
			       [mind  [get body mind]]
			       [name  [get body name]]]
			  [format stdout '/n slice_toast']
			  [mind-wait_to_activate mind reactive physical pick_up_with_left_hand knife]
			  [mind-wait_to_activate mind reactive physical walk_directly_towards loaf]
			  [have world use_left_hand name knife loaf]]]]
		  
       nil]]

[deframe center_body_on_resource [resource] []
  [new []
       [construct resource `center_body_on
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [world [get body physical_world]]
			       [mind  [get body mind]] 
			       [name  [get body name]]
			       ]
			  [have this-resource think_to_self 'center_body_on_object activated']
			  [labels[[ turn_left_and_right []
							[print 'here']
							[if [get mind objects]
							    [if [have [get mind objects] lookup desired_object] 
								[let [[x_pos [have [have [get mind objects] lookup desired_object] lookup `x_pos]]]
								  [cond [[>  x_pos 0.4]
									 [prog [have this-resource think_to_self   'x too positive' x_pos]
									       [mind-wait_to_activate mind reactive physical turn_right 1]
									       [have this-resource think_to_self   'i turned right']
									       [turn_left_and_right]]]
									[[< x_pos [- 0 0.4]]
									 [prog [have this-resource think_to_self   'x too negative' x_pos]
									       [mind-wait_to_activate mind reactive physical turn_left 1]
									       [have this-resource think_to_self 'i turned left']
									       [turn_left_and_right]]]
									[t
									 [have this-resource think_to_self 'centered']]]]
							      [prog [have this-resource think_to_self   'no objects in view']
								    [mind-wait_to_activate mind reactive physical search_for desired_object]
								    [turn_left_and_right]]]
							  [prog [have this-resource think_to_self   'my_object not in view']
								[mind-wait_to_activate mind reactive physical search_for desired_object]
								[turn_left_and_right]]]]]
			  [turn_left_and_right]]]]]
       
       
       
       nil]]

[deframe walk_towards_resource [resource] []
  [new []
       [construct resource `walk_towards
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [world [get body physical_world]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [mind-wait_to_activate mind reactive physical center_body_on desired_object]
			  [labels [[cautiously_walk []
						    [cond [[and [null [have this check_obstacle]] 
								[< [get [get this body] arm_length] [have [have [get mind objects] lookup desired_object] lookup `distance]]]
							   [prog [mind-wait_to_activate mind reactive physical move_forward 1]
								 [cautiously_walk]]]
							  [[> [get [get this body] arm_length] [have [have [get mind objects] lookup desired_object] lookup `distance]]
							 nil]
							  [[and [have this check_obstacle] 
								[< [get [get this body] arm_length] [have [have [get mind objects] lookup desired_object] lookup `distance]]]
							   [mind-wait_to_activate mind reactive physical avoid_obstacle desired_object [have this check_obstacle]]]
							  [t
							   [print 'weird, no conditions applied']]]]
				   [cautiously_walk]]]]]]
       
       
       nil]]


[deframe walk_directly_towards_resource [resource] []
  [new []
       [construct resource `walk_directly_towards_resource
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [world [get body physical_world]]
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[achieved nil]]
			    [have this-resource think_to_self ' walk_directly_towards activated!']
			    [while  [null achieved]
			      [have this-resource think_to_self ' not achieved']
			      
			      [if [get mind objects]
				  [if [have [get mind objects] lookup desired_object]
				      [if [< [get [get this body] arm_length] [have [have [get mind objects] lookup desired_object] lookup `distance]]
					  [prog 
					   [have this-resource think_to_self 'current distance:' [have [have [get mind objects] lookup desired_object] lookup `distance]]
					   [while [< [get [get this body] arm_length] [have [have [get mind objects] lookup desired_object] lookup `distance]]
					     [have this-resource think_to_self 'yes object, activating center on']
					     [mind-wait_to_activate mind reactive physical center_body_on desired_object]
					     
					     [have this-resource think_to_self 'activating move_forward']
					     [mind-wait_to_activate mind reactive physical move_forward 1]
					     
					     [print 'end of while loop']
					     [have this-resource think_to_self 'current distance:' [have [have [get mind objects] lookup desired_object] lookup `distance]]]
					   [have this-resource think_to_self 'object within arm_length now']]
					[prog [have this-resource think_to_self 'finally got it']
					    [= achieved t]]]
				    [prog [have this-resource think_to_self 'dont have object, activating search']
					  [mind-wait_to_activate mind reactive physical search_for desired_object]
					  ]]   
				[prog [have this-resource think_to_self 'dont have object, activating search']
				      [mind-wait_to_activate mind reactive physical search_for desired_object]
				      ]]]
			    [have this-resource think_to_self 'finished walking towards']]]]]
       
       nil]]

[deframe look_for_resource [resource] [[my_current_object nil]]
  [new []
       [construct resource `look_for
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [world [get body physical_world]] 
			       [mind  [get body mind]]
			       [name  [get body name]]
			       
			       ]
			  [let [[patience 30]]
			    [have this-resource think_to_self 'search_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [while [null [get mind sense]] 
				[millisleep 100]]
			      [if [null [get mind objects]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind reactive physical turn_left 1]
				   ]
				[if [null [list-contains_substring [get [get mind objects] slots] desired_object]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get mind objects]]
					  [mind-wait_to_activate mind reactive physical turn_left 1]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[have this-resource think_to_self 'found' [list-contains_substring [get [get mind objects] slots] desired_object]]
					[= my_current_object [list-contains_substring [get [get mind objects] slots] desired_object]]]]]]
			    [have this-resource think_to_self 'finished searching']]]]]
       nil]]

[deframe search_for_resource [resource] []
  [new []
       [construct resource `search_for
		  [funk [desired_object]
			[let* [[body [get this body]]
			       [world [get body physical_world]] 
			       [mind  [get body mind]]
			       [name  [get body name]]
			       ]
			  [let [[patience 30]]
			    [have this-resource think_to_self 'search_for activated']
			    [while 
				[> patience 0]
			      [have this-resource think_to_self 'I still have patience']
			      [while [null [get mind sense]] 
				[millisleep 100]]
			      [if [null [get mind objects]]
				  [prog 
				   [have this-resource think_to_self  'no objects in view']
				   [mind-wait_to_activate mind reactive physical turn_left 1]
				   ]
				[if [null [have [get mind objects] lookup desired_object]]
				    [prog [have this-resource think_to_self 'i see these objects:' [get mind objects]]
					  [mind-wait_to_activate mind reactive physical turn_left 1]
					  [print 'activated turn-left']
					[= patience [- patience 1]]
					]
				  [prog [= patience 0]
					[have this-resource think_to_self 'found it!']]]]]
			    [have this-resource think_to_self 'finished searching']]]]]
       nil]]

[deframe avoid_obstacle_resource [resource] []
  [new []
       [construct resource `avoid_obstacle
		  [funk [desired_object obstacle]
			[let* [[body [get this body]]
			       [world [get body physical_world]] 
			       [mind  [get body mind]]
			       [name  [get body name]]
			       [sense [get [get mind agency reactive sensory] reactive_sensory_sense]]]
			  [mind-wait_to_activate mind reactive physical center_body_on desired_object]
			  [labels [[walk_around [if_left]
						[mind-wait_to_activate mind reactive physical center_body_on obstacle]
						[let [[patience 30]]
						  [if if_left
						      [prog [mind-wait_to_activate mind reactive physical turn_right 5]
							    [while [and [have this check_obstacle desired_object] [> patience 0]]
							      [mind-wait_to_activate mind reactive physical move_forward 3]
							      [mind-wait_to_activate mind reactive physical center_head_on obstacle]
							      [let [[distance [have [have [get mind objects] lokup desired_object] lookup `distance]]]
								[cond [[> distance 8]
								       [mind-wait_to_activate mind reactive physical turn_left 2]]
								      [[> distance 2]
								       [mind-wait_to_activate mind reactive physical turn_right 2]]
								      [t
								       [mind-wait_to_activate mind reactive physical move_forward 2]]]
								[mind-wait_to_activate mind reactive physical search_for desired_object]
								[= patience [patience -1]]]]]
						    [prog [mind-wait_to_activate mind reactive physical turn_left 5]
							  [while [and [have this check_obstacle desired_object] [patience >0]]
							    [mind-wait_to_activate mind reactive physical move_forward 3]
							    [mind-wait_to_activate mind reactive physical center_head_on obstacle]
							    [let [[distance [have [have [get mind objects] lookup desired_object] lookup `distance]]]
							      [cond [[> distance 8]
								     [mind-wait_to_activate mind reactive physical turn_right 2]]
								    [[> distance 2]
								     [mind-wait_to_activate mind reactive physical turn_left 2]]
								    [t
								     [mind-wait_to_activate mind reactive physical move_forward 2]]]
							      [mind-wait_to_activate mind reactive physical search_for desired_object]
							      [= patience [patience -1]]]]]]]]]
				  [walk_around [> 0 [have [have [get mind objects] lookup obstacle] lookup `x_pos]]]]
			  [mind-wait_to_activate mind  reactive physical walk_directly_towards desired_object]]]]
		  
		  nil]]


[deframe reactive_physical_agency [agency] []
  [new []
       [construct agency `physical]
       
       [have this add_resource [new turn_right_resource]]
       [have this add_resource [new turn_left_resource]]
       [have this add_resource [new move_forward_resource]]			
       [have this add_resource [new move_backward_resource]]
       [have this add_resource [new drop_from_left_hand_resource]]
       [have this add_resource [new drop_from_right_hand_resource]]
       [have this add_resource [new pick_up_with_right_hand_resource]]
       [have this add_resource [new pick_up_with_left_hand_resource]]
       [have this add_resource [new open_fridge_resource]]
       [have this add_resource [new slice_toast_resource]]
       [have this add_resource [new center_body_on_resource]]
       [have this add_resource [new walk_towards_resource]]
       [have this add_resource [new walk_directly_towards_resource]]
       [have this add_resource [new search_for_resource]]
       [have this add_resource [new avoid_obstacle_resource]]
       [have this add_resource [new funk_user_resource]] 
       [have this add_resource [new look_for_resource]]
	
	this]]


