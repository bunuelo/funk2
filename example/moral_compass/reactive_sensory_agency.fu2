'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe reactive_sensory_agency [agency] [reactive_sensory_sense
					   reactive_sensory_story]
  [new []
       [construct agency `sensory]
       
       [have this add_resource [resource continuous_sensing []
					 [let [[body [get this body]]]
					   [have this-resource think_to_self 'Continuous sensing is starting.']
					   [let [[last_time_step nil]]
					     [while t
					       [let [[time_step [get body time_step]]]
						 [if [eq last_time_step time_step]
						     [millisleep 1000]
						   [let [[sense [have body sense_world]]]
						     [have this-resource think_to_self 'My body senses the world.']
						     [= reactive_sensory_sense sense]
						     [= last_time_step time_step]
						     [mind-wait_to_activate [get this mind] reactive sensory propogate_sense_to_story]
						     ]]]
					       ]]]]]
       
       [have this add_resource [resource propogate_sense_to_story []
					 [let [[body [get this body]]]
					   [let [[sense [get this reactive_sensory_sense]]]
					     [have this-resource think_to_self 'Propogating sense->story.']
					     [let [[sense_agent_frame [have sense lookup `agents]]
						   [story             [new story]]]
					       [let [[agent_names [get sense_agent_frame slots]]]
						 [if agent_names
						     [have this-resource think_to_self 'While propogating sense->story, I can see agents, ' agent_names '.']
						   [have this-resource think_to_self 'While propogating sense->story, I cannot see any other agents.']]
						 [mapc [funk [agent_name]
							     [have this-resource think_to_self 'debug 0']
							     [let [[agent [have sense_agent_frame lookup agent_name]]]
							       [have this-resource think_to_self 'debug 1']
							       [have story add_new_character agent_name]
							       [have this-resource think_to_self 'debug 2']
							       [story-create_event story [get body time_step] `I `sees agent_name]
							       [have this-resource think_to_self 'debug 3']
							       [let [[says [have agent lookup `says]]]
								 [have this-resource think_to_self 'debug 4']
								 [if says
								     [mapc [funk [say]
										 [have this-resource think_to_self 'debug 5']
										 [have this-resource think_to_self 'While propogating sense->story, I can hear ' agent_name ' saying, "' say '"']
										 [story-create_event story [get body time_step] agent_name `says say]
										 [have this-resource think_to_self 'debug 6']
										 ]
									   says]]]]]
						       agent_names]]
					       [have this-resource think_to_self 'debug 7']
					       [set this reactive_sensory_story story]
					       [have this-resource think_to_self 'debug 8']
					       [mind-wait_to_activate [get this mind] deliberative reality include_reactive_stories_into_deliberative_story]
					       [have this-resource think_to_self 'debug 9']
					       [have this-resource think_to_self 'While propogating sense->story, I created this story: ' [get story as-list] '.']
					       [have this-resource think_to_self 'debug 10']
					       ]]]]]
       
       [have this add_resource [resource sense_imprimer_scold [imprimer]
					 [let [[body [get this body]]]
					   [if [get [get imprimer speech] is-scold]
					       [prog [have this-resource think_to_self 'Uh oh, my imprimer, ' [get imprimer name] ', said something that sounds like a scold!']
						     [cause-define cause-time_step [get body time_step]]
						     [cause-define cause-name      `[reactive sensory sense_imprimer_scold]]
						     [let [[imprimer_focus [mind-call reactive sensory discover_person_focus imprimer]]]
						       [mind-wait_to_activate mind self_conscious imprimer react_to_imprimer_scold
									      imprimer imprimer_focus]]]
					     [have this-resource think_to_self 'My imprimer, ' [get imprimer name] ', is not scolding me.']]
					   ]]]
       
       [have this add_resource [resource object_in_view [object_name]
					 [labels [[is_object [a_list]
							     [if a_list
								 [if [have [get [car a_list] as-string] contains [get object_name as-string]]
								     [car a_list]
								   [is_knife [cdr a_list]]]
							       nil]]]
						 [is_object [get [get this objects] slots]]]]]
       
       this]]




`[have [get isis_world agent `Ralph] user_activate `pick_up_with_left_hand knife]
`[mind-activate [get isis_world agent_mind `Ralph]  reactive  physical walk_directly_towards  `loaf+177603644]
`[have [get isis_world agent_mind `Ralph] activate [cons `reactive [cons `physical `[move_forward 3]]]]
`[have-apply [get isis_world agent_mind `Lauren]  activate [cons `reactive [cons `physical `[`move_forward 3]]]]

