'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe self_reflective_meta_mental_knowledge_agency [agency] []
  [new []					 
       [construct agency `meta_mental_knowledge]

       [have this add_resource [new translate_mental_knowledge_to_meta_mental_knowledge_resource]]
       
       this]]

[deftypefunk self_reflective_meta_mental_knowledge_agency execute create_knowledge []
  [new meta_semantic_knowledge_base `meta_mental_knowledge [get [get this mind] semantic_realm]]]

[deftypefunk self_reflective_meta_mental_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `mental_knowledge `mental_knowledge->meta_mental_knowledge]]


[deframe translate_mental_knowledge_to_meta_mental_knowledge_resource [traced_resource] []
  [new []
       [construct traced_resource `translate_mental_knowledge_to_meta_mental_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       [= vital t]
       nil]]

[deftypefunk translate_mental_knowledge_to_meta_mental_knowledge_resource execute execute_resource_raw_funk []
  `[= debug t]
  [let [[mental_knowledge_iterator      [get [get this mind] knowledge_event_stream_iterator `mental_knowledge->meta_mental_knowledge]]
	[meta_mental_sequence_knowledge [get [get this mind] semantic_knowledge_base `meta_mental_sequence_knowledge]]]
    [while t
      [let [[event [have mental_knowledge_iterator wait_for_current]]]
	[if [not [null event]]
	    [prog [have this-resource think_to_self '\n  debug 1. translate mental->meta_mental event: ' event]
		  [let [[event_type [get event event_type]]]
		    [cond [[is-type `semantic_knowledge_base_event event]
			   
			   [cond [[eq event_type `add_semantic_frame]
				  
				  [have this-resource think_to_self '\n  debug A1: translate mental->meta_mental add_semantic_frame resource action event: ' event]
				  [let [[semantic_frame [get event semantic_frame]]]
				    [have this-resource think_to_self '\n  debug A2: translate mental->meta_mental add_semantic_frame resource action event semantic_frame: ' semantic_frame]
				    [cond [[is-type `semantic_resource_action_event semantic_frame]
					   
					   [have this-resource think_to_self '\n  debug A3: translate mental->meta_mental add_semantic_frame semantic_resource_action_event: ' event]
					   [let [[action_name [semantic-get semantic_frame action_name]]
						 [agent       [semantic-get semantic_frame agent]]
						 [target      [semantic-get semantic_frame target]]]
					     [have this-resource think_to_self '\n  debug A4: translate mental->meta_mental add_semantic_frame semantic_resource_action_event action_name: ' action_name]
					     
					     [cond [[eq action_name `cause_being_active]
						    [have this-resource think_to_self '\n  debug A5: translate mental->meta_mental add_semantic_frame semantic_resource_action_event cause_being_active: ' event]
						    
						    [let [[current_action_sequence [new semantic_resource_action_sequence [get [get this mind] semantic_realm] `event_sequence agent]]]
						      [semantic-set current_action_sequence absolute_start_time [time]]
						      [have this-resource think_to_self '\n    *** debug A7: translate mental->meta_mental add_semantic_frame cause_being_active resource_semantic_frame current_action_sequence: ' current_action_sequence]
						      [if agent
							  [if [not [get meta_mental_sequence_knowledge contains_semantic_frame agent]]
							      [have meta_mental_sequence_knowledge add_semantic_frame agent]]]
						      [if [not [get meta_mental_sequence_knowledge contains_semantic_frame target]]
							  [have meta_mental_sequence_knowledge add_semantic_frame target]]
						      [have meta_mental_sequence_knowledge add_semantic_frame current_action_sequence]
						      [semantic-add target action_sequence         current_action_sequence]
						      [semantic-set target current_action_sequence current_action_sequence]]]
						   [t
						    [have this-resource think_to_self '\n  debug A8: translate mental->meta_mental add_semantic_frame semantic_resource_action_event *: ' event]
						    
						    [if agent
							[let [[current_action_sequence [semantic-get agent current_action_sequence]]]
							  [if [null current_action_sequence]
							      [prog [have this-resource think_to_self '\n  debug A10: current_action_sequence is nil, so not recording event:' event]
								    `[error funkname `translate_mental_knowledge_to_meta_mental_knowledge_resource-execute_resource_raw_funk
									    bug_type `current_action_sequence_is_nil
									    event    event]]
							    [let [[semantic_event [get event semantic_frame]]]
							      [have this-resource think_to_self '\n   *** debug A11: adding event to end of sequence: ' semantic_event]
							      [have current_action_sequence        add_to_end         semantic_event]
							      [have meta_mental_sequence_knowledge add_semantic_frame semantic_event]
							      '  => add to action_sequence_cause_frame for the affected agent.']]]
						      [prog [have this-resource think_to_self '\n   debug A12: no agent defined, cannot add event to agent sequence: ' event]
							    ]]]]
					     ]]
					  ]
				    ]]
				 [[eq event_type `remove_semantic_frame]
				  [have this-resource think_to_self '\n  debug R1: translate mental->meta_mental remove_semantic_frame resource action event: ' event]
				  [let [[semantic_frame [get event semantic_frame]]]
				    [have this-resource think_to_self '\n  debug R2: translate mental->meta_mental remove_semantic_frame resource action event semantic_frame: ' semantic_frame]
				    [cond [[is-type `semantic_resource_action_event semantic_frame]
					   
					   [have this-resource think_to_self '\n  debug R3: translate mental->meta_mental remove_semantic_frame semantic_resource_action_event: ' event]
					   [let [[action_name [semantic-get semantic_frame action_name]]
						 [agent       [semantic-get semantic_frame agent]]
						 [target      [semantic-get semantic_frame target]]]
					     [cond [[eq action_name `cause_being_active]
						    
						    [have this-resource think_to_self '\n  debug R4: translate mental->meta_mental remove_semantic_frame semantic_resource_action_event cause_being_active: ' event]
						    
						    [let [[current_action_sequence [semantic-get target current_action_sequence]]]
						      [have this-resource think_to_self   '\n    *** debug R7: translate mental->meta_mental remove_semantic_frame cause_being_active resource action event cause_being_active current_action_sequence: ' current_action_sequence]
						      
						      `[semantic-set current_action_sequence absolute_end_time [time]]
						      [semantic-set target current_action_sequence nil]]]]
					     ]]
					  ]
				    ]]]]
			  [[is-type `semantic_frame_event event]
			   
			   [cond [[eq event_type `add]
				  [let [[key_type [get event key_type]]
					[key      [get event key]]]
				    
				    ]]]]
			  ]]]]
	[have mental_knowledge_iterator increment]]]]]



