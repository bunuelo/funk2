'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe blocks_world_reflective_mind [reflective_mind] []
  [new []
       [construct reflective_mind]
       
       [type-have blocks_world_reflective_mind this create_resources]
       [type-have blocks_world_reflective_mind this create_builtin_goals]
       [type-have blocks_world_reflective_mind this create_builtin_actions]
       [type-have blocks_world_reflective_mind this create_builtin_plans]
       
       [terminal_format standard-terminal '\nblocks_world_reflective_mind: created.']
       ]]

[deftypefunk blocks_world_reflective_mind execute create_resources []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating resources.']
  
  'create blocks_world agent specific physical commands in parallel'
  [parog [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_left_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_right_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-grab_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-drop_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-stop_resource]]]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_goals []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in goals.']
  
  'create blocks_world agent specific learning goals in parallel'
  `[have-apply this create_physical_type_property_relationship_goal `[block color red   preposition below    gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color red   preposition right-of gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color red   preposition left-of  gripper is-me t]]
  [have-apply this create_physical_type_property_relationship_goal `[block color green preposition below    gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color green preposition right-of gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color green preposition left-of  gripper is-me t]]
  [have-apply this create_physical_type_property_relationship_goal `[block color blue  preposition below    gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color blue  preposition right-of gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color blue  preposition left-of  gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color brown preposition below    gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color brown preposition right-of gripper is-me t]]
  `[have-apply this create_physical_type_property_relationship_goal `[block color brown preposition left-of  gripper is-me t]]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_actions []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in actions.']
  
  'create blocks_world agent specific actions'
  
  [have-apply this create_physical_action `[builtin_reactive physical move_left]]
  [have-apply this create_physical_action `[builtin_reactive physical move_right]]
  [have-apply this create_physical_action `[builtin_reactive physical grab]]
  [have-apply this create_physical_action `[builtin_reactive physical drop]]
  [have-apply this create_physical_action `[builtin_reactive physical stop]] 
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_plans []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in plans.']
  
  'create blocks_world agent specific plans'
  
  [let [[start_operator nil]]
    [let [[plan_operators [conslist [let* [[activation_operator       [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `move_left] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator       [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `grab] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator       [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `move_right] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator       [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `drop] resource_semantic_frame]]
				      `[semantic-add counterfactual_transframe hypothesized_add_percept ]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    ]]]
      [let [[sequence_operator_iter nil]
	    [plan_operator_iter     plan_operators]]
	[while plan_operator_iter
	  [let [[new_sequence_operator [new semantic_plan_operator_sequence [get this semantic_realm]]]]
	    [if sequence_operator_iter
		[set sequence_operator_iter future_operator new_sequence_operator]]
	    [= sequence_operator_iter new_sequence_operator]
	    [if [null start_operator]
		[= start_operator sequence_operator_iter]]
	    [set sequence_operator_iter past_operator [car plan_operator_iter]]
	    [= plan_operator_iter [cdr plan_operator_iter]]]]]]
    [have this create_physical_semantic_plan `[prog [wait-to-call move_left]
						    [wait-for-relationship block shape cube below gripper is-me t]
						    [wait-to-call grab]
						    [wait-for-property gripper is-me t movement_command stop]
						    [wait-to-call move_right]
						    [wait-for-relationship block shape pyramid below gripper is-me t]
						    [wait-to-call drop]
						    [wait-for-time 8]
						    [wait-for-relationship block shape cube on block shape pyramid]
						    ]
	  start_operator]]
  
  [let [[start_operator nil]]
    [let [[plan_operators [conslist [let* [[activation_operator [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `move_right] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `grab] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `move_left] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    [let* [[activation_operator [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `builtin_reactive `physical `drop] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    ]]]
      [let [[sequence_operator_iter nil]
	    [plan_operator_iter     plan_operators]]
	[while plan_operator_iter
	  [let [[new_sequence_operator [new semantic_plan_operator_sequence [get this semantic_realm]]]]
	    [if sequence_operator_iter
		[set sequence_operator_iter future_operator new_sequence_operator]]
	    [= sequence_operator_iter new_sequence_operator]
	    [if [null start_operator]
		[= start_operator sequence_operator_iter]]
	    [set sequence_operator_iter past_operator [car plan_operator_iter]]
	    [= plan_operator_iter [cdr plan_operator_iter]]]]]]
    [have this create_physical_semantic_plan `[prog [wait-to-call move_right]
						    [wait-for-relationship block shape pyramid below gripper is-me t]
						    [wait-to-call grab]
						    [wait-for-property gripper is-me t movement_command stop]
						    [wait-to-call move_left]
						    [wait-for-relationship block shape cube below gripper is-me t]
						    [wait-to-call drop]
						    [wait-for-time 8]
						    [wait-for-relationship block shape pyramid on block shape cube]
						    ]
	  start_operator]]
  
  [let [[start_operator nil]]
    [let [[plan_operators [conslist [let* [[activation_operator [new semantic_plan_operator_activation [get this semantic_realm]]]
					   [counterfactual_transframe [new semantic_counterfactual_transframe [get this semantic_realm]]]]
				      [set counterfactual_transframe resource_activation_dependency [get [get this resource `deliberative `plan `execute_plan_in_focus] resource_semantic_frame]]
				      [set activation_operator counterfactual_transframe counterfactual_transframe]
				      activation_operator]
				    ]]]
      [let [[sequence_operator_iter nil]
	    [plan_operator_iter     plan_operators]]
	[while plan_operator_iter
	  [let [[new_sequence_operator [new semantic_plan_operator_sequence [get this semantic_realm]]]]
	    [if sequence_operator_iter
		[set sequence_operator_iter future_operator new_sequence_operator]]
	    [= sequence_operator_iter new_sequence_operator]
	    [if [null start_operator]
		[= start_operator sequence_operator_iter]]
	    [set sequence_operator_iter past_operator [car plan_operator_iter]]
	    [= plan_operator_iter [cdr plan_operator_iter]]]]]]
    [have this create_reflective_semantic_plan `[prog [wait-to-call |focus on a plan, plan 1|]
						      [wait-to-call execute_plan_in_focus]
						      [wait-for-relationship semantic_plan_object plan_object_type semantic_plan_object failure semantic_plan_object plan_object_type semantic_expectation_failure]
						      [wait-to-call |focus on a plan, plan 2|]
						      [wait-to-call execute_plan_in_focus]
						      [wait-for-relationship semantic_plan_object plan_object_type semantic_plan_object failure semantic_plan_object plan_object_type semantic_expectation_failure]
						      ]
	  start_operator]]
  
  nil]

