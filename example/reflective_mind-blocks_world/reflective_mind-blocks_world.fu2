'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe blocks_world_reflective_mind [reflective_mind] []
  [new []
       [construct reflective_mind]
       
       [type-have blocks_world_reflective_mind this create_resources]
       [type-have blocks_world_reflective_mind this create_builtin_goals]
       ]]

[deftypefunk blocks_world_reflective_mind execute create_resources []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating resources.']
  
  'create blocks_world agent specific physical commands in parallel'
  [parog [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_left_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_right_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-grab_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-drop_resource]]]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_goals []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in goals.']
  
  'create blocks_world agent specific learning goals in parallel'
  [parog [have this create_physical_type_relationship_goal `gripper `preposition `is-holding `block]
	 [have this create_physical_type_relationship_goal `block   `preposition `below      `gripper]
	 [have this create_physical_type_relationship_goal `block   `preposition `on         `block]
	 [have this create_physical_type_relationship_goal `block   `preposition `left-of    `gripper]
	 [have this create_physical_type_relationship_goal `block   `preposition `right-of   `gripper]
	 
	 [have this create_physical_type_property_relationship_goal `block `red    `preposition `below  `gripper `?]
	 [have this create_physical_type_property_relationship_goal `block `green  `preposition `below  `gripper `?]
	 [have this create_physical_type_property_relationship_goal `block `blue   `preposition `below  `gripper `?]
	 [have this create_physical_type_property_relationship_goal `block `brown  `preposition `below  `gripper `?]
	 [have this create_physical_type_property_relationship_goal `block `white  `preposition `below  `gripper `?]
	 [have this create_physical_type_property_relationship_goal `block `black  `preposition `below  `gripper `?]]
  
  nil]

