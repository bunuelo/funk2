'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe blocks_world_reflective_mind [reflective_mind] []
  [new []
       [construct reflective_mind]
       
       [type-have blocks_world_reflective_mind this create_resources]
       [type-have blocks_world_reflective_mind this create_builtin_goals]
       [type-have blocks_world_reflective_mind this create_builtin_actions]
       [type-have blocks_world_reflective_mind this create_builtin_plans]
       
       [terminal_format standard-terminal '\nblocks_world_reflective_mind: created.']
       ]]

[deftypefunk blocks_world_reflective_mind execute create_resources []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating resources.']
  
  'create blocks_world agent specific physical commands in parallel'
  [parog 'builtin resources'
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_left_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_right_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-grab_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-drop_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-stop_resource]]
	 
	 'learned resources'
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_left_until_over_pyramid_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_right_until_over_pyramid_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_left_until_over_cube_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_right_until_over_cube_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-attempt_to_grab_block_until_gripper_stops_moving_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-drop_block_and_wait_for_block_to_fall_resource]]
	 
	 ]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_goals []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in goals.']
  
  'create blocks_world agent specific learning goals in parallel'
  [have-apply this create_physical_type_property_relationship_goal `[block color green   preposition below gripper is-me t]]
  [have-apply this create_physical_type_property_relationship_goal `[block color blue    preposition below gripper is-me t]]
  [have-apply this create_physical_type_property_relationship_goal `[block shape pyramid preposition on    block   shape cube]]
  [have-apply this create_physical_type_property_relationship_goal `[block shape cube    preposition on    block   shape pyramid]]
  
  [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_plan_object plan_object_type       physical      relationship failure  semantic_expectation_failure reflective_object_type semantic_expectation_failure]]
  [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_planner     planner_type           deliberative1 relation     bug_plan semantic_plan_object         bug_name               assure_physical_relationship-failed]]
  
  [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_plan_object bug_name assure_physical_relationship-failed      physical      relationship failure  semantic_expectation_failure reflective_object_type semantic_expectation_failure]]

  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_actions []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in actions.']
  
  'create blocks_world agent specific actions'
  
  [have-apply this create_physical_action `[builtin_reactive physical move_left]]
  [have-apply this create_physical_action `[builtin_reactive physical move_right]]
  [have-apply this create_physical_action `[builtin_reactive physical grab]]
  [have-apply this create_physical_action `[builtin_reactive physical drop]]
  [have-apply this create_physical_action `[builtin_reactive physical stop]] 

  [have-apply this create_physical_action `[learned_reactive physical move_left_until_over_pyramid]]
  [have-apply this create_physical_action `[learned_reactive physical move_right_until_over_pyramid]]
  [have-apply this create_physical_action `[learned_reactive physical move_left_until_over_cube]]
  [have-apply this create_physical_action `[learned_reactive physical move_right_until_over_cube]]
  [have-apply this create_physical_action `[learned_reactive physical attempt_to_grab_block_until_gripper_stops_moving]]
  [have-apply this create_physical_action `[learned_reactive physical drop_block_and_wait_for_block_to_fall]]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_plans []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in plans.']
  
  'add "being told" knowledge to resources'
  
  [have [get this mind] add_resource_change_relationship_hypothesis
	`learned_reactive `physical `drop_block_and_wait_for_block_to_fall
	`addition
	`block `shape `cube `preposition `on `block `shape `pyramid]
  
  [have [get this mind] add_resource_change_relationship_hypothesis
	`learned_reactive `physical `drop_block_and_wait_for_block_to_fall
	`addition
	`block `shape `pyramid `preposition `on `block `shape `cube]
  
  
  'create blocks_world agent specific plans'
  
  `[have this create_physical_semantic_plan
	 `[]
	 `[prog [wait-to-call move_left]
		[wait-for-time 1]
		[wait-for-physical-relationship block shape cube below gripper is-me t]
		[wait-to-call grab]
		[wait-for-time 10]
		[wait-for-physical-property gripper is-me t movement_command stop]
		[wait-to-call move_right]
		[wait-for-time 1]
		[wait-for-physical-relationship block shape pyramid below gripper is-me t]
		[wait-to-call drop]
		[wait-for-time 8]
		[assure-physical-relationship block shape cube on block shape pyramid]
		]]
  [have this create_physical_semantic_plan
	`[]
	`[prog [wait-to-call move_left_until_over_cube]
	       [wait-to-call attempt_to_grab_block_until_gripper_stops_moving]
	       [wait-to-call move_right_until_over_pyramid]
	       [wait-to-call drop_block_and_wait_for_block_to_fall]
	       [assure-physical-relationship block shape cube on block shape pyramid]
	       ]]
  
  `[have this create_physical_semantic_plan
	 `[]
	 `[prog [wait-to-call move_right]
		[wait-for-physical-relationship block shape pyramid below gripper is-me t]
		[wait-to-call grab]
		[wait-for-physical-property gripper is-me t movement_command stop]
		[wait-to-call move_left]
		[wait-for-physical-relationship block shape cube below gripper is-me t]
		[wait-to-call drop]
		[wait-for-time 8]
		[assure-physical-relationship block shape pyramid on block shape cube]
		]]
  `[have this create_physical_semantic_plan
	 `[]
	 `[prog [wait-to-call grab]
		[wait-for-time 10]
		[wait-for-physical-property gripper is-me t movement_command stop]
		[wait-to-call move_right]
		[wait-for-time 1]
		[wait-for-physical-relationship block shape cube below gripper is-me t]
		[wait-to-call drop]
		[wait-for-time 8]
		[assure-physical-relationship block shape pyramid on block shape cube]
		]]
  [have this create_physical_semantic_plan
	`[]
	`[prog [wait-to-call attempt_to_grab_block_until_gripper_stops_moving]
	       [wait-to-call move_right_until_over_cube]
	       [wait-to-call drop_block_and_wait_for_block_to_fall]
	       [assure-physical-relationship block shape pyramid on block shape cube]
	       ]]
  
  [have this create_physical_semantic_plan
	`[]
	`[prog [assure-physical-relationship block shape pyramid on block shape cube]
	       ]]
  
  [have this create_physical_semantic_plan
	`[]
	`[prog [assure-physical-relationship block shape pyramid on table color white]
	       ]]
  
  'reflective plans'
  
  [have this create_reflective_semantic_plan
	`[]
	`[prog [wait-to-call |forget all imagined events|]
	       [wait-to-call |set imagine time to be now|]
	       [wait-to-call |imagine current situation|]
	       [wait-to-call |focus on a plan, plan 1|]
	       [wait-to-call |imagine executing plan in focus|]
	       [wait-to-call |forget all imagined events|]
	       [wait-to-call execute_plan_in_focus]
	       ]]
  
  [have this create_reflective_semantic_plan
	`[]
	`[prog [wait-to-call |remember plan for goal|]
	       [wait-to-call execute_plan_in_focus]
	       ]]
  
  [have this create_reflective_semantic_plan
	`[]
	`[prog [while [not [relationship-exists semantic_planner
						planner_type
						deliberative1
						relation
						goal_plan
						semantic_plan_object
						reflective_object_type
						semantic_plan_object]]
		 [wait-to-call |forget all imagined events|]
		 [wait-to-call |set imagine time to be now|]
		 [wait-to-call |imagine current situation|]
		 [wait-to-call |focus on a plan, plan 1|]
		 [wait-to-call |imagine executing plan in focus|]
		 [wait-to-call |forget all imagined events|]]
	       [wait-to-call |remember plan for goal|]
	       [wait-to-call execute_plan_in_focus]
	       ]]
  
  nil]

