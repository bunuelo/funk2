'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe blocks_world_reflective_mind [reflective_mind] []
  [new []
       [construct reflective_mind]
       
       [type-have blocks_world_reflective_mind this create_resources]
       [type-have blocks_world_reflective_mind this create_builtin_goals]
       [type-have blocks_world_reflective_mind this create_builtin_actions]
       [type-have blocks_world_reflective_mind this create_builtin_plans]
       
       [terminal_format standard-terminal '\nblocks_world_reflective_mind: created.']
       ]]

[deftypefunk blocks_world_reflective_mind execute create_resources []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating resources.']
  
  'create blocks_world agent specific physical commands in parallel'
  [parog 'builtin resources'
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_left_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-move_right_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-grab_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-drop_resource]]
	 [have this add_resource `builtin_reactive `physical [new reflective_mind-blocks_world-stop_resource]]
	 
	 'learned resources'
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_left_until_over_pyramid_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_right_until_over_pyramid_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_left_until_over_cube_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-move_right_until_over_cube_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-attempt_to_grab_block_until_gripper_stops_moving_resource]]
	 [have this add_resource `learned_reactive `physical [new reflective_mind-blocks_world-drop_block_and_wait_for_block_to_fall_resource]]
	 
	 ]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_goals []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in goals.']
  
  `[prog 'create blocks_world agent specific learning goals in parallel'
	 [have-apply this create_physical_type_property_relationship_goal `[block property color green   preposition below gripper property is-me t]]
	 [have-apply this create_physical_type_property_relationship_goal `[block property color blue    preposition below gripper property is-me t]]
	 [have-apply this create_physical_type_property_relationship_goal `[block property shape pyramid preposition on    block   property shape cube]]
	 [have-apply this create_physical_type_property_relationship_goal `[block property shape cube    preposition on    block   property shape pyramid]]
	 
	 [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_plan_object property plan_object_type       physical      relationship failure  semantic_expectation_failure property reflective_object_type semantic_expectation_failure]]
	 [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_planner     property planner_type           deliberative1 relation     bug_plan semantic_plan_object         property bug_name               assure_physical_relationship-failed]]
	 
	 [have-apply this create_deliberative1_type_property_relationship_goal `[semantic_plan_object
										 property
										 bug_name
										 assure_physical_relationship-failed
										 relationship
										 failure
										 semantic_expectation_failure
										 property
										 reflective_object_type
										 semantic_expectation_failure]]
	 ]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_actions []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in actions.']
  
  'create blocks_world agent specific actions'
  
  [parog [have-apply this create_physical_action `[builtin_reactive physical move_left]]
	 [have-apply this create_physical_action `[builtin_reactive physical move_right]]
	 [have-apply this create_physical_action `[builtin_reactive physical grab]]
	 [have-apply this create_physical_action `[builtin_reactive physical drop]]
	 [have-apply this create_physical_action `[builtin_reactive physical stop]]
	 
	 [have-apply this create_physical_action `[learned_reactive physical move_left_until_over_pyramid]]
	 [have-apply this create_physical_action `[learned_reactive physical move_right_until_over_pyramid]]
	 [have-apply this create_physical_action `[learned_reactive physical move_left_until_over_cube]]
	 [have-apply this create_physical_action `[learned_reactive physical move_right_until_over_cube]]
	 [have-apply this create_physical_action `[learned_reactive physical attempt_to_grab_block_until_gripper_stops_moving]]
	 [have-apply this create_physical_action `[learned_reactive physical drop_block_and_wait_for_block_to_fall]]]
  
  nil]

[deftypefunk blocks_world_reflective_mind execute create_builtin_plans []
  [terminal_format standard-terminal '\nblocks_world_reflective_mind: creating built-in plans.']
  
  'add "being told" knowledge to resources'
  
  [have-apply [get this mind] add_resource_change_relationship_hypothesis
	      `[learned_reactive physical drop_block_and_wait_for_block_to_fall
                addition
		block shape cube preposition on block shape pyramid]]
  
  [have-apply [get this mind] add_resource_change_relationship_hypothesis
	      `[learned_reactive physical drop_block_and_wait_for_block_to_fall
		addition
		block shape pyramid preposition on block shape cube]]
  
  
  'create blocks_world agent specific plans'
  
  [parog [have this create_deliberative_semantic_plan `[pick up a [? shape]] `[[shape cube]]
	       `[prog [if [exists [relationship block property shape [? shape]
						preposition left-of
						gripper property is-me t]]
			  [wait-to-call-below `[move left until over ,[? shape]]]]
		      
		      [if [exists [relationship block property shape [? shape]
						preposition right-of
						gripper property is-me t]]
			  [wait-to-call-below `[move right until over ,[? shape]]]]
		      
		      [wait-to-call-below `[attempt to grab block until gripper stops moving]]
		      
		      [assert [exists [relationship gripper property is-me t
						    preposition is-holding
						    block property shape [? shape]]]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[pick up a pyramid] `[]
	       `[prog [if [exists [relationship block property shape pyramid
						preposition left-of
						gripper property is-me t]]
			  [wait-to-call-below `[move left until over pyramid]]]
		      [if [exists [relationship block property shape pyramid
						preposition right-of
						gripper property is-me t]]
			  [wait-to-call-below `[move right until over pyramid]]]
		      [wait-to-call-below `[attempt to grab block until gripper stops moving]]
		      [assert [exists [relationship gripper property is-me t
						    preposition is-holding
						    block property shape pyramid]]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[drop the block I am holding on a pyramid] `[]
	       `[prog [if [exists [relationship block property shape pyramid
						preposition left-of
						gripper property is-me t]]
			  [wait-to-call-below `[move left until over pyramid]]]
		      [if [exists [relationship block property shape pyramid
						preposition right-of
						gripper property is-me t]]
			  [wait-to-call-below `[move right until over pyramid]]]
		      [wait-to-call-below `[drop block and wait for block to fall]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[drop the block I am holding on a cube] `[]
	       `[prog [if [exists [relationship block property shape cube
						preposition left-of
						gripper property is-me t]]
			  [wait-to-call-below `[move left until over cube]]]
		      [if [exists [relationship block property shape cube
						preposition right-of
						gripper property is-me t]]
			  [wait-to-call-below `[move right until over cube]]]
		      [wait-to-call-below `[drop block and wait for block to fall]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[stack a cube on a pyramid] `[]
	       `[prog [plan-call `[pick up a cube]]
		      [plan-call `[drop the block I am holding on a pyramid]]
		      [assert [exists [relationship block property shape cube
						    preposition on
						    block property shape pyramid]]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[stack a pyramid on a cube] `[]
	       `[prog [plan-call `[pick up a pyramid]]
		      [plan-call `[drop the block I am holding on a cube]]
		      [assert [exists [relationship block property shape pyramid
						    preposition on
						    block property shape cube]]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[assert that a pyramid is on a cube] `[]
	       `[prog [assert [exists [relationship block property shape pyramid
						    preposition on
						    block property shape cube]]]
		      ]]
	 
	 [have this create_deliberative_semantic_plan `[assert that a pyramid is on a table] `[]
	       `[prog [assert [exists [relationship block property shape pyramid
						    preposition on
						    table property color white]]]
		      ]]
	 ]
  
  'reflective plans'
  
  [parog [have this create_reflective_semantic_plan `[choose a plan and execute it] `[]
	       `[prog [wait-to-call-below `[forget all imagined events]]
		      [wait-to-call-below `[set imagine time to be now]]
		      [wait-to-call-below `[imagine current situation]]
		      [wait-to-call-below `[focus on the plan to stack a cube on a pyramid]]
		      [wait-to-call-below `[imagine executing plan in focus]]
		      [wait-to-call-below `[forget all imagined events]]
		      [wait-to-call-below `[execute plan in focus]]
		      ]]
	 
	 [have this create_reflective_semantic_plan `[remember a plan for a current goal and execute it] `[]
	       `[prog [wait-to-call-below `[remember plan for goal]]
		      [wait-to-call-below `[execute plan in focus]]
		      ]]
	 
	 ]
  
  nil]

