'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'controllable_object'

[deframe controllable_object [frame] [reflective_knowledge_base_name
				      [action_natural_language_symbol_ptypehash            [new ptypehash]]
				      [semantic_reflective_object_mutex                    [new mutex]]
				      [semantic_reflective_object_set_type_ptypehash_mutex [new mutex]]
				      [semantic_reflective_object_set_type_ptypehash       [new ptypehash]]]
  [new [initial-reflective_knowledge_base_name]
       [= reflective_knowledge_base_name initial-reflective_knowledge_base_name]
       ]]

[deftypefunk controllable_object execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_event_knowledge_base reflective_knowledge_base_name [get [get this mind] semantic_realm]]]]

[deftypefunk controllable_object get reflective_knowledge_base []
  [have [get [get this mind] semantic_realm] lookup_semantic_knowledge_base reflective_knowledge_base_name]]

[deftypefunk controllable_object get semantic_reflective_object [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object nil]]
    [have semantic_reflective_object_mutex lock]
    [= semantic_reflective_object [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame phenomenal_name]]
    [if [null semantic_reflective_object]
	[prog [= semantic_reflective_object [new semantic_reflective_object [get [get this mind] semantic_realm]]]
	      [set semantic_reflective_object phenomenal_name        phenomenal_name]
	      [set semantic_reflective_object reflective_object_type reflective_object_type]
	      [have [get [get this mind] semantic_realm] add_phenomenon_semantic_frame phenomenal_name semantic_reflective_object]
	      ]]
    [have semantic_reflective_object_mutex unlock]
    semantic_reflective_object]]

[deftypefunk controllable_object execute add_semantic_reflective_object_type [reflective_object_type semantic_reflective_object]
  [have semantic_reflective_object_set_type_ptypehash_mutex lock]
  [let [[semantic_reflective_object_set [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]]
    [if [null semantic_reflective_object_set]
	[prog [= semantic_reflective_object_set [new set]]
	      [have semantic_reflective_object_set_type_ptypehash add reflective_object_type semantic_reflective_object_set]]]
    [have semantic_reflective_object_set add semantic_reflective_object]]
  [have semantic_reflective_object_set_type_ptypehash_mutex unlock]]

[deftypefunk controllable_object execute remove_semantic_reflective_object_type [reflective_object_type semantic_reflective_object]
  [have semantic_reflective_object_set_type_ptypehash_mutex lock]
  [let [[semantic_reflective_object_set [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]]
    [have semantic_reflective_object_set remove semantic_reflective_object]
    [if [get semantic_reflective_object_set is_empty]
	[have semantic_reflective_object_set_type_ptypehash remove reflective_object_type]]]
  [have semantic_reflective_object_set_type_ptypehash_mutex unlock]]

'The possible set returned by this funk is READ ONLY and is not to be modified outside of the interface above.'
[deftypefunk controllable_object execute lookup_set_semantic_reflective_object_type [reflective_object_type]
  [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]

[deftypefunk controllable_object execute reflective_knowledge_base-add_semantic_frame [semantic_frame]
  [if [is-type `semantic_reflective_object semantic_frame]
      [let [[reflective_object_type [get semantic_frame reflective_object_type]]]
	[have this add_semantic_reflective_object_type reflective_object_type semantic_frame]]]
  [have [get this reflective_knowledge_base] add_semantic_frame semantic_frame]]

[deftypefunk controllable_object execute reflective_knowledge_base-remove_semantic_frame [semantic_frame]
  [if [is-type `semantic_reflective_object semantic_frame]
      [let [[reflective_object_type [get semantic_frame reflective_object_type]]]
	[have this remove_semantic_reflective_object_type reflective_object_type semantic_frame]]]
  [have [get this reflective_knowledge_base] remove_semantic_frame semantic_frame]]

[deftypefunk controllable_object execute add_action [action]
  [terminal_format standard-terminal '\n' [type this] ': adding action, "' [get action as-string] '."']
  [have action_natural_language_symbol_ptypehash add [get action as-natural_language_symbol] action]]

[deftypefunk controllable_object get actions []
  [get action_natural_language_symbol_ptypehash values]]

[deftypefunk controllable_object execute lookup_action [natural_language_string]
  [have action_natural_language_symbol_ptypehash lookup [string-as-natural_language_symbol natural_language_string]]]

[deftypefunk controllable_object execute create_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_action action]]]

[deftypefunk controllable_object execute check_semantic_partial_state_property_exists [semantic_partial_state]
  [terminal_format standard-terminal '\ncontrollable_object: check semantic partial state property exists "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[source_type      [get semantic_partial_state source_type]]
	[source_key_type  [get semantic_partial_state source_key_type]]
	[source_key       [get semantic_partial_state source_key]]
	[source_value     [get semantic_partial_state source_value]]
	[key_type         [get semantic_partial_state key_type]]
	[key              [get semantic_partial_state key]]
	[target_type      [get semantic_partial_state target_type]]
	[found_does_exist nil]]
    [let* [[source_type-semantic_reflective_object_set      [have this lookup_set_semantic_reflective_object_type source_type]]
	   [source_type-semantic_reflective_object_set-iter [if source_type-semantic_reflective_object_set
								[get source_type-semantic_reflective_object_set elements]
							      nil]]]
      [while source_type-semantic_reflective_object_set-iter
	[let* [[source_type-semantic_reflective_object [car source_type-semantic_reflective_object_set-iter]]
	       [property_one_set                       [have source_type-semantic_reflective_object lookup_set source_key_type source_key]]]
	  [if [and property_one_set
		   [get property_one_set contains source_value]]
	      [let [[property_two_set [have source_type-semantic_reflective_object lookup_set key_type key]]]
		[if [and property_two_set
			 [get property_two_set contains target_type]]
		    [prog [terminal_format standard-terminal
					   '\ncontrollable_object: '
					   '\n    found source semantic_reflective_object = ' source_type-semantic_reflective_object]
			  [= found_does_exist                                t]
			  [= source_type-semantic_reflective_object_set-iter nil]]]]]]
	[if source_type-semantic_reflective_object_set-iter
	    [= source_type-semantic_reflective_object_set-iter [cdr source_type-semantic_reflective_object_set-iter]]]]]
    found_does_exist]]

[deftypefunk controllable_object execute check_semantic_partial_state_property_relation_exists [semantic_partial_state]
  [terminal_format standard-terminal '\ncontrollable_object: check semantic partial state property relation exists "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[source_type      [get semantic_partial_state source_type]]
	[source_key_type  [get semantic_partial_state source_key_type]]
	[source_key       [get semantic_partial_state source_key]]
	[source_value     [get semantic_partial_state source_value]]
	[key_type         [get semantic_partial_state key_type]]
	[key              [get semantic_partial_state key]]
	[target_type      [get semantic_partial_state target_type]]
	[target_key_type  [get semantic_partial_state target_key_type]]
	[target_key       [get semantic_partial_state target_key]]
	[target_value     [get semantic_partial_state target_value]]
	[found_does_exist nil]]
    [let* [[source_type-semantic_reflective_object_set      [have this lookup_set_semantic_reflective_object_type source_type]]
	   [source_type-semantic_reflective_object_set-iter [if source_type-semantic_reflective_object_set
								[get source_type-semantic_reflective_object_set elements]
							      nil]]]
      [while source_type-semantic_reflective_object_set-iter
	[let* [[source_type-semantic_reflective_object              [car source_type-semantic_reflective_object_set-iter]]
	       [source_type-semantic_reflective_object-property_set [have source_type-semantic_reflective_object lookup_set source_key_type source_key]]]
	  [if [and source_type-semantic_reflective_object-property_set
		   [get source_type-semantic_reflective_object-property_set contains source_value]]
	      [let [[relation_set [have source_type-semantic_reflective_object lookup_set key_type key]]]
		[if relation_set
		    [let [[relation_iter [get relation_set elements]]]
		      [while relation_iter
			[let [[target_semantic_reflective_object [car relation_iter]]]
			  [if [is-type `semantic_reflective_object target_semantic_reflective_object]
			      [if [eq [get target_semantic_reflective_object reflective_object_type] target_type]
				  [let [[target_semantic_reflective_object-property_set [have target_semantic_reflective_object lookup_set target_key_type target_key]]]
				    [if [and target_semantic_reflective_object-property_set
					     [get target_semantic_reflective_object-property_set contains target_value]]
					[prog [terminal_format standard-terminal
							       '\ncontrollable_object: '
							       '\n    found source semantic_reflective_object = ' source_type-semantic_reflective_object]
					      [= found_does_exist                                t]
					      [= relation_iter                                   nil]
					      [= source_type-semantic_reflective_object_set-iter nil]]]]]]]
			[if relation_iter
			    [= relation_iter [cdr relation_iter]]]]]]]]]
	[if source_type-semantic_reflective_object_set-iter
	    [= source_type-semantic_reflective_object_set-iter [cdr source_type-semantic_reflective_object_set-iter]]]]]
    found_does_exist]]

[deftypefunk controllable_object execute check_exists [semantic_partial_state]
  [let [[semantic_partial_state-type [type semantic_partial_state]]]
    [cond [[eq semantic_partial_state-type `semantic_partial_state_property]          [have this check_semantic_partial_state_property_exists          semantic_partial_state]]
	  [[eq semantic_partial_state-type `semantic_partial_state_property_relation] [have this check_semantic_partial_state_property_relation_exists semantic_partial_state]]
	  [t                                                                          [error bug_name               `controllable_object-execute-check_exists-do_not_know_semantic_partial_state_type
											     semantic_partial_state semantic_partial_state
											     this                   this]]]]]

[deftypefunk controllable_object execute wait_for_partial_state_to_exist [semantic_partial_state]
  [terminal_format standard-terminal '\ncontrollable_object: waiting for semantic partial state to exist "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[exists    nil]
	[last_step [have [get this mind] wait_for_physical_knowledge_step 0]]]
    [while [not exists]
      [= exists [have this check_exists semantic_partial_state]]
      [if [not exists]
	  [= last_step [have [get this mind] wait_for_physical_knowledge_step [+ last_step 1]]]]]]
  [terminal_format standard-terminal '\ncontrollable_object: done waiting for semantic partial state to exist "' [get semantic_partial_state as-natural_language_string] '"']
  nil]

