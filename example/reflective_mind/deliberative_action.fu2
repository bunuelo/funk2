'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_action'

[deframe deliberative_action [frame] [mind
				      layer_name
				      agency_name
				      resource_name
				      resource_arguments
				      [internal-natural_language_string `uninitialized]]
  [new [initial-mind
	initial-layer_name
	initial-agency_name
	initial-resource_name
	initial-resource_arguments]
       [= mind               initial-mind]
       [= layer_name         initial-layer_name]
       [= agency_name        initial-agency_name]
       [= resource_name      initial-resource_name]
       [= resource_arguments initial-resource_arguments]
       ]]

[deftypefunk deliberative_action get as-natural_language_string []
  [if [eq internal-natural_language_string `uninitialized]
      [let* [[resource                         [get [get this mind] resource layer_name agency_name resource_name]]
	     [resource-natural_language_string [shelter [get resource as-natural_language_string_with_arguments resource_arguments]]]]
	[if [is-type `bug resource-natural_language_string]
	    [prog [terminal_format standard-terminal '\ndeliberative_action warning: problem getting language string for "' [get resource name] '" with given arguments.']
		  [= resource-natural_language_string [get resource as-natural_language_string]]]]
	[= internal-natural_language_string resource-natural_language_string]]]
  internal-natural_language_string]

[deftypefunk deliberative_action get as-natural_language_symbol []
  [string-as-natural_language_symbol [get this as-natural_language_string]]]

[deftypefunk deliberative_action get as-string []
  [get this as-natural_language_string]]

[deftypefunk deliberative_action get resource []
  [get [get this mind] resource layer_name agency_name resource_name]]

[deftypefunk deliberative_action execute wait_to_call [:rest additional_arguments]
  [let [[all_arguments [append resource_arguments additional_arguments]]]
    [have-apply [get this mind] wait_to_call `[,layer_name ,agency_name ,resource_name @all_arguments]]]]

[deftypefunk deliberative_action execute external_wait_to_call [:rest additional_arguments]
  [let [[all_arguments     [append resource_arguments additional_arguments]]
	[activate_resource [get [get this mind] resource `builtin_reactive `neural_plug `activate_resource]]]
    [have-apply activate_resource command `[,layer_name ,agency_name ,resource_name @all_arguments]]]]

[deftypefunk deliberative_action execute imagine_waiting_to_call [:rest additional_arguments]
  [let [[all_arguments [append resource_arguments additional_arguments]]]
    [have-apply [get this mind] imagine_waiting_to_call `[,layer_name ,agency_name ,resource_name @all_arguments]]]]



