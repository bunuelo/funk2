'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_execution_agency'

[deframe deliberative_execution_agency [agency] []
  [new []
       [construct agency `execution]
       
       [have this add_resource [new deliberative_execute_plan_resource]]
       
       this]]

[deframe deliberative_execute_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `execute_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[terminal_format standard-terminal '\ndeliberative_layer: executing plan.']
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [set semantic_planner execute_plan semantic_plan]
			  [let* [[variable_frame [new frame]]
				 [result         [have [get semantic_plan nonsemantic_plan] execute_as_thought_in_semantic_planner semantic_planner variable_frame]]]
			    [if [is-type `bug result]
				[let [[bug result]]
				  [terminal_format standard-terminal '\ndeliberative_layer: executing plan has a bug.']
				  [semantic-add semantic_plan    bug_name     [have [get bug frame] lookup `bug_name]]
				  [set          semantic_planner execute_plan nil]
				  [semantic-add semantic_planner bug_plan     semantic_plan]
				  [terminal_format standard-terminal '\ndeliberative_layer: waiting to call reflective initial plan bug response.']
				  [have [get this mind] wait_to_activate `reflective `plan_bug_response `initial_plan_bug_response semantic_plan bug]
				  [terminal_format standard-terminal '\ndeliberative_layer: activated reflective bug response.']]
			      [prog [terminal_format standard-terminal '\ndeliberative_layer: successfully completed executing plan.']
				    [set [get [get [get this mind] agency `deliberative `plan] semantic_planner] execute_plan nil]]]]
			  nil]]]
       nil]]


