'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_imagination_agency'

[deframe deliberative_imagination_agency [agency] []
  [new []
       [construct agency `imagination]
       
       [have this add_resource [new deliberative_forget_all_imagined_events_imagination_resource]]
       [have this add_resource [new deliberative_imagine_current_situation_resource]]
       [have this add_resource [new deliberative_imagine_plan_resource]]
       
       this]]

[deframe deliberative_forget_all_imagined_events_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `forget_all_imagined_events
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\ndeliberative_layer: forgetting all imagined events.']
			  [set semantic_planner imagine_time nil]
			  [let [[physical_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]]
			    [have physical_counterfactual_knowledge_base remove_all]
			    nil]]]]
       nil]]


[deframe deliberative_imagine_current_situation_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `imagine_current_situation
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\ndeliberative_layer: imagining current situation.']
			  [let [[imagine_time [new semantic_time [time]]]]
			    [set semantic_planner imagine_time imagine_time]
			    [let [[imagine_events                         [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time imagine_time]]
				  [physical_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]]
			      [mapc [funk [imagine_event]
					  `[terminal_format standard-terminal '\nimagining event: ' [get event phenomenal_name] '.']
					  [have physical_counterfactual_knowledge_base add_semantic_frame imagine_event]]
				    imagine_events]
			      nil]]]]]
       nil]]


[deframe deliberative_imagine_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `imagine_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\ndeliberative_layer: imagining plan.']
			  [set semantic_planner imagine_plan semantic_plan]
			  [let [[result [shelter [cause-define cause-name `plan]
						 [have [get semantic_plan nonsemantic_plan] imagine_eval]]]]
			    [if [is-type `bug result]
				[let [[bug result]]
				  [terminal_format standard-terminal '\ndeliberative_layer: imagining plan has a bug: ' bug]
				  [set semantic_planner imagine_plan nil]
				  ]
			      [prog [terminal_format standard-terminal '\ndeliberative_layer: successfully completed imagining plan.']
				    [set [get [get [get this mind] agency `deliberative `plan] semantic_planner] imagine_plan nil]]]]
			  nil]]]
       nil]]


