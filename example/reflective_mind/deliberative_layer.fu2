'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'deliberative_layer'

[deframe deliberative_layer [mental_layer] [[physical_action_natural_language_symbol_ptypehash [new ptypehash]]
					    [semantic_plan_phenomenal_name_frame               [new frame]]
					    [plan_action_natural_language_symbol_ptypehash     [new ptypehash]]
					    [plan_semantic_plan_phenomenal_name_frame          [new frame]]]
  [new []
       [construct mental_layer 2 `deliberative]
       [parog [have this add_agency [new deliberative_execution_agency]]
	      [have this add_agency [new deliberative_imagination_agency]]
	      [have this add_agency [new deliberative_physical_object_type_agency]]
	      [have this add_agency [new deliberative_plan_agency]]]
       this]]

[deftypefunk deliberative_layer get mental_layer_below []
  [get [get this mind] layer `learned_reactive]]

[deftypefunk deliberative_layer execute create_knowledge []
  [have [get this agency `plan]                      create_knowledge]
  [have [get this agency `physical_object_type] create_knowledge]]

[deftypefunk deliberative_layer execute connect_knowledge_reflection []
  [have [get this agency `plan]                      connect_knowledge_reflection]
  [have [get this agency `physical_object_type] connect_knowledge_reflection]]

[deftypefunk deliberative_layer execute create_builtin_actions []
  [have [get this agency `imagination] create_builtin_actions]
  [have [get this agency `plan]        create_builtin_actions]]

[deftypefunk deliberative_layer get physical_type_knowledge_reflective_timer []
  [get [get this agency `physical_object_type] physical_type_knowledge_reflective_timer]]

[deftypefunk deliberative_layer get knowledge_timer []
  [get [get this agency `physical_object_type] knowledge_timer]]

[deftypefunk deliberative_layer execute add_remember_token [remember_token]
  [have [get this agency `physical_object_type] add_remember_token remember_token]]

[deftypefunk deliberative_layer execute remove_remember_token [remember_token]
  [have [get this agency `physical_object_type] remove_remember_token remember_token]]

[deftypefunk deliberative_layer execute wait_until_time_represented [semantic_time]
  [have [get this agency `physical_object_type] wait_until_time_represented semantic_time]]

[deftypefunk deliberative_layer execute wait_until_after_time_represented [semantic_time]
  [have [get this agency `physical_object_type] wait_until_after_time_represented semantic_time]]

[deftypefunk deliberative_layer execute add_physical_action [action]
  [terminal_format standard-terminal '\ndeliberative_layer: adding physical action, "' [get action as-string] '."']
  [have physical_action_natural_language_symbol_ptypehash add [get action as-natural_language_symbol] action]]

[deftypefunk deliberative_layer get physical_actions []
  [get physical_action_natural_language_symbol_ptypehash values]]

[deftypefunk deliberative_layer execute lookup_physical_action [natural_language_string]
  [have physical_action_natural_language_symbol_ptypehash lookup [string-as-natural_language_symbol natural_language_string]]]

[deftypefunk deliberative_layer execute add_physical_semantic_object_recursive [semantic_object]
  [cond [[is-type `semantic_plan_operator_sequence    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[past_operator   [get semantic_object past_operator]]
										   [future_operator [get semantic_object future_operator]]]
									       [have this add_physical_semantic_object_recursive past_operator]
									       [have this add_physical_semantic_object_recursive future_operator]]]]
	[[is-type `semantic_plan_operator_parallel    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[plan_operator_set [semantic-lookup_set semantic_object plan_operator]]]
									       [mapc [funk [plan_operator]
											   [have this add_physical_semantic_object_recursive plan_operator]]
										     [get plan_operator_set elements]]]]]
	[[is-type `semantic_plan_operator_activation  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[counterfactual_transframe [get semantic_object counterfactual_transframe]]]
									       [have this add_physical_semantic_object_recursive counterfactual_transframe]]]]
	[[is-type `semantic_plan_operator_suppression semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     ]]
	[[is-type `semantic_counterfactual_transframe semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[resource_activation_dependency [get semantic_object resource_activation_dependency]]]
									       [have this add_physical_semantic_object_recursive resource_activation_dependency]]]]
	[[is-type `semantic_resource                  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     ]]
	]]

[deftypefunk deliberative_layer execute add_semantic_plan [semantic_plan]
  [terminal_format standard-terminal '\ndeliberative_layer: adding plan, "' [get [get [get semantic_plan nonsemantic_plan] unique_name] as-string] '."']
  [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_plan]
  [let [[start_plan_operator [get semantic_plan start_plan_operator]]]
    [have this add_physical_semantic_object_recursive start_plan_operator]]
  [have semantic_plan_phenomenal_name_frame add [get semantic_plan phenomenal_name] semantic_plan]
  [have [get this agency `plan] create_plan_propositionalized_actions [get semantic_plan phenomenal_name]]]

[deftypefunk deliberative_layer execute lookup_semantic_plan [phenomenal_name]
  [have semantic_plan_phenomenal_name_frame lookup phenomenal_name]]

[deftypefunk deliberative_layer get semantic_plan [phenomenal_name]
  [let [[semantic_plan [have this lookup_semantic_plan phenomenal_name]]]
    [if [null semantic_plan]
	[error bug_type             `deliberative_layer-semantic_plan-not_found
	       plan_phenomenal_name phenomenal_name]]
    semantic_plan]]

[deftypefunk deliberative_layer get semantic_plan_objects []
  [get semantic_plan_phenomenal_name_frame values]]

[deftypefunk deliberative_layer get semantic_plans []
  [get this semantic_plan_objects]]

[deftypefunk deliberative_layer execute lookup_semantic_plan_matches [name_expression]
  [let [[semantic_plan_matches nil]]
    [mapc [funk [semantic_plan_object]
		[let [[nonsemantic_plan [get semantic_plan_object nonsemantic_plan]]]
		  [let [[semantic_plan_object-name_pattern_match_pairs [get nonsemantic_plan name_pattern_match_pairs name_expression]]]
		    [mapc [funk [semantic_plan_object-name_pattern_match_pair]
				[let [[semantic_plan_match [frame semantic_plan_object semantic_plan_object
								  name_pattern         [car semantic_plan_object-name_pattern_match_pair]
								  variable_frame       [cdr semantic_plan_object-name_pattern_match_pair]]]]
				  [= semantic_plan_matches [cons semantic_plan_match semantic_plan_matches]]]]
			  semantic_plan_object-name_pattern_match_pairs]]]]
	  [get this semantic_plan_objects]]
    semantic_plan_matches]]

[deftypefunk deliberative_layer execute create_physical_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_physical_action action]]]

[deftypefunk deliberative_layer execute create_semantic_plan [name_expression name_patterns variable_definitions expression]
  [let [[plan [new nonsemantic_plan 
		   [get this mental_layer]
		   name_expression
		   name_patterns
		   variable_definitions
		   expression]]]
    [have plan syntax_check]
    [let [[semantic_plan_object [get plan semantic_plan_object]]]
      [have this add_semantic_plan semantic_plan_object]]]]






[deftypefunk deliberative_layer execute add_plan_action [action]
  [terminal_format standard-terminal '\ndeliberative_layer: adding plan action, "' [get action as-string] '."']
  [have plan_action_natural_language_symbol_ptypehash add [get action as-natural_language_symbol] action]]

[deftypefunk deliberative_layer get plan_actions []
  [get plan_action_natural_language_symbol_ptypehash values]]

[deftypefunk deliberative_layer execute lookup_plan_action [natural_language_string]
  [have plan_action_natural_language_symbol_ptypehash lookup [string-as-natural_language_symbol natural_language_string]]]

[deftypefunk deliberative_layer execute create_plan_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_plan_action action]]]


[deftypefunk deliberative_layer execute lookup_action [natural_language_string]
  [have this lookup_plan_action natural_language_string]]

[deftypefunk deliberative_layer execute lookup_action_below [natural_language_string]
  [have this lookup_physical_action natural_language_string]]


[deftypefunk deliberative_layer get type_knowledge_base []
  [get [get this mind] semantic_knowledge_base `physical_type_knowledge]]

[deftypefunk deliberative_layer get counterfactual_knowledge_base []
  [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]

[deftypefunk deliberative_layer get semantic_planner []
  [get [get this agency `plan] semantic_planner]]


[deftypefunk deliberative_layer execute wait_and_check_exists_in_type_knowledge [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]
	[remember_token                    [new remember_token [new semantic_time [time]]]]]
    [terminal_format standard-terminal '\ndeliberative_layer-check_exists: checking if relationship exists ' looking_for_event-phenomenal_name '.']
    [terminal_format standard-terminal '\ndeliberative_layer-check_exists: adding remember token.']
    [have this add_remember_token remember_token]
    [terminal_format standard-terminal '\ndeliberative_layer-check_exists: done adding remember token.']
    [let [[current_time [time]]]
      [terminal_format standard-terminal '\ndeliberative_layer-check_exists: waiting until ' [get current_time as-string] ' represented.']
      [have this wait_until_time_represented [new semantic_time current_time]]]
    [let [[found nil]]
      [let [[current_events [get [get this type_knowledge_base] events_containing_time [new semantic_time [time]]]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\ndeliberative_layer-check_exists: current_event, ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\ndeliberative_layer-check_exists: found relationship!']
			      [= found t]]]]
	      current_events]]
      [if [not found]
	  [terminal_format standard-terminal '\ndeliberative_layer-check_exists: did not find relationship.']
	[terminal_format standard-terminal '\ndeliberative_layer-check_exists: found relationship!']]
      [terminal_format standard-terminal '\ndeliberative_layer-check_exists: removing remember token.']
      [have this remove_remember_token remember_token]
      [terminal_format standard-terminal '\ndeliberative_layer-check_exists: done removing remember token.']
      found]]]

[deftypefunk deliberative_layer execute check_exists [semantic_partial_state]
  [have [get this mind] check_physical_partial_state_exists semantic_partial_state]]


[deftypefunk deliberative_layer execute imagine_check_exists [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: checking if relationship exists ' looking_for_event-phenomenal_name '.']
    [let [[found_events nil]
	  [imagine_time cause-imagine_time]]
      [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: imagine_time = ' imagine_time]
      [let [[current_events [get [get this counterfactual_knowledge_base] events_containing_time imagine_time]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: current_event: ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: found relationship!']
			      [= found_events [cons current_event found_events]]]]]
	      current_events]]
      [let [[found_events-length [length found_events]]]
	[cond [[== found_events-length 0] [prog [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: did not find relationship.']
						nil]]
	      [[== found_events-length 1] [prog [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: found exactly one matching relationship:'
								 '\n  ' [car found_events]]
						[car found_events]]]
	      [t                          [prog [terminal_format standard-terminal '\n' [get this name] '-imagine_check_exists: found multiple matching relationships...']
						[mapc [funk [found_event]
							    [terminal_format standard-terminal '\n' [get this name] ' relationship: ' found_event]]
						      found_events]
						[new multiple_possible_values found_events]]]]]]]]

[deftypefunk deliberative_layer execute wait_until_exists_in_type_knowledge [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nwaiting for relationship: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get this type_knowledge_base] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_physical_relationship: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [let [[end_of_physical_type_changes_trigger [get [get [get this mind] resource `deliberative `physical_object_type `translate_physical_knowledge_to_physical_type_knowledge] end_of_physical_type_changes_trigger]]]
	      [wait-for-trigger end_of_physical_type_changes_trigger]]]]]]]

[deftypefunk deliberative_layer execute wait_for [semantic_partial_state]
  [have [get this mind] wait_for_physical_partial_state_to_exist semantic_partial_state]]
  

[deftypefunk deliberative_layer execute assert [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nassuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[found nil]]
      [let [[current_events [get [get this type_knowledge_base] events_containing_time [new semantic_time [time]]]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\nassuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\nassure_physical_relationship: found relationship!']
			      [= found t]]]]
	      current_events]]
      [if [not found]
	  [prog [terminal_format standard-terminal '\nassure_physical_relationship: did not find relationship.']
		[error bug_name    `assure_physical_relationship-failed
		       description `[assert ,semantic_partial_state]]]
	nil]]]]

[deftypefunk deliberative_layer execute imagine_asserting [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nimagining assuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[semantic_planner [get this semantic_planner]]]
      [let [[found        nil]
	    [imagine_time cause-imagine_time]]
	[let [[current_events [get [get this counterfactual_knowledge_base] events_containing_time imagine_time]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nimagine assuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nimagine_assuring_physical_relationship: found relationship!']
				[= found t]]]]
		current_events]]
	[if [not found]
	    [prog [terminal_format standard-terminal '\nimagine_assuring_physical_relationship: did not find relationship.']
		  [error bug_name    `imagine_assuring_physical_relationship-failed
			 description `[imagine_asserting ,semantic_partial_state]]]
	  nil]]]]]

[deftypefunk deliberative_layer execute evaluate_plan_expression [expression]
  [let* [[name_expression      'evaluate unnamed plan expression']
	 [name_patterns        nil]
	 [argument_definitions nil]
	 [plan                 [new nonsemantic_plan [get this mental_layer]
				    name_expression
				    name_patterns
				    argument_definitions
				    expression]]]
    [have plan syntax_check]
    [let [[semantic_planner     [get [get [get this mind] agency `deliberative `plan] semantic_planner]]
	  [semantic_plan_object [get plan semantic_plan_object]]]
      [set semantic_plan_object plan_object_type `physical]
      [let [[variable_frame [new frame]]]
	[let [[result [have plan execute_as_thought variable_frame]]]
	  [if [is-type `bug result]
	      [let [[bug result]]
		[bug bug]]
	    result]]]]]]


