'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'deliberative_layer'

[deframe deliberative_layer [plan_mental_layer] [[physical_action_natural_language_symbol_ptypehash [new ptypehash]]
						 [plan_semantic_plan_phenomenal_name_frame          [new frame]]]
  [new []
       [let [[input_knowledge_base_name                     `physical_knowledge]
	     [input_type_knowledge_base_name                `physical_type_knowledge]
	     [input_type_counterfactual_knowledge_base_name `physical_type_counterfactual_knowledge]
	     [deliberative_knowledge_base_name              `deliberative1_knowledge]
	     [deliberative_type_knowledge_base_name         `deliberative1_type_knowledge]
	     [trace_knowledge_base_names                    `[deliberative1_type_knowledge]]]
	 [construct plan_mental_layer 2 `deliberative
		    input_knowledge_base_name
		    input_type_knowledge_base_name
		    input_type_counterfactual_knowledge_base_name
		    deliberative_knowledge_base_name
		    deliberative_type_knowledge_base_name
		    trace_knowledge_base_names]]]]

[deftypefunk deliberative_layer get mental_layer_below []
  [get [get this mind] layer `learned_reactive]]


[deftypefunk deliberative_layer execute add_physical_action [action]
  [terminal_format standard-terminal '\ndeliberative_layer: adding physical action, "' [get action as-string] '."']
  [have physical_action_natural_language_symbol_ptypehash add [get action as-natural_language_symbol] action]]

[deftypefunk deliberative_layer get physical_actions []
  [get physical_action_natural_language_symbol_ptypehash values]]

[deftypefunk deliberative_layer execute lookup_physical_action [natural_language_string]
  [have physical_action_natural_language_symbol_ptypehash lookup [string-as-natural_language_symbol natural_language_string]]]

[deftypefunk deliberative_layer execute create_physical_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_physical_action action]]]

[deftypefunk deliberative_layer execute lookup_action_below [natural_language_string]
  [have this lookup_physical_action natural_language_string]]

[deftypefunk deliberative_layer execute check_exists [semantic_partial_state]
  [have [get [get this mind] mental_layer `learned_reactive] check_exists semantic_partial_state]]

[deftypefunk deliberative_layer execute wait_for [semantic_partial_state]
  [have [get [get this mind] mental_layer `learned_reactive] wait_for_partial_state_to_exist semantic_partial_state]]

[deftypefunk deliberative_layer execute assure_knowledge_symbols_initialized []
  [have knowledge_symbol_set_initialized_mutex lock]
  [if [not knowledge_symbol_set_initialized]
      [prog [mapc [funk [knowledge_symbol]
			[have knowledge_symbol_set add knowledge_symbol]]
		  [append [get [get this mind] all_perception_symbols]
			  `[property
			    relationship
			    relation
			    preposition
			    is-me
			    t]]]
	    [= knowledge_symbol_set_initialized t]]]
  [have knowledge_symbol_set_initialized_mutex unlock]]

[deftypefunk deliberative_layer get all_knowledge_symbols []
  [have this assure_knowledge_symbols_initialized]
  [get knowledge_symbol_set elements]]

[deftypefunk deliberative_layer get knowledge_symbol [value]
  [have this assure_knowledge_symbols_initialized]
  [let [[symbol [if [is-type `symbol value]
		    value
		  [get string as-symbol]]]]
    [if [get knowledge_symbol_set contains symbol]
	symbol
      [prog [terminal_format standard-terminal '\n' [get this type] '-get-knowledge_symbol failure: unknown symbol (' symbol ')']
	    [error bug_name             `deliberative_layer-get-string_as_knowledge_symbol-no_such_knowledge_symbol
		   string               string
		   symbol               symbol
		   knowledge_symbol_set knowledge_symbol_set]]]]]



