'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'deliberative_layer'

[deframe deliberative_layer [mental_layer] [[physical_action_english_symbol_ptypehash     [new ptypehash]]
					    [physical_semantic_plan_phenomenal_name_frame [new frame]]
					    [plan_action_english_symbol_ptypehash         [new ptypehash]]
					    [plan_semantic_plan_phenomenal_name_frame     [new frame]]]
  [new []
       [construct mental_layer 2 `deliberative]
       [parog [have this add_agency [new deliberative_execution_agency]]
	      [have this add_agency [new deliberative_imagination_agency]]
	      [have this add_agency [new deliberative_physical_object_type_goal_agency]]
	      [have this add_agency [new deliberative_plan_agency]]]
       this]]

[deftypefunk deliberative_layer execute create_knowledge []
  [have [get this agency `plan]                      create_knowledge]
  [have [get this agency `physical_object_type_goal] create_knowledge]]

[deftypefunk deliberative_layer execute connect_knowledge_reflection []
  [have [get this agency `plan]                      connect_knowledge_reflection]
  [have [get this agency `physical_object_type_goal] connect_knowledge_reflection]]

[deftypefunk deliberative_layer execute create_builtin_actions []
  [have [get this agency `imagination] create_builtin_actions]
  [have [get this agency `plan]        create_builtin_actions]]

[deftypefunk deliberative_layer get physical_type_knowledge_reflective_timer []
  [get [get this agency `physical_object_type_goal] physical_type_knowledge_reflective_timer]]

[deftypefunk deliberative_layer execute create_physical_type_relationship_goal [source_physical_object_type key_type key target_physical_object_type]
  [have [get this agency `physical_object_type_goal] create_physical_type_relationship_goal source_physical_object_type key_type key target_physical_object_type]]

[deftypefunk deliberative_layer execute create_physical_type_property_relationship_goal [source_type
											 source_type_property
											 source_type_property_value
											 key_type
											 key
											 target_type
											 target_type_property
											 target_type_property_value]
  [have [get this agency `physical_object_type_goal] create_physical_type_property_relationship_goal
	source_type
	source_type_property
	source_type_property_value
	key_type
	key
	target_type
	target_type_property
	target_type_property_value]]

[deftypefunk deliberative_layer execute add_physical_action [action]
  [terminal_format standard-terminal '\ndeliberative_layer: adding physical action, "' [get action as-string] '."']
  [have physical_action_english_symbol_ptypehash add [get action as-english_symbol] action]]

[deftypefunk deliberative_layer get physical_actions []
  [get physical_action_english_symbol_ptypehash values]]

[deftypefunk deliberative_layer execute lookup_physical_action [english_conslist]
  [have physical_action_english_symbol_ptypehash lookup [conslist-as-english_symbol english_conslist]]]

[deftypefunk deliberative_layer execute add_physical_semantic_object_recursive [semantic_object]
  [cond [[is-type `semantic_plan_operator_sequence    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[past_operator   [get semantic_object past_operator]]
										   [future_operator [get semantic_object future_operator]]]
									       [have this add_physical_semantic_object_recursive past_operator]
									       [have this add_physical_semantic_object_recursive future_operator]]]]
	[[is-type `semantic_plan_operator_parallel    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[plan_operator_set [semantic-lookup_set semantic_object plan_operator]]]
									       [mapc [funk [plan_operator]
											   [have this add_physical_semantic_object_recursive plan_operator]]
										     [get plan_operator_set elements]]]]]
	[[is-type `semantic_plan_operator_activation  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[counterfactual_transframe [get semantic_object counterfactual_transframe]]]
									       [have this add_physical_semantic_object_recursive counterfactual_transframe]]]]
	[[is-type `semantic_plan_operator_suppression semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     ]]
	[[is-type `semantic_counterfactual_transframe semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     [let [[resource_activation_dependency [get semantic_object resource_activation_dependency]]]
									       [have this add_physical_semantic_object_recursive resource_activation_dependency]]]]
	[[is-type `semantic_resource                  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_object]
									     ]]
	]]

[deftypefunk deliberative_layer execute add_physical_semantic_plan [semantic_plan]
  `[terminal_format standard-terminal '\ndeliberative_layer: adding physical plan, "' [get [get semantic_plan nonsemantic_plan] as-string] '."']
  [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_plan]
  [let [[start_plan_operator [get semantic_plan start_plan_operator]]]
    [have this add_physical_semantic_object_recursive start_plan_operator]]
  [have physical_semantic_plan_phenomenal_name_frame add [get semantic_plan phenomenal_name] semantic_plan]
  [have [get this agency `plan] create_plan_propositionalized_actions [get semantic_plan phenomenal_name]]]

[deftypefunk deliberative_layer get physical_semantic_plan [phenomenal_name]
  [let [[physical_semantic_plan [have physical_semantic_plan_phenomenal_name_frame lookup phenomenal_name]]]
    [if [null physical_semantic_plan]
	[error bug_type             deliberative_layer-physical_semantic_plan-not_found
	       plan_phenomenal_name phenomenal_name]]
    physical_semantic_plan]]

[deftypefunk deliberative_layer get physical_semantic_plans []
  [get physical_semantic_plan_phenomenal_name_frame values]]

[deftypefunk deliberative_layer execute create_physical_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_physical_action action]]]

[deftypefunk deliberative_layer execute create_physical_semantic_plan [arguments expression]
  [let [[plan [new nonsemantic_plan 
		   [get this mind]
		   arguments
		   expression]]]
    [let [[semantic_plan_object [get plan semantic_plan_object]]]
      [set semantic_plan_object plan_object_type `physical]
      [have this add_physical_semantic_plan semantic_plan_object]]]]






[deftypefunk deliberative_layer execute add_plan_action [action]
  [terminal_format standard-terminal '\ndeliberative_layer: adding plan action, "' [get action as-string] '."']
  [have plan_action_english_symbol_ptypehash add [get action as-english_symbol] action]]

[deftypefunk deliberative_layer get plan_actions []
  [get plan_action_english_symbol_ptypehash values]]

[deftypefunk deliberative_layer execute lookup_plan_action [english_conslist]
  [have plan_action_english_symbol_ptypehash lookup [conslist-as-english_symbol english_conslist]]]

[deftypefunk deliberative_layer execute create_plan_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_plan_action action]]]





[deftypefunk deliberative_layer execute wait_for_physical_property [source_type source_property source_property_value property property_value]
  [let [[looking_for_event-phenomenal_name [get [new semantic_partial_state_property
						     [get [get this mind] semantic_realm]
						     source_type
						     `property
						     source_property
						     source_property_value
						     `property
						     property
						     property_value]
						phenomenal_name]]]
    [terminal_format standard-terminal '\nwaiting for property: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for property: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_physical_property: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [let [[end_of_physical_type_changes_trigger [get [get [get this mind] resource `deliberative `physical_object_type_goal `translate_physical_knowledge_to_physical_type_knowledge] end_of_physical_type_changes_trigger]]]
	      [wait-for-trigger end_of_physical_type_changes_trigger]]]]]]]

[deftypefunk deliberative_layer execute wait_for_physical_relationship [source_type
									source_property
									source_property_value
									key_type
									key
									target_type
									target_property
									target_property_value]
  [let [[looking_for_event-phenomenal_name [get [new semantic_partial_state_property_relation
						     [get [get this mind] semantic_realm]
						     source_type
						     `property
						     source_property
						     source_property_value
						     key_type
						     key
						     target_type
						     `property
						     target_property
						     target_property_value]
						phenomenal_name]]]
    [terminal_format standard-terminal '\nwaiting for relationship: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_physical_relationship: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [let [[end_of_physical_type_changes_trigger [get [get [get this mind] resource `deliberative `physical_object_type_goal `translate_physical_knowledge_to_physical_type_knowledge] end_of_physical_type_changes_trigger]]]
	      [wait-for-trigger end_of_physical_type_changes_trigger]]]]]]]

[deftypefunk deliberative_layer execute assure_physical_relationship [source_type
								      source_property
								      source_property_value
								      key_type
								      key
								      target_type
								      target_property
								      target_property_value]
  [let [[looking_for_event-phenomenal_name [get [new semantic_partial_state_property_relation
						     [get [get this mind] semantic_realm]
						     source_type
						     `property
						     source_property
						     source_property_value
						     key_type
						     key
						     target_type
						     `property
						     target_property
						     target_property_value]
						phenomenal_name]]]
    [terminal_format standard-terminal '\nassuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[found nil]]
      [let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\nassuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\nassure_physical_relationship: found relationship!']
			      [= found t]]]]
	      current_events]]
      [if [not found]
	  [prog [terminal_format standard-terminal '\nassure_physical_relationship: did not find relationship.']
		[error bug_name    `assure_physical_relationship-failed
		       description `[assure_physical_relationship ,source_type
								  ,source_property
								  ,source_property_value
								  ,key_type
								  ,key
								  ,target_type
								  ,target_property
								  ,target_property_value]]]
	nil]]]]

[deftypefunk deliberative_layer execute imagine_assuring_physical_relationship [source_type
										source_property
										source_property_value
										key_type
										key
										target_type
										target_property
										target_property_value]
  [let [[looking_for_event-phenomenal_name [get [new semantic_partial_state_property_relation
						     [get [get this mind] semantic_realm]
						     source_type
						     `property
						     source_property
						     source_property_value
						     key_type
						     key
						     target_type
						     `property
						     target_property
						     target_property_value]
						phenomenal_name]]]
    [terminal_format standard-terminal '\nimagining assuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
      [let [[found        nil]
	    [imagine_time [get semantic_planner imagine_time]]]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge] events_containing_time imagine_time]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nimagine assuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nimagine_assuring_physical_relationship: found relationship!']
				[= found t]]]]
		current_events]]
	[if [not found]
	    [prog [terminal_format standard-terminal '\nimagine_assuring_physical_relationship: did not find relationship.']
		  [error bug_name    `imagine_assuring_physical_relationship-failed
			 description `[imagine_assuring_physical_relationship ,source_type ,source_property ,source_property_value ,key ,target_type ,target_property ,target_property_value]]]
	  nil]]]]]

