'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_plan'

[deframe deliberative_plan [frame] [mind
				    expression]
  [new [initial-mind initial-expression]
       [= mind       initial-mind]
       [= expression initial-expression]
       [terminal_format standard-terminal '\ndeliberative_plan: ' expression]
       ]]

[defunk flatten_constree [expression]
  [let [[result nil]]
    [labels [[visit_leaves [exp]
			   [if [is-type `cons exp]
			       [mapc [funk [subexp]
					   [visit_leaves subexp]]
				     exp]
			     [= result [cons exp result]]]]]
	    [visit_leaves expression]]
    [reverse result]]]

[defunk deliberative_plan-expression-as_english_conslist [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `prog                  command] [apply &append
											  [append `[[do the following in serial punctuation-colon]]
												  [let [[step_number 1]]
												    [mapcar [funk [argument]
														  [let [[argument-result [append `[,[get step_number as-symbol] punctuation-period]
																		 [deliberative_plan-expression-as_english_conslist argument]
																		 [if [not [eq step_number arguments-length]]
																		     `[punctuation-comma]]]]]
														    [++ step_number]
														    argument-result]]
													    arguments]]]]]
					      [[eq `wait-to-activate      command] [flatten_constree arguments]]
					      [[eq `wait-for-property     command] [if [not [eq 3 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type [get arguments elt 0]]
											   [key_type    [get arguments elt 1]]
											   [key         [get arguments elt 2]]
											   [value       [get arguments elt 3]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-english_conslist source_type key value]]]]]
					      [[eq `wait-for-relationship command] [if [not [eq 8 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type           [get arguments elt 0]]
											   [source_property       [get arguments elt 1]]
											   [source_property_value [get arguments elt 2]]
											   [key_type              [get arguments elt 3]]
											   [key                   [get arguments elt 4]]
											   [target_type           [get arguments elt 5]]
											   [target_property       [get arguments elt 6]]
											   [target_property_value [get arguments elt 7]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-declarative_english_conslist source_type source_property source_property_value key_type key target_type target_property target_property_value]]]]]
					      [t                                   `[error ,[flatten_constree expression]]]]]]]
	[t                          `[error punctuation-colon ,[flatten_constree expression]]]]]

[deftypefunk deliberative_plan get as-english_conslist []
  [deliberative_plan-expression-as_english_conslist expression]]

[deftypefunk deliberative_plan get as-english_string []
  [conslist-as-english_string [get this as-english_conslist]]]

[deftypefunk deliberative_plan get as-string []
  [get this as-english_string]]

