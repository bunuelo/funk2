'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_plan'

[deframe deliberative_plan [frame] [mind
				    unique_name
				    expression
				    internal-compiled_funk]
  [new [initial-mind initial-expression]
       [= mind                      initial-mind]
       [= unique_name               [get mind new-name `plan]]
       [= expression                initial-expression]
       [= internal-compiled_funk    nil]
       [= internal-english_conslist `uninitialized]
       [= internal-english_string   nil]
       `[have this eval]
       ]]

[defunk flatten_constree [expression]
  [let [[result nil]]
    [labels [[visit_leaves [exp]
			   [if [is-type `cons exp]
			       [mapc [funk [subexp]
					   [visit_leaves subexp]]
				     exp]
			     [= result [cons exp result]]]]]
	    [visit_leaves expression]]
    [reverse result]]]

[defunk deliberative_plan-expression-as_english_conslist [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `prog                  command] [apply &append
											  [append `[[do the following in serial punctuation-colon]]
												  [let [[step_number 1]]
												    [mapcar [funk [argument]
														  [let [[argument-result [append `[,[get step_number as-symbol] punctuation-period]
																		 [deliberative_plan-expression-as_english_conslist argument]
																		 [if [not [eq step_number arguments-length]]
																		     `[punctuation-comma]]]]]
														    [++ step_number]
														    argument-result]]
													    arguments]]]]]
					      [[eq `wait-for-time         command] [if [not [eq 1 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[time_to_wait [elt arguments 0]]]
										       [append `[wait for]
											       `[,time_to_wait]]]]]
					      [[eq `wait-to-call          command] [flatten_constree arguments]]
					      [[eq `wait-for-property     command] [if [not [eq 3 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type [elt arguments 0]]
											   [key         [elt arguments 1]]
											   [value       [elt arguments 2]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-english_conslist source_type key value]]]]]
					      [[eq `wait-for-relationship command] [if [not [eq 7 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type           [elt arguments 0]]
											   [source_property       [elt arguments 1]]
											   [source_property_value [elt arguments 2]]
											   [key                   [elt arguments 3]]
											   [target_type           [elt arguments 4]]
											   [target_property       [elt arguments 5]]
											   [target_property_value [elt arguments 6]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-declarative_english_conslist source_type source_property source_property_value `preposition key target_type target_property target_property_value]]]]]
					      [t                                   `[error ,[flatten_constree expression]]]]]]]
	[t                          `[error punctuation-colon ,[flatten_constree expression]]]]]

[deftypefunk deliberative_plan get as-english_conslist []
  [if [eq `uninitialized internal-english_conslist]
      [= internal-english_conslist [deliberative_plan-expression-as_english_conslist expression]]]
  internal-english_conslist]

[deftypefunk deliberative_plan get as-english_string []
  [if [null internal-english_string]
      [= internal-english_string [conslist-as-english_string [get this as-english_conslist]]]]
  internal-english_string]

[deftypefunk deliberative_plan get as-string []
  [get this as-english_string]]

[deftypefunk deliberative_plan get as-graphviz_label []
  [string-concat '<' [get unique_name as-string] '>']]

[deftypefunk deliberative_plan execute wait_for_property [source_type key value]
  [let [[looking_for_event-phenomenal_name [translate_physical_knowledge_to_physical_type_knowledge_resource-semantic_physical_object_type_event-phenomenal_name source_type `property key value]]]
    [terminal_format standard-terminal '\nwaiting for property: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for property: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_property: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [sleep 30]]]]]]

[deftypefunk deliberative_plan execute wait_for_relationship [source_type source_property source_property_value key target_type target_property target_property_value]
  [let [[looking_for_event-phenomenal_name [translate_physical_knowledge_to_physical_type_knowledge_resource-type_property_relation-phenomenal_name source_type
																		    `property
																		    source_property
																		    source_property_value
																		    `preposition
																		    key
																		    target_type
																		    `property
																		    target_property
																		    target_property_value]]]
    [terminal_format standard-terminal '\nwaiting for relationship: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_relationship: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [sleep 30]]]]]]

[defunk deliberative_plan-expression-compile [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `prog                  command] [eval `[funk [this]
												[terminal_format standard-terminal '\nplan evaluating serial process.']
												@[mapcar [funk [argument]
													       `[funkall ,[deliberative_plan-expression-compile argument] this]]
													 arguments]]]]
					      [[eq `wait-for-time         command] [let [[time_to_wait [elt arguments 0]]]
										     [eval `[funk [this]
												  [let [[time_to_wait ,time_to_wait]]
												    [dotimes [i time_to_wait]
												      `[terminal_format standard-terminal '\nplan waiting for time step ' i `/ time_to_wait '.']
												      [wait-for-trigger [get [get [get this mind] body] time_step_trigger]]]
												    ]]]]]
					      [[eq `wait-to-call          command] [let [[action_name [elt arguments 0]]]
										     [eval `[funk [this]
												  [let [[action [have [get [get this mind] layer `deliberative] lookup_physical_action [quote ,arguments]]]]
												    [if [null action]
													[terminal_format standard-terminal '\nplan error: "' [conslist-as-english_string [quote ,arguments]] '" action not defined.']
												      [prog [terminal_format standard-terminal '\nplan waiting to call: "' [get action as-string] '."']
													    [have action wait_to_call]
													    ]]]]]]]
					      [[eq `wait-for-property     command] [if [not [eq 3 arguments-length]]
										       [error bug_name   `plan_compile_error-wrong_number_of_arguments
											      funkname   `wait-for-property
											      expression expression]
										     [let [[source_type [elt arguments 0]]
											   [key         [elt arguments 1]]
											   [value       [elt arguments 2]]]
										       [eval `[funk [this]
												    [terminal_format standard-terminal '\nplan waiting for property to exist: "' ,[physical_type_property_relation_goal-english_string source_type key value] '."']
												    [have this wait_for_property [quote ,source_type] [quote ,key] [quote ,value]]
												    ]]]]]
					      [[eq `wait-for-relationship command] [if [not [eq 7 arguments-length]]
										       [error bug_name   `plan_compile_error-wrong_number_of_arguments
											      funkname   `wait-for-relationship
											      expression expression]
										     [let [[source_type           [elt arguments 0]]
											   [source_property       [elt arguments 1]]
											   [source_property_value [elt arguments 2]]
											   [key                   [elt arguments 3]]
											   [target_type           [elt arguments 4]]
											   [target_property       [elt arguments 5]]
											   [target_property_value [elt arguments 6]]]
										       [eval `[funk [this]
												    [terminal_format standard-terminal '\nplan waiting for relationship to exist: "'
														     ,[physical_type_property_relation_goal-declarative_english_string source_type source_property source_property_value `preposition key target_type target_property target_property_value] '."']
												    [have this wait_for_relationship [quote ,source_type] [quote ,source_property] [quote ,source_property_value] [quote ,key] [quote ,target_type] [quote ,target_property] [quote ,target_property_value]]
												    ]]]]]
					      [t                                   [error bug_name `deliberative_plan_compile_error]]]]]]
	[t                          [error bug_name `deliberative_plan_compile_error]]]]

[deftypefunk deliberative_plan get __compiled_funk []
  [deliberative_plan-expression-compile expression]]

[deftypefunk deliberative_plan get compiled_funk []
  [if [null internal-compiled_funk]
      [= internal-compiled_funk [get this __compiled_funk]]]
  internal-compiled_funk]

[deftypefunk deliberative_plan execute eval []
  [funkall [get this compiled_funk] this]]

