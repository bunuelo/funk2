'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_plan'

[deframe deliberative_plan [frame] [mind
				    expression
				    compiled_funk]
  [new [initial-mind initial-expression]
       [= mind          initial-mind]
       [= expression    initial-expression]
       [= compiled_funk [get this __compiled_funk]]
       [have this eval]
       ]]

[defunk flatten_constree [expression]
  [let [[result nil]]
    [labels [[visit_leaves [exp]
			   [if [is-type `cons exp]
			       [mapc [funk [subexp]
					   [visit_leaves subexp]]
				     exp]
			     [= result [cons exp result]]]]]
	    [visit_leaves expression]]
    [reverse result]]]

[defunk deliberative_plan-expression-as_english_conslist [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `prog                  command] [apply &append
											  [append `[[do the following in serial punctuation-colon]]
												  [let [[step_number 1]]
												    [mapcar [funk [argument]
														  [let [[argument-result [append `[,[get step_number as-symbol] punctuation-period]
																		 [deliberative_plan-expression-as_english_conslist argument]
																		 [if [not [eq step_number arguments-length]]
																		     `[punctuation-comma]]]]]
														    [++ step_number]
														    argument-result]]
													    arguments]]]]]
					      [[eq `wait-to-call          command] [flatten_constree arguments]]
					      [[eq `wait-for-property     command] [if [not [eq 3 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type [elt arguments 0]]
											   [key         [elt arguments 1]]
											   [value       [elt arguments 2]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-english_conslist source_type key value]]]]]
					      [[eq `wait-for-relationship command] [if [not [eq 7 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type           [elt arguments 0]]
											   [source_property       [elt arguments 1]]
											   [source_property_value [elt arguments 2]]
											   [key                   [elt arguments 3]]
											   [target_type           [elt arguments 4]]
											   [target_property       [elt arguments 5]]
											   [target_property_value [elt arguments 6]]]
										       [append `[wait until]
											       [physical_type_property_relation_goal-declarative_english_conslist source_type source_property source_property_value `preposition key target_type target_property target_property_value]]]]]
					      [t                                   `[error ,[flatten_constree expression]]]]]]]
	[t                          `[error punctuation-colon ,[flatten_constree expression]]]]]

[deftypefunk deliberative_plan get as-english_conslist []
  [deliberative_plan-expression-as_english_conslist expression]]

[deftypefunk deliberative_plan get as-english_string []
  [conslist-as-english_string [get this as-english_conslist]]]

[deftypefunk deliberative_plan get as-string []
  [get this as-english_string]]

[defunk deliberative_plan-expression-compile [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `prog                  command] [eval `[funk [this]
												[terminal_format standard-terminal '\nplan evaluating serial process.']
												@[mapcar [funk [argument]
													       `[funkall ,[deliberative_plan-expression-compile argument] this]]
													 arguments]]]]
					      [[eq `wait-to-call          command] [let [[action_name [elt arguments 0]]]
										     [eval `[funk [this]
												  [terminal_format standard-terminal '\nplan waiting to call: ' [quote ,arguments]]
												  ]]]]
					      [[eq `wait-for-property     command] [if [not [eq 3 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type [elt arguments 0]]
											   [key         [elt arguments 1]]
											   [value       [elt arguments 2]]]
										       [eval `[funk [this]
												    [terminal_format standard-terminal '\nplan waiting for property to exist: "' ,[physical_type_property_relation_goal-english_string source_type key value] '."']
												    [print [quote ,expression]]
												    [print [cons `wait-for-property [conslist [quote ,source_type] [quote ,key] [quote ,value]]]]
												    ]]]]]
					      [[eq `wait-for-relationship command] [if [not [eq 7 arguments-length]]
										       `[error punctuation-colon ,[flatten_constree expression]]
										     [let [[source_type           [elt arguments 0]]
											   [source_property       [elt arguments 1]]
											   [source_property_value [elt arguments 2]]
											   [key                   [elt arguments 3]]
											   [target_type           [elt arguments 4]]
											   [target_property       [elt arguments 5]]
											   [target_property_value [elt arguments 6]]]
										       [eval `[funk [this]
												    [print [quote ,expression]]
												    [print [cons `wait-for-relationship [conslist [quote ,source_type]
																		  [quote ,source_property]
																		  [quote ,source_property_value]
																		  [quote ,key]
																		  [quote ,target_type]
																		  [quote ,target_property]
																		  [quote ,target_property_value]]]]
												    ]]]]]
					      [t                                   [let []
										     [eval `[funk [this]
												  [print [quote ,expression]]
												  ]]]]]]]]
	[t                          [error bug_name `deliberative_plan_compile_error]]]]

[deftypefunk deliberative_plan get __compiled_funk []
  [deliberative_plan-expression-compile expression]]

[deftypefunk deliberative_plan execute eval []
  [funkall [get this compiled_funk] this]]

