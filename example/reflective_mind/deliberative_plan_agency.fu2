'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_plan_agency'

[deframe deliberative_plan_agency [agency] [[internal-semantic_planner nil]]
  [new []
       [construct agency `plan]
       
       [parog [have this add_resource [new deliberative_focus_on_plan_resource]]
	      [have this add_resource [new deliberative_execute_plan_in_focus_resource]]
	      [have this add_resource [new deliberative_focus_on_execute_plan_resource]]
	      [have this add_resource [new deliberative_register_a_plan_from_focus_resource]]
	      [have this add_resource [new deliberative_register_b_plan_from_focus_resource]]
	      [have this add_resource [new deliberative_focus_on_register_a_plan_resource]]
	      [have this add_resource [new deliberative_focus_on_register_b_plan_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_after_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_before_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_in_parallel_resource]]
	      [have this add_resource [new deliberative_remember_plan_for_goal_resource]]
	      [have this add_resource [new deliberative_remember_plan_from_reflective_memory_for_goal_resource]]
	      [have this add_resource [new deliberative_remember_plan_from_social_advice_for_goal_resource]]]
       
       this]]

[deftypefunk deliberative_plan_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new semantic_event_knowledge_base `plan_knowledge      [get [get this mind] semantic_realm]]]
  [have [get this mind] add_semantic_knowledge_base [new semantic_event_knowledge_base `plan_plan_knowledge [get [get this mind] semantic_realm]]]
  ]

[deftypefunk deliberative_plan_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `plan_knowledge      `plan_knowledge->plan_type_knowledge]
  [have [get this mind] create_knowledge_event_stream_iterator `plan_plan_knowledge `plan_plan_knowledge->plan_plan_type_knowledge]
  ]

[deftypefunk deliberative_plan_agency execute create_builtin_actions []
  [have-apply [get this mind] create_plan_action `[deliberative plan execute_plan_in_focus]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_execute_plan]]
  [have-apply [get this mind] create_plan_action `[deliberative plan register_a_plan_from_focus]]
  [have-apply [get this mind] create_plan_action `[deliberative plan register_b_plan_from_focus]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_register_a_plan]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_register_b_plan]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_after]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_before]]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_in_parallel]]
  [have-apply [get this mind] create_plan_action `[deliberative plan remember_plan_for_goal]]
  [have-apply [get this mind] create_plan_action `[deliberative plan remember_plan_from_reflective_memory_for_goal]]
  [have-apply [get this mind] create_plan_action `[deliberative plan remember_plan_from_social_advice_for_goal]]]

[deftypefunk deliberative_plan_agency execute create_plan_propositionalized_actions [semantic_plan_phenomenal_name]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_plan ,semantic_plan_phenomenal_name]]
  ]

[deftypefunk deliberative_plan_agency get semantic_planner []
  [if [null internal-semantic_planner]
      [prog [= internal-semantic_planner [new semantic_planner [get [get this mind] semantic_realm]]]
	    [have [get [get this mind] semantic_knowledge_base `plan_knowledge] add_semantic_frame internal-semantic_planner]]]
  internal-semantic_planner]


'deliberative_focus_on_plan_resource'

[deframe deliberative_focus_on_plan_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_on_plan
		  [funk [semantic_plan_phenomenal_name]
			[terminal_format standard-terminal '\n' [get this as-string] ': focusing on ' semantic_plan_phenomenal_name '.']
			
			]]]]

[deftypefunk deliberative_focus_on_plan_resource get as-english_conslist []
  `[focus on a plan]]



'deliberative_execute_plan_in_focus_resource'

[deframe deliberative_execute_plan_in_focus_resource [traced_resource] []
  [new []
       [construct traced_resource `execute_plan_in_focus
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_execute_plan_in_focus_resource get as-english_conslist []
  `[execute plan in focus]]



'deliberative_focus_on_execute_plan_resource'

[deframe deliberative_focus_on_execute_plan_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_on_execute_plan
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_on_execute_plan_resource get as-english_conslist []
  `[focus on currently executing plan]]



'deliberative_register_a_plan_from_focus_resource'

[deframe deliberative_register_a_plan_from_focus_resource [traced_resource] []
  [new []
       [construct traced_resource `register_a_plan_from_focus
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_register_a_plan_from_focus_resource get as-english_conslist []
  `[register plan currently in focus]]



'deliberative_register_b_plan_from_focus_resource'

[deframe deliberative_register_b_plan_from_focus_resource [traced_resource] []
  [new []
       [construct traced_resource `register_b_plan_from_focus
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_register_b_plan_from_focus_resource get as-english_conslist []
  `[register another plan currently in focus]]



'deliberative_focus_on_register_a_plan_resource'

[deframe deliberative_focus_on_register_a_plan_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_on_register_a_plan
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_on_register_a_plan_resource get as-english_conslist []
  `[focus on plan I am registering]]



'deliberative_focus_on_register_b_plan_resource'

[deframe deliberative_focus_on_register_b_plan_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_on_register_b_plan
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_on_register_b_plan_resource get as-english_conslist []
  `[focus on other plan I am registering]]



'deliberative_focus_plan_add_after_resource'

[deframe deliberative_focus_plan_add_after_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_plan_add_after
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_after_resource get as-english_conslist []
  `[add a plan after the end of plan currently in focus]]



'deliberative_focus_plan_add_before_resource'

[deframe deliberative_focus_plan_add_before_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_plan_add_before
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_before_resource get as-english_conslist []
  `[add a plan before the beginning of plan currently in focus]]



'deliberative_focus_plan_add_in_parallel_resource'

[deframe deliberative_focus_plan_add_in_parallel_resource [traced_resource] []
  [new []
       [construct traced_resource `focus_plan_add_in_parallel
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_in_parallel_resource get as-english_conslist []
  `[add a plan in parallel to plan currently in focus]]



'deliberative_remember_plan_for_goal_resource'

[deframe deliberative_remember_plan_for_goal_resource [traced_resource] []
  [new []
       [construct traced_resource `remember_plan_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			]]]]

[deftypefunk deliberative_remember_plan_for_goal_resource get as-english_conslist []
  `[remember plan for goal]]



'deliberative_remember_plan_from_reflective_memory_for_goal_resource'

[deframe deliberative_remember_plan_from_reflective_memory_for_goal_resource [traced_resource] []
  [new []
       [construct traced_resource `remember_plan_from_reflective_memory_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			]]]]

[deftypefunk deliberative_remember_plan_from_reflective_memory_for_goal_resource get as-english_conslist []
  `[remember plan from reflective memory for goal]]



'deliberative_remember_plan_from_social_advice_for_goal_resource'

[deframe deliberative_remember_plan_from_social_advice_for_goal_resource [traced_resource] []
  [new []
       [construct traced_resource `remember_plan_from_social_advice_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			]]]]

[deftypefunk deliberative_remember_plan_from_social_advice_for_goal_resource get as-english_conslist []
  `[remember plan from social advice for goal]]



