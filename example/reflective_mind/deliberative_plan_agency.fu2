'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_plan_agency'

[deframe deliberative_plan_agency [agency] [[internal-semantic_planner nil]]
  [new []
       [construct agency `plan]
       
       [parog [have this add_resource [new deliberative_focus_on_plan_resource]]
	      [have this add_resource [new deliberative_execute_plan_in_focus_resource]]
	      [have this add_resource [new deliberative_imagine_executing_plan_in_focus_resource]]
	      [have this add_resource [new deliberative_focus_on_execute_plan_resource]]
	      [have this add_resource [new deliberative_register_a_plan_from_focus_resource]]
	      [have this add_resource [new deliberative_register_b_plan_from_focus_resource]]
	      [have this add_resource [new deliberative_focus_on_register_a_plan_resource]]
	      [have this add_resource [new deliberative_focus_on_register_b_plan_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_after_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_before_resource]]
	      [have this add_resource [new deliberative_focus_plan_add_in_parallel_resource]]
	      [have this add_resource [new deliberative_remember_plan_for_goal_resource]]
	      ]
       
       this]]

[deftypefunk deliberative_plan_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new semantic_event_knowledge_base `deliberative1_knowledge [get [get this mind] semantic_realm]]]
  ]

[deftypefunk deliberative_plan_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `deliberative1_knowledge `deliberative1_knowledge->deliberative1_type_knowledge]
  ]

[deftypefunk deliberative_plan_agency execute create_builtin_actions []
  [parog [have-apply [get this mind] create_plan_action `[deliberative plan execute_plan_in_focus]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan imagine_executing_plan_in_focus]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_execute_plan]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan register_a_plan_from_focus]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan register_b_plan_from_focus]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_register_a_plan]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_register_b_plan]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_after]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_before]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan focus_plan_add_in_parallel]]
	 [have-apply [get this mind] create_plan_action `[deliberative plan remember_plan_for_goal]]]
  nil]

[deftypefunk deliberative_plan_agency execute create_plan_propositionalized_actions [semantic_plan_phenomenal_name]
  [have-apply [get this mind] create_plan_action `[deliberative plan focus_on_plan ,semantic_plan_phenomenal_name]]
  ]

[deftypefunk deliberative_plan_agency get semantic_planner []
  [if [null internal-semantic_planner]
      [prog [= internal-semantic_planner [new semantic_planner [get [get this mind] semantic_realm]]]
	    [set internal-semantic_planner planner_type `deliberative1]
	    [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame internal-semantic_planner]]]
  internal-semantic_planner]

[deftypefunk deliberative_plan_agency get semantic_plan [phenomenal_name]
  [get layer semantic_plan phenomenal_name]]


'deliberative_focus_on_plan_resource'

[deframe deliberative_focus_on_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_on_plan
		  [funk [semantic_plan_phenomenal_name]
			[let [[semantic_plan [get agency semantic_plan semantic_plan_phenomenal_name]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on ' semantic_plan_phenomenal_name ', "' [get [get semantic_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan semantic_plan]]]]]]

[deftypefunk deliberative_focus_on_plan_resource get as-english_conslist []
  `[focus on a plan]]

[deftypefunk deliberative_focus_on_plan_resource get as-english_conslist_with_arguments [arguments]
  [have `[focus on the plan to @arguments] flatten]]



'deliberative_execute_plan_in_focus_resource'

[deframe deliberative_execute_plan_in_focus_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `execute_plan_in_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [if focus_plan
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': executing ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call `deliberative `execution `execute_plan focus_plan]
				    [while [get [get [get [get this mind] agency `deliberative `plan] semantic_planner] execute_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done executing ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to execute."']
				  ]]
			  
			  ]]]]]

[deftypefunk deliberative_execute_plan_in_focus_resource get as-english_conslist []
  `[execute plan in focus]]



'deliberative_imagine_executing_plan_in_focus_resource'

[deframe deliberative_imagine_executing_plan_in_focus_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `imagine_executing_plan_in_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [if focus_plan
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': imagining ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call `deliberative `imagination `imagine_plan focus_plan]
				    [while [get [get [get [get this mind] agency `deliberative `plan] semantic_planner] imagine_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done imagining ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to imagine executing."']
				  ]]
			  
			  ]]]]]

[deftypefunk deliberative_imagine_executing_plan_in_focus_resource get as-english_conslist []
  `[imagine executing plan in focus]]



'deliberative_focus_on_execute_plan_resource'

[deframe deliberative_focus_on_execute_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_on_execute_plan
		  [funk []
			[let [[execute_plan [get [get [get this agency] semantic_planner] execute_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get execute_plan phenomenal_name] ', "' [get [get execute_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan execute_plan]]]]]]

[deftypefunk deliberative_focus_on_execute_plan_resource get as-english_conslist []
  `[focus on currently executing plan]]



'deliberative_register_a_plan_from_focus_resource'

[deframe deliberative_register_a_plan_from_focus_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `register_a_plan_from_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] register_a_plan focus_plan]]]]]]

[deftypefunk deliberative_register_a_plan_from_focus_resource get as-english_conslist []
  `[register plan currently in focus]]



'deliberative_register_b_plan_from_focus_resource'

[deframe deliberative_register_b_plan_from_focus_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `register_b_plan_from_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] register_b_plan focus_plan]]]]]]

[deftypefunk deliberative_register_b_plan_from_focus_resource get as-english_conslist []
  `[register another plan currently in focus]]



'deliberative_focus_on_register_a_plan_resource'

[deframe deliberative_focus_on_register_a_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_on_register_a_plan
		  [funk []
			[let [[register_a_plan [get [get [get this agency] semantic_planner] register_a_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_a_plan phenomenal_name] ', "' [get [get register_a_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan register_a_plan]]]]]]

[deftypefunk deliberative_focus_on_register_a_plan_resource get as-english_conslist []
  `[focus on plan I am registering]]



'deliberative_focus_on_register_b_plan_resource'

[deframe deliberative_focus_on_register_b_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_on_register_b_plan
		  [funk []
			[let [[register_b_plan [get [get [get this agency] semantic_planner] register_b_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_b_plan phenomenal_name] ', "' [get [get register_b_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan register_b_plan]]]]]]

[deftypefunk deliberative_focus_on_register_b_plan_resource get as-english_conslist []
  `[focus on other plan I am registering]]



'deliberative_focus_plan_add_after_resource'

[deframe deliberative_focus_plan_add_after_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_plan_add_after
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_after_resource get as-english_conslist []
  `[add a plan after the end of plan currently in focus]]



'deliberative_focus_plan_add_before_resource'

[deframe deliberative_focus_plan_add_before_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_plan_add_before
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_before_resource get as-english_conslist []
  `[add a plan before the beginning of plan currently in focus]]



'deliberative_focus_plan_add_in_parallel_resource'

[deframe deliberative_focus_plan_add_in_parallel_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `focus_plan_add_in_parallel
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]]]]

[deftypefunk deliberative_focus_plan_add_in_parallel_resource get as-english_conslist []
  `[add a plan in parallel to plan currently in focus]]



'deliberative_remember_plan_for_goal_resource'

[deframe deliberative_remember_plan_for_goal_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `remember_plan_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			[let [[arguments `[|forget all imagined events|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			[let [[arguments `[|set imagine time to be now|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			[let [[arguments `[|imagine current situation|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			[let [[arguments `[|focus on a plan, plan 2|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			[let [[arguments `[|imagine executing plan in focus|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			[let [[arguments `[|forget all imagined events|]]]
			  [let [[action [have [get [get this mind] layer `deliberative] lookup_plan_action arguments]]]
			    [if [null action]
				[terminal_format standard-terminal '\nremember plan error: "' [conslist-as-english_string arguments] '" action not defined.']
			      [prog [terminal_format standard-terminal '\nremember plan waiting to call: "' [get action as-string] '."']
				    [have action wait_to_call]
				    ]]]]
			
			]]]]

[deftypefunk deliberative_remember_plan_for_goal_resource get as-english_conslist []
  `[remember plan for goal]]


