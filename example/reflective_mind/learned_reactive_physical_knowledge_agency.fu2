'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'learned_reactive_physical_knowledge_agency'

[deframe learned_reactive_physical_knowledge_agency [agency] []
  [new []
       [construct agency `physical_knowledge]
       [have this add_resource [new translate_visual_knowledge_to_physical_knowledge_resource]]
       ]]

[deftypefunk learned_reactive_physical_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `visual_knowledge `visual_knowledge->physical_knowledge]]

[deftypefunk learned_reactive_physical_knowledge_agency execute wait_for_physical_knowledge_step [wait_for_step]
  [have [get this resource `translate_visual_knowledge_to_physical_knowledge] wait_for_physical_knowledge_step wait_for_step]]


'slot_value'

[deframe slot_value [frame] [slot_name slot_value]
  [new [initial-slot_name
	initial-slot_value]
       [= slot_name     initial-slot_name]
       [= slot_value    initial-slot_value]]]




'translate_visual_knowledge_to_physical_knowledge_resource'

[deframe translate_visual_knowledge_to_physical_knowledge_resource [vital_resource] [[physical_knowledge_step-conditionlock [new conditionlock]]
										     [physical_knowledge_step               0]]
  [new []
       [construct vital_resource `translate_visual_knowledge_to_physical_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       nil]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute increment_physical_knowledge_step []
  [have physical_knowledge_step-conditionlock lock]
  [= physical_knowledge_step [+ physical_knowledge_step 1]]
  [have physical_knowledge_step-conditionlock signal]
  [have physical_knowledge_step-conditionlock unlock]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute wait_for_physical_knowledge_step [wait_for_step]
  [let [[result_step nil]]
    [have physical_knowledge_step-conditionlock lock]
    [while [< physical_knowledge_step wait_for_step]
      [have physical_knowledge_step-conditionlock wait]]
    [= result_step physical_knowledge_step]
    [have physical_knowledge_step-conditionlock unlock]
    result_step]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute add_semantic_reflective_object_to_knowledge_base [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object [get [get this mental_layer] semantic_reflective_object phenomenal_name reflective_object_type]]]
    [terminal_format standard-terminal
		     '\ntranslate_visual_knowledge_to_physical_knowledge_resource-add_semantic_reflective_object_to_knowledge_base:'
		     '\n  (phenomenal_name        = ' phenomenal_name ')'
		     '\n  (reflective_object_type = ' reflective_object_type ').']
    [have [get this mental_layer] reflective_knowledge_base-add_semantic_frame semantic_reflective_object]]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute remove_semantic_reflective_object_from_knowledge_base [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object [get [get this mental_layer] semantic_reflective_object phenomenal_name reflective_object_type]]]
    [terminal_format standard-terminal
		     '\ntranslate_visual_knowledge_to_physical_knowledge_resource-remove_semantic_reflective_object_from_knowledge_base:'
		     '\n  (phenomenal_name        = ' phenomenal_name ')'
		     '\n  (reflective_object_type = ' reflective_object_type ').']
    [have [get this mental_layer] reflective_knowledge_base-remove_semantic_frame semantic_reflective_object]]]


[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute execute_resource_raw_funk []
  [let [[visual_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `visual_knowledge->physical_knowledge]]]
    [semantic_reflective_object_type_relation_event-core_extension-ping]
    [let [[chunk_event_count 0]]
      [while t
	`[print 'translate_visual_knowledge_to_physical_knowledge_resource waiting for visual_knowledge_iterator.']
	[let [[event [have visual_knowledge_iterator wait_for_current]]]
	  [if [not [null event]]
	      [prog `[have this-resource think_to_self 'translate visual->physical visual event: ' event]
		    [let [[event_type [get event event_type]]]
		      [cond [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										   [if [is-type `semantic_visual_object semantic_frame]
										       [let [[phenomenal_name        [get semantic_frame phenomenal_name]]
											     [reflective_object_type [get semantic_frame reflective_object_type]]]
											 [have this add_semantic_reflective_object_to_knowledge_base phenomenal_name reflective_object_type]]]]]
			    [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `remove_semantic_frame]]        [let [[semantic_frame [get event semantic_frame]]]
										   [if [is-type `semantic_visual_object semantic_frame]
										       [let [[phenomenal_name        [get semantic_frame phenomenal_name]]
											     [reflective_object_type [get semantic_frame reflective_object_type]]]
											 [have this remove_semantic_reflective_object_from_knowledge_base phenomenal_name reflective_object_type]]]]]
			    [[and [is-type `semantic_frame_event event]
				  [eq event_type `add]]                          [let [[key_type [get event key_type]]
										       [key      [get event key]]]
										   `[terminal_format standard-terminal '\nvisual->physical relation add event: ' key_type ' ' key]
										   [cond [[eq key_type `property]    [let [[subject  [get event semantic_frame]]
															   [property [get event value]]]
														       [let [[subject-phenomenal_name        [get subject phenomenal_name]]
															     [subject-reflective_object_type [get subject reflective_object_type]]]
															 [let [[subject-semantic_reflective_object [get [get this mental_layer] semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]]
															   [have subject-semantic_reflective_object assure_exists key_type key property]]]]]
											 [[eq key_type `preposition] [let [[subject [get event semantic_frame]]
															   [object  [get event value]]]
														       [if object
															   [let [[subject-phenomenal_name        [get subject phenomenal_name]]
																 [subject-reflective_object_type [get subject reflective_object_type]]
																 [object-phenomenal_name         [get object  phenomenal_name]]
																 [object-reflective_object_type  [get object  reflective_object_type]]]
															     [let [[subject-semantic_reflective_object [get [get this mental_layer] semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]
																   [object-semantic_reflective_object  [get [get this mental_layer] semantic_reflective_object object-phenomenal_name  object-reflective_object_type]]]
															       [have subject-semantic_reflective_object assure_exists `preposition key object-semantic_reflective_object]]]]]]
											 ]]]
			    [[and [is-type `semantic_frame_event event]
				  [eq event_type `remove]]                       [let [[key_type [get event key_type]]
										       [key      [get event key]]]
										   `[terminal_format standard-terminal '\nvisual->physical relation remove event: ' key_type ' ' key]
										   [cond [[eq key_type `property]    [let [[subject  [get event semantic_frame]]
															   [property [get event value]]]
														       [let [[subject-phenomenal_name      [get subject phenomenal_name]]
															     [subject-reflective_object_type [get subject reflective_object_type]]]
															 [let [[subject-semantic_reflective_object [get [get this mental_layer] semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]]
															   [have subject-semantic_reflective_object remove key_type key property]]]]]
											 [[eq key_type `preposition] [let [[subject [get event semantic_frame]]
															   [object  [get event value]]]
														       [if object
															   [let [[subject-phenomenal_name        [get subject phenomenal_name]]
																 [subject-reflective_object_type [get subject reflective_object_type]]
																 [object-phenomenal_name         [get object phenomenal_name]]
																 [object-reflective_object_type  [get object reflective_object_type]]]
															     [let [[subject-semantic_reflective_object [get [get this mental_layer] semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]
																   [object-semantic_reflective_object  [get [get this mental_layer] semantic_reflective_object object-phenomenal_name  object-reflective_object_type]]]
															       [have subject-semantic_reflective_object remove `preposition key object-semantic_reflective_object]]]]]]
											 ]]]
			    [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `end_of_visual_changes]]        [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
													'end_of_visual_changes found: added end_of_physical_changes event (' chunk_event_count ' visual events integrated into physical_knowledge).']
										       [= chunk_event_count -1]
										       [have [get [get this mind] semantic_knowledge_base `physical_knowledge] add_trace_event [new semantic_knowledge_base_event [time] `end_of_physical_changes nil]]
										       [have this increment_physical_knowledge_step]
										       [let [[physical_world_time_step [get [get [get this mind] body] time_step]]]
											 `[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
													   'processed physical world step ' physical_world_time_step '.']
											 [set [get this mind] processed_physical_world_step physical_world_time_step]]
										       nil]]
			    ]]
		    [= chunk_event_count [+ chunk_event_count 1]]]]
	  [have visual_knowledge_iterator increment]]]]]]


