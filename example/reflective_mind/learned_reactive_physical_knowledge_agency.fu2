'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'learned_reactive_physical_knowledge_agency'

[deframe learned_reactive_physical_knowledge_agency [agency] []
  [new []
       [construct agency `physical_knowledge]
       [have this add_resource [new translate_visual_knowledge_to_physical_knowledge_resource]]
       ]]


[deftypefunk learned_reactive_physical_knowledge_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_event_knowledge_base `physical_knowledge [get [get this mind] semantic_realm]]]
  ]

[deftypefunk learned_reactive_physical_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `visual_knowledge `visual_knowledge->physical_knowledge]
  ]

[deftypefunk learned_reactive_physical_knowledge_agency execute check_exists [semantic_partial_state]
  [have [get this resource `translate_visual_knowledge_to_physical_knowledge] check_exists semantic_partial_state]]

[deftypefunk learned_reactive_physical_knowledge_agency execute wait_for_partial_state_to_exist [semantic_partial_state]
  [have [get this resource `translate_visual_knowledge_to_physical_knowledge] wait_for_partial_state_to_exist semantic_partial_state]]

[deftypefunk learned_reactive_physical_knowledge_agency execute wait_for_physical_knowledge_step [wait_for_step]
  [have [get this resource `translate_visual_knowledge_to_physical_knowledge] wait_for_physical_knowledge_step wait_for_step]]


'slot_value'

[deframe slot_value [frame] [slot_name slot_value]
  [new [initial-slot_name
	initial-slot_value]
       [= slot_name     initial-slot_name]
       [= slot_value    initial-slot_value]]]




'translate_visual_knowledge_to_physical_knowledge_resource'

[deframe translate_visual_knowledge_to_physical_knowledge_resource [vital_resource] [[physical_knowledge_step-conditionlock               [new conditionlock]]
										     [physical_knowledge_step                             0]
										     [semantic_reflective_object_mutex                    [new mutex]]
										     [semantic_reflective_object_set_type_ptypehash_mutex [new mutex]]
										     [semantic_reflective_object_set_type_ptypehash       [new ptypehash]]]
  [new []
       [construct vital_resource `translate_visual_knowledge_to_physical_knowledge
		  [funk []
			[have this execute_resource_raw_funk]
			]]
       nil]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute increment_physical_knowledge_step []
  [have physical_knowledge_step-conditionlock lock]
  [= physical_knowledge_step [+ physical_knowledge_step 1]]
  [have physical_knowledge_step-conditionlock signal]
  [have physical_knowledge_step-conditionlock unlock]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute wait_for_physical_knowledge_step [wait_for_step]
  [let [[result_step nil]]
    [have physical_knowledge_step-conditionlock lock]
    [while [< physical_knowledge_step wait_for_step]
      [have physical_knowledge_step-conditionlock wait]]
    [= result_step physical_knowledge_step]
    [have physical_knowledge_step-conditionlock unlock]
    result_step]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute add_semantic_reflective_object_type [reflective_object_type semantic_reflective_object]
  [have semantic_reflective_object_set_type_ptypehash_mutex lock]
  [let [[semantic_reflective_object_set [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]]
    [if [null semantic_reflective_object_set]
	[prog [= semantic_reflective_object_set [new set]]
	      [have semantic_reflective_object_set_type_ptypehash add reflective_object_type semantic_reflective_object_set]]]
    [have semantic_reflective_object_set add semantic_reflective_object]]
  [have semantic_reflective_object_set_type_ptypehash_mutex unlock]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute remove_semantic_reflective_object_type [reflective_object_type semantic_reflective_object]
  [have semantic_reflective_object_set_type_ptypehash_mutex lock]
  [let [[semantic_reflective_object_set [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]]
    [have semantic_reflective_object_set remove semantic_reflective_object]
    [if [get semantic_reflective_object_set is_empty]
	[have semantic_reflective_object_set_type_ptypehash remove reflective_object_type]]]
  [have semantic_reflective_object_set_type_ptypehash_mutex unlock]]

'The possible set returned by this funk is READ ONLY and is not to be modified outside of the interface above.'
[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute lookup_set_semantic_reflective_object_type [reflective_object_type]
  [have semantic_reflective_object_set_type_ptypehash lookup reflective_object_type]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource get semantic_reflective_object [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object nil]]
    [have semantic_reflective_object_mutex lock]
    [= semantic_reflective_object [have [get [get this mind] semantic_realm] lookup_phenomenon_semantic_frame phenomenal_name]]
    [if [null semantic_reflective_object]
	[prog [= semantic_reflective_object [new semantic_reflective_object [get [get this mind] semantic_realm]]]
	      [set semantic_reflective_object phenomenal_name        phenomenal_name]
	      [set semantic_reflective_object reflective_object_type reflective_object_type]
	      [have [get [get this mind] semantic_realm] add_phenomenon_semantic_frame phenomenal_name semantic_reflective_object]
	      ]]
    [have semantic_reflective_object_mutex unlock]
    semantic_reflective_object]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute add_semantic_reflective_object_to_knowledge_base [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object [get this semantic_reflective_object phenomenal_name reflective_object_type]]]
    [terminal_format standard-terminal
		     '\ntranslate_visual_knowledge_to_physical_knowledge_resource-add_semantic_reflective_object_to_knowledge_base:'
		     '\n  (phenomenal_name        = ' phenomenal_name ')'
		     '\n  (reflective_object_type = ' reflective_object_type ').']
    [have this add_semantic_reflective_object_type reflective_object_type semantic_reflective_object]
    [have [get [get this mind] semantic_knowledge_base `physical_knowledge] add_semantic_frame semantic_reflective_object]]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute remove_semantic_reflective_object_from_knowledge_base [phenomenal_name reflective_object_type]
  [let [[semantic_reflective_object [get this semantic_reflective_object phenomenal_name reflective_object_type]]]
    [terminal_format standard-terminal
		     '\ntranslate_visual_knowledge_to_physical_knowledge_resource-remove_semantic_reflective_object_from_knowledge_base:'
		     '\n  (phenomenal_name        = ' phenomenal_name ')'
		     '\n  (reflective_object_type = ' reflective_object_type ').']
    [have this remove_semantic_reflective_object_type reflective_object_type semantic_reflective_object]
    [have [get [get this mind] semantic_knowledge_base `physical_knowledge] remove_semantic_frame semantic_reflective_object]]]


[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute execute_resource_raw_funk []
  [let [[visual_knowledge_iterator [get [get this mind] knowledge_event_stream_iterator `visual_knowledge->physical_knowledge]]]
    [semantic_reflective_object_type_relation_event-core_extension-ping]
    [let [[chunk_event_count 0]]
      [while t
	`[print 'translate_visual_knowledge_to_physical_knowledge_resource waiting for visual_knowledge_iterator.']
	[let [[event [have visual_knowledge_iterator wait_for_current]]]
	  [if [not [null event]]
	      [prog `[have this-resource think_to_self 'translate visual->physical visual event: ' event]
		    [let [[event_type [get event event_type]]]
		      [cond [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										   [if [is-type `semantic_visual_object semantic_frame]
										       [let [[phenomenal_name        [get semantic_frame phenomenal_name]]
											     [reflective_object_type [get semantic_frame reflective_object_type]]]
											 [have this add_semantic_reflective_object_to_knowledge_base phenomenal_name reflective_object_type]]]]]
			    [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `remove_semantic_frame]]        [let [[semantic_frame [get event semantic_frame]]]
										   [if [is-type `semantic_visual_object semantic_frame]
										       [let [[phenomenal_name        [get semantic_frame phenomenal_name]]
											     [reflective_object_type [get semantic_frame reflective_object_type]]]
											 [have this remove_semantic_reflective_object_from_knowledge_base phenomenal_name reflective_object_type]]]]]
			    [[and [is-type `semantic_frame_event event]
				  [eq event_type `add]]                          [let [[key_type [get event key_type]]
										       [key      [get event key]]]
										   `[terminal_format standard-terminal '\nvisual->physical relation add event: ' key_type ' ' key]
										   [cond [[eq key_type `property]    [let [[subject  [get event semantic_frame]]
															   [property [get event value]]]
														       [let [[subject-phenomenal_name        [get subject phenomenal_name]]
															     [subject-reflective_object_type [get subject reflective_object_type]]]
															 [let [[subject-semantic_reflective_object [get this semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]]
															   [have subject-semantic_reflective_object assure_exists key_type key property]]]]]
											 [[eq key_type `preposition] [let [[subject [get event semantic_frame]]
															   [object  [get event value]]]
														       [if object
															   [let [[subject-phenomenal_name        [get subject phenomenal_name]]
																 [subject-reflective_object_type [get subject reflective_object_type]]
																 [object-phenomenal_name         [get object  phenomenal_name]]
																 [object-reflective_object_type  [get object  reflective_object_type]]]
															     [let [[subject-semantic_reflective_object [get this semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]
																   [object-semantic_reflective_object  [get this semantic_reflective_object object-phenomenal_name  object-reflective_object_type]]]
															       [have subject-semantic_reflective_object assure_exists `preposition key object-semantic_reflective_object]]]]]]
											 ]]]
			    [[and [is-type `semantic_frame_event event]
				  [eq event_type `remove]]                       [let [[key_type [get event key_type]]
										       [key      [get event key]]]
										   `[terminal_format standard-terminal '\nvisual->physical relation remove event: ' key_type ' ' key]
										   [cond [[eq key_type `property]    [let [[subject  [get event semantic_frame]]
															   [property [get event value]]]
														       [let [[subject-phenomenal_name      [get subject phenomenal_name]]
															     [subject-reflective_object_type [get subject reflective_object_type]]]
															 [let [[subject-semantic_reflective_object [get this semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]]
															   [have subject-semantic_reflective_object remove key_type key property]]]]]
											 [[eq key_type `preposition] [let [[subject [get event semantic_frame]]
															   [object  [get event value]]]
														       [if object
															   [let [[subject-phenomenal_name        [get subject phenomenal_name]]
																 [subject-reflective_object_type [get subject reflective_object_type]]
																 [object-phenomenal_name         [get object phenomenal_name]]
																 [object-reflective_object_type  [get object reflective_object_type]]]
															     [let [[subject-semantic_reflective_object [get this semantic_reflective_object subject-phenomenal_name subject-reflective_object_type]]
																   [object-semantic_reflective_object  [get this semantic_reflective_object object-phenomenal_name  object-reflective_object_type]]]
															       [have subject-semantic_reflective_object remove `preposition key object-semantic_reflective_object]]]]]]
											 ]]]
			    [[and [is-type `semantic_knowledge_base_event event]
				  [eq event_type `end_of_visual_changes]]        [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
													'end_of_visual_changes found: added end_of_physical_changes event (' chunk_event_count ' visual events integrated into physical_knowledge).']
										       [= chunk_event_count -1]
										       [have [get [get this mind] semantic_knowledge_base `physical_knowledge] add_trace_event [new semantic_knowledge_base_event [time] `end_of_physical_changes nil]]
										       [have this increment_physical_knowledge_step]
										       nil]]
			    ]]
		    [= chunk_event_count [+ chunk_event_count 1]]]]
	  [have visual_knowledge_iterator increment]]]]]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute check_semantic_partial_state_property_exists [semantic_partial_state]
  [terminal_format standard-terminal '\ntranslate_visual_knowledge_to_physical_knowledge_resource: check semantic partial state property exists "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[source_type      [get semantic_partial_state source_type]]
	[source_key_type  [get semantic_partial_state source_key_type]]
	[source_key       [get semantic_partial_state source_key]]
	[source_value     [get semantic_partial_state source_value]]
	[key_type         [get semantic_partial_state key_type]]
	[key              [get semantic_partial_state key]]
	[target_type      [get semantic_partial_state target_type]]
	[found_does_exist nil]]
    [let* [[source_type-semantic_reflective_object_set      [have this lookup_set_semantic_reflective_object_type source_type]]
	   [source_type-semantic_reflective_object_set-iter [if source_type-semantic_reflective_object_set
								[get source_type-semantic_reflective_object_set elements]
							      nil]]]
      [while source_type-semantic_reflective_object_set-iter
	[let* [[source_type-semantic_reflective_object [car source_type-semantic_reflective_object_set-iter]]
	       [property_one_set                       [have source_type-semantic_reflective_object lookup_set source_key_type source_key]]]
	  [if [and property_one_set
		   [get property_one_set contains source_value]]
	      [let [[property_two_set [have source_type-semantic_reflective_object lookup_set key_type key]]]
		[if [and property_two_set
			 [get property_two_set contains target_type]]
		    [prog [terminal_format standard-terminal
					   '\ntranslate_visual_knowledge_to_physical_knowledge_resource: '
					   '\n    found source semantic_reflective_object = ' source_type-semantic_reflective_object]
			  [= found_does_exist                                t]
			  [= source_type-semantic_reflective_object_set-iter nil]]]]]]
	[if source_type-semantic_reflective_object_set-iter
	    [= source_type-semantic_reflective_object_set-iter [cdr source_type-semantic_reflective_object_set-iter]]]]]
    found_does_exist]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute check_semantic_partial_state_property_relation_exists [semantic_partial_state]
  [terminal_format standard-terminal '\ntranslate_visual_knowledge_to_physical_knowledge_resource: check semantic partial state property relation exists "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[source_type      [get semantic_partial_state source_type]]
	[source_key_type  [get semantic_partial_state source_key_type]]
	[source_key       [get semantic_partial_state source_key]]
	[source_value     [get semantic_partial_state source_value]]
	[key_type         [get semantic_partial_state key_type]]
	[key              [get semantic_partial_state key]]
	[target_type      [get semantic_partial_state target_type]]
	[target_key_type  [get semantic_partial_state target_key_type]]
	[target_key       [get semantic_partial_state target_key]]
	[target_value     [get semantic_partial_state target_value]]
	[found_does_exist nil]]
    [let* [[source_type-semantic_reflective_object_set      [have this lookup_set_semantic_reflective_object_type source_type]]
	   [source_type-semantic_reflective_object_set-iter [if source_type-semantic_reflective_object_set
								[get source_type-semantic_reflective_object_set elements]
							      nil]]]
      [while source_type-semantic_reflective_object_set-iter
	[let* [[source_type-semantic_reflective_object              [car source_type-semantic_reflective_object_set-iter]]
	       [source_type-semantic_reflective_object-property_set [have source_type-semantic_reflective_object lookup_set source_key_type source_key]]]
	  [if [and source_type-semantic_reflective_object-property_set
		   [get source_type-semantic_reflective_object-property_set contains source_value]]
	      [let [[relation_set [have source_type-semantic_reflective_object lookup_set key_type key]]]
		[if relation_set
		    [let [[relation_iter [get relation_set elements]]]
		      [while relation_iter
			[let [[target_semantic_reflective_object [car relation_iter]]]
			  [if [is-type `semantic_reflective_object target_semantic_reflective_object]
			      [if [eq [get target_semantic_reflective_object reflective_object_type] target_type]
				  [let [[target_semantic_reflective_object-property_set [have target_semantic_reflective_object lookup_set target_key_type target_key]]]
				    [if [and target_semantic_reflective_object-property_set
					     [get target_semantic_reflective_object-property_set contains target_value]]
					[prog [terminal_format standard-terminal
							       '\ntranslate_visual_knowledge_to_physical_knowledge_resource: '
							       '\n    found source semantic_reflective_object = ' source_type-semantic_reflective_object]
					      [= found_does_exist                                t]
					      [= relation_iter                                   nil]
					      [= source_type-semantic_reflective_object_set-iter nil]]]]]]]
			[if relation_iter
			    [= relation_iter [cdr relation_iter]]]]]]]]]
	[if source_type-semantic_reflective_object_set-iter
	    [= source_type-semantic_reflective_object_set-iter [cdr source_type-semantic_reflective_object_set-iter]]]]]
    found_does_exist]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute check_exists [semantic_partial_state]
  [let [[semantic_partial_state-type [type semantic_partial_state]]]
    [cond [[eq semantic_partial_state-type `semantic_partial_state_property]          [have this check_semantic_partial_state_property_exists          semantic_partial_state]]
	  [[eq semantic_partial_state-type `semantic_partial_state_property_relation] [have this check_semantic_partial_state_property_relation_exists semantic_partial_state]]
	  [t                                                                          [error bug_name               `translate_visual_knowledge_to_physical_knowledge_resource-execute-check_exists-do_not_know_semantic_partial_state_type
											     semantic_partial_state semantic_partial_state
											     this                   this]]]]]

[deftypefunk translate_visual_knowledge_to_physical_knowledge_resource execute wait_for_partial_state_to_exist [semantic_partial_state]
  [terminal_format standard-terminal '\ntranslate_visual_knowledge_to_physical_knowledge_resource: waiting for semantic partial state to exist "' [get semantic_partial_state as-natural_language_string] '"']
  [let [[exists    nil]
	[last_step [have [get this mind] wait_for_physical_knowledge_step 0]]]
    [while [not exists]
      [= exists [have this check_exists semantic_partial_state]]
      [if [not exists]
	  [= last_step [have [get this mind] wait_for_physical_knowledge_step [+ last_step 1]]]]]]
  [terminal_format standard-terminal '\ntranslate_visual_knowledge_to_physical_knowledge_resource: done waiting for semantic partial state to exist "' [get semantic_partial_state as-natural_language_string] '"']
  nil]


