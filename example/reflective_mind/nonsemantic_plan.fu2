'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'nonsemantic_plan'

[deframe nonsemantic_plan [frame] [mind
				   unique_name
				   variables
				   expression
				   [internal-semantic_plan_object  nil]
				   [internal-compiled_funk         nil]
				   [internal-compiled_imagine_funk nil]
				   [internal-english_conslist      `uninitialized]
				   [internal-english_string        nil]]
  [new [initial-mind
	initial-variables
	initial-expression]
       [= mind        initial-mind]
       [= unique_name [get mind new-name `plan]]
       [= variables   initial-variables]
       [= expression  initial-expression]
       ]]

[defunk flatten_constree [expression]
  [let [[result nil]]
    [labels [[visit_leaves [exp]
			   [if [is-type `cons exp]
			       [mapc [funk [subexp]
					   [visit_leaves subexp]]
				     exp]
			     [= result [cons exp result]]]]]
	    [visit_leaves expression]]
    [reverse result]]]

[defunk nonsemantic_plan-expression-as_english_conslist [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[eval-expression [elt arguments 0]]]
												`[check preconditions]]]]
					      [[eq `prog                           command] [apply &append
												   [append `[[do the following in serial punctuation-colon]]
													   [let [[step_number 1]]
													     [mapcar [funk [argument]
															   [let [[argument-result [append `[,[get step_number as-symbol] punctuation-period]
																			  [nonsemantic_plan-expression-as_english_conslist argument]
																			  [if [not [eq step_number arguments-length]]
																			      `[punctuation-comma]]]]]
															     [++ step_number]
															     argument-result]]
														     arguments]]]]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[time_to_wait [elt arguments 0]]]
												[append `[wait for]
													`[,time_to_wait]]]]]
					      [[eq `wait-to-call                   command] [flatten_constree arguments]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 5 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [property              [elt arguments 3]]
												    [property_value        [elt arguments 4]]]
												[append `[wait until]
													[object_type_property_property_goal-english_conslist source_type source_property source_property_value property property_value]]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 8 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[append `[wait until]
													[object_type_property_relation_goal-declarative_english_conslist source_type source_property source_property_value `preposition key target_type target_property target_property_value]]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 8 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[append `[assure relationship exists punctuation-colon]
													[object_type_property_relation_goal-declarative_english_conslist source_type
																					 source_property
																					 source_property_value
																					 key_type
																					 key
																					 target_type
																					 target_property
																					 target_property_value]]]]]
					      [t                                            `[error ,[flatten_constree expression]]]]]]]
	[t                          `[error punctuation-colon ,[flatten_constree expression]]]]]

[deftypefunk nonsemantic_plan get as-english_conslist []
  [if [eq `uninitialized internal-english_conslist]
      [= internal-english_conslist [nonsemantic_plan-expression-as_english_conslist expression]]]
  internal-english_conslist]

[deftypefunk nonsemantic_plan get as-english_string []
  [if [null internal-english_string]
      [= internal-english_string [conslist-as-english_string [get this as-english_conslist]]]]
  internal-english_string]

[deftypefunk nonsemantic_plan get as-string []
  [get this as-english_string]]

[deftypefunk nonsemantic_plan get as-graphviz_label []
  [string-concat '<' [get unique_name as-string] '>']]

[deftypefunk nonsemantic_plan execute wait_for_physical_property [source_type source_property source_property_value property property_value]
  [have [get this mind] wait_for_physical_property source_type source_property source_property_value property property_value]]

[deftypefunk nonsemantic_plan execute wait_for_physical_relationship [source_type
								      source_property
								      source_property_value
								      key_type
								      key
								      target_type
								      target_property
								      target_property_value]
  [have [get this mind] wait_for_physical_relationship
	source_type
	source_property
	source_property_value
	key_type
	key
	target_type
	target_property
	target_property_value]]

[deftypefunk nonsemantic_plan execute assure_physical_relationship [source_type
								    source_property
								    source_property_value
								    key_type
								    key
								    target_type
								    target_property
								    target_property_value]
  [have [get this mind] assure_physical_relationship
	source_type
	source_property
	source_property_value
	key_type
	key
	target_type
	target_property
	target_property_value]]

[deftypefunk nonsemantic_plan execute imagine_assuring_physical_relationship [source_type source_property source_property_value key target_type target_property target_property_value]
  [have [get this mind] imagine_assuring_physical_relationship source_type source_property source_property_value key target_type target_property target_property_value]]

[defunk nonsemantic_plan-expression-compile [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `eval
												       expression expression]
											      [let [[eval-expression [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[eval-expression [quote ,eval-expression]]]
													       [eval eval-expression]]]]]]]
					      [[eq `prog                           command] [eval `[funk [this]
													 [terminal_format standard-terminal '\nplan evaluating serial process.']
													 @[mapcar [funk [argument]
															`[funkall ,[nonsemantic_plan-expression-compile argument] this]]
														  arguments]]]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `wait-for-time
												       expression expression]
											      [let [[time_to_wait [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[time_to_wait ,time_to_wait]]
													       [dotimes [i time_to_wait]
														 `[terminal_format standard-terminal '\nplan waiting for time step ' i `/ time_to_wait '.']
														 [wait-for-trigger [get [get [get this mind] body] time_step_trigger]]]
													       ]]]]]]
					      [[eq `wait-to-call                   command] [let [[action_name [elt arguments 0]]]
											      [eval `[funk [this]
													   [let [[action [have [get [get this mind] layer `deliberative] lookup_physical_action [quote ,arguments]]]]
													     [if [null action]
														 [= action [have [get [get this mind] layer `deliberative] lookup_plan_action [quote ,arguments]]]]
													     [if [null action]
														 [terminal_format standard-terminal '\nplan error: "' [conslist-as-english_string [quote ,arguments]] '" action not defined.']
													       [prog [terminal_format standard-terminal '\nplan waiting to call: "' [get action as-string] '."']
														     [have action wait_to_call]
														     ]]]]]]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 5 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [property              [elt arguments 3]]
												    [property_value        [elt arguments 4]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan waiting for property to exist: "' ,[object_type_property_property_goal-english_string source_type source_property source_property_value property property_value] '."']
													     [have this wait_for_physical_property [quote ,source_type] [quote ,source_property] [quote ,source_property_value] [quote ,property] [quote ,property_value]]
													     ]]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 8 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-relationship
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan waiting for relationship to exist: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_property
																							      source_property_value
																							      key_type
																							      key
																							      target_type
																							      target_property
																							      target_property_value] '."']
													     [have this wait_for_physical_relationship
														   [quote ,source_type]
														   [quote ,source_property]
														   [quote ,source_property_value]
														   [quote ,key_type]
														   [quote ,key]
														   [quote ,target_type]
														   [quote ,target_property]
														   [quote ,target_property_value]]
													     ]]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 8 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `assure-physical-relationship
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan assuring relationship exists: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_property
																							      source_property_value
																							      key_type
																							      key
																							      target_type
																							      target_property
																							      target_property_value] '."']
													     [have this assure_physical_relationship
														   [quote ,source_type]
														   [quote ,source_property]
														   [quote ,source_property_value]
														   [quote ,key_type]
														   [quote ,key]
														   [quote ,target_type]
														   [quote ,target_property]
														   [quote ,target_property_value]]
													     ]]]]]
					      [t                                            [error bug_name `nonsemantic_plan_compile_error]]]]]]
	[t                          [error bug_name `nonsemantic_plan_compile_error]]]]

[deftypefunk nonsemantic_plan get __compiled_funk []
  [nonsemantic_plan-expression-compile expression]]

[deftypefunk nonsemantic_plan get compiled_funk []
  [if [null internal-compiled_funk]
      [= internal-compiled_funk [get this __compiled_funk]]]
  internal-compiled_funk]

[deftypefunk nonsemantic_plan execute eval []
  [funkall [get this compiled_funk] this]]


[defunk nonsemantic_plan-expression-compile_imagine [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `eval
												       expression expression]
											      [let [[eval-expression [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[eval-expression [quote ,eval-expression]]]
													       [terminal_format standard-terminal '\nplan imagine warning: not imagining eval, ' eval_expression '.']
													       ]]]]]]
					      [[eq `prog                           command] [eval `[funk [this]
													 [terminal_format standard-terminal '\nplan imagining serial process.']
													 @[mapcar [funk [argument]
															`[funkall ,[nonsemantic_plan-expression-compile_imagine argument] this]]
														  arguments]]]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-time
												       expression expression]
											      [let [[time_to_wait [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[time_to_wait ,time_to_wait]]
													       'no imaginative effects'
													       ]]]]]]
					      [[eq `wait-to-call                   command] [let [[action_name [elt arguments 0]]]
											      [eval `[funk [this]
													   [let [[action [have [get [get this mind] layer `deliberative] lookup_physical_action [quote ,arguments]]]]
													     [if [null action]
														 [= action [have [get [get this mind] layer `deliberative] lookup_plan_action [quote ,arguments]]]]
													     [if [null action]
														 [terminal_format standard-terminal '\nplan error: "' [conslist-as-english_string [quote ,arguments]] '" action not defined.']
													       [prog [terminal_format standard-terminal '\nplan imagining calling: "' [get action as-string] '."']
														     [have action imagine_waiting_to_call]
														     ]]]]]]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 5 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [property              [elt arguments 3]]
												    [property_value        [elt arguments 4]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining waiting for property to exist: "' ,[object_type_property_property_goal-english_string source_type source_property source_property_value property property_value] '."']
													     `[have this imagine_waiting_for_physical_property [quote ,source_type] [quote ,source_property] [quote ,source_property_value] [quote ,property] [quote ,property_value]]
													     ]]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 8 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-relationship
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining waiting for relationship to exist: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_property
																							      source_property_value
																							      key_type
																							      key
																							      target_type
																							      target_property
																							      target_property_value] '."']
													     `[have this imagine_waiting_for_physical_relationship
														    [quote ,source_type]
														    [quote ,source_property]
														    [quote ,source_property_value]
														    [quote ,key_type]
														    [quote ,key]
														    [quote ,target_type]
														    [quote ,target_property]
														    [quote ,target_property_value]]
													     ]]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 8 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `assure-physical-relationship
												       expression expression]
											      [let [[source_type           [elt arguments 0]]
												    [source_property       [elt arguments 1]]
												    [source_property_value [elt arguments 2]]
												    [key_type              [elt arguments 3]]
												    [key                   [elt arguments 4]]
												    [target_type           [elt arguments 5]]
												    [target_property       [elt arguments 6]]
												    [target_property_value [elt arguments 7]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining assuring relationship exists: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_property
																							      source_property_value
																							      key_type
																							      key
																							      target_type
																							      target_property
																							      target_property_value] '."']
													     [have this imagine_assuring_physical_relationship
														   [quote ,source_type]
														   [quote ,source_property]
														   [quote ,source_property_value]
														   [quote ,key_type]
														   [quote ,key]
														   [quote ,target_type]
														   [quote ,target_property]
														   [quote ,target_property_value]]
													     ]]]]]
					      [t                                            [error bug_name `nonsemantic_plan_compile_imagine_error]]]]]]
	[t                          [error bug_name `nonsemantic_plan_compile_imagine_error]]]]

[deftypefunk nonsemantic_plan get __compiled_imagine_funk []
  [nonsemantic_plan-expression-compile_imagine expression]]

[deftypefunk nonsemantic_plan get compiled_imagine_funk []
  [if [null internal-compiled_imagine_funk]
      [= internal-compiled_imagine_funk [get this __compiled_imagine_funk]]]
  internal-compiled_imagine_funk]

[deftypefunk nonsemantic_plan execute imagine_eval []
  [funkall [get this compiled_imagine_funk] this]]


[defunk semantic_plan_operator_activation-new_with_resource_dependency [semantic_realm resource_activation_dependency]
  [let [[semantic_plan_operator_activation [new semantic_plan_operator_activation semantic_realm]]
	[semantic_counterfactual_transframe [new semantic_counterfactual_transframe semantic_realm]]]
    [set semantic_counterfactual_transframe resource_activation_dependency resource_activation_dependency]
    [set semantic_plan_operator counterfactual_transframe semantic_counterfactual_transframe]
    semantic_plan_operator_activation]]

[defunk nonsemantic_plan-expression-semantic_compile [expression semantic_realm]
  [cond [[is-type `cons expression] [let [[command           [car expression]]
					  [command_arguments [cdr expression]]]
				      [let [[command_arguments-length [length command_arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `eval
												       expression expression]
											      [let [[eval-expression [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `eval]]]]
					      [[eq `prog                           command] [let [[semantic_plan_operator_activation [new semantic_plan_operator_activation semantic_realm]]]
											      semantic_plan_operator_activation]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-time
												       expression expression]
											      [let [[time_to_wait [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-time]]]]
					      [[eq `wait-to-call                   command] [let [[action_name [elt command_arguments 0]]]
											      [semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-to-call]]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 5 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type           [elt command_arguments 0]]
												    [source_property       [elt command_arguments 1]]
												    [source_property_value [elt command_arguments 2]]
												    [property              [elt command_arguments 3]]
												    [property_value        [elt command_arguments 4]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-physical-property]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 8 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-physical-relationship
												       expression expression]
											      [let [[source_type           [elt command_arguments 0]]
												    [source_property       [elt command_arguments 1]]
												    [source_property_value [elt command_arguments 2]]
												    [key_type              [elt command_arguments 3]]
												    [key                   [elt command_arguments 4]]
												    [target_type           [elt command_arguments 5]]
												    [target_property       [elt command_arguments 6]]
												    [target_property_value [elt command_arguments 7]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-physical-relationship]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 8 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `assure-physical-relationship
												       expression expression]
											      [let [[source_type           [elt command_arguments 0]]
												    [source_property       [elt command_arguments 1]]
												    [source_property_value [elt command_arguments 2]]
												    [key_type              [elt command_arguments 3]]
												    [key                   [elt command_arguments 4]]
												    [target_type           [elt command_arguments 5]]
												    [target_property       [elt command_arguments 6]]
												    [target_property_value [elt command_arguments 7]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `assure-physical-relationship]]]]
					      [t                                            [error bug_name `nonsemantic_plan_compile_error]]]]]]
	[t                          [error bug_name `nonsemantic_plan_compile_error]]]]

[deftypefunk nonsemantic_plan get __semantic_plan_object []
  [let [[semantic_plan_object [new semantic_plan_object [get [get this mind] semantic_realm] [get this unique_name] this]]
	[start_plan_operator  [nonsemantic_plan-expression-semantic_compile expression [get [get this mind] semantic_realm]]]]
    [set semantic_plan_object start_plan_operator start_plan_operator]
    semantic_plan_object]]

[deftypefunk nonsemantic_plan get semantic_plan_object []
  [if [null internal-semantic_plan_object]
      [= internal-semantic_plan_object [get this __semantic_plan_object]]]
  internal-semantic_plan_object]

