'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'nonsemantic_plan'

[deframe nonsemantic_plan [frame] [mental_layer
				   unique_name
				   variables
				   expression
				   [internal-semantic_plan_object  nil]
				   [internal-compiled_funk         nil]
				   [internal-compiled_imagine_funk nil]
				   [internal-english_conslist      `uninitialized]
				   [internal-english_string        nil]]
  [new [initial-mental_layer
	initial-variables
	initial-expression]
       [= mental_layer initial-mental_layer]
       [= unique_name  [get mind new-name `plan]]
       [= variables    initial-variables]
       [= expression   initial-expression]
       ]]

[deftypefunk nonsemantic_plan get mind []
  [get mental_layer mind]]

[defunk nonsemantic_plan-expression-as_english_conslist [expression]
  [cond [[is-type `cons expression] [let [[command   [car expression]]
					  [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[eval-expression [elt arguments 0]]]
												`[check preconditions]]]]
					      [[eq `print                          command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[print-expression [elt arguments 0]]]
												`[]]]]
					      [[eq `prog                           command] [apply &append
												   [append `[[do the following in serial punctuation-colon]]
													   [let [[step_number 1]]
													     [mapcar [funk [argument]
															   [let [[argument-result [append `[,[get step_number as-symbol] punctuation-period]
																			  [nonsemantic_plan-expression-as_english_conslist argument]
																			  [if [not [eq step_number arguments-length]]
																			      `[punctuation-comma]]]]]
															     [++ step_number]
															     argument-result]]
														     arguments]]]]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[time_to_wait [elt arguments 0]]]
												[append `[wait for]
													`[,time_to_wait]]]]]
					      [[eq `wait-to-call                   command] [flatten_constree arguments]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 7 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [value           [elt arguments 6]]]
												[append `[wait until]
													[object_type_property_property_goal-english_conslist source_type
																			     source_key
																			     source_value
																			     key
																			     value]]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 10 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [target_type     [elt arguments 6]]
												    [target_key_type [elt arguments 7]]
												    [target_key      [elt arguments 8]]
												    [target_value    [elt arguments 9]]]
												[append `[wait until]
													[object_type_property_relation_goal-declarative_english_conslist source_type
																					 source_key
																					 source_value
																					 `preposition
																					 key
																					 target_type
																					 target_key
																					 target_value]]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 10 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [target_type     [elt arguments 6]]
												    [target_key_type [elt arguments 7]]
												    [target_key      [elt arguments 8]]
												    [target_value    [elt arguments 9]]]
												[append `[assure relationship exists punctuation-colon]
													[object_type_property_relation_goal-declarative_english_conslist source_type
																					 source_key
																					 source_value
																					 key_type
																					 key
																					 target_type
																					 target_key
																					 target_value]]]]]
					      [[eq `wait-for                       command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[partial_state [nonsemantic_plan-expression-as_english_conslist [elt arguments 0]]]]
												[append `[wait for punctuation-colon]
													partial_state]]]]
					      [[eq `assert                         command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[partial_state [nonsemantic_plan-expression-as_english_conslist [elt arguments 0]]]]
												[append `[assert punctuation-colon]
													partial_state]]]]
					      [[eq `quote                          command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[quote-expression [elt arguments 0]]]
												`[]]]]
					      [[eq `?                              command] [if [not [eq 1 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[variable-symbol [elt arguments 0]]]
												`[,variable-symbol]]]]
					      [[eq `property                       command] [if [not [eq 7 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type     [nonsemantic_plan-expression-as_english_conslist [elt arguments 0]]]
												    [source_key_type [nonsemantic_plan-expression-as_english_conslist [elt arguments 1]]]
												    [source_key      [nonsemantic_plan-expression-as_english_conslist [elt arguments 2]]]
												    [source_value    [nonsemantic_plan-expression-as_english_conslist [elt arguments 3]]]
												    [key_type        [nonsemantic_plan-expression-as_english_conslist [elt arguments 4]]]
												    [key             [nonsemantic_plan-expression-as_english_conslist [elt arguments 5]]]
												    [value           [nonsemantic_plan-expression-as_english_conslist [elt arguments 6]]]]
												[append `[the partial state punctuation-colon]
													[get [new semantic_partial_state_property [get [get this mind] semantic_realm]
														  source_type
														  source_key
														  source_value
														  key
														  value]
													     as-declarative_english_conslist]]]]]
					      [[eq `relationship                   command] [if [not [eq 10 arguments-length]]
												`[error punctuation-colon ,[flatten_constree expression]]
											      [let [[source_type     [nonsemantic_plan-expression-as_english_conslist [elt arguments 0]]]
												    [source_key_type [nonsemantic_plan-expression-as_english_conslist [elt arguments 1]]]
												    [source_key      [nonsemantic_plan-expression-as_english_conslist [elt arguments 2]]]
												    [source_value    [nonsemantic_plan-expression-as_english_conslist [elt arguments 3]]]
												    [key_type        [nonsemantic_plan-expression-as_english_conslist [elt arguments 4]]]
												    [key             [nonsemantic_plan-expression-as_english_conslist [elt arguments 5]]]
												    [target_type     [nonsemantic_plan-expression-as_english_conslist [elt arguments 6]]]
												    [target_key_type [nonsemantic_plan-expression-as_english_conslist [elt arguments 7]]]
												    [target_key      [nonsemantic_plan-expression-as_english_conslist [elt arguments 8]]]
												    [target_value    [nonsemantic_plan-expression-as_english_conslist [elt arguments 9]]]]
												[append `[the partial state punctuation-colon]
													[get [new semantic_partial_state_property_relation [get [get this mind] semantic_realm]
														  source_type
														  source_key
														  source_value
														  key_type
														  key
														  target_type
														  target_key
														  target_value]
													     as-declarative_english_conslist]]]]]
					      [t                                            `[error ,[flatten_constree expression]]]]]]]
	[[is-type `symbol expression] `[the ,expression]]
	[t                            `[error punctuation-colon ,[flatten_constree expression]]]]]

[deftypefunk nonsemantic_plan get as-english_conslist []
  [if [eq `uninitialized internal-english_conslist]
      [= internal-english_conslist [nonsemantic_plan-expression-as_english_conslist expression]]]
  internal-english_conslist]

[deftypefunk nonsemantic_plan get as-english_string []
  [if [null internal-english_string]
      [= internal-english_string [conslist-as-english_string [get this as-english_conslist]]]]
  internal-english_string]

[deftypefunk nonsemantic_plan get as-string []
  [get this as-english_string]]

[deftypefunk nonsemantic_plan get as-graphviz_label []
  [string-concat '<' [get unique_name as-string] '>']]

[deftypefunk nonsemantic_plan execute wait_for_physical_property [source_type
								  source_key_type
								  source_key
								  source_value
								  key_type
								  key
								  value]
  [have [get this mind] wait_for_physical_property
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	value]]

[deftypefunk nonsemantic_plan execute wait_for_physical_relationship [source_type
								      source_key_type
								      source_key
								      source_value
								      key_type
								      key
								      target_type
								      target_key_type
								      target_key
								      target_value]
  [have [get this mind] wait_for_physical_relationship
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	target_type
	target_key_type
	target_key
	target_value]]

[deftypefunk nonsemantic_plan execute assure_physical_relationship [source_type
								    source_key_type
								    source_key
								    source_value
								    key_type
								    key
								    target_type
								    target_key_type
								    target_key
								    target_value]
  [have [get this mind] assure_physical_relationship
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	target_type
	target_key_type
	target_key
	target_value]]

[deftypefunk nonsemantic_plan execute imagine_assuring_physical_relationship [source_type
									      source_key_type
									      source_key
									      source_value
									      key_type
									      key
									      target_type
									      target_key_type
									      target_key
									      target_value]
  [have [get this mind] imagine_assuring_physical_relationship
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	target_type
	target_key_type
	target_key
	target_value]]


[deftypefunk nonsemantic_plan execute wait_for [semantic_partial_state]
  [have [get this mental_layer] wait_for semantic_partial_state]]

[deftypefunk nonsemantic_plan execute assert [semantic_partial_state]
  [have [get this mental_layer] assert semantic_partial_state]]

[deftypefunk nonsemantic_plan execute imagine_assuring_physical_relationship [source_type
									      source_key_type
									      source_key
									      source_value
									      key_type
									      key
									      target_type
									      target_key_type
									      target_key
									      target_value]
  [have [get this mind] imagine_assuring_physical_relationship
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	target_type
	target_key_type
	target_key
	target_value]]


[deftypefunk nonsemantic_plan execute __execute_funk_as_thought_in_semantic_planner [semantic_planner funk args]
  [shelter [let* [[semantic_knowledge_base_set [have semantic_planner lookup `semantic_knowledge_base_set]]
		  [semantic_knowledge_bases    [get semantic_knowledge_base_set elements]]]
	     [if [null semantic_knowledge_bases]
		 [error funkname `semantic_planner-new_semantic_thought
			bug_name `semantic_knowledge_bases-is-nil]]
	     
	     [let* [[thought_fiber-start_trigger [new fiber_trigger]]
		    [thought_fiber               [fiber [funk []
							      [wait-for-trigger thought_fiber-start_trigger]
							      [cause-define cause-name [get this unique_name]]
							      [apply funk args]]
							[]]]
		    [semantic_thought            [let [[this [new semantic_thought [get semantic_planner semantic_realm]]]]
						   [set this fiber thought_fiber]
						   this]]]
	       
	       [let [[semantic_environment [new semantic_environment [get semantic_planner semantic_realm]]]]
		 [have [get this semantic_plan_object] add_default_frame_to_environment semantic_environment]
		 [set semantic_thought environment semantic_environment]]
	       
	       [mapc [funk [semantic_knowledge_base]
			   [have semantic_knowledge_base add_semantic_frame semantic_thought]]
		     semantic_knowledge_bases]
	       [semantic-add semantic_planner thought semantic_thought]
	       
	       [have [get thought_fiber cause_reg] define `cause-semantic_thought semantic_thought]
	       
	       [have thought_fiber-start_trigger trigger]
	       [let [[result [fiber-sheltered_join thought_fiber]]]
		 
		 [semantic-remove semantic_planner thought semantic_thought]
		 [mapc [funk [semantic_knowledge_base]
			     [have semantic_knowledge_base remove_semantic_frame semantic_thought]]
		       semantic_knowledge_bases]
		 
		 result]]]]]

[defunk nonsemantic_plan-expression-compile-eval [expression]
  `[funkall ,[nonsemantic_plan-expression-compile expression] this]]

[defunk nonsemantic_plan-expression-compile [expression]
  [cond [[is-type `symbol expression] [eval `[funk []
						   [quote ,expression]]]]
	[[is-type `cons   expression] [let [[command   [car expression]]
					    [arguments [cdr expression]]]
					[let [[arguments-length [length arguments]]]
					  [cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `eval
													 expression expression]
												[let [[eval-expression `[quote ,[elt arguments 0]]]]
												  [eval `[funk [this]
													       [eval ,eval-expression]]]]]]
						[[eq `print                          command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `print
													 expression expression]
												[let [[print-expression [elt arguments 0]]]
												  [eval `[funk [this]
													       [let [[eval-print-expression [funkall ,[nonsemantic_plan-expression-compile print-expression] this]]]
														 [terminal_format standard-terminal '\nplan printing expression: ' eval-print-expression]
														 eval-print-expression]]]]]]
						[[eq `prog                           command] [eval `[funk [this]
													   [terminal_format standard-terminal '\nplan evaluating serial process.']
													   @[mapcar [funk [argument]
															  `[funkall ,[nonsemantic_plan-expression-compile argument] this]]
														    arguments]]]]
						[[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `wait-for-time
													 expression expression]
												[let [[time_to_wait [elt arguments 0]]]
												  [eval `[funk [this]
													       [let [[time_to_wait ,time_to_wait]]
														 [dotimes [i time_to_wait]
														   `[terminal_format standard-terminal '\nplan waiting for time step ' i `/ time_to_wait '.']
														   [wait-for-trigger [get [get [get this mind] body] time_step_trigger]]]
														 ]]]]]]
						[[eq `wait-to-call                   command] [let [[action_name [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[action [have [get [get this mind] layer `deliberative] lookup_physical_action [quote ,arguments]]]]
													       [if [null action]
														   [= action [have [get [get this mind] layer `deliberative] lookup_plan_action [quote ,arguments]]]]
													       [if [null action]
														   [terminal_format standard-terminal '\nplan error: "' [conslist-as-english_string [quote ,arguments]] '" action not defined.']
														 [prog [terminal_format standard-terminal '\nplan waiting to call: "' [get action as-string] '."']
														       [have action wait_to_call]
														       ]]]]]]]
						[[eq `wait-for-physical-property     command] [if [not [eq 7 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `wait-for-physical-property
													 expression expression]
												[let [[source_type     [elt arguments 0]]
												      [source_key_type [elt arguments 1]]
												      [source_key      [elt arguments 2]]
												      [source_value    [elt arguments 3]]
												      [key_type        [elt arguments 4]]
												      [key             [elt arguments 5]]
												      [value           [elt arguments 6]]]
												  [eval `[funk [this]
													       [terminal_format standard-terminal '\nplan waiting for property to exist: "' ,[object_type_property_property_goal-english_string source_type source_property source_property_value property property_value] '."']
													       [have this wait_for_physical_property
														     [quote ,source_type]
														     [quote ,source_key_type]
														     [quote ,source_key]
														     [quote ,source_value]
														     [quote ,key_type]
														     [quote ,key]
														     [quote ,value]]
													       ]]]]]
						[[eq `wait-for-physical-relationship command] [if [not [eq 10 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `wait-for-physical-relationship
													 expression expression]
												[let [[source_type     [elt arguments 0]]
												      [source_key_type [elt arguments 1]]
												      [source_key      [elt arguments 2]]
												      [source_value    [elt arguments 3]]
												      [key_type        [elt arguments 4]]
												      [key             [elt arguments 5]]
												      [target_type     [elt arguments 6]]
												      [target_key_type [elt arguments 7]]
												      [target_key      [elt arguments 8]]
												      [target_value    [elt arguments 9]]]
												  [eval `[funk [this]
													       [terminal_format standard-terminal '\nplan waiting for relationship to exist: "'
																,[object_type_property_relation_goal-declarative_english_string source_type
																								source_key
																								source_value
																								key_type
																								key
																								target_type
																								target_key
																								target_value] '."']
													       [have this wait_for_physical_relationship
														     [quote ,source_type]
														     [quote ,source_key_type]
														     [quote ,source_key]
														     [quote ,source_value]
														     [quote ,key_type]
														     [quote ,key]
														     [quote ,target_type]
														     [quote ,target_key_type]
														     [quote ,target_key]
														     [quote ,target_value]]
													       ]]]]]
						[[eq `assure-physical-relationship   command] [if [not [eq 10 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `assure-physical-relationship
													 expression expression]
												[let [[source_type     [elt arguments 0]]
												      [source_key_type [elt arguments 1]]
												      [source_key      [elt arguments 2]]
												      [source_value    [elt arguments 3]]
												      [key_type        [elt arguments 4]]
												      [key             [elt arguments 5]]
												      [target_type     [elt arguments 6]]
												      [target_key_type [elt arguments 7]]
												      [target_key      [elt arguments 8]]
												      [target_value    [elt arguments 9]]]
												  [eval `[funk [this]
													       [terminal_format standard-terminal '\nplan assuring relationship exists: "'
																,[object_type_property_relation_goal-declarative_english_string source_type
																								source_key
																								source_value
																								key_type
																								key
																								target_type
																								target_key
																								target_value] '."']
													       [have this assure_physical_relationship
														     [quote ,source_type]
														     [quote ,source_key_type]
														     [quote ,source_key]
														     [quote ,source_value]
														     [quote ,key_type]
														     [quote ,key]
														     [quote ,target_type]
														     [quote ,target_key_type]
														     [quote ,target_key]
														     [quote ,target_value]]
													       ]]]]]
						[[eq `wait-for                       command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `wait-for
													 expression expression]
												[let [[partial_state `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 0]] this]]]
												  [eval `[funk [this]
													       [let [[partial_state ,partial_state]]
														 [terminal_format standard-terminal '\nplan waiting for: "' [get partial_state as-declarative_english_string] '."']
														 [have this wait_for partial_state]]
													       ]]]]]
						[[eq `assert                         command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `assert
													 expression expression]
												[let [[partial_state `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 0]] this]]]
												  [eval `[funk [this]
													       [let [[partial_state ,partial_state]]
														 [terminal_format standard-terminal '\nplan assuring partial state exists: "' [get partial_state as-declarative_english_string] '."']
														 [have this assert partial_state]]
													       ]]]]]
						[[eq `quote                          command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `quote
													 expression expression]
												[let [[quote-expression [elt arguments 0]]]
												  [eval `[funk [this]
													       [quote ,quote-expression]
													       ]]]]]
						[[eq `?                              command] [if [not [eq 1 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `?
													 expression expression]
												[let [[variable-symbol `[quote ,[elt arguments 0]]]]
												  [eval `[funk [this]
													       [let [[semantic_thought [cause-lookup cause-semantic_thought]]]
														 [terminal_format standard-terminal '\nplan looking up variable value, ' ,variable-symbol '.']
														 [have semantic_thought lookup_a_variable_value ,variable-symbol]
														 ]]]]]]
						[[eq `property                       command] [if [not [eq 7 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `property
													 expression expression]
												[let [[source_type     `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 0]] this]]
												      [source_key_type `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 1]] this]]
												      [source_key      `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 2]] this]]
												      [source_value    `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 3]] this]]
												      [key_type        `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 4]] this]]
												      [key             `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 5]] this]]
												      [value           `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 6]] this]]]
												  [eval `[funk [this]
													       [new semantic_partial_state_property [get [get this mind] semantic_realm]
														    ,source_type
														    ,source_key_type
														    ,source_key
														    ,source_value
														    ,key_type
														    ,key
														    ,value]
													       ]]]]]
						[[eq `relationship                   command] [if [not [eq 10 arguments-length]]
												  [error bug_name   `plan_compile_error-wrong_number_of_arguments
													 funkname   `relationship
													 expression expression]
												[let [[source_type     `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 0]] this]]
												      [source_key_type `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 1]] this]]
												      [source_key      `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 2]] this]]
												      [source_value    `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 3]] this]]
												      [key_type        `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 4]] this]]
												      [key             `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 5]] this]]
												      [target_type     `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 6]] this]]
												      [target_key_type `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 7]] this]]
												      [target_key      `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 8]] this]]
												      [target_value    `[funkall ,[nonsemantic_plan-expression-compile [elt arguments 9]] this]]]
												  [eval `[funk [this]
													       [new semantic_partial_state_property_relation [get [get this mind] semantic_realm]
														    ,source_type
														    ,source_key_type
														    ,source_key
														    ,source_value
														    ,key_type
														    ,key
														    ,target_type
														    ,target_key_type
														    ,target_key
														    ,target_value]
													       ]]]]]
						[t                                            [error bug_name `nonsemantic_plan_compile_error]]]]]]
	[t                            [error bug_name `nonsemantic_plan_compile_error]]]]

[deftypefunk nonsemantic_plan get __compiled_funk []
  [nonsemantic_plan-expression-compile expression]]

[deftypefunk nonsemantic_plan get compiled_funk []
  [if [null internal-compiled_funk]
      [= internal-compiled_funk [get this __compiled_funk]]]
  internal-compiled_funk]

[deftypefunk nonsemantic_plan execute eval []
  [funkall [get this compiled_funk] this]]

[deftypefunk nonsemantic_plan execute execute_as_thought_in_semantic_planner [semantic_planner]
  [have this __execute_funk_as_thought_in_semantic_planner semantic_planner
	[funk []
	      [have this eval]]
	[]]]



[defunk nonsemantic_plan-expression-compile_imagine [expression]
  [cond [[is-type `symbol expression] [eval `[funk []
						   [quote ,expression]]]]
	[[is-type `cons   expression] [let [[command   [car expression]]
					    [arguments [cdr expression]]]
				      [let [[arguments-length [length arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `eval
												       expression expression]
											      [let [[eval-expression [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[eval-expression [quote ,eval-expression]]]
													       [terminal_format standard-terminal '\nplan imagine warning: not imagining eval, ' eval_expression '.']
													       ]]]]]]
					      [[eq `print                          command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `print
												       expression expression]
											      [let [[print-expression [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[eval-print-expression [funkall ,[nonsemantic_plan-expression-compile_imagine print-expression] this]]]
													       [terminal_format standard-terminal '\nplan imagine printing expression: ' eval-print-expression]
													       eval-print-expression]]]]]]
					      [[eq `prog                           command] [eval `[funk [this]
													 [terminal_format standard-terminal '\nplan imagining serial process.']
													 @[mapcar [funk [argument]
															`[funkall ,[nonsemantic_plan-expression-compile_imagine argument] this]]
														  arguments]]]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-time
												       expression expression]
											      [let [[time_to_wait [elt arguments 0]]]
												[eval `[funk [this]
													     [let [[time_to_wait ,time_to_wait]]
													       'no imaginative effects'
													       ]]]]]]
					      [[eq `wait-to-call                   command] [let [[action_name [elt arguments 0]]]
											      [eval `[funk [this]
													   [let [[action [have [get [get this mind] layer `deliberative] lookup_physical_action [quote ,arguments]]]]
													     [if [null action]
														 [= action [have [get [get this mind] layer `deliberative] lookup_plan_action [quote ,arguments]]]]
													     [if [null action]
														 [terminal_format standard-terminal '\nplan error: "' [conslist-as-english_string [quote ,arguments]] '" action not defined.']
													       [prog [terminal_format standard-terminal '\nplan imagining calling: "' [get action as-string] '."']
														     [have action imagine_waiting_to_call]
														     ]]]]]]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 7 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [value           [elt arguments 6]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining waiting for property to exist: "' ,[object_type_property_property_goal-english_string source_type
																															source_key
																															source_value
																															key
																															value] '."']
													     `[have this imagine_waiting_for_physical_property
														    [quote ,source_type]
														    [quote ,source_key_type]
														    [quote ,source_key]
														    [quote ,source_value]
														    [quote ,key_type]
														    [quote ,key]
														    [quote ,value]]
													     ]]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 10 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for-physical-relationship
												       expression expression]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [target_type     [elt arguments 6]]
												    [target_key_type [elt arguments 7]]
												    [target_key      [elt arguments 8]]
												    [target_value    [elt arguments 9]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining waiting for relationship to exist: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_key
																							      source_value
																							      key_type
																							      key
																							      target_type
																							      target_key
																							      target_value] '."']
													     `[have this imagine_waiting_for_physical_relationship
														    [quote ,source_type]
														    [quote ,source_key_type]
														    [quote ,source_key]
														    [quote ,source_value]
														    [quote ,key_type]
														    [quote ,key]
														    [quote ,target_type]
														    [quote ,target_key_type]
														    [quote ,target_key]
														    [quote ,target_value]]
													     ]]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 10 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `assure-physical-relationship
												       expression expression]
											      [let [[source_type     [elt arguments 0]]
												    [source_key_type [elt arguments 1]]
												    [source_key      [elt arguments 2]]
												    [source_value    [elt arguments 3]]
												    [key_type        [elt arguments 4]]
												    [key             [elt arguments 5]]
												    [target_type     [elt arguments 6]]
												    [target_key_type [elt arguments 7]]
												    [target_key      [elt arguments 8]]
												    [target_value    [elt arguments 9]]]
												[eval `[funk [this]
													     [terminal_format standard-terminal '\nplan imagining assuring relationship exists: "'
															      ,[object_type_property_relation_goal-declarative_english_string source_type
																							      source_key
																							      source_value
																							      key_type
																							      key
																							      target_type
																							      target_key
																							      target_value] '."']
													     [have this imagine_assuring_physical_relationship
														   [quote ,source_type]
														   [quote ,source_key_type]
														   [quote ,source_key]
														   [quote ,source_value]
														   [quote ,key_type]
														   [quote ,key]
														   [quote ,target_type]
														   [quote ,target_key_type]
														   [quote ,target_key]
														   [quote ,target_value]]
													     ]]]]]
					      [[eq `wait-for                       command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `wait-for
												       expression expression]
											      [let [[partial_state `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 0]] this]]]
												[eval `[funk [this]
													     [let [[partial_state ,partial_state]]
													       [terminal_format standard-terminal '\nplan imagining waiting for: "'
																[get partial_state as-declarative_english_string] '."']
													       [have this wait_for partial_state]
													       ]
													     ]]]]]
					      [[eq `assert                         command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `assert
												       expression expression]
											      [let [[partial_state `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 0]] this]]]
												[eval `[funk [this]
													     [let [[partial_state ,partial_state]]
													       [terminal_format standard-terminal '\nplan imagining asserting: "'
																[get partial_state as-declarative_english_string] '."']
													       [have this assert partial_state]
													       ]
													     ]]]]]
					      [[eq `quote                          command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `quote
												       expression expression]
											      [let [[quote-expression [elt arguments 0]]]
												[eval `[funk [this]
													     [quote ,quote-expression]
													     ]]]]]
					      [[eq `?                              command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `?
												       expression expression]
											      [let [[variable-symbol `[quote ,[elt arguments 0]]]]
												[eval `[funk [this]
													     [let [[semantic_thought [cause-lookup cause-semantic_thought]]]
													       [terminal_format standard-terminal '\nplan imagining looking up variable value, ' ,variable-symbol '.']
													       [have semantic_thought lookup_a_variable_value ,variable-symbol]
													       ]]]]]]
					      [[eq `property                       command] [if [not [eq 7 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `property
												       expression expression]
											      [let [[source_type     `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 0]] this]]
												    [source_key_type `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 1]] this]]
												    [source_key      `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 2]] this]]
												    [source_value    `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 3]] this]]
												    [key_type        `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 4]] this]]
												    [key             `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 5]] this]]
												    [value           `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 6]] this]]]
												[eval `[funk [this]
													     [new semantic_partial_state_property [get [get this mind] semantic_realm]
														  ,source_type
														  ,source_key_type
														  ,source_key
														  ,source_value
														  ,key_type
														  ,key
														  ,value]
													     ]]]]]
					      [[eq `relationship                   command] [if [not [eq 10 arguments-length]]
												[error bug_name   `plan_compile_imagine_error-wrong_number_of_arguments
												       funkname   `relationship
												       expression expression]
											      [let [[source_type     `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 0]] this]]
												    [source_key_type `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 1]] this]]
												    [source_key      `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 2]] this]]
												    [source_value    `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 3]] this]]
												    [key_type        `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 4]] this]]
												    [key             `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 5]] this]]
												    [target_type     `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 6]] this]]
												    [target_key_type `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 7]] this]]
												    [target_key      `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 8]] this]]
												    [target_value    `[funkall ,[nonsemantic_plan-expression-compile_imagine [elt arguments 9]] this]]]
												[eval `[funk [this]
													     [new semantic_partial_state_property_relation [get [get this mind] semantic_realm]
														  ,source_type
														  ,source_key_type
														  ,source_key
														  ,source_value
														  ,key_type
														  ,key
														  ,target_type
														  ,target_key_type
														  ,target_key
														  ,target_value]
													     ]]]]]
					      [t                                            [error bug_name `nonsemantic_plan_compile_imagine_error]]]]]]
	[t                          [error bug_name `nonsemantic_plan_compile_imagine_error]]]]

[deftypefunk nonsemantic_plan get __compiled_imagine_funk []
  [nonsemantic_plan-expression-compile_imagine expression]]

[deftypefunk nonsemantic_plan get compiled_imagine_funk []
  [if [null internal-compiled_imagine_funk]
      [= internal-compiled_imagine_funk [get this __compiled_imagine_funk]]]
  internal-compiled_imagine_funk]

[deftypefunk nonsemantic_plan execute imagine_eval []
  [funkall [get this compiled_imagine_funk] this]]

[deftypefunk nonsemantic_plan execute imagine_as_thought_in_semantic_planner [semantic_planner]
  [have this __execute_funk_as_thought_in_semantic_planner semantic_planner
	[funk []
	      [have this imagine_eval]]
	[]]]




[defunk semantic_plan_operator_activation-new_with_resource_dependency [semantic_realm resource_activation_dependency]
  [let [[semantic_plan_operator_activation [new semantic_plan_operator_activation semantic_realm]]
	[semantic_counterfactual_transframe [new semantic_counterfactual_transframe semantic_realm]]]
    [set semantic_counterfactual_transframe resource_activation_dependency resource_activation_dependency]
    [set semantic_plan_operator counterfactual_transframe semantic_counterfactual_transframe]
    semantic_plan_operator_activation]]

[defunk nonsemantic_plan-expression-semantic_compile [expression semantic_realm]
  [cond [[is-type `symbol expression] [let [[semantic_thought [cause-lookup cause-semantic_thought]]]
					,expression]]
	[[is-type `cons expression] [let [[command           [car expression]]
					  [command_arguments [cdr expression]]]
				      [let [[command_arguments-length [length command_arguments]]]
					[cond [[eq `eval                           command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `eval
												       expression expression]
											      [let [[eval-expression [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `eval]]]]
					      [[eq `print                          command] [if [not [eq 1 arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_arguments
												       funkname   `print
												       expression expression]
											      [let [[print-expression [elt arguments 0]]]
												[nonsemantic_plan-expression-compile_imagine print-expression]]]]
					      [[eq `prog                           command] [let [[semantic_plan_operator_activation [new semantic_plan_operator_activation semantic_realm]]]
											      semantic_plan_operator_activation]]
					      [[eq `wait-for-time                  command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-time
												       expression expression]
											      [let [[time_to_wait [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-time]]]]
					      [[eq `wait-to-call                   command] [let [[action_name [elt command_arguments 0]]]
											      [semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-to-call]]]
					      [[eq `wait-for-physical-property     command] [if [not [eq 7 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type     [elt command_arguments 0]]
												    [source_key_type [elt command_arguments 1]]
												    [source_key      [elt command_arguments 2]]
												    [source_value    [elt command_arguments 3]]
												    [key_type        [elt command_arguments 4]]
												    [key             [elt command_arguments 5]]
												    [value           [elt command_arguments 6]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-physical-property]]]]
					      [[eq `wait-for-physical-relationship command] [if [not [eq 10 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-physical-relationship
												       expression expression]
											      [let [[source_type     [elt command_arguments 0]]
												    [source_key_type [elt command_arguments 1]]
												    [source_key      [elt command_arguments 2]]
												    [source_value    [elt command_arguments 3]]
												    [key_type        [elt command_arguments 4]]
												    [key             [elt command_arguments 5]]
												    [target_type     [elt command_arguments 6]]
												    [target_key_type [elt command_arguments 7]]
												    [target_key      [elt command_arguments 8]]
												    [target_value    [elt command_arguments 9]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `wait-for-physical-relationship]]]]
					      [[eq `assure-physical-relationship   command] [if [not [eq 10 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `assure-physical-relationship
												       expression expression]
											      [let [[source_type     [elt command_arguments 0]]
												    [source_key_type [elt command_arguments 1]]
												    [source_key      [elt command_arguments 2]]
												    [source_value    [elt command_arguments 3]]
												    [key_type        [elt command_arguments 4]]
												    [key             [elt command_arguments 5]]
												    [target_type     [elt command_arguments 6]]
												    [target_key_type [elt command_arguments 7]]
												    [target_key      [elt command_arguments 8]]
												    [target_value    [elt command_arguments 9]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `assure-physical-relationship]]]]
					      [[eq `wait-for                       command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `assert
												       expression expression]
											      [let [[partial_state [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `assert]]]]
					      [[eq `assert                         command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `assert
												       expression expression]
											      [let [[partial_state [elt command_arguments 0]]]
												[semantic_plan_operator_activation-new_with_resource_dependency semantic_realm `assert]]]]
					      [[eq `quote                          command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `quote
												       expression expression]
											      [let [[quote-expression [elt command_arguments 0]]]
												nil]]]
					      [[eq `?                              command] [if [not [eq 1 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `?
												       expression expression]
											      [let [[variable-symbol [elt command_arguments 0]]]
												`[? ,variable-symbol]]]]
					      [[eq `property                       command] [if [not [eq 7 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `wait-for-physical-property
												       expression expression]
											      [let [[source_type     [elt command_arguments 0]]
												    [source_key_type [elt command_arguments 1]]
												    [source_key      [elt command_arguments 2]]
												    [source_value    [elt command_arguments 3]]
												    [key_type        [elt command_arguments 4]]
												    [key             [elt command_arguments 5]]
												    [value           [elt command_arguments 6]]]
												nil]]]
					      [[eq `relationship                   command] [if [not [eq 10 command_arguments-length]]
												[error bug_name   `plan_compile_error-wrong_number_of_command_arguments
												       funkname   `relationship
												       expression expression]
											      [let [[source_type     [elt command_arguments 0]]
												    [source_key_type [elt command_arguments 1]]
												    [source_key      [elt command_arguments 2]]
												    [source_value    [elt command_arguments 3]]
												    [key_type        [elt command_arguments 4]]
												    [key             [elt command_arguments 5]]
												    [target_type     [elt command_arguments 6]]
												    [target_key_type [elt command_arguments 7]]
												    [target_key      [elt command_arguments 8]]
												    [target_value    [elt command_arguments 9]]]
												nil]]]
					      [t                                            [error bug_name `nonsemantic_plan_compile_error]]]]]]
	[t                          [error bug_name `nonsemantic_plan_compile_error]]]]

[deftypefunk nonsemantic_plan get __semantic_plan_object []
  [let [[semantic_plan_object [new semantic_plan_object [get [get this mind] semantic_realm] [get this unique_name] this]]
	[start_plan_operator  [nonsemantic_plan-expression-semantic_compile expression [get [get this mind] semantic_realm]]]]
    [set semantic_plan_object start_plan_operator start_plan_operator]
    semantic_plan_object]]

[deftypefunk nonsemantic_plan get semantic_plan_object []
  [if [null internal-semantic_plan_object]
      [= internal-semantic_plan_object [get this __semantic_plan_object]]]
  internal-semantic_plan_object]

