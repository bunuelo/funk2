'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



`[defunk object_type_event-phenomenal_name [object-phenomenal_name]
  [get [format nil object-phenomenal_name '_object_type_event'] as-symbol]]

`[defunk semantic_object_property_type_event-phenomenal_name [source key_type key target]
  [get [format nil source '_' key_type '_' key '_' target '_property_type_event'] as-symbol]]

`[defunk semantic_object_relation_type_event-phenomenal_name [source_type_event key_type key target_type_event]
  [get [format nil source_type_event '_' key_type '_' key '_' target_type_event '_relation_type_event'] as-symbol]]



'object_type_property_relation_goal'

[deframe object_type_property_relation_goal [frame] [mind
						     
						     knowledge_base_name
						     
						     this-source_type
						     this-source_key_type
						     this-source_key
						     this-source_value
						     this-key_type
						     this-key
						     this-target_type
						     this-target_key_type
						     this-target_key
						     this-target_value
						     
						     this-source_phenomenal_name
						     this-target_phenomenal_name
						     this-source_type_event_phenomenal_name
						     this-target_type_event_phenomenal_name
						     
						     phenomenal_name
						     event_phenomenal_name
						     
						     [current_goal_event nil]]
  [new [initial-mind
	initial-knowledge_base_name
	initial-source_type
	initial-source_key_type
	initial-source_key
	initial-source_value
	initial-key_type
	initial-key
	initial-target_type
	initial-target_key_type
	initial-target_key
	initial-target_value]
       [= mind                                   initial-mind]
       [= knowledge_base_name                    initial-knowledge_base_name]
       [= this-source_type                       initial-source_type]
       [= this-source_key_type                   initial-source_key_type]
       [= this-source_key                        initial-source_key]
       [= this-source_value                      initial-source_value]
       [= this-key_type                          initial-key_type]
       [= this-key                               initial-key]
       [= this-target_type                       initial-target_type]
       [= this-target_key_type                   initial-target_key_type]
       [= this-target_key                        initial-target_key]
       [= this-target_value                      initial-target_value]
       [= this-source_phenomenal_name            [get this __source_phenomenal_name]]
       [= this-target_phenomenal_name            [get this __target_phenomenal_name]]
       [= this-source_type_event_phenomenal_name [get this __source_type_event_phenomenal_name]]
       [= this-target_type_event_phenomenal_name [get this __target_type_event_phenomenal_name]]
       [= phenomenal_name                        [get this __phenomenal_name]]
       [= event_phenomenal_name                  [get this __event_phenomenal_name]]
       ]]

[deftypefunk object_type_property_relation_goal get __phenomenal_name []
  [get [format nil [have [get this as-declarative_string] replace_all ' ' '_'] '_goal'] as-symbol]]

[deftypefunk object_type_property_relation_goal get __event_phenomenal_name []
  [get [format nil [get this __phenomenal_name] '_event'] as-symbol]]

[deftypefunk object_type_property_relation_goal get knowledge_base []
  [get [get this mind] semantic_knowledge_base knowledge_base_name]]

[defunk object_type_property_relation_goal-natural_language_string [object_type object_property object_property_value]
  [if [eq object_property_value t]
      [stringlist-concat `['a ' ,[get object_type as-string] ' that ' ,[get object_property as-string]]]
    [stringlist-concat `['a ' ,[get object_property_value as-string] ' ' ,[get object_property as-string] ' ' ,[get object_type as-string]]]]]

[defunk object_type_property_property_goal-natural_language_string [source_type source_property source_property_value property property_value]
  [if [eq source_property_value t]
      [if [eq property_value t]
	  [stringlist-concat `['a ' ,[get source_type as-string] ' that ' ,[get source_property as-string] ' and ' ,[get property as-string]]]
	[stringlist-concat `['a ' ,[get property_value as-string] ' ' ,[get property as-string] ' ' ,[get source_type as-string] ' that ' ,[get source_property as-string]]]]
    [if [eq property_value t]
	[stringlist-concat `['a ' ,[get source_property_value as-string] ' ' ,[get source_property as-string] ' ' ,[get source_type as-string] ' that ' ,[get property as-string]]]
      [stringlist-concat `['a ' ,[get source_property_value as-string] ' ' ,[get source_property as-string] ' ' ,[get property_value as-string] ' ' ,[get property as-string] ' ' ,[get source_type as-string]]]]]]

[deftypefunk object_type_property_relation_goal get as-natural_language_string []
  [stringlist-concat `['I want '
		       ,[object_type_property_relation_goal-natural_language_string this-source_type this-source_key this-source_value]
		       ' to be '
		       ,[get this-key as-string]
		       ' '
		       ,[object_type_property_relation_goal-natural_language_string this-target_type this-target_key this-target_value]]]]

[deftypefunk object_type_property_relation_goal get as-string []
  [get this as-natural_language_string]]

[defunk object_type_property_relation_goal-declarative_natural_language_string [source_type source_property source_property_value key_type key target_type target_property target_property_value]
  [stringlist-concat `[,[object_type_property_relation_goal-natural_language_string source_type source_property source_property_value]
		       ' is '
		       ,[get key as-string]
		       ' '
		       ,[object_type_property_relation_goal-natural_language_string target_type target_property target_property_value]]]]

[deftypefunk object_type_property_relation_goal get as-declarative_natural_language_string []
  [object_type_property_relation_goal-declarative_natural_language_string this-source_type
									  this-source_key
									  this-source_value
									  this-key_type
									  this-key
									  this-target_type
									  this-target_key
									  this-target_value]]

[deftypefunk object_type_property_relation_goal get as-declarative_string []
  [get this as-declarative_natural_language_string]]

[deftypefunk object_type_property_relation_goal get as-negative_declarative_natural_language_string []
  [stringlist-concat `[,[object_type_property_relation_goal-natural_language_string this-source_type
										    this-source_key
										    this-source_value]
		       ' is not '
		       ,[get this-key as-string]
		       ,[object_type_property_relation_goal-natural_language_string this-target_type
										    this-target_key
										    this-target_value]]]]

[deftypefunk object_type_property_relation_goal get as-negative_declarative_string []
  [get this as-negative_declarative_natural_language_string]]

[deftypefunk object_type_property_relation_goal get as-now_true_natural_language_string []
  [stringlist-concat `[,[object_type_property_relation_goal-natural_language_string this-source_type
										    this-source_key
										    this-source_value]
		       ' is now '
		       ,[get this-key as-string]
		       ,[object_type_property_relation_goal-natural_language_string this-target_type
										    this-target_key
										    this-target_value]]]]

[deftypefunk object_type_property_relation_goal get as-now_true_string []
  [get this as-now_true_natural_language_conslist]]

[deftypefunk object_type_property_relation_goal get as-no_longer_true_natural_language_string []
  [stringlist-concat `[,[object_type_property_relation_goal-natural_language_string this-source_type
										    this-source_key
										    this-source_value]
		       ' is no longer '
		       ,[get this-key as-string]
		       ,[object_type_property_relation_goal-natural_language_string this-target_type
										    this-target_key
										    this-target_value]]]]

[deftypefunk object_type_property_relation_goal get as-no_longer_true_string []
  [get this as-no_longer_true_natural_language_string]]

[deftypefunk object_type_property_relation_goal get __source_phenomenal_name []
  [semantic_object_property_type_event-phenomenal_name this-source_type
						       this-source_key_type
						       this-source_key
						       this-source_value]]

[deftypefunk object_type_property_relation_goal get __target_phenomenal_name []
  [semantic_object_property_type_event-phenomenal_name this-target_type
						       this-target_key_type
						       this-target_key
						       this-target_value]]

[deftypefunk object_type_property_relation_goal get __source_type_event_phenomenal_name []
  [object_type_event-phenomenal_name [get this __source_phenomenal_name]]]

[deftypefunk object_type_property_relation_goal get __target_type_event_phenomenal_name []
  [object_type_event-phenomenal_name [get this __target_phenomenal_name]]]

[deftypefunk object_type_property_relation_goal get matches_type_event [event_time
									semantic_object_type_event_source
									key_type
									key
									semantic_object_type_event_target]
  [let [[matches t]]
    [if [not [eq this-source_type `?]]
	[let [[semantic_object_type_event_source-phenomenal_name [get semantic_object_type_event_source phenomenal_name]]]
	  [if [not [eq this-source_type_event_phenomenal_name semantic_object_type_event_source-phenomenal_name]]
	      [= matches nil]]]]
    [if matches
	[prog [if [not [eq this-key_type `?]]
		  [if [not [eq this-key_type key_type]]
		      [= matches nil]]]
	      [if matches
		  [prog [if [not [eq this-key `?]]
			    [if [not [eq this-key key]]
				[= matches nil]]]
			[if matches
			    [prog [if [not [eq this-target_type `?]]
				      [let [[semantic_object_type_event_target-phenomenal_name [get semantic_object_type_event_target phenomenal_name]]]
					[if [not [eq this-target_type_event_phenomenal_name semantic_object_type_event_target-phenomenal_name]]
					    [= matches nil]]]]]]]]]]
    matches]]


[deftypefunk object_type_property_relation_goal execute add_type_event [event_time
									semantic_object_type_event_source
									key_type
									key
									semantic_object_type_event_target]
  
  [if [null current_goal_event]
      [if [get this matches_type_event
	       event_time
	       semantic_object_type_event_source
	       key_type
	       key
	       semantic_object_type_event_target]
	  [prog [terminal_format standard-terminal '\nstarting type goal event: ' [get this as-now_true_string]]
		[let [[semantic_goal_event [new semantic_goal_event [get semantic_object_type_event_source semantic_realm] event_phenomenal_name phenomenal_name]]]
		  [set semantic_goal_event absolute_start_time [new semantic_time event_time]]
		  [have [get this knowledge_base] add_semantic_frame semantic_goal_event]
		  [= current_goal_event semantic_goal_event]
		  ]]]]]

[deftypefunk object_type_property_relation_goal execute remove_type_event [event_time
									   semantic_object_type_event_source
									   key_type
									   key
									   semantic_object_type_event_target]
  [if [not [null current_goal_event]]
      [if [get this matches_type_event
	       event_time
	       semantic_object_type_event_source
	       key_type
	       key
	       semantic_object_type_event_target]
	  [prog [terminal_format standard-terminal '\nending type goal event: ' [get this as-no_longer_true_string]]
		[let [[semantic_goal_event current_goal_event]]
		  [set semantic_goal_event absolute_end_time [new semantic_time event_time]]
		  [= current_goal_event nil]
		  ]]]]]


