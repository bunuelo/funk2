'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'plan_mental_layer_imagination_agency'

[deframe plan_mental_layer_imagination_agency [agency] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct agency `imagination]
       
       [have this add_resource [new plan_mental_layer_forget_all_imagined_events_resource initial-resource_knowledge_base_name initial-trace_knowledge_base_names]]
       [have this add_resource [new plan_mental_layer_imagine_plan_resource               initial-resource_knowledge_base_name initial-trace_knowledge_base_names]]
       
       this]]

[deftypefunk plan_mental_layer_imagination_agency execute create_builtin_actions []
  [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] imagination forget_all_imagined_events]]
  [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] imagination imagine_plan]]]


'plan_mental_layer_forget_all_imagined_events_resource'

[deframe plan_mental_layer_forget_all_imagined_events_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `forget_all_imagined_events
		  [funk []
			[let [[semantic_planner [get [get [get this mental_layer] agency `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', forgetting all imagined events.']
			  [let [[physical_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]]
			    
			    'generates interval tree removal errors'
			    `[have physical_counterfactual_knowledge_base remove_all]
			    
			    'so, create whole new knowledge base.'
			    [have [get [get [get this mind] semantic_realm] semantic_knowledge_base_frame] remove `physical_type_counterfactual_knowledge]
			    [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_event_knowledge_base `physical_type_counterfactual_knowledge [get [get this mind] semantic_realm]]]
			    
			    nil]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_forget_all_imagined_events_resource get as-natural_language_string []
  'forget all imagined events']


'plan_mental_layer_imagine_plan_resource'

[globalize imagine_bug_count 0]

[deframe plan_mental_layer_imagine_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `imagine_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[let [[semantic_planner [get [get [get this mental_layer] agency `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', imagining plan.']
			  [let [[semantic_planner [get [get [get this mental_layer] agency `plan] semantic_planner]]]
			    [set semantic_planner execute_plan semantic_plan]
			    [let* [[variable_frame [new frame]]
				   [result         [have [get semantic_plan nonsemantic_plan] imagine_as_thought variable_frame]]]
			      [terminal_format standard-terminal '\nplan_mental_layer_imagine_plan_resource: returned from imagine_as_thought.']
			      [if [is-type `bug result]
				  [let [[bug result]]
				    [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						     [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', imagining plan has a bug: ' bug]
				    [let [[global_bug_name [get [string-concat 'imagine_bug-' [get imagine_bug_count as-string]] as-symbol]]]
				      [++ imagine_bug_count]
				      [terminal_format standard-terminal '\nresource ' [get this name] ': globally defining bug as ' global_bug_name '.']
				      [eval `[globalize ,global_bug_name [quote ,bug]]]]
				    [set semantic_planner imagine_plan nil]
				    ]
				[prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						       [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', successfully completed imagining plan']
				      [set [get [get [get this mental_layer] agency `plan] semantic_planner] imagine_plan nil]]]]
			    nil]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_imagine_plan_resource get as-natural_language_string []
  'imagine plan']


