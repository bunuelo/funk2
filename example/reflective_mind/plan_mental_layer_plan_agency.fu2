'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'plan_mental_layer_plan_agency'

[deframe plan_mental_layer_plan_agency [agency] [[internal-semantic_planner nil]
						 reflective_knowledge_base_name
						 reflective_type_knowledge_base_name
						 resource_knowledge_base_name
						 trace_knowledge_base_names]
  [new [initial-reflective_knowledge_base_name
	initial-reflective_type_knowledge_base_name
	initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct agency `plan]
       [= reflective_knowledge_base_name      initial-reflective_knowledge_base_name]
       [= reflective_type_knowledge_base_name initial-reflective_type_knowledge_base_name]
       [= resource_knowledge_base_name        initial-resource_knowledge_base_name]
       [= trace_knowledge_base_names          initial-trace_knowledge_base_names]
       [parog [have this add_resource [new plan_mental_layer_focus_on_first_plan_resource                                      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_plan_resource                                       resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_first_positive_goal_resource                             resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_positive_goal_resource                              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_first_negative_goal_resource                             resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_negative_goal_resource                              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_object_resource                                          resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_execute_plan_in_focus_resource                                    resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_imagine_executing_plan_in_focus_resource                          resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_execute_plan_resource                                    resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_register_a_to_focus_register_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_register_b_to_focus_register_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_register_c_to_focus_register_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_register_d_to_focus_register_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_focus_register_to_register_a_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_focus_register_to_register_b_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_focus_register_to_register_c_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_copy_focus_register_to_register_d_resource                        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_next_object_resource                                     resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_previous_object_resource                                 resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_car_object_resource                                      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_reverse_car_object_resource                              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_cdr_object_resource                                      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_reverse_cdr_object_resource                              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_first_hypothesized_to_cause_goal_object_resource         resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_reverse_focus_on_first_hypothesized_to_cause_goal_object_resource resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_register_add_after_resource                                 resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_register_add_before_resource                                resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_register_add_in_parallel_resource                           resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_remember_plan_for_goal_resource                                   resource_knowledge_base_name trace_knowledge_base_names]]]]]

[deftypefunk plan_mental_layer_plan_agency execute connect_knowledge_reflection []
  [if [and [not [null reflective_knowledge_base_name]]
	   [not [null reflective_type_knowledge_base_name]]]
      [have [get this mind] create_knowledge_event_stream_iterator reflective_knowledge_base_name [get [format nil reflective_knowledge_base_name '->' reflective_type_knowledge_base_name] as-symbol]]]]

[deftypefunk plan_mental_layer_plan_agency execute create_builtin_actions []
  [parog [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_positive_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_positive_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_negative_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_negative_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan execute_plan_in_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan imagine_executing_plan_in_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_execute_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_register_a_to_focus_register]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_register_b_to_focus_register]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_register_c_to_focus_register]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_register_d_to_focus_register]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_focus_register_to_register_a]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_focus_register_to_register_b]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_focus_register_to_register_c]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan copy_focus_register_to_register_d]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_next_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_hypothesized_to_cause_goal_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan reverse_focus_on_first_hypothesized_to_cause_goal_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_previous_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_car_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_reverse_car_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_cdr_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_reverse_cdr_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_register_add_after]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_register_add_before]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_register_add_in_parallel]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan remember_plan_for_goal]]]
  nil]

[deftypefunk plan_mental_layer_plan_agency execute create_plan_propositionalized_actions [plan_name]
  [have [get this mental_layer] create_action [get [get this mental_layer] name] `plan `focus_on_object [get [get this layer] semantic_plan plan_name]]]

[deftypefunk plan_mental_layer_plan_agency get semantic_planner []
  [if [null internal-semantic_planner]
      [prog [= internal-semantic_planner [new semantic_planner [get [get this mind] semantic_realm]]]
	    [set internal-semantic_planner planner_type [get [get this mental_layer] name]]
	    [have [get this mental_layer] reflective_knowledge_base-add_semantic_frame internal-semantic_planner]]]
  internal-semantic_planner]

[deftypefunk plan_mental_layer_plan_agency get semantic_plan [plan_name]
  [get layer semantic_plan plan_name]]


'plan_mental_layer_focus_on_first_plan_resource'

[deframe plan_mental_layer_focus_on_first_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_plan
		  [funk []
			[let [[first_plan [get [get [get this mental_layer] semantic_planner] first_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first plan, "' [get first_plan phenomenal_name] '".']
			  [set [get [get this agency] semantic_planner] focus_register first_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_plan_resource get as-natural_language_string []
  'focus on first plan']


'plan_mental_layer_focus_on_last_plan_resource'

[deframe plan_mental_layer_focus_on_last_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_plan
		  [funk []
			[let [[first_plan [get [get [get this mental_layer] semantic_planner] first_plan]]]
			  [let [[last_plan nil]
				[iter      first_plan]]
			    [while iter
			      [= last_plan iter]
			      [= iter [get iter cdr]]]
			    [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last plan, "' [get last_plan phenomenal_name] '".']
			    [set [get [get this agency] semantic_planner] focus_register last_plan]]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_plan_resource get as-natural_language_string []
  'focus on last plan']


'plan_mental_layer_focus_on_first_positive_goal_resource'

[deframe plan_mental_layer_focus_on_first_positive_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_positive_goal
		  [funk []
			[let [[first_positive_goal [get [get [get this mental_layer] semantic_planner] first_positive_goal]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first positive goal, "' [type first_positive_goal] '".']
			  [set [get [get this agency] semantic_planner] focus_register first_positive_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_positive_goal_resource get as-natural_language_string []
  'focus on first positive goal']


'plan_mental_layer_focus_on_last_positive_goal_resource'

[deframe plan_mental_layer_focus_on_last_positive_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_positive_goal
		  [funk []
			[let [[first_positive_goal [get [get [get this mental_layer] semantic_planner] first_positive_goal]]]
			  [let [[last_positive_goal nil]
				[iter               first_positive_goal]]
			    [while iter
			      [= last_positive_goal iter]
			      [= iter [get iter cdr]]]
			    [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last positive goal, "' [type last_positive_goal] '".']
			    [set [get [get this agency] semantic_planner] focus_register last_positive_goal]]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_positive_goal_resource get as-natural_language_string []
  'focus on last positive goal']


'plan_mental_layer_focus_on_first_negative_goal_resource'

[deframe plan_mental_layer_focus_on_first_negative_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_negative_goal
		  [funk []
			[let [[first_negative_goal [get [get [get this mental_layer] semantic_planner] first_negative_goal]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first negative goal, "' [get first_negative_goal phenomenal_name] '".']
			  [set [get [get this agency] semantic_planner] focus_register first_negative_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_negative_goal_resource get as-natural_language_string []
  'focus on first negative goal']


'plan_mental_layer_focus_on_last_negative_goal_resource'

[deframe plan_mental_layer_focus_on_last_negative_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_negative_goal
		  [funk []
			[let [[first_negative_goal [get [get [get this mental_layer] semantic_planner] first_negative_goal]]]
			  [let [[last_negative_goal nil]
				[iter               first_negative_goal]]
			    [while iter
			      [= last_negative_goal iter]
			      [= iter [get iter cdr]]]
			    [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last negative goal, "' [get last_negative_goal phenomenal_name] '".']
			    [set [get [get this agency] semantic_planner] focus_register last_negative_goal]]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_negative_goal_resource get as-natural_language_string []
  'focus on last negative goal']


'plan_mental_layer_focus_on_object_resource'

[deframe plan_mental_layer_focus_on_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_object
		  [funk [semantic_plan_object]
			[terminal_format standard-terminal '\n' [get this as-string] ': focusing on ' [get semantic_plan_object phenomenal_name] ', "' [get [get semantic_plan_object nonsemantic_plan] as-string] '."']
			[set [get [get this agency] semantic_planner] focus_register semantic_plan_object]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_object_resource get as-natural_language_string []
  'focus on object']

[deftypefunk plan_mental_layer_focus_on_object_resource get as-natural_language_string_with_arguments [arguments]
  [if [not [== [length arguments] 1]]
      [prog `[error bug_name  `plan_mental_layer_focus_on_object_resource-wrong_number_of_arguments
		    arguments arguments]
	    [get this as-natural_language_string]]
    [let [[focus_object [first arguments]]]
      [cond [[is-type `semantic_plan_object focus_object] [let [[semantic_plan_object focus_object]]
							    [stringlist-concat `['focus on the plan to '
										 ,[get [get semantic_plan_object nonsemantic_plan] name_expression]]]]]
	    [t                                            [stringlist-concat `['focus on '
									       ,[get focus_object as-string]]]]]]]]

'plan_mental_layer_execute_plan_in_focus_resource'

[deframe plan_mental_layer_execute_plan_in_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `execute_plan_in_focus
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if focus_register
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': executing ' [get focus_register phenomenal_name] ', "' [get [get focus_register nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call [get [get this mental_layer] name] `execution `execute_plan focus_register]
				    [while [get [get [get this agency] semantic_planner] execute_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done executing ' [get focus_register phenomenal_name] ', "' [get [get focus_register nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to execute."']
				  ]]
			  
			  ]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_execute_plan_in_focus_resource get as-natural_language_string []
  'execute plan in focus']



'plan_mental_layer_imagine_executing_plan_in_focus_resource'

[deframe plan_mental_layer_imagine_executing_plan_in_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `imagine_executing_plan_in_focus
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if focus_register
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': imagining ' [get focus_register phenomenal_name] ', "' [get [get focus_register nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call [get [get this mental_layer] name] `imagination `imagine_plan focus_register]
				    [while [get [get [get this agency] semantic_planner] imagine_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done imagining ' [get focus_register phenomenal_name] ', "' [get [get focus_register nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to imagine executing."']
				  ]]
			  
			  ]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_imagine_executing_plan_in_focus_resource get as-natural_language_string []
  'imagine executing plan in focus']



'plan_mental_layer_focus_on_execute_plan_resource'

[deframe plan_mental_layer_focus_on_execute_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_execute_plan
		  [funk []
			[let [[execute_plan [get [get [get this agency] semantic_planner] execute_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get execute_plan phenomenal_name] ', "' [get [get execute_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_register execute_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_execute_plan_resource get as-natural_language_string []
  'focus on currently executing plan']


'plan_mental_layer_copy_focus_register_to_register_a_resource'

[deframe plan_mental_layer_copy_focus_register_to_register_a_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_focus_register_to_register_a
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if [is-type `semantic_object focus_register]
			      [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_register phenomenal_name] '.']
			    [terminal_format standard-terminal '\n' [get this as-string] ': ' focus_register '.']]
			  [set [get [get this agency] semantic_planner] register_a focus_register]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_focus_register_to_register_a_resource get as-natural_language_string []
  'copy focus register to register A']



'plan_mental_layer_copy_focus_register_to_register_b_resource'

[deframe plan_mental_layer_copy_focus_register_to_register_b_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_focus_register_to_register_b
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if [is-type `semantic_object focus_register]
			      [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_register phenomenal_name] '.']
			    [terminal_format standard-terminal '\n' [get this as-string] ': ' focus_register '.']]
			  [set [get [get this agency] semantic_planner] register_b focus_register]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_focus_register_to_register_b_resource get as-natural_language_string []
  'copy focus register to register B']



'plan_mental_layer_copy_focus_register_to_register_c_resource'

[deframe plan_mental_layer_copy_focus_register_to_register_c_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_focus_register_to_register_c
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if [is-type `semantic_object focus_register]
			      [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_register phenomenal_name] '.']
			    [terminal_format standard-terminal '\n' [get this as-string] ': ' focus_register '.']]
			  [set [get [get this agency] semantic_planner] register_c focus_register]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_focus_register_to_register_c_resource get as-natural_language_string []
  'copy focus register to register C']



'plan_mental_layer_copy_focus_register_to_register_d_resource'

[deframe plan_mental_layer_copy_focus_register_to_register_d_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_focus_register_to_register_d
		  [funk []
			[let [[focus_register [get [get [get this agency] semantic_planner] focus_register]]]
			  [if [is-type `semantic_object focus_register]
			      [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_register phenomenal_name] '.']
			    [terminal_format standard-terminal '\n' [get this as-string] ': ' focus_register '.']]
			  [set [get [get this agency] semantic_planner] register_d focus_register]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_focus_register_to_register_d_resource get as-natural_language_string []
  'copy focus register to register D']



'plan_mental_layer_copy_register_a_to_focus_register_resource'

[deframe plan_mental_layer_copy_register_a_to_focus_register_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_register_a_to_focus_register
		  [funk []
			[let [[register_a [get [get [get this agency] semantic_planner] register_a]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_a phenomenal_name] '.']
			  [set [get [get this agency] semantic_planner] focus_register register_a]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_register_a_to_focus_register_resource get as-natural_language_string []
  'copy register A to focus register']



'plan_mental_layer_copy_register_b_to_focus_register_resource'

[deframe plan_mental_layer_copy_register_b_to_focus_register_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_register_b_to_focus_register
		  [funk []
			[let [[register_b [get [get [get this agency] semantic_planner] register_b]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_b phenomenal_name] '.']
			  [set [get [get this agency] semantic_planner] focus_register register_b]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_register_b_to_focus_register_resource get as-natural_language_string []
  'copy register B to focus register']


'plan_mental_layer_copy_register_c_to_focus_register_resource'

[deframe plan_mental_layer_copy_register_c_to_focus_register_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_register_c_to_focus_register
		  [funk []
			[let [[register_c [get [get [get this agency] semantic_planner] register_c]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_c phenomenal_name] '.']
			  [set [get [get this agency] semantic_planner] focus_register register_c]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_register_c_to_focus_register_resource get as-natural_language_string []
  'copy register C to focus register']



'plan_mental_layer_copy_register_d_to_focus_register_resource'

[deframe plan_mental_layer_copy_register_d_to_focus_register_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `copy_register_d_to_focus_register
		  [funk []
			[let [[register_d [get [get [get this agency] semantic_planner] register_d]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_d phenomenal_name] '.']
			  [set [get [get this agency] semantic_planner] focus_register register_d]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_copy_register_d_to_focus_register_resource get as-natural_language_string []
  'copy register D to focus register']


'plan_mental_layer_focus_on_next_object_resource'

[deframe plan_mental_layer_focus_on_next_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_next_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[next_semantic_frame_set [have focus_register lookup_reverse_set `relation `previous]]]
				[if [not [null next_semantic_frame_set]]
				    [let [[next_semantic_frame [first [get next_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame next_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object focusing on ' [type next_semantic_frame] ': "' [get next_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: next object is not semantic_frame.']]
				      [set semantic_planner focus_register next_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: no next object.']
					[set semantic_planner focus_register nil]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_next_object_resource get as-natural_language_string []
  'focus on next object']


'plan_mental_layer_focus_on_previous_object_resource'

[deframe plan_mental_layer_focus_on_previous_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_previous_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[previous_semantic_frame_set [have focus_register lookup_set `relation `previous]]]
				[if [not [null previous_semantic_frame_set]]
				    [let [[previous_semantic_frame [first [get previous_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame previous_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object focusing on ' [type previous_semantic_frame] ': "' [get previous_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: previous object is not semantic_frame.']]
				      [set semantic_planner focus_register previous_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: no previous object.']
					[set semantic_planner focus_register nil]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_previous_object_resource get as-natural_language_string []
  'focus on previous object']


'plan_mental_layer_focus_on_car_object_resource'

[deframe plan_mental_layer_focus_on_car_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_car_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[car_semantic_frame_set [have focus_register lookup_set `relation `car]]]
				[if [and [not [null car_semantic_frame_set]]
					 [not [get car_semantic_frame_set is_empty]]]
				    [let [[car_semantic_frame [first [get car_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame car_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_car_object focusing on ' [type car_semantic_frame] ': "' [get car_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_car_object: car object is not semantic_frame.']]
				      [set semantic_planner focus_register car_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_car_object: no car object.  focus_register=' focus_register]
					[error bug_name       `plan_agency-focus_on_car_object-no_car_object
					       is_plan_bug    t
					       focus_register focus_register]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_car_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_car_object_resource get as-natural_language_string []
  'focus on car object']


'plan_mental_layer_focus_on_reverse_car_object_resource'

[deframe plan_mental_layer_focus_on_reverse_car_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_reverse_car_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[reverse_car_semantic_frame_set [have focus_register lookup_reverse_set `relation `car]]]
				[if [not [null reverse_car_semantic_frame_set]]
				    [let [[reverse_car_semantic_frame [first [get reverse_car_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame reverse_car_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_car_object focusing on ' [type reverse_car_semantic_frame] ': "' [get reverse_car_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_car_object: reverse_car object is not semantic_frame.']]
				      [set semantic_planner focus_register reverse_car_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_car_object: no reverse_car object.  focus_register=' focus_register]
					[error bug_name       `plan_agency-focus_on_reverse_car_object-no_reverse_car_object
					       is_plan_bug    t
					       focus_register focus_register]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_car_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_reverse_car_object_resource get as-natural_language_string []
  'focus on reverse_car object']


'plan_mental_layer_focus_on_cdr_object_resource'

[deframe plan_mental_layer_focus_on_cdr_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_cdr_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[cdr_semantic_frame_set [have focus_register lookup_set `relation `cdr]]]
				[if [not [null cdr_semantic_frame_set]]
				    [let [[cdr_semantic_frame [first [get cdr_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame cdr_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_cdr_object focusing on ' [type cdr_semantic_frame] ': "' [get cdr_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_cdr_object: cdr object is not semantic_frame.']]
				      [set semantic_planner focus_register cdr_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_cdr_object: no cdr object.  focus_register=' focus_register]
					[set semantic_planner focus_register nil]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_cdr_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_cdr_object_resource get as-natural_language_string []
  'focus on cdr object']


'plan_mental_layer_focus_on_reverse_cdr_object_resource'

[deframe plan_mental_layer_focus_on_reverse_cdr_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_reverse_cdr_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[reverse_cdr_semantic_frame_set [have focus_register lookup_reverse_set `relation `cdr]]]
				[if [not [null reverse_cdr_semantic_frame_set]]
				    [let [[reverse_cdr_semantic_frame [first [get reverse_cdr_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame reverse_cdr_semantic_frame]
					  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_cdr_object focusing on ' [type reverse_cdr_semantic_frame] ': "' [get reverse_cdr_semantic_frame phenomenal_name] '".']
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_cdr_object: reverse_cdr object is not semantic_frame.']]
				      [set semantic_planner focus_register reverse_cdr_semantic_frame]]
				  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_cdr_object: no reverse_cdr object.  focus_register=' focus_register]
					[set semantic_planner focus_register nil]]]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_reverse_cdr_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_reverse_cdr_object_resource get as-natural_language_string []
  'focus on reverse_cdr object']


'plan_mental_layer_focus_on_first_hypothesized_to_cause_goal_object_resource'

[deframe plan_mental_layer_focus_on_first_hypothesized_to_cause_goal_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_hypothesized_to_cause_goal_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[first_hypothesized_to_cause_goal_semantic_frame_set [have focus_register lookup_set `relation `first_hypothesized_to_cause_goal]]]
				[if [not [null first_hypothesized_to_cause_goal_semantic_frame_set]]
				    [let [[first_hypothesized_to_cause_goal_semantic_frame [first [get first_hypothesized_to_cause_goal_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame first_hypothesized_to_cause_goal_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_first_hypothesized_to_cause_goal_object focusing on ' [type first_hypothesized_to_cause_goal_semantic_frame] ': "' [get first_hypothesized_to_cause_goal_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_register first_hypothesized_to_cause_goal_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_first_hypothesized_to_cause_goal_object: first_hypothesized_to_cause_goal object is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_first_hypothesized_to_cause_goal_object: no first_hypothesized_to_cause_goal object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_first_hypothesized_to_cause_goal_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_hypothesized_to_cause_goal_object_resource get as-natural_language_string []
  'focus on first_hypothesized_to_cause_goal object']


'plan_mental_layer_reverse_focus_on_first_hypothesized_to_cause_goal_object_resource'

[deframe plan_mental_layer_reverse_focus_on_first_hypothesized_to_cause_goal_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `reverse_focus_on_first_hypothesized_to_cause_goal_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_register       [get semantic_planner focus_register]]]
			  [if [is-type `semantic_frame focus_register]
			      [let [[first_hypothesized_to_cause_goal_semantic_frame_set [have focus_register lookup_set `relation `first_hypothesized_to_cause_goal]]]
				[if [not [null first_hypothesized_to_cause_goal_semantic_frame_set]]
				    [let [[first_hypothesized_to_cause_goal_semantic_frame [first [get first_hypothesized_to_cause_goal_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame first_hypothesized_to_cause_goal_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-reverse_focus_on_first_hypothesized_to_cause_goal_object focusing on ' [type first_hypothesized_to_cause_goal_semantic_frame] ': "' [get first_hypothesized_to_cause_goal_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_register first_hypothesized_to_cause_goal_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-reverse_focus_on_first_hypothesized_to_cause_goal_object: first_hypothesized_to_cause_goal object is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-reverse_focus_on_first_hypothesized_to_cause_goal_object: no first_hypothesized_to_cause_goal object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-reverse_focus_on_first_hypothesized_to_cause_goal_object: focus_register is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_reverse_focus_on_first_hypothesized_to_cause_goal_object_resource get as-natural_language_string []
  'reverse focus on first_hypothesized_to_cause_goal object']


'plan_mental_layer_focus_register_add_after_resource'

[deframe plan_mental_layer_focus_register_add_after_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_register_add_after
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_register_add_after_resource get as-natural_language_string []
  'add a plan after the end of plan currently in focus']



'plan_mental_layer_focus_register_add_before_resource'

[deframe plan_mental_layer_focus_register_add_before_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_register_add_before
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_register_add_before_resource get as-natural_language_string []
  'add a plan before the beginning of plan currently in focus']



'plan_mental_layer_focus_register_add_in_parallel_resource'

[deframe plan_mental_layer_focus_register_add_in_parallel_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_register_add_in_parallel
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_register_add_in_parallel_resource get as-natural_language_string []
  'add a plan in parallel to plan currently in focus']



'plan_mental_layer_remember_plan_for_goal_resource'

[deframe plan_mental_layer_remember_plan_for_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `remember_plan_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			[have [get this mental_layer] evaluate_plan_expression
			      `[prog [call 'forget all imagined events']
				     [call 'set imagine time to be now']
				     [call 'imagine current situation']
				     [plan-call 'focus on plan to stack a pyramid on a cube']
				     [call 'imagine executing plan in focus']
				     [call 'forget all imagined events']]]
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_remember_plan_for_goal_resource get as-natural_language_string []
  'remember plan for goal']


