'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'plan_mental_layer_plan_agency'

[deframe plan_mental_layer_plan_agency [agency] [[internal-semantic_planner nil]
						 reflective_knowledge_base_name
						 reflective_type_knowledge_base_name
						 resource_knowledge_base_name
						 trace_knowledge_base_names]
  [new [initial-reflective_knowledge_base_name
	initial-reflective_type_knowledge_base_name
	initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct agency `plan]
       [= reflective_knowledge_base_name      initial-reflective_knowledge_base_name]
       [= reflective_type_knowledge_base_name initial-reflective_type_knowledge_base_name]
       [= resource_knowledge_base_name        initial-resource_knowledge_base_name]
       [= trace_knowledge_base_names          initial-trace_knowledge_base_names]
       [parog [have this add_resource [new plan_mental_layer_focus_on_first_plan_resource             resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_plan_resource              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_first_positive_goal_resource    resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_positive_goal_resource     resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_first_negative_goal_resource    resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_last_negative_goal_resource     resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_object_resource                 resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_execute_plan_in_focus_resource           resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_imagine_executing_plan_in_focus_resource resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_execute_plan_resource           resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_register_a_plan_from_focus_resource      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_register_b_plan_from_focus_resource      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_register_a_plan_resource        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_register_b_plan_resource        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_next_object_resource            resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_previous_object_resource        resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_next_goal_resource              resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_on_previous_goal_resource          resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_plan_add_after_resource            resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_plan_add_before_resource           resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_focus_plan_add_in_parallel_resource      resource_knowledge_base_name trace_knowledge_base_names]]
	      [have this add_resource [new plan_mental_layer_remember_plan_for_goal_resource          resource_knowledge_base_name trace_knowledge_base_names]]]]]

[deftypefunk plan_mental_layer_plan_agency execute connect_knowledge_reflection []
  [if [and [not [null reflective_knowledge_base_name]]
	   [not [null reflective_type_knowledge_base_name]]]
      [have [get this mind] create_knowledge_event_stream_iterator reflective_knowledge_base_name [get [format nil reflective_knowledge_base_name '->' reflective_type_knowledge_base_name] as-symbol]]]]

[deftypefunk plan_mental_layer_plan_agency execute create_builtin_actions []
  [parog [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_positive_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_positive_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_first_negative_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_last_negative_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan execute_plan_in_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan imagine_executing_plan_in_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_execute_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan register_a_plan_from_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan register_b_plan_from_focus]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_register_a_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_register_b_plan]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_next_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_previous_object]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_next_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_on_previous_goal]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_plan_add_after]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_plan_add_before]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan focus_plan_add_in_parallel]]
	 [have-apply [get this mental_layer] create_action `[,[get [get this mental_layer] name] plan remember_plan_for_goal]]]
  nil]

[deftypefunk plan_mental_layer_plan_agency execute create_plan_propositionalized_actions [plan_name]
  [have [get this mental_layer] create_action [get [get this mental_layer] name] `plan `focus_on_object [get [get this layer] semantic_plan plan_name]]]

[deftypefunk plan_mental_layer_plan_agency get semantic_planner []
  [if [null internal-semantic_planner]
      [prog [= internal-semantic_planner [new semantic_planner [get [get this mind] semantic_realm]]]
	    [set internal-semantic_planner planner_type [get [get this mental_layer] name]]
	    [have [get this mental_layer] reflective_knowledge_base-add_semantic_frame internal-semantic_planner]]]
  internal-semantic_planner]

[deftypefunk plan_mental_layer_plan_agency get semantic_plan [plan_name]
  [get layer semantic_plan plan_name]]


'plan_mental_layer_focus_on_first_plan_resource'

[deframe plan_mental_layer_focus_on_first_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_plan
		  [funk []
			[let [[first_plan [first [get [get this mental_layer] semantic_plan_objects]]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first plan, "' [get first_plan phenomenal_name] '".']
			  [set [get [get this agency] semantic_planner] focus_plan first_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_plan_resource get as-natural_language_string []
  'focus on first plan']


'plan_mental_layer_focus_on_last_plan_resource'

[deframe plan_mental_layer_focus_on_last_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_plan
		  [funk []
			[let [[last_plan [first [reverse [get [get this mental_layer] semantic_plan_objects]]]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last plan, "' [get last_plan phenomenal_name] '".']
			  [set [get [get this agency] semantic_planner] focus_plan last_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_plan_resource get as-natural_language_string []
  'focus on last plan']


'plan_mental_layer_focus_on_first_positive_goal_resource'

[deframe plan_mental_layer_focus_on_first_positive_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_positive_goal
		  [funk []
			[let* [[positive_goals      [get [get this mental_layer] positive_goals]]
			       [first_positive_goal [if positive_goals
							[first positive_goals]
						      nil]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first positive goal, "' [if first_positive_goal
																  [get first_positive_goal phenomenal_name]
																nil] '".']
			  [set [get [get this agency] semantic_planner] focus_goal first_positive_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_positive_goal_resource get as-natural_language_string []
  'focus on first positive goal']


'plan_mental_layer_focus_on_last_positive_goal_resource'

[deframe plan_mental_layer_focus_on_last_positive_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_positive_goal
		  [funk []
			[let* [[positive_goals     [get [get this mental_layer] positive_goals]]
			       [last_positive_goal [if positive_goals
						       [first [reverse positive_goals]]
						     nil]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last positive goal, "' [if last_positive_goal
																 [get last_positive_goal phenomenal_name]
															       nil] '".']
			  [set [get [get this agency] semantic_planner] focus_goal last_positive_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_positive_goal_resource get as-natural_language_string []
  'focus on last positive goal']


'plan_mental_layer_focus_on_first_negative_goal_resource'

[deframe plan_mental_layer_focus_on_first_negative_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_first_negative_goal
		  [funk []
			[let* [[negative_goals      [get [get this mental_layer] negative_goals]]
			       [first_negative_goal [if negative_goals
							[first negative_goals]
						      nil]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on first negative goal, "' [if first_negative_goal
																  [get first_negative_goal phenomenal_name]
																nil] '".']
			  [set [get [get this agency] semantic_planner] focus_goal first_negative_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_first_negative_goal_resource get as-natural_language_string []
  'focus on first negative goal']


'plan_mental_layer_focus_on_last_negative_goal_resource'

[deframe plan_mental_layer_focus_on_last_negative_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_last_negative_goal
		  [funk []
			[let* [[negative_goals     [get [get this mental_layer] negative_goals]]
			       [last_negative_goal [if negative_goals
						       [first [reverse negative_goals]]
						     nil]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': focusing on last negative goal, "' [if last_negative_goal
																 [get last_negative_goal phenomenal_name]
															       nil] '".']
			  [set [get [get this agency] semantic_planner] focus_goal last_negative_goal]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_last_negative_goal_resource get as-natural_language_string []
  'focus on last negative goal']


'plan_mental_layer_focus_on_object_resource'

[deframe plan_mental_layer_focus_on_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_object
		  [funk [semantic_plan_object]
			[terminal_format standard-terminal '\n' [get this as-string] ': focusing on ' [get semantic_plan_object phenomenal_name] ', "' [get [get semantic_plan_object nonsemantic_plan] as-string] '."']
			[set [get [get this agency] semantic_planner] focus_plan semantic_plan_object]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_object_resource get as-natural_language_string []
  'focus on object']

[deftypefunk plan_mental_layer_focus_on_object_resource get as-natural_language_string_with_arguments [arguments]
  [if [not [== [length arguments] 1]]
      [prog `[error bug_name  `plan_mental_layer_focus_on_object_resource-wrong_number_of_arguments
		    arguments arguments]
	    [get this as-natural_language_string]]
    [let [[focus_object [first arguments]]]
      [cond [[is-type `semantic_plan_object focus_object] [let [[semantic_plan_object focus_object]]
							    [stringlist-concat `['focus on the plan to '
										 ,[get [get semantic_plan_object nonsemantic_plan] name_expression]]]]]
	    [t                                            [stringlist-concat `['focus on '
									       ,[get focus_object as-string]]]]]]]]

'plan_mental_layer_execute_plan_in_focus_resource'

[deframe plan_mental_layer_execute_plan_in_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `execute_plan_in_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [if focus_plan
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': executing ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call [get [get this mental_layer] name] `execution `execute_plan focus_plan]
				    [while [get [get [get this agency] semantic_planner] execute_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done executing ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to execute."']
				  ]]
			  
			  ]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_execute_plan_in_focus_resource get as-natural_language_string []
  'execute plan in focus']



'plan_mental_layer_imagine_executing_plan_in_focus_resource'

[deframe plan_mental_layer_imagine_executing_plan_in_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `imagine_executing_plan_in_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [if focus_plan
			      [prog [terminal_format standard-terminal '\n' [get this as-string] ': imagining ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
				    [have [get this mind] wait_to_call [get [get this mental_layer] name] `imagination `imagine_plan focus_plan]
				    [while [get [get [get this agency] semantic_planner] imagine_plan]
				      [sleep 4]]
				    [terminal_format standard-terminal '\n' [get this as-string] ': done imagining ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']]
			    [prog [terminal_format standard-terminal '\n' [get this as-string] ': no plan to imagine executing."']
				  ]]
			  
			  ]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_imagine_executing_plan_in_focus_resource get as-natural_language_string []
  'imagine executing plan in focus']



'plan_mental_layer_focus_on_execute_plan_resource'

[deframe plan_mental_layer_focus_on_execute_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_execute_plan
		  [funk []
			[let [[execute_plan [get [get [get this agency] semantic_planner] execute_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get execute_plan phenomenal_name] ', "' [get [get execute_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan execute_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_execute_plan_resource get as-natural_language_string []
  'focus on currently executing plan']



'plan_mental_layer_register_a_plan_from_focus_resource'

[deframe plan_mental_layer_register_a_plan_from_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `register_a_plan_from_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] register_a_plan focus_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_register_a_plan_from_focus_resource get as-natural_language_string []
  'register plan currently in focus']



'plan_mental_layer_register_b_plan_from_focus_resource'

[deframe plan_mental_layer_register_b_plan_from_focus_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `register_b_plan_from_focus
		  [funk []
			[let [[focus_plan [get [get [get this agency] semantic_planner] focus_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get focus_plan phenomenal_name] ', "' [get [get focus_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] register_b_plan focus_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_register_b_plan_from_focus_resource get as-natural_language_string []
  'register another plan currently in focus']



'plan_mental_layer_focus_on_register_a_plan_resource'

[deframe plan_mental_layer_focus_on_register_a_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_register_a_plan
		  [funk []
			[let [[register_a_plan [get [get [get this agency] semantic_planner] register_a_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_a_plan phenomenal_name] ', "' [get [get register_a_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan register_a_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_register_a_plan_resource get as-natural_language_string []
  'focus on plan I am registering']



'plan_mental_layer_focus_on_register_b_plan_resource'

[deframe plan_mental_layer_focus_on_register_b_plan_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_register_b_plan
		  [funk []
			[let [[register_b_plan [get [get [get this agency] semantic_planner] register_b_plan]]]
			  [terminal_format standard-terminal '\n' [get this as-string] ': ' [get register_b_plan phenomenal_name] ', "' [get [get register_b_plan nonsemantic_plan] as-string] '."']
			  [set [get [get this agency] semantic_planner] focus_plan register_b_plan]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_register_b_plan_resource get as-natural_language_string []
  'focus on other plan I am registering']


'plan_mental_layer_focus_on_next_object_resource'

[deframe plan_mental_layer_focus_on_next_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_next_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_plan       [get semantic_planner focus_plan]]]
			  [if [is-type `semantic_frame focus_plan]
			      [let [[next_semantic_frame_set [have focus_plan lookup_reverse_set `relation `previous]]]
				[if [not [null next_semantic_frame_set]]
				    [let [[next_semantic_frame [first [get next_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame next_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object focusing on ' [type next_semantic_frame] ': "' [get next_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_plan next_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: next object is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: no next object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_object: focus_plan is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_next_object_resource get as-natural_language_string []
  'focus on next object']


'plan_mental_layer_focus_on_previous_object_resource'

[deframe plan_mental_layer_focus_on_previous_object_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_previous_object
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_plan       [get semantic_planner focus_plan]]]
			  [if [is-type `semantic_frame focus_plan]
			      [let [[previous_semantic_frame_set [have focus_plan lookup_set `relation `previous]]]
				[if [not [null previous_semantic_frame_set]]
				    [let [[previous_semantic_frame [first [get previous_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame previous_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object focusing on ' [type previous_semantic_frame] ': "' [get previous_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_plan previous_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: previous object is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: no previous object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_object: focus_plan is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_previous_object_resource get as-natural_language_string []
  'focus on previous object']


'plan_mental_layer_focus_on_next_goal_resource'

[deframe plan_mental_layer_focus_on_next_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_next_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_plan       [get semantic_planner focus_goal]]]
			  [if [is-type `semantic_frame focus_goal]
			      [let [[next_semantic_frame_set [have focus_goal lookup_reverse_set `relation `previous]]]
				[if [not [null next_semantic_frame_set]]
				    [let [[next_semantic_frame [first [get next_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame next_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_goal focusing on ' [type next_semantic_frame] ': "' [get next_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_goal next_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_goal: next goal is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_goal: no next object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_next_goal: focus_goal is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_next_goal_resource get as-natural_language_string []
  'focus on next goal']


'plan_mental_layer_focus_on_previous_goal_resource'

[deframe plan_mental_layer_focus_on_previous_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_on_previous_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			[let* [[semantic_planner [get [get this agency] semantic_planner]]
			       [focus_plan       [get semantic_planner focus_goal]]]
			  [if [is-type `semantic_frame focus_goal]
			      [let [[previous_semantic_frame_set [have focus_goal lookup_reverse_set `relation `previous]]]
				[if [not [null previous_semantic_frame_set]]
				    [let [[previous_semantic_frame [first [get previous_semantic_frame_set elements]]]]
				      [if [is-type `semantic_frame previous_semantic_frame]
					  [prog [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_goal focusing on ' [type previous_semantic_frame] ': "' [get previous_semantic_frame phenomenal_name] '".']
						[set semantic_planner focus_goal previous_semantic_frame]]
					[terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_goal: previous goal is not semantic_frame.']]]
				  [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_goal: no previous object.']]]
			    [terminal_format standard-terminal '\n' [type [get this mental_layer]] '-focus_on_previous_goal: focus_goal is not semantic_frame.']]]]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_on_previous_goal_resource get as-natural_language_string []
  'focus on previous goal']


'plan_mental_layer_focus_plan_add_after_resource'

[deframe plan_mental_layer_focus_plan_add_after_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_plan_add_after
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_plan_add_after_resource get as-natural_language_string []
  'add a plan after the end of plan currently in focus']



'plan_mental_layer_focus_plan_add_before_resource'

[deframe plan_mental_layer_focus_plan_add_before_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_plan_add_before
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_plan_add_before_resource get as-natural_language_string []
  'add a plan before the beginning of plan currently in focus']



'plan_mental_layer_focus_plan_add_in_parallel_resource'

[deframe plan_mental_layer_focus_plan_add_in_parallel_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `focus_plan_add_in_parallel
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_focus_plan_add_in_parallel_resource get as-natural_language_string []
  'add a plan in parallel to plan currently in focus']



'plan_mental_layer_remember_plan_for_goal_resource'

[deframe plan_mental_layer_remember_plan_for_goal_resource [plan_mental_layer_resource] []
  [new [initial-resource_knowledge_base_name
	initial-trace_knowledge_base_names]
       [construct plan_mental_layer_resource `remember_plan_for_goal
		  [funk []
			[terminal_format standard-terminal '\n' [get this as-string] ': here.']
			
			[have [get this mental_layer] evaluate_plan_expression
			      `[prog [call 'forget all imagined events']
				     [call 'set imagine time to be now']
				     [call 'imagine current situation']
				     [plan-call 'focus on plan to stack a pyramid on a cube']
				     [call 'imagine executing plan in focus']
				     [call 'forget all imagined events']]]
			
			]
		  initial-resource_knowledge_base_name
		  initial-trace_knowledge_base_names]]]

[deftypefunk plan_mental_layer_remember_plan_for_goal_resource get as-natural_language_string []
  'remember plan for goal']


