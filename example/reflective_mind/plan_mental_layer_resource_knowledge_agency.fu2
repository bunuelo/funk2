'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'plan_mental_layer_resource_knowledge_agency'

[deframe plan_mental_layer_resource_knowledge_agency [agency] [resource_knowledge_base_name
							       resource_event_knowledge_base_name]
  [new [initial-resource_knowledge_base_name
	initial-resource_event_knowledge_base_name]
       [= resource_knowledge_base_name       initial-resource_knowledge_base_name]
       [= resource_event_knowledge_base_name initial-resource_event_knowledge_base_name]
       [construct agency `resource_knowledge]
       [have this add_resource [new translate_resource_knowledge_to_resource_event_knowledge_resource]]]]

[deftypefunk plan_mental_layer_resource_knowledge_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_resource_event_knowledge_base resource_knowledge_base_name       [get [get this mind] semantic_realm]]]
  [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_resource_event_knowledge_base resource_event_knowledge_base_name [get [get this mind] semantic_realm]]]]

[deftypefunk plan_mental_layer_resource_knowledge_agency get resource_knowledge_base []
  [get [get this mind] semantic_knowledge_base resource_knowledge_base_name]]

[deftypefunk plan_mental_layer_resource_knowledge_agency get resource_event_knowledge_base []
  [get [get this mind] semantic_knowledge_base resource_event_knowledge_base_name]]

[deftypefunk plan_mental_layer_resource_knowledge_agency get resource_knowledge->resource_event_knowledge_iterator_name []
  [get [format nil resource_knowledge_base_name '->' resource_event_knowledge_base_name] as-symbol]]

[deftypefunk plan_mental_layer_resource_knowledge_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator resource_knowledge_base_name [get this resource_knowledge->resource_event_knowledge_iterator_name]]]

[deftypefunk plan_mental_layer_resource_knowledge_agency get resource_knowledge->resource_event_knowledge_iterator []
  [get [get this mind] knowledge_event_stream_iterator [get this resource_knowledge->resource_event_knowledge_iterator_name]]]


'translate_resource_knowledge_to_resource_event_knowledge_resource'

[deframe translate_resource_knowledge_to_resource_event_knowledge_resource [vital_resource] [[existence_phenomenal_name_ptypehash       [new ptypehash]]
											     [existence_resource_relationship_ptypehash [new ptypehash]]
											     [action_sequence_resource_ptypehash        [new ptypehash]]]
  [new []
       [construct vital_resource `translate_resource_knowledge_to_resource_event_knowledge
		  [funk []
			[have this execute_resource_raw_funk]]]
       nil]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource get phenomenal_name_existence [phenomenal_name]
  [let [[existence_event [have existence_phenomenal_name_ptypehash lookup phenomenal_name]]]
    [if [null existence_event]
	[prog [= existence_event [new semantic_know_of_existence_event [get [get this mind] semantic_realm] phenomenal_name]]
	      [have existence_phenomenal_name_ptypehash add phenomenal_name existence_event]
	      [have [get [get this agency] resource_event_knowledge_base] add_semantic_frame existence_event]]]
    existence_event]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource get resource_relationship_existence [resource_relationship]
  [let [[relationship_event [have existence_resource_relationship_ptypehash lookup resource_relationship]]]
    [if [null relationship_event]
	[prog [= relationship_event [new semantic_know_of_relationship_event [get [get this mind] semantic_realm] resource_relationship]]
	      [have existence_resource_relationship_ptypehash add resource_relationship relationship_event]
	      [have [get [get this agency] resource_event_knowledge_base] add_semantic_frame relationship_event]]]
    relationship_event]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource execute resource_relationship_existence-remove [resource_relationship]
  [have existence_resource_relationship_ptypehash remove resource_relationship]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource get action_sequence-exists [resource]
  [get action_sequence_resource_ptypehash contains resource]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource get action_sequence [resource]
  [let [[action_sequence [have action_sequence_resource_ptypehash lookup resource]]]
    [if [null action_sequence]
	[prog [= action_sequence [new semantic_resource_action_sequence [get [get this mind] semantic_realm] `activity resource]]
	      [have action_sequence_resource_ptypehash add resource action_sequence]
	      [have [get [get this agency] resource_event_knowledge_base] add_semantic_frame action_sequence]]]
    action_sequence]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource execute action_sequence-remove [resource]
  [have action_sequence_resource_ptypehash remove resource]]

[deftypefunk translate_resource_knowledge_to_resource_event_knowledge_resource execute execute_resource_raw_funk []
  [let [[mind_pseudo_semantic_resource [new semantic_resource [get [get this mind] semantic_realm]]]]
    [set mind_pseudo_semantic_resource phenomenal_name `mind_pseudo_resource]
    [let [[mind_action_sequence [get this action_sequence mind_pseudo_semantic_resource]]]
      [set mind_action_sequence absolute_start_time [new semantic_time [time]]]
      [let [[resource_knowledge_iterator [get [get this agency] resource_knowledge->resource_event_knowledge_iterator]]]
	[while t
	  [let [[event [have resource_knowledge_iterator wait_for_current]]]
	    [if [not [null event]]
		[prog [if [get this debug]
			  [terminal_format standard-terminal '\n  translate resource->resource_event event: ' event]]
		      [let [[event_type [get event event_type]]]
			[cond [[and [is-type `semantic_knowledge_base_event event]
				    [eq event_type `add_semantic_frame]]           [let [[semantic_frame [get event semantic_frame]]]
										     [let [[phenomenal_name [get semantic_frame phenomenal_name]]]
										       `[let [[existence_event [get this phenomenal_name_existence phenomenal_name]]]
											  [set existence_event absolute_start_time [new semantic_time [get event time]]]
											  ]]]]
			      [[and [is-type `semantic_frame_event event]
				    [eq event_type `add]]                          [let [[event-time           [get event time]]
										     	 [event-semantic_frame [get event semantic_frame]]
											 [event-key_type       [get event key_type]]
											 [event-key            [get event key]]
											 [event-value          [get event value]]]
										     [cond [[and [is-type `semantic_resource event-semantic_frame]
												 [is-type `semantic_resource event-value]]
											    [let [[agent  event-semantic_frame]
												  [target event-value]]
											      [let [[resource_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
																   agent event-key_type event-key target]]]
												[let [[relationship_event [get this resource_relationship_existence resource_relationship]]]
												  [set relationship_event absolute_start_time [new semantic_time [get event time]]]
												  [let [[action_sequence [if [get this action_sequence-exists agent]
															     [get this action_sequence agent]
															   mind_action_sequence]]]
												    [have action_sequence add_to_end relationship_event]
												    ]]]]]
											   [[and [is-type `semantic_resource event-semantic_frame]
												 [eq event-key_type `property] [eq event-key `active]]
											    [let* [[semantic_resource event-semantic_frame]
												   [active            event-value]]
											      [if [get this debug]
												  [terminal_format standard-terminal '\nadd active: ' active]]
											      [if active
												  [let [[action_sequence [get this action_sequence semantic_resource]]]
												    [let [[semantic_start_time [new semantic_time [get event time]]]]
												      [set action_sequence absolute_start_time semantic_start_time]
												      [let [[causing_events [get [get [get this agency] resource_event_knowledge_base]
																 resource_targeting_events_containing_time semantic_resource semantic_start_time]]]
													[if causing_events
													    [mapc [funk [causing_event]
															[semantic-add action_sequence is_caused_by causing_event]]
														  causing_events]
													  [let [[most_recent_causing_events [get [get [get this agency] resource_event_knowledge_base]
																		 most_recent_targeting_events semantic_resource semantic_start_time]]]
													    [mapc [funk [causing_event]
															[semantic-add action_sequence is_caused_by causing_event]]
														  most_recent_causing_events]
													    ]]]]]]]]
											   ]
										     ]]
			      [[and [is-type `semantic_frame_event event]
				    [eq event_type `remove]]                       [let [[event-time           [get event time]]
										     	 [event-semantic_frame [get event semantic_frame]]
											 [event-key_type       [get event key_type]]
											 [event-key            [get event key]]
											 [event-value          [get event value]]]
										     [cond [[and [is-type `semantic_resource event-semantic_frame]
												 [is-type `semantic_resource event-value]]
											    [let [[resource_relationship [have [get [get this mind] semantic_realm] lookup_or_create_meta_relationship
																 event-semantic_frame event-key_type event-key event-value]]]
											      [let [[relationship_event [get this resource_relationship_existence resource_relationship]]]
												[set relationship_event absolute_end_time [new semantic_time [get event time]]]
												[have this resource_relationship_existence-remove resource_relationship]
												]]]
											   [[and [is-type `semantic_resource event-semantic_frame]
												 [eq event-key_type `property] [eq event-key `active]]
											    [let [[semantic_resource event-semantic_frame]
												  [active            event-value]]
											      `[terminal_format standard-terminal '\nremove active: ' active]
											      [if active
												  [let [[action_sequence [get this action_sequence semantic_resource]]]
												    [set action_sequence absolute_end_time [new semantic_time [get event time]]]
												    [have this action_sequence-remove semantic_resource]
												    [let [[resource [get semantic_resource resource]]]
												      [have resource know_of_completed_action_sequence action_sequence]
												      ]]]]]
											   ]
										     ]]
			      ]]]]
	    [have resource_knowledge_iterator increment]]]]]]]



