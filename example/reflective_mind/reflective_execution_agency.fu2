'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'reflective_execution_agency'

[deframe reflective_execution_agency [agency] []
  [new []
       [construct agency `execution]
       
       [have this add_resource [new reflective_execute_plan_resource]]
       
       this]]

[deframe reflective_execute_plan_resource [reflective_resource] []
  [new []
       [construct reflective_resource `execute_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[terminal_format standard-terminal '\nreflective_layer: executing plan.']
			[set [get [get [get this mind] agency `reflective `plan] semantic_planner] execute_plan semantic_plan]
			[let [[result [shelter [cause-define cause-name `plan]
					       [have [get semantic_plan deliberative_plan] eval]]]]
			  [if [is-type `bug result]
			      [prog [terminal_format standard-terminal '\nreflective_layer: executing plan has a bug.']
				    [set [get [get [get this mind] agency `reflective `plan] semantic_planner] execute_plan nil]
				    [terminal_format standard-terminal '\nreflective_layer: waiting to call reflective initial plan bug response.']
				    [have [get this mind] wait_to_call `reflective `plan_bug_response `initial_plan_bug_response semantic_plan result]
				    [terminal_format standard-terminal '\nreflective_layer: returning from reflective bug response.']]
			    [prog [terminal_format standard-terminal '\nreflective_layer: successfully completed executing plan.']
				  [set [get [get [get this mind] agency `reflective `plan] semantic_planner] execute_plan nil]]]]
			nil]]
       nil]]


