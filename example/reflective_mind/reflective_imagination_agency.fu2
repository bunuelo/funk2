'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'reflective_imagination_agency'

[deframe reflective_imagination_agency [agency] []
  [new []
       [construct agency `imagination]
       
       [have this add_resource [new reflective_forget_all_imagined_events_resource]]
       [have this add_resource [new reflective_imagine_plan_resource]]
       
       this]]

[deftypefunk reflective_imagination_agency execute create_builtin_actions []
  [have-apply [get this mind] create_reflective_action `[reflective imagination forget_all_imagined_events]]
  [have-apply [get this mind] create_reflective_action `[reflective imagination imagine_plan]]]


'reflective_forget_all_imagined_events_resource'

[deframe reflective_forget_all_imagined_events_resource [reflective_resource] []
  [new []
       [construct reflective_resource `forget_all_imagined_events
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `reflective `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', forgetting all imagined events.']
			  [let [[deliberative1_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `deliberative1_type_counterfactual_knowledge]]]
			    
			    'generates interval tree removal errors'
			    `[have deliberative1_counterfactual_knowledge_base remove_all]
			    
			    'so, create whole new knowledge base.'
			    [have [get [get [get this mind] semantic_realm] semantic_knowledge_base_frame] remove `deliberative1_type_counterfactual_knowledge]
			    [have [get this mind] add_semantic_knowledge_base [new forgetful_semantic_event_knowledge_base `deliberative1_type_counterfactual_knowledge [get [get this mind] semantic_realm]]]
			    
			    nil]]]]
       nil]]

[deftypefunk reflective_forget_all_imagined_events_resource get as-natural_language_string []
  'forget all imagined events']


'reflective_imagine_plan_resource'

[deframe reflective_imagine_plan_resource [reflective_resource] []
  [new []
       [construct reflective_resource `imagine_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[let [[semantic_planner [get [get [get this mind] agency `reflective `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', imagining plan.']
			  [let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			    [set semantic_planner execute_plan semantic_plan]
			    [let* [[variable_frame [new frame]]
				   [result         [have [get semantic_plan nonsemantic_plan] imagine_as_thought_in_semantic_planner semantic_planner variable_frame]]]
			      [if [is-type `bug result]
				  [let [[bug result]]
				    [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						     [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', imagining plan has a bug: ' bug]
				    [set semantic_planner imagine_plan nil]
				    ]
				[prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						       [type [get this layer]] 'resource, ' [get this as-natural_language_string] ', successfully completed imagining plan']
				      [set [get [get [get this mind] agency `reflective `plan] semantic_planner] imagine_plan nil]]]]
			    nil]]]]
       nil]]

[deftypefunk reflective_imagine_plan_resource get as-natural_language_string []
  'imagine plan']


