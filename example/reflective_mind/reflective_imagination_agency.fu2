'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'deliberative_imagination_agency'

[deframe deliberative_imagination_agency [agency] []
  [new []
       [construct agency `imagination]
       
       [have this add_resource [new deliberative_forget_all_imagined_events_resource]]
       [have this add_resource [new deliberative_set_imagine_time_to_be_now_resource]]
       [have this add_resource [new deliberative_imagine_current_situation_resource]]
       [have this add_resource [new deliberative_imagine_plan_resource]]
       
       this]]

[deframe deliberative_forget_all_imagined_events_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `forget_all_imagined_events
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get name as-english_string] ', forgetting all imagined events.']
			  [set semantic_planner imagine_time nil]
			  [let [[physical_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]]
			    
			    'generates interval tree removal errors'
			    `[have physical_counterfactual_knowledge_base remove_all]
			    
			    'so, create whole new knowledge base.'
			    [have [get [get [get this mind] semantic_realm] semantic_knowledge_base_frame] remove `physical_type_counterfactual_knowledge]
			    [have [get this mind] add_semantic_knowledge_base [new semantic_event_knowledge_base `physical_type_counterfactual_knowledge [get [get this mind] semantic_realm]]]
			    
			    nil]]]]
       nil]]


[deframe deliberative_set_imagine_time_to_be_now_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `set_imagine_time_to_be_now
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get name as-english_string] ', setting imagine time to be now..']
			  [let [[imagine_time [new semantic_time [time]]]]
			    [set semantic_planner imagine_time imagine_time]
			    nil]]]]
       nil]]


[deframe deliberative_imagine_current_situation_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `imagine_current_situation
		  [funk []
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get name as-english_string] ', imagining current situation.']
			  [let [[imagine_time [new semantic_time [time]]]]
			    [set semantic_planner imagine_time imagine_time]
			    [let [[physical_type_events                   [get [get [get this mind] semantic_knowledge_base `physical_type_knowledge] events_containing_time imagine_time]]
				  [physical_counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]]
			      [mapc [funk [physical_type_event]
					  [cond [[is-type `semantic_reflective_object_type_relation_event physical_type_event] [let [[meta_relationship      [get                 physical_type_event meta_relationship]]
																     [phenomenal_name        [get                 physical_type_event phenomenal_name]]
																     [target_object_type_set [semantic-lookup_set physical_type_event target_object_type]]
																     [absolute_start_time    [get                 physical_type_event absolute_start_time]]
																     [absolute_end_time      [get                 physical_type_event absolute_end_time]]]
																 [let [[imagine_event [new semantic_reflective_object_type_relation_event
																			   [get [get this mind] semantic_realm]
																			   phenomenal_name
																			   meta_relationship
																			   [get target_object_type_set an_arbitrary_element]]]]
																   [set imagine_event absolute_start_time absolute_start_time]
																   [set imagine_event absolute_end_time   absolute_end_time]
																   
																   `[terminal_format standard-terminal '\nimagining relation event: ' [get imagine_event phenomenal_name] '.']
																   [have physical_counterfactual_knowledge_base add_semantic_frame imagine_event]
																   
																   ]]]
						[[is-type `semantic_reflective_object_type_property_event physical_type_event] [let [[meta_relationship        [get                 physical_type_event meta_relationship]]
																     [phenomenal_name          [get                 physical_type_event phenomenal_name]]
																     [target_property_name_set [semantic-lookup_set physical_type_event target_property_name]]
																     [absolute_start_time      [get                 physical_type_event absolute_start_time]]
																     [absolute_end_time        [get                 physical_type_event absolute_end_time]]]
																 [let [[imagine_event [new semantic_reflective_object_type_property_event
																			   [get [get this mind] semantic_realm]
																			   phenomenal_name
																			   meta_relationship
																			   [get target_property_name_set an_arbitrary_element]]]]
																   [set imagine_event absolute_start_time absolute_start_time]
																   [set imagine_event absolute_end_time   absolute_end_time]
																   
																   `[terminal_format standard-terminal '\nimagining property event: ' [get imagine_event phenomenal_name] '.']
																   [have physical_counterfactual_knowledge_base add_semantic_frame imagine_event]
																   
																   ]]]
						
						[t                                                                                  [prog `[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
																			    [get [get this layer] name] ' resource, ' name ', '
																			    'change event: ' change_type ' - ' change_event ' (not learning hypothesis space for change).']
																	  ]]
						]]
				    physical_type_events]
			      nil]]]]]
       nil]]


[deframe deliberative_imagine_plan_resource [deliberative_resource] []
  [new []
       [construct deliberative_resource `imagine_plan
		  [funk [semantic_plan]
			[assert-type semantic_plan_object semantic_plan]
			[let [[semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]]
			  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					   [type [get this layer]] 'resource, ' [get name as-english_string] ', imagining plan.']
			  [set semantic_planner imagine_plan semantic_plan]
			  [let [[result [shelter [cause-define cause-name `plan]
						 [have [get semantic_plan nonsemantic_plan] imagine_eval]]]]
			    [if [is-type `bug result]
				[let [[bug result]]
				  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						   [type [get this layer]] 'resource, ' [get name as-english_string] ', imagining plan has a bug: ' bug]
				  [set semantic_planner imagine_plan nil]
				  ]
			      [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
						     [type [get this layer]] 'resource, ' [get name as-english_string] ', successfully completed imagining plan']
				    [set [get [get [get this mind] agency `deliberative `plan] semantic_planner] imagine_plan nil]]]]
			  nil]]]
       nil]]


