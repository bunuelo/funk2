'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'reflective_layer'

[deframe reflective_layer [plan_mental_layer] []
  [new []
       [let [[object_knowledge_base_name                     `deliberative1_knowledge]
	     [object_type_knowledge_base_name                `deliberative1_type_knowledge]
	     [object_type_counterfactual_knowledge_base_name `deliberative1_type_counterfactual_knowledge]
	     [object_resource_knowledge_base_name            `deliberative_resource_knowledge]
	     [object_resource_event_knowledge_base_name      `deliberative_resource_event_knowledge]
	     [reflective_knowledge_base_name                 `deliberative2_knowledge]
	     [reflective_type_knowledge_base_name            nil]
	     [reflective_resource_knowledge_base_name        `reflective_resource_knowledge]
	     [trace_knowledge_base_names                     `[deliberative1_type_knowledge]]]
	 [construct plan_mental_layer 2 `deliberative
		    object_knowledge_base_name
		    object_type_knowledge_base_name
		    object_type_counterfactual_knowledge_base_name
		    object_resource_knowledge_base_name
		    object_resource_event_knowledge_base_name
		    reflective_knowledge_base_name
		    reflective_type_knowledge_base_name
		    reflective_resource_knowledge_base_name
		    trace_knowledge_base_names]]]]

[deftypefunk reflective_layer execute create_knowledge []
  [type-have plan_mental_layer this create_knowledge]
  [have [get this agency `reflective_event_knowledge] create_knowledge]]

[deftypefunk reflective_layer execute connect_knowledge_reflection []
  [type-have plan_mental_layer this connect_knowledge_reflection]
  [have [get this agency `reflective_event_knowledge] connect_knowledge_reflection]]

[deftypefunk reflective_layer execute create_builtin_actions []
  [type-have plan_mental_layer this create_builtin_actions]]

[deftypefunk reflective_layer get mental_layer_below []
  [get [get this mind] layer `deliberative]]

[deftypefunk reflective_layer execute check_exists [semantic_partial_state]
  [terminal_format standard-terminal '\nreflective_layer has not implemented check_exists.']
  [error bug_name `reflective_layer-check_exists_not_implemented
	 this     this]]

[deftypefunk reflective_layer execute wait_for [semantic_partial_state]
  [terminal_format standard-terminal '\nreflective_layer has not implemented wait_for.']
  [error bug_name `reflective_layer-wait_for_not_implemented
	 this     this]]

