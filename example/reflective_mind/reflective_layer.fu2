'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'reflective_layer'

[deframe reflective_layer [plan_mental_layer] []
  [new []
       [construct plan_mental_layer 3 `reflective
		  `deliberative1_knowledge
		  `deliberative1_type_knowledge
		  `deliberative1_type_counterfactual_knowledge
		  `deliberative2_knowledge
		  nil
		  nil]
       [parog [have this add_agency [new reflective_plan_bug_response_agency]]
	      [have this add_agency [new reflective_event_knowledge_agency]]
	      [have this add_agency [new reflective_credit_assignment_agency]]]]]

[deftypefunk reflective_layer get mental_layer_below []
  [get [get this mind] layer `deliberative]]

[deftypefunk reflective_layer execute create_knowledge []
  [type-have plan_mental_layer this create_knowledge]
  [have [get this agency `reflective_event_knowledge] create_knowledge]]

[deftypefunk reflective_layer execute connect_knowledge_reflection []
  [type-have plan_mental_layer this connect_knowledge_reflection]
  [have [get this agency `reflective_event_knowledge] connect_knowledge_reflection]]

[deftypefunk reflective_layer execute create_builtin_actions []
  [type-have plan_mental_layer this create_builtin_actions]]


[deftypefunk reflective_layer execute check_exists [semantic_partial_state]
  [terminal_format standard-terminal '\nreflective_layer has not implemented check_exists.']
  [error bug_name `reflective_layer-check_exists_not_implemented
	 this     this]]

[deftypefunk reflective_layer execute wait_for [semantic_partial_state]
  [terminal_format standard-terminal '\nreflective_layer has not implemented wait_for.']
  [error bug_name `reflective_layer-wait_for_not_implemented
	 this     this]]

[deftypefunk reflective_layer execute assure_knowledge_symbols_initialized []
  [have knowledge_symbol_set_initialized_mutex lock]
  [if [not knowledge_symbol_set_initialized]
      [prog [mapc [funk [knowledge_symbol]
			[have knowledge_symbol_set add knowledge_symbol]]
		  [append [get [get this mind] all_perception_symbols]
			  `[property
			    relationship
			    relation
			    preposition
			    is-me
			    t]]]
	    [= knowledge_symbol_set_initialized t]]]
  [have knowledge_symbol_set_initialized_mutex unlock]]

[deftypefunk reflective_layer get all_knowledge_symbols []
  [have this assure_knowledge_symbols_initialized]
  [get knowledge_symbol_set elements]]

[deftypefunk reflective_layer get knowledge_symbol [value]
  [have this assure_knowledge_symbols_initialized]
  [let [[symbol [if [is-type `symbol value]
		    value
		  [get string as-symbol]]]]
    [if [get knowledge_symbol_set contains symbol]
	symbol
      [prog [terminal_format standard-terminal '\n' [get this type] '-get-knowledge_symbol failure: unknown symbol (' symbol ')']
	    [error bug_name             `deliberative_layer-get-string_as_knowledge_symbol-no_such_knowledge_symbol
		   string               string
		   symbol               symbol
		   knowledge_symbol_set knowledge_symbol_set]]]]]

