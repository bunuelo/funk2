'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'reflective_layer'

[deframe reflective_layer [mental_layer] [[reflective_action_natural_language_symbol_ptypehash [new ptypehash]]
					  [semantic_plan_phenomenal_name_frame                 [new frame]]]
  [new []
       [construct mental_layer 3 `reflective]
       [parog [have this add_agency [new reflective_plan_bug_response_agency]]
	      [have this add_agency [new reflective_plan_object_type_goal_agency]]
	      [have this add_agency [new reflective_event_knowledge_agency]]
	      [have this add_agency [new reflective_credit_assignment_agency]]
	      [have this add_agency [new reflective_plan_agency]]
	      [have this add_agency [new reflective_imagination_agency]]
	      [have this add_agency [new reflective_execution_agency]]]
       this]]

[deftypefunk reflective_layer get mental_layer_below []
  [get [get this mind] layer `deliberative]]

[deftypefunk reflective_layer execute create_knowledge []
  [have [get this agency `plan_object_type_goal]      create_knowledge]
  [have [get this agency `reflective_event_knowledge] create_knowledge]
  [have [get this agency `plan]                       create_knowledge]
  nil]

[deftypefunk reflective_layer execute connect_knowledge_reflection []
  [have [get this agency `plan_object_type_goal]      connect_knowledge_reflection]
  [have [get this agency `reflective_event_knowledge] connect_knowledge_reflection]
  [have [get this agency `plan]                       connect_knowledge_reflection]
  nil]

[deftypefunk reflective_layer execute create_builtin_actions []
  [have [get this agency `imagination] create_builtin_actions]
  [have [get this agency `plan]        create_builtin_actions]]

[deftypefunk reflective_layer get knowledge_timer []
  [get [get this agency `plan_object_type_goal] knowledge_timer]]

[deftypefunk reflective_layer execute add_remember_token [remember_token]
  [have [get this agency `plan_object_type_goal] add_remember_token remember_token]]

[deftypefunk reflective_layer execute remove_remember_token [remember_token]
  [have [get this agency `plan_object_type_goal] remove_remember_token remember_token]]

[deftypefunk reflective_layer execute wait_until_time_represented [semantic_time]
  [have [get this agency `plan_object_type_goal] wait_until_time_represented semantic_time]]

[deftypefunk reflective_layer execute wait_until_after_time_represented [semantic_time]
  [have [get this agency `plan_object_type_goal] wait_until_after_time_represented semantic_time]]

[deftypefunk reflective_layer execute add_reflective_action [action]
  [terminal_format standard-terminal '\nreflective_layer: adding reflective action, "' [get action as-string] '."']
  [have reflective_action_natural_language_symbol_ptypehash add [get action as-natural_language_symbol] action]]

[deftypefunk reflective_layer get reflective_actions []
  [get reflective_action_natural_language_symbol_ptypehash values]]

[deftypefunk reflective_layer execute lookup_reflective_action [expression]
  [have reflective_action_natural_language_symbol_ptypehash lookup [string-as-natural_language_symbol expression]]]

[deftypefunk reflective_layer execute add_reflective_semantic_object_recursive [semantic_object]
  [cond [[is-type `semantic_plan_operator_sequence    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     [let [[past_operator   [get semantic_object past_operator]]
										   [future_operator [get semantic_object future_operator]]]
									       [have this add_reflective_semantic_object_recursive past_operator]
									       [have this add_reflective_semantic_object_recursive future_operator]]]]
	[[is-type `semantic_plan_operator_parallel    semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     [let [[plan_operator_set [semantic-lookup_set semantic_object plan_operator]]]
									       [mapc [funk [plan_operator]
											   [have this add_reflective_semantic_object_recursive plan_operator]]
										     [get plan_operator_set elements]]]]]
	[[is-type `semantic_plan_operator_activation  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     [let [[counterfactual_transframe [get semantic_object counterfactual_transframe]]]
									       [have this add_reflective_semantic_object_recursive counterfactual_transframe]]]]
	[[is-type `semantic_plan_operator_suppression semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     ]]
	[[is-type `semantic_counterfactual_transframe semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     [let [[resource_activation_dependency [get semantic_object resource_activation_dependency]]]
									       [have this add_reflective_semantic_object_recursive resource_activation_dependency]]]]
	[[is-type `semantic_resource                  semantic_object] [prog [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_object]
									     ]]
	]]


[deftypefunk reflective_layer execute lookup_action [natural_language_string]
  [have this lookup_reflective_action natural_language_string]]

[deftypefunk reflective_layer execute lookup_action_below [natural_language_string]
  [have [get [get this mind] layer `deliberative] lookup_action natural_language_string]]

[deftypefunk reflective_layer execute add_semantic_plan [semantic_plan]
  [terminal_format standard-terminal '\nreflective_layer: adding plan, "' [get [get [get semantic_plan nonsemantic_plan] unique_name] as-string] '."']
  [have [get [get this mind] semantic_knowledge_base `deliberative2_knowledge] add_semantic_frame semantic_plan]
  [let [[start_plan_operator [get semantic_plan start_plan_operator]]]
    [have this add_reflective_semantic_object_recursive start_plan_operator]]
  [have semantic_plan_phenomenal_name_frame add [get semantic_plan phenomenal_name] semantic_plan]
  [have [get this agency `plan] create_plan_propositionalized_actions [get semantic_plan phenomenal_name]]]

[deftypefunk reflective_layer execute lookup_semantic_plan [phenomenal_name]
  [have semantic_plan_phenomenal_name_frame lookup phenomenal_name]]

[deftypefunk reflective_layer get semantic_plan [phenomenal_name]
  [let [[semantic_plan [have this lookup_semantic_plan phenomenal_name]]]
    [if [null semantic_plan]
	[error bug_type             `reflective_layer-semantic_plan-not_found
	       plan_phenomenal_name phenomenal_name]]
    semantic_plan]]

[deftypefunk reflective_layer get semantic_plans []
  [get semantic_plan_phenomenal_name_frame values]]

[deftypefunk reflective_layer execute lookup_semantic_plan_name_pattern_match_pairs [name_expression]
  [let [[semantic_plan_match_pairs nil]]
    [mapc [funk [semantic_plan]
		[= semantic_plan_match_pairs [append [get nonsemantic_plan name_pattern_match_pairs name_expression]
						     semantic_plan_match_pairs]]]
	  [get this semantic_plans]]
    semantic_plan_match_pairs]]

[deftypefunk reflective_layer execute create_reflective_action [layer_name agency_name resource_name :rest resource_arguments]
  [let [[action [new deliberative_action 
		     [get this mind]
		     layer_name
		     agency_name
		     resource_name
		     resource_arguments]]]
    [have this add_reflective_action action]]]

[deftypefunk reflective_layer execute create_semantic_plan [name_expression name_patterns variable_definitions expression]
  [let [[plan [new nonsemantic_plan 
		   [get this mental_layer]
		   name_expression
		   name_patterns
		   variable_definitions
		   expression]]]
    [have plan syntax_check]
    [let [[semantic_plan_object [get plan semantic_plan_object]]]
      [set semantic_plan_object plan_object_type `reflective]
      [have this add_semantic_plan semantic_plan_object]]]]



[deftypefunk reflective_layer get physical_semantic_action [phenomenal_name]
  [get [get this agency `reflective_event_knowledge] physical_semantic_action phenomenal_name]]

[deftypefunk reflective_layer get deliberative1_semantic_action [phenomenal_name]
  [get [get this agency `reflective_event_knowledge] deliberative1_semantic_action phenomenal_name]]


[deftypefunk reflective_layer get deliberative1_type_knowledge_reflective_timer []
  [get [get this agency `plan_object_type_goal] deliberative1_type_knowledge_reflective_timer]]

[deftypefunk reflective_layer execute create_deliberative1_type_relationship_goal [source_deliberative1_object_type key_type key target_deliberative1_object_type]
  [have [get this agency `plan_object_type_goal] create_deliberative1_type_relationship_goal source_deliberative1_object_type key_type key target_deliberative1_object_type]]

[deftypefunk reflective_layer execute create_deliberative1_type_property_relationship_goal [source_type
											    source_key_type
											    source_key
											    source_value
											    key_type
											    key
											    target_type
											    target_key_type
											    target_key
											    target_value]
  [have [get this agency `plan_object_type_goal] create_deliberative1_type_property_relationship_goal
	source_type
	source_key_type
	source_key
	source_value
	key_type
	key
	target_type
	target_key_type
	target_key
	target_value]]


[deftypefunk reflective_layer execute check_exists [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]
	[remember_token                    [new remember_token [new semantic_time [time]]]]]
    [terminal_format standard-terminal '\nreflective_layer-check_exists: checking if partial state exists: ' looking_for_event-phenomenal_name '.']
    [terminal_format standard-terminal '\nreflective_layer-check_exists: adding remember token.']
    [have this add_remember_token remember_token]
    [terminal_format standard-terminal '\nreflective_layer-check_exists: done adding remember token.']
    [let [[current_time [time]]]
      [terminal_format standard-terminal '\nreflective_layer-check_exists: waiting until ' [get current_time as-string] ' represented.']
      [have this wait_until_time_represented [new semantic_time current_time]]]
    [let [[found nil]]
      [let [[current_events [get [get [get this mind] semantic_knowledge_base `deliberative1_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\nreflective_layer-check_exists: current_event, ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\nreflective_layer-check_exists: found relationship!']
			      [= found t]]]]
	      current_events]]
      [if [not found]
	  [terminal_format standard-terminal '\nreflective_layer-check_exists: did not find relationship.']
	[terminal_format standard-terminal '\nreflective_layer-check_exists: found relationship!']]
      [terminal_format standard-terminal '\nreflective_layer-check_exists: removing remember token.']
      [have this remove_remember_token remember_token]
      [terminal_format standard-terminal '\nreflective_layer-check_exists: done removing remember token.']
      found]]]

[deftypefunk reflective_layer execute imagine_check_exists [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nreflective_layer-imagine_check_exists: imagining checking if partial state exists: ' looking_for_event-phenomenal_name '.']
    [let [[semantic_planner [get [get [get this mind] agency `reflective `plan] semantic_planner]]]
      [let [[found        nil]
	    [imagine_time [get semantic_planner imagine_time]]]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `deliberative1_type_counterfactual_knowledge] events_containing_time imagine_time]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nreflective_layer-imagine_check_exists: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nreflective_layer-imagine_check_exists: found relationship!']
				[= found t]]]]
		current_events]]
	[if [not found]
	    [terminal_format standard-terminal '\nreflective_layer-imagine_check_exists: did not find relationship.']
	  [terminal_format standard-terminal '\nreflective_layer-imagine_check_exists: found relationship!']]
	found]]]]


[deftypefunk reflective_layer execute wait_for [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nwaiting for relationship: looking for event, ' looking_for_event-phenomenal_name '.']
    [let [[done nil]]
      [while [not done]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `deliberative1_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nwaiting for relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nwait_for_deliberative1_relationship: done waiting!']
				[= done t]]]]
		current_events]]
	[if [not done]
	    [let [[end_of_physical_type_changes_trigger [get [get [get this mind] resource `deliberative `physical_object_type_goal `translate_physical_knowledge_to_physical_type_knowledge] end_of_physical_type_changes_trigger]]]
	      [wait-for-trigger end_of_physical_type_changes_trigger]]]]]]]

[deftypefunk reflective_layer execute assert [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nassuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[found nil]]
      [let [[current_events [get [get [get this mind] semantic_knowledge_base `deliberative1_type_knowledge] events_containing_time [new semantic_time [time]]]]]
	[mapc [funk [current_event]
		    `[terminal_format standard-terminal '\nassuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		    [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			[prog [terminal_format standard-terminal '\nassure_deliberative1_relationship: found relationship!']
			      [= found t]]]]
	      current_events]]
      [if [not found]
	  [prog [terminal_format standard-terminal '\nassure_deliberative1_relationship: did not find relationship.']
		[error bug_name    `assertion-failed
		       description `[assert ,semantic_partial_state]]]
	nil]]]]

[deftypefunk reflective_layer execute imagine_asserting [semantic_partial_state]
  [let [[looking_for_event-phenomenal_name [get semantic_partial_state phenomenal_name]]]
    [terminal_format standard-terminal '\nimagining assuring relationship exists: ' looking_for_event-phenomenal_name '.']
    [let [[semantic_planner [get [get [get this mind] agency `reflective `plan] semantic_planner]]]
      [let [[found        nil]
	    [imagine_time [get semantic_planner imagine_time]]]
	[let [[current_events [get [get [get this mind] semantic_knowledge_base `deliberative1_type_counterfactual_knowledge] events_containing_time imagine_time]]]
	  [mapc [funk [current_event]
		      `[terminal_format standard-terminal '\nimagine assuring relationship: current_event, ' [get current_event phenomenal_name] '.']
		      [if [eq looking_for_event-phenomenal_name [get current_event phenomenal_name]]
			  [prog [terminal_format standard-terminal '\nimagine_assuring_deliberative1_relationship: found relationship!']
				[= found t]]]]
		current_events]]
	[if [not found]
	    [prog [terminal_format standard-terminal '\nimagine_assuring_deliberative1_relationship: did not find relationship.']
		  [error bug_name    `assertion-failed
			 description `[imagine_asserting ,semantic_partial_state]]]
	  nil]]]]]

[deftypefunk reflective_layer execute evaluate_plan_expression [expression]
  [let* [[name_expression      'evaluate unnamed plan expression']
	 [name_patterns        nil]
	 [argument_definitions nil]
	 [plan                 [new nonsemantic_plan [get this mental_layer]
				    name_expression
				    name_patterns
				    argument_definitions
				    expression]]]
    [have plan syntax_check]
    [let [[semantic_planner     [get [get [get this mind] agency `reflective `plan] semantic_planner]]
	  [semantic_plan_object [get plan semantic_plan_object]]]
      [set semantic_plan_object plan_object_type `physical]
      [let [[variable_frame [new frame]]]
	[have plan execute_as_thought_in_semantic_planner semantic_planner variable_frame]]]]]


