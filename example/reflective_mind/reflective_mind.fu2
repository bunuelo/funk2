'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe reflective_mind [traced_mind] []
  [new []
       [terminal_format standard-terminal '\nreflective_mind: creating new mind.']
       [construct traced_mind]
       
       [type-have reflective_mind this create_resources]
       [type-have reflective_mind this create_knowledge]
       [type-have reflective_mind this connect_knowledge_reflection]
       [type-have reflective_mind this create_builtin_actions]
       
       ]]

[deftypefunk reflective_mind execute create_resources []
  [terminal_format standard-terminal '\nreflective_mind: creating resources.']
  [parog [have this add_layer [new builtin_reactive_layer]]
	 [have this add_layer [new learned_reactive_layer]]
	 [have this add_layer [new deliberative_layer]]
	 [have this add_layer [new reflective_layer]]]]

[deftypefunk reflective_mind execute create_knowledge []
  [terminal_format standard-terminal '\nreflective_mind: creating knowledge.']
  [have [get this layer `builtin_reactive] create_knowledge]
  [have [get this layer `learned_reactive] create_knowledge]
  [have [get this layer `deliberative]     create_knowledge]
  [have [get this layer `reflective]       create_knowledge]]

[deftypefunk reflective_mind execute connect_knowledge_reflection []
  [terminal_format standard-terminal '\nreflective_mind: connecting knowledge reflection.']
  [have [get this layer `builtin_reactive] connect_knowledge_reflection]
  [have [get this layer `learned_reactive] connect_knowledge_reflection]
  [have [get this layer `deliberative]     connect_knowledge_reflection]
  [have [get this layer `reflective]       connect_knowledge_reflection]
  [terminal_format standard-terminal '\nreflective_mind: connecting all cause group interactions.']
  [have this connect_all_cause_group_interactions]]

[deftypefunk reflective_mind execute create_builtin_actions []
  [terminal_format standard-terminal '\nreflective_mind: creating built-in actions.']
  [have [get this layer `deliberative] create_builtin_actions]
  [have [get this layer `reflective]   create_builtin_actions]]


'general actions'

[deftypefunk reflective_mind execute imagine_waiting_to_call [layer_name agency_name resource_name :rest args]
  [let [[resource [get this resource layer_name agency_name resource_name]]]
    [have-apply resource imagine_waiting_to_call args]]]



'physical'

[deftypefunk reflective_mind get physical_type_knowledge_reflective_timer []
  [get [get this layer `deliberative] physical_type_knowledge_reflective_timer]]

[deftypefunk reflective_mind execute create_physical_action [layer_name agency_name resource_name :rest resource_arguments]
  [have-apply [get this layer `learned_reactive] create_action `[,layer_name ,agency_name ,resource_name @resource_arguments]]]

[deftypefunk reflective_mind get physical_actions []
  [get [get this layer `learned_reactive] actions]]

[deftypefunk reflective_mind execute create_deliberative_semantic_plan [name_expression name_patterns variable_definitions expression]
  [have [get this layer `deliberative] create_semantic_plan name_expression name_patterns variable_definitions expression]]

[deftypefunk reflective_mind get deliberative_semantic_plans []
  [get [get this layer `deliberative] semantic_plans]]


[deftypefunk reflective_mind execute create_deliberative_action [layer_name agency_name resource_name :rest resource_arguments]
  [have-apply [get this layer `deliberative] create_action `[,layer_name ,agency_name ,resource_name @resource_arguments]]]

[deftypefunk reflective_mind get deliberative_actions []
  [get [get this layer `deliberative] actions]]

[deftypefunk reflective_mind get deliberative_plan_semantic_plans []
  [get [get this layer `deliberative] plan_semantic_plans]]


`[deftypefunk reflective_mind execute add_resource_change_property_hypothesis [layer_name agency_name resource_name
											  change_type
											  source_type source_property source_property_value property property_value]
   [have [get this resource layer_name agency_name resource_name] add_change_property_hypothesis change_type source_type source_property source_property_value property property_value]]

[deftypefunk reflective_mind execute add_resource_change_relationship_hypothesis [layer_name agency_name resource_name
										  change_type
										  source_type source_property source_property_value key_type key target_type target_property target_property_value]
  [have [get this resource layer_name agency_name resource_name] add_change_relationship_hypothesis change_type source_type source_property source_property_value key_type key target_type target_property target_property_value]]




'deliberative1'

[deftypefunk reflective_mind get deliberative1_type_knowledge_reflective_timer []
  [get [get this layer `reflective] object_type_knowledge_reflective_timer]]


[deftypefunk reflective_mind execute create_reflective_action [layer_name agency_name resource_name :rest resource_arguments]
  [have-apply [get this layer `reflective] create_action `[,layer_name ,agency_name ,resource_name @resource_arguments]]]

[deftypefunk reflective_mind get reflective_actions []
  [get [get this layer `reflective] actions]]

[deftypefunk reflective_mind get reflective_plan_semantic_plans []
  [get [get this layer `reflective] plan_semantic_plans]]


'deliberative'

[deftypefunk reflective_mind execute evaluate_deliberative_plan_expression [expression]
  [have [get this layer `deliberative] evaluate_plan_expression expression]]

[deftypefunk reflective_mind execute imagine_deliberative_plan_expression [expression]
  [have [get this layer `deliberative] imagine_plan_expression expression]]


'reflective'

[deftypefunk reflective_mind execute evaluate_reflective_plan_expression [expression]
  [have [get this layer `reflective] evaluate_plan_expression expression]]

[deftypefunk reflective_mind execute imagine_reflective_plan_expression [expression]
  [have [get this layer `reflective] imagine_plan_expression expression]]


'pre-knowledge perception functions'

[deftypefunk reflective_mind get perception []
  [get [get this layer `builtin_reactive] perception]]


[deftypefunk reflective_mind execute check_physical_partial_state_exists [semantic_partial_state]
  [have [get this mental_layer `learned_reactive] check_exists semantic_partial_state]]

[deftypefunk reflective_mind execute wait_for_physical_partial_state_to_exist [semantic_partial_state]
  [have [get this mental_layer `learned_reactive] wait_for_partial_state_to_exist semantic_partial_state]]

[deftypefunk reflective_mind execute wait_for_physical_knowledge_step [wait_for_step]
  [have [get this mental_layer `learned_reactive] wait_for_physical_knowledge_step wait_for_step]]

