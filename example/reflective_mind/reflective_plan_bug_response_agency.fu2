'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'reflective_plan_bug_response_agency'

[deframe reflective_plan_bug_response_agency [agency] []
  [new []
       [construct agency `plan_bug_response]
       
       [have this add_resource [new initial_plan_bug_response_resource]]
       [have this add_resource [new assign_plan_execution_failure_blame_resource]]
       [have this add_resource [new expected_precondition_does_not_exist_response_resource]]
       [have this add_resource [new expectation_failure_response_resource]]
       [have this add_resource [new unknown_bug_name_response_resource]]
       
       nil]]


[deftypefunk reflective_plan_bug_response_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new semantic_resource_event_knowledge_base `reflective_event_knowledge [get [get this mind] semantic_realm]]]
  ]

[deftypefunk reflective_plan_bug_response_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `reflective_knowledge `reflective_knowledge->reflective_event_knowledge]
  ]


'initial_plan_bug_response_resource'

[deframe initial_plan_bug_response_resource [reflective_resource] []
  [new []
       [construct reflective_resource `initial_plan_bug_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal
					 '\nreflective_layer: initial plan bug response here.'
					 '\n                  buggy plan = "' [get [get semantic_plan nonsemantic_plan] as-string] '."'
					 '\n                         bug = "' [get bug as-string] '."']
			[let [[bug_name [have [get bug frame] lookup `bug_name]]]
			  [cond [[eq bug_name `assure_physical_relationship-failed]  [have [get this mind] wait_to_call `reflective `plan_bug_response `expectation_failure_response                  semantic_plan bug]]
				[[eq bug_name `expected_precondition_does_not_exist] [have [get this mind] wait_to_call `reflective `plan_bug_response `expected_precondition_does_not_exist_response semantic_plan bug]]
				[t                                                   [have [get this mind] wait_to_call `reflective `plan_bug_response `unknown_bug_name_response                     semantic_plan bug]]]]]]
       nil]]


'assign_plan_execution_failure_blame_resource'

[deframe assign_plan_execution_failure_blame_resource [reflective_resource] []
  [new []
       [construct reflective_resource `assign_plan_execution_failure_blame
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal '\nreflective_layer: assigning plan execution failure blame here.']
			[let [[hypotheses [let [[hypothesis_set [semantic-lookup_set semantic_plan hypothesis]]]
					    [if hypothesis_set
						[get hypothesis_set elements]
					      nil]]]]
			  [if [null hypotheses]
			      [prog [terminal_format standard-terminal '\nreflective_layer: no hypothesis assumptions to blame.']
				    ]
			    [prog [terminal_format standard-terminal '\nreflective_layer: assigning failure blame to hypothesis assumptions.']
				  [mapc [funk [semantic_hypothesis]
					      [terminal_format standard-terminal '\nreflective_layer: assigning failure blame to hypothesis assumptions.']
					      
					      ]
					hypotheses]]]
			  ]]]
       nil]]


'expected_precondition_does_not_exist_response_resource'

[deframe expected_precondition_does_not_exist_response_resource [reflective_resource] []
  [new []
       [construct reflective_resource `expected_precondition_does_not_exist_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal '\nreflective_layer: expected precondition does not exist response here.']
			[have [get this mind] wait_to_call `reflective `plan_bug_response `assign_plan_execution_failure_blame semantic_plan bug]
			]]
       nil]]


'expectation_failure_response_resource'

[deframe expectation_failure_response_resource [reflective_resource] []
  [new []
       [construct reflective_resource `expectation_failure_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal '\nreflective_layer: responding to expectation failure bug in plan.']
			[let [[semantic_expectation_failure [new semantic_expectation_failure [get [get this mind] semantic_realm]]]]
			  [have [get [get this mind] semantic_knowledge_base `deliberative1_knowledge] add_semantic_frame semantic_expectation_failure]
			  
			  [semantic-add semantic_plan failure semantic_expectation_failure]
			  
			  [let [[arguments `[|focus on a plan, plan 6|]]]
			    [let [[action [have [get [get this mind] layer `reflective] lookup_reflective_action arguments]]]
			      [if [null action]
				  [terminal_format standard-terminal '\nexpectation_failure plan error: "' [conslist-as-english_string arguments] '" action not defined.']
				[prog [terminal_format standard-terminal '\nexpectation_failure plan waiting to call: "' [get action as-string] '."']
				      [have action wait_to_call]
				      ]]]]
			  
			  [let [[arguments `[|execute plan in focus|]]]
			    [let [[action [have [get [get this mind] layer `reflective] lookup_reflective_action arguments]]]
			      [if [null action]
				  [terminal_format standard-terminal '\nexpectation_failure plan error: "' [conslist-as-english_string arguments] '" action not defined.']
				[prog [terminal_format standard-terminal '\nexpectation_failure plan waiting to call: "' [get action as-string] '."']
				      [have action wait_to_call]
				      ]]]]
			  
			  `[have [get this mind] wait_to_call `reflective `execution `execute_plan ]
			  ]]]
       nil]]


'unknown_bug_name_response_resource'

[deframe unknown_bug_name_response_resource [reflective_resource] []
  [new []
       [construct reflective_resource `unknown_bug_name_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal
					 '\nreflective_layer: unknown bug name response here.'
					 '\n                  buggy plan = "' [get [get semantic_plan nonsemantic_plan] as-string] '."'
					 '\n                         bug = "' [get bug as-string] '."']
			[have bug pretty_print]
			]]
       nil]]

