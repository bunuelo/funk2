'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'



'reflective_plan_bug_response_agency'

[deframe reflective_plan_bug_response_agency [agency] []
  [new []
       [construct agency `plan_bug_response]
       
       [have this add_resource [new initial_plan_bug_response_resource]]
       [have this add_resource [new expected_precondition_does_not_exist_response_resource]]
       [have this add_resource [new unknown_bug_name_response_resource]]
       
       nil]]


[deftypefunk reflective_plan_bug_response_agency execute create_knowledge []
  [have [get this mind] add_semantic_knowledge_base [new semantic_resource_event_knowledge_base `reflective_event_knowledge [get [get this mind] semantic_realm]]]
  ]

[deftypefunk reflective_plan_bug_response_agency execute connect_knowledge_reflection []
  [have [get this mind] create_knowledge_event_stream_iterator `reflective_knowledge `reflective_knowledge->reflective_event_knowledge]
  ]


'initial_plan_bug_response_resource'

[deframe initial_plan_bug_response_resource [traced_resource] []
  [new []
       [construct traced_resource `initial_plan_bug_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal
					 '\nreflective_layer: initial plan bug response here.'
					 '\n                  buggy plan = "' [get [get semantic_plan deliberative_plan] as-string] '."'
					 '\n                         bug = "' [get bug as-string] '."']
			[let [[bug_name [have [get bug frame] lookup `bug_name]]]
			  [cond [[eq `expected_precondition_does_not_exist bug_name] [have [get this mind] wait_to_call `reflective `plan_bug_response `expected_precondition_does_not_exist_response semantic_plan bug]]
				[t                                                   [have [get this mind] wait_to_call `reflective `plan_bug_response `unknown_bug_name_response                     semantic_plan bug]]]]]]
       nil]]


'expected_precondition_does_not_exist_response_resource'

[deframe expected_precondition_does_not_exist_response_resource [traced_resource] []
  [new []
       [construct traced_resource `expected_precondition_does_not_exist_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal
					 '\nreflective_layer: expected precondition does not exist response here.'
					 '\n                  buggy plan = "' [get [get semantic_plan deliberative_plan] as-string] '."'
					 '\n                         bug = "' [get bug as-string] '."']
			]]
       nil]]


'unknown_bug_name_response_resource'

[deframe unknown_bug_name_response_resource [traced_resource] []
  [new []
       [construct traced_resource `unknown_bug_name_response
		  [funk [semantic_plan bug]
			[terminal_format standard-terminal
					 '\nreflective_layer: unknown bug name response here.'
					 '\n                  buggy plan = "' [get [get semantic_plan deliberative_plan] as-string] '."'
					 '\n                         bug = "' [get bug as-string] '."']
			]]
       nil]]

