'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'reflective_timer'

[deframe reflective_timer [frame] [[current_time-conditionlock [new conditionlock]]
				   internal-current_time]
  [new [initial-current_time]
       [= internal-current_time initial-current_time]]]

[deftypefunk reflective_timer get current_time []
  [have current_time-conditionlock lock]
  [let [[result internal-current_time]]
    [have current_time-conditionlock unlock]
    result]]

[deftypefunk reflective_timer set current_time [new-current_time]
  [assert-type semantic_time new-current_time]
  [have current_time-conditionlock lock]
  [if [< new-current_time internal-current_time]
      [prog [have current_time-conditionlock unlock]
	    [error funk_name `reflective_timer-set-current_time
		   bug_name  `new-current_time-is-less_than-current_time]]]
  [if [not [== internal-current_time new-current_time]]
      [prog [= internal-current_time new-current_time]
	    [have current_time-conditionlock signal]]]
  [have current_time-conditionlock unlock]]

[deftypefunk reflective_timer execute wait_until [wait_time]
  [assert-type semantic_time wait_time]
  [have current_time-conditionlock lock]
  [while [< internal-current_time wait_time]
    [have current_time-conditionlock wait]]
  [have current_time-conditionlock unlock]]

[deftypefunk reflective_timer execute wait_until_after [wait_time]
  [assert-type semantic_time wait_time]
  [have current_time-conditionlock lock]
  [while [<= internal-current_time wait_time]
    [have current_time-conditionlock wait]]
  [have current_time-conditionlock unlock]]

