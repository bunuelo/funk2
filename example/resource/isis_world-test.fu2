'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe          isis_world_body [frame] [name world]]
[deftypeconstruct isis_world_body [name]
  [set this name  name]
  [set this world nil]
  this]



[deframe          isis_agent [frame] [name mind body]]
[deftypeconstruct isis_agent [name]
  [let [[mind [new mind]]
	[body [new isis_world_body name]]]
    [set this name name]
    [set this mind mind]
    [set this body body]
    
    'All isis_agents inherit these basic features.'
    
    [mind-create_layer mind reactive]
    [mind-create_layer mind deliberative]
    [mind-create_layer mind reflective]
    [mind-create_layer mind self_reflective]
    [mind-create_layer mind self_conscious]
    
    [mind-create_agency mind reactive        sensory]
    [mind-create_agency mind reactive        physical]
    [mind-create_agency mind deliberative    physical]
    [mind-create_agency mind reflective      physical]
    [mind-create_agency mind self_reflective physical]
    [mind-create_agency mind self_conscious  imprimer_learning]
    
    [mind-create_resource mind reactive sensory sense_imprimer_scold [imprimer]
			  [if [get [get imprimer speech] is-scold]
			      [prog [have this think_to_self 'Uh oh, my imprimer, ' [get imprimer name] ', said something that sounds like a scold!']
				    [let [[imprimer_focus [mind-call reactive sensory discover_person_focus imprimer]]]
				      [mind-activate mind self_conscious imprimer_learning react_to_imprimer_scold
						     imprimer imprimer_focus]]]
			    [have this think_to_self 'My imprimer, ' [get imprimer name] ', is not scolding me.']]
			  ]
    
    [mind-create_resource mind self_conscious imprimer_learning react_to_imprimer_scold [imprimer scold]
			  [have this think_to_self 'Uh oh, my imprimer, ' [get imprimer name] ', has scolded something about ' [get scold focus] '!  How should I react?']
			  ]
    
    ]
  this]

[deftypefunk isis_agent get world []
  [get [get this body] world]]

[deftypefunk isis_agent set world [world]
  [set [get this body] world world]]

[deftypefunk isis_agent execute think_to_self [:rest expressions]
  [format stdout '\nAgent ' [get this name] ' Thinks: ']
  [apply &format `[,stdout @expressions]]]

[deframe          isis_world [frame] [client agent_frame]]
[deftypeconstruct isis_world [client]
  [set this client      client]
  [set this agent_frame [frame]]
  this]

[deftypefunk isis_world execute add_agent [agent]
  [if [get agent world]
      [error bug_type isis_agent_is_already_in_a_world agent agent]
    [prog [set agent world this]
	  [have [get this agent_frame] add [get agent name] agent]]]]

[deftypefunk isis_world get agent_names []
  [get [get this agent_frame] slots]]

[deftypefunk isis_world get agent_mind [agent_name]
  [get [have [get this agent_frame] lookup agent_name] mind]]


[defunk ralph_agent-new []
  [let [[this [new isis_agent `Ralph]]]
    
    this]]

[defunk lauren_agent-new []
  [new isis_agent `Lauren]]

[defunk david_agent-new []
  [new isis_agent `David]]

[defunk isis_world-initialize []
  [let [[client [new isis_world_client '18.85.58.18']]]
    [let [[isis_world [new isis_world client]]]
      [have isis_world add_agent [ralph_agent-new]]
      [have isis_world add_agent [lauren_agent-new]]
      [have isis_world add_agent [david_agent-new]]
      
      [globalize isis_world isis_world]
      
      [format stdout '\nA new ' `isis_world ' object has been created in the global ' `isis_world ' variable!']
      
      'success']]]

