'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'propogator_cell_value'

[deframe          propogator_cell_value [frame] [value time cause]]
[deftypeconstruct propogator_cell_value [value time]
  [set this value value]
  [set this time  time]
  this]

'propogator_cell'

[deframe          propogator_cell [frame] [name cell_value]]
[deftypeconstruct propogator_cell [name cell_value]
  [set this name       name]
  [set this cell_value cell_value]
  this]

[deftypefunk propogator_cell get time []
  [let [[cell_value [get this cell_value]]]
    [if [null cell_value]
	nil
      [get cell_value time]]]]

[deftypefunk propogator_cell get value []
  [let [[cell_value [get this cell_value]]]
    [if [null cell_value]
	nil
      [get cell_value value]]]]

[deftypefunk propogator_cell set value [value]
  [let [[cell_value [new propogator_cell_value value [time]]]]
    [let [[this-value [get this value]]]
      [if [and this-value
	       [eq this-value value]]
	  nil
	[if [and this-value
		 [!= this-value value]]
	    [set this value [error bug_type `propogator_cell_encountered_contradiction old_value this-value new_value value]]
	  [prog [set this cell_value cell_value]
		t]]]]]]

'propogator_constraint'

[deframe          propogator_constraint [frame] [name output-cell input-cells funk]]
[deftypeconstruct propogator_constraint [name output-cell input-cells funk]
  [set this name        name]
  [set this output-cell output-cell]
  [set this input-cells input-cells]
  [set this funk        funk]
  this]

[deftypefunk propogator_constraint execute apply []
  [let [[output-cell [get this output-cell]]
	[input-cells [get this input-cells]]]
    [let [[output_needs_update nil]
	  [input_not_ready     nil]]
      [let [[output-cell-time [get output-cell time]]]
	[if [null output-cell-time]
	    [= output_needs_update t]]
	[mapc [funk [input-cell]
		    [let [[input-cell-time [get input-cell time]]]
		      [if [null input-cell-time]
			  [= input_not_ready t]
			[if [and output-cell-time [> input-cell-time output-cell-time]]
			    [= output_needs_update t]]]]]
	      input-cells]]
      [if [and output_needs_update [not input_not_ready]]
	  [let [[output_value [apply [get this funk] [mapcar [funk [input-cell]
								   [get input-cell value]]
							     input-cells]]]]
	    [set output-cell value output_value]]
	nil]]]]


'propogator_graph'

[deframe          propogator_graph [frame] [cell_set constraint_set cell_name_hash]]
[deftypeconstruct propogator_graph []
  [set this cell_set       [new set]]
  [set this constraint_set [new set]]
  [set this cell_name_hash [new ptypehash]]
  this]

[deftypefunk propogator_graph execute add_cell [cell]
  [let [[cell_set [get this cell_set]]]
    [if [get cell_set contains cell]
	nil
      [prog [have cell_set add cell]
	    [have [get this cell_name_hash] add [get cell name] cell]
	    t]]]]

[deftypefunk propogator_graph get cell [name]
  [have [get this cell_name_hash] lookup name]]

[deftypefunk propogator_graph execute add_new_cell [name value]
  [have this add_cell [new propogator_cell name value]]]

[deftypefunk propogator_graph execute add_constraint [constraint]
  [if [get [get this constraint_set] contains constraint]
      nil
    [let [[output-cell [get constraint output-cell]]
	  [input-cells [get constraint input-cells]]]
      [have this add_cell output-cell]
      [mapc [funk [input-cell]
		  [have this add_cell input-cell]]
	    input-cells]
      [have [get this constraint_set] add constraint]]]]

[deftypefunk propogator_graph set cell_value [cell_name value]
  [set [get this cell cell_name] value value]]


[deframe          propogator_resource [frame] [resource graph]]
[deftypeconstruct propogator_resource [name]
  [set this graph    [new propogator_graph]]
  [set this resource [new resource name [funk []
					      [print 'propogator_resource here!']
					      [let [[constraint_set [get [get this graph] constraint_set]]
						    [done           nil]]
						[while [not done]
						  [print 'propogator_resource looping...']
						  [= done t]
						  [mapc [funk [constraint]
							      [format stdout '\napplying constraint ' [get constraint name] '.']
							      [if [have constraint apply]
								  [= done nil]]]
							[get constraint_set elements]]]
						nil]]]]
  this]

[deftypefunk propogator_resource execute call []
  [have [get this resource] call]]

[deftypefunk propogator_resource get cell [name]
  [get [get this graph] cell name]]

[deftypefunk propogator_resource set cell [name value]
  [set [get this cell name] value value]
  [have this call]]

[deftypefunk propogator_resource get cell [name]
  [get [get this cell name] value]]

[deftypefunk propogator_resource set cell_value [cell_name value]
  [set [get this graph] cell_value cell_name value]]

[deftypefunk propogator_resource execute add_cell [cell]
  [have [get this graph] add_cell cell]]

[deftypefunk propogator_resource execute add_new_cell [name value]
  [have [get this graph] add_new_cell name value]]

[defunk propogator-test []
  [let [[p [new propogator_resource `Newtonian-Physics]]]
    [let [[F-cell [new propogator_cell `F nil]]
	  [m-cell [new propogator_cell `m nil]]
	  [a-cell [new propogator_cell `a nil]]]
      [let [[F=ma  [new propogator_constraint `F=ma  F-cell [list m-cell a-cell] [funk [m a] [* m a]]]]
	    [m=F/a [new propogator_constraint `m=F/a m-cell [list F-cell a-cell] [funk [F a] [/ F a]]]]
	    [a=F/m [new propogator_constraint `a=F/m a-cell [list F-cell m-cell] [funk [F m] [/ F m]]]]]
	[have [get p graph] add_constraint F=ma]
	[have [get p graph] add_constraint m=F/a]
	[have [get p graph] add_constraint a=F/m]
	[have p call]
	p]]]]


