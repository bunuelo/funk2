'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'resource'

[deframe          resource [frame] [name fiber active_mutex active active_funk active_args result finished done]]
[deftypeconstruct resource [name active_funk]
  [set this name         name]
  [set this active_funk  active_funk]
  [set this active_mutex [new mutex]]
  [set this fiber        [fiber [funk []
				      [let [[active_mutex [get this active_mutex]]
					    [done         nil]]
					[while [not done]
					  [let [[active nil]]
					    [have active_mutex lock]
					    [= active [get this active]]
					    [have active_mutex unlock]
					    [if active
						[prog [let [[active_funk nil]]
							[have active_mutex lock]
							[= active_funk [get this active_funk]]
							[have active_mutex unlock]
							[if active_funk
							    [let [[active_args nil]]
							      [have active_mutex lock]
							      [= active_args [get this active_args]]
							      [have active_mutex unlock]
							      [let [[result [apply active_funk active_args]]]
								[have active_mutex lock]
								[set this result result]
								[have active_mutex unlock]]]
							  [format stdout '\nresource warning: active_funk is nil (name = ' [get this name] ').\n']]]
						      [have active_mutex lock]
						      [set this active   nil]
						      [set this finished t]
						      [have active_mutex unlock]]
					      [millisleep 100]]]
					  [have active_mutex lock]
					  [= done [get this done]]
					  [have active_mutex unlock]
					  ]
					[format stdout '\nresource status: done.  (name = ' [get this name] ').\n']]]
				nil]]
  this]

[defmetro resource [name args :rest body]
  `[let [[this [new resource [quote ,name] nil]]]
     [set this active_funk [funk ,args @body]]
     this]]

[deftypefunk resource execute activate [:rest args]
  [let [[successful_activation nil]
	[active_mutex          [get this active_mutex]]]
    [prog [have active_mutex lock]
	  [if [not [get this active]]
	      [prog [set this active           t]
		    [set this active_args      args]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	nil
      [error object_type `resource object_typefunk `activate error_type `resource-is-already-activated]]]]

[deftypefunk resource execute finish []
  [let [[finished     nil]
	[result       nil]
	[active_mutex [get this active_mutex]]]
    [while [not finished]
      [have active_mutex lock]
      [= finished [get this finished]]
      [have active_mutex unlock]
      [if finished
	  [prog [have active_mutex lock]
		[=   result           [get this result]]
		[set this active      nil]
		[set this active_args nil]
		[set this result      nil]
		[set this finished    nil]
		[have active_mutex unlock]]
	[millisleep 100]]]
    result]]

[deftypefunk resource execute call [:rest args]
  [have-apply this activate args]
  [have this finish]]


'agency'

[deframe          agency [frame] [resources_frame trace_graph]]
[deftypeconstruct agency []
  [set this resources_frame [frame]]
  [set this trace_graph     [new graph]]
  this]

[deftypefunk agency get resource [name]
  [let [[resources_frame [get this resources_frame]]]
    [have resources_frame lookup name]]]

[deftypefunk agency execute call [name :rest args]
  [let [[resource [get this resource name]]]
    [have-apply resource call `[,cause-outside_resource @args]]]]

[defmetro defresource [agent agency_name name args :rest body]
  [print `[defresource ,agency_name ,name ,args]]
  `[let [[agent ,agent]]
     [let [[agency [get agent agency [quote ,agency_name]]]]
       [let [[resources_frame [get agency resources_frame]]
	     [trace_graph     [get agency trace_graph]]]
	 [define-funk the-resource [metro [name]
					  `[have resources_frame lookup [quote ,name]]]]
	 [define-funk call [metro [name :rest args]
				  `[let [[resource [get agency resource [quote ,name]]]]
				     [have-apply resource call `[,this ,resource @args]]]]]
	 [let [[resource [resource ,name [caller @args]
				    [let [[caller-name [get caller name]]
					  [this-name   [get this   name]]]
				      [have trace_graph add_edge `called caller-name this-name]
				      @body]]]]
	   [have resources_frame add [quote ,name] resource]
	   nil]]]]]


'agent'

[deframe          agent [frame] [agencies_frame]]
[deftypeconstruct agent []
  [set this agencies_frame [frame]]
  this]

[deftypefunk agent get agency [name]
  [have [get this agencies_frame] lookup name]]

[defmetro defagency [agent name]
  `[have [get ,agent agencies_frame] add [quote ,name] [new agency]]]


'blockman'

[deframe          blockman [frame] [agent]]
[deftypeconstruct blockman []
  [let [[agent [new agent]]]
    [set this agent agent]
    [defagency   agent physical]
    [defresource agent physical turn_right []
      [format stdout '\n  turn_right']]
    [defresource agent physical turn_left []
      [format stdout '\n  turn_left']]
    [defresource agent physical move_forward []
      [format stdout '\n  move_forward']]
    [defresource agent physical move_backward []
      [format stdout '\n  move_backward']]
    [defresource agent physical move_to [position]
      [format stdout '\n  move_to ' position]]
    ]
  this]


[defunk test-blockman []
  [let [[b [new blockman]]]
    b]]

