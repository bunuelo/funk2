'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe          resource [frame] [name fiber active_mutex active active_funk active_args result finished done]]
[deftypeconstruct resource [name active_funk]
  [set this name         name]
  [set this active_funk  active_funk]
  [set this active_mutex [new mutex]]
  [set this fiber        [fiber [funk []
				      [let [[active_mutex [get this active_mutex]]
					    [done         nil]]
					[print 'fiber 0']
					[while [not done]
					  [print 'fiber 1']
					  [let [[active nil]]
					    [print 'fiber 2']
					    [have active_mutex lock]
					    [print 'fiber 3']
					    [= active [get this active]]
					    [print 'fiber 4']
					    [have active_mutex unlock]
					    [print 'fiber 5']
					    [if active
						[prog [let [[active_funk nil]]
							[print 'fiber 6']
							[have active_mutex lock]
							[print 'fiber 7']
							[= active_funk [get this active_funk]]
							[print 'fiber 8']
							[have active_mutex unlock]
							[print 'fiber 9']
							[if active_funk
							    [let [[active_args nil]]
							      [print 'fiber 10']
							      [have active_mutex lock]
							      [print 'fiber 11']
							      [= active_args [get this active_args]]
							      [print 'fiber 12']
							      [have active_mutex unlock]
							      [print 'fiber 13']
							      [print `[apply ,active_funk ,active_args]]
							      [let [[result [apply active_funk active_args]]]
								[print 'fiber 14']
								[have active_mutex lock]
								[print 'fiber 15']
								[set this result result]
								[print 'fiber 16']
								[have active_mutex unlock]]]
							  [format stdout '\nresource warning: active_funk is nil (name = ' [get this name] ').\n']]]
						      [print 'fiber 17']
						      [have active_mutex lock]
						      [print 'fiber 18']
						      [set this finished t]
						      [print 'fiber 19']
						      [have active_mutex unlock]]
					      [millisleep 100]]]
					  [print 'fiber 20']
					  [have active_mutex lock]
					  [print 'fiber 21']
					  [= done [get this done]]
					  [print 'fiber 22']
					  [have active_mutex unlock]
					  [print 'fiber 23']
					  ]
					[print 'fiber 24']]]
				nil]]
  this]

[defmetro resource [name args :rest body]
  `[new resource [quote ,name] [funk ,args @body]]]

[deftypefunk resource execute activate [:rest args]
  [let [[successful_activation nil]
	[active_mutex          [get this active_mutex]]]
    [prog [have active_mutex lock]
	  [if [not [get this active]]
	      [prog [set this active           t]
		    [set this active_args      args]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	nil
      [error object_type `resource object_typefunk `activate error_type `resource-is-already-activated]]]]

[deftypefunk resource execute finish []
  [let [[finished     nil]
	[result       nil]
	[active_mutex [get this active_mutex]]]
    [while [not finished]
      [have active_mutex lock]
      [= finished [get this finished]]
      [have active_mutex unlock]
      [if finished
	  [prog [have active_mutex lock]
		[=   result           [get this result]]
		[set this active      nil]
		[set this active_args nil]
		[set this result      nil]
		[set this finished    nil]
		[have active_mutex unlock]]
	[millisleep 100]]]
    result]]

[deftypefunk resource execute call [:rest args]
  [print 'debug 0']
  [have-apply this activate args]
  [print 'debug 1']
  [let [[result [have this finish]]]
    [print 'debug 2']
    result]]






