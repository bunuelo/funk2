
'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

'[deframe          story_graph [frame] [event_list event_node_hash character_list bruno_graph]]
[deftypeconstruct story_graph []
  [let bruno_graph [new bruno_graph]]
  [set this event_list nil]
  [set this character_list nil]
  [set this bruno_graph bruno_graph]
  [
  this]





[deftypefunk story_graph execute add_event [event]
  [set this event_list [cons event [get this event_list]]]
  [conslist-sort [get this `event_list] [funk [event-x event-y]
					      [< [get event-x time][get event-y time]]]]
  [defunk find_neighbors [event_list event]
    [let [[left_node_label nil] [right_node_label nil]]
      [cond [eq event [car [event_list]]]
	    [prog[= right_node_label [have [cadr[event_list]] lookup `action_name]] 
		 [= left_node_label  []]]]]]]'

[deftypefunk story_event get as-graph []
  [let [[graph [new bruno_graph]]]
    [let* [[story_event [new bruno_graph_node `story_event]]
	   [time        [new bruno_graph_node [string-as-symbol [exp-as-string [have this lookup `time]]]]]
	   [action      [new bruno_graph_node [have this lookup `action_name]]]
	   [character   [new bruno_graph_node [have this lookup `character_name]]]
	   [prep_frame  [new bruno_graph_node `prepositional_frame]]
	   [time_edge       [new bruno_graph_edge `time                story_event time]]
	   [action_edge     [new bruno_graph_edge `action              story_event action]]
	   [character_edge  [new bruno_graph_edge `character           story_event character]]
	   [prep_frame_edge [new bruno_graph_edge `prepositional_frame story_event prep_frame]]]
      [have graph add_edge time_edge]
      [have graph add_edge action_edge]
      [have graph add_edge character_edge]
      [have graph add_edge prep_frame_edge]
      [let [[prepositional_frame [have this lookup `prepositional_frame]]]
	[let [[direct_object [have prepositional_frame lookup `direct_object]]]
	  [mapcar [funk [preposition]
			[if [eq preposition `direct_object]
			    [prog [let* [[direct_object_node [new bruno_graph_node direct_object]]
					 [direct_object_edge [new bruno_graph_edge `direct_object prep_frame direct_object_node]]]
				    [have graph add_edge direct_object_edge]]]
			  [prog [let* [[preposition_node [new bruno_graph_node [have prepositional_frame lookup preposition]]]
				       [preposition_edge   [new bruno_graph_edge preposition  prep_frame preposition_node]]]
				  [have graph add_edge preposition_edge]]]]]
		  [get prepositional_frame slots]]]]]
    graph]]


[deftypefunk story get as-graph []
  [let [[event_list [conslist-sort [get this events] [funk [event-x event-y]
							   [< [get event-x time] [get event-y time]]]]]
	[graph [new bruno_graph]]]
    [defunk find_previous_node [event]
      [let [[previous_node nil]]
	[cond [[and [cdr [event_list]]       [eq event [car [event_list]]]]
	       [prog [= previous_node [car [get [get [cadr [event_list]] as-graph] nodes_with_label `story_event]]]
		     previous_node]]
	      [[and [null [cdr [event_list]]] [eq event [car [event_list]]]]
	       nil]
	      [[and [null [cdr [event_list]]]   [eq event [car [event_list]]]]
	       [find_previous_node [cdr event_list]]]
	      [t
	       nil]]]]			       				 
    [mapcar [funk [event]
		  [if [find_previous_node event]
		      [have graph add_new_edge `happens_after [car [get [get event as-graph] nodes_with_label `story_event]] [find_previous_node event]]
		    nil]]
	    
	    event_list]]]

[deftypefunk bruno_graph get as-story_event []
  [let [[prep_frame     [new frame]]
	[story_event    [new story_event `time `character_name `action_name `prep_frame]]
	[nodes_list     [get [get this node_set] elements]]
	[edges_list     [get [get this edge_set] elements]]]
    [defunk find_right_node [node_list left_node edge_label]
      [let [[right_node nil]]
	[defunk iterate [node_list]
	  [if node_list
	      [if [get this edges_with_label_between_nodes edge_label left_node [car node_list]]
		  [= right_node [get [car node_list] label]]
		[iterate [cdr node_list]]]
	    nil]]
	[iterate node_list]
	right_node]]

      [defunk find_edge_node [left_node node_list edge_list]
	[print 'debug 0.5']
	   [mapcar  [funk [edge]
			  [print 'debug 0.8'] 
			  [let [[right_node    nil]
				[edge_node_pair nil]]
			    [defunk iterate_nodes [a_node_list]
			      [if a_node_list
				  [prog [print 'debug 0.9']
					[print [get edge label]]
					[print [car a_node_list]]
					[print [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]]
					[if [get this edges_with_label_between_nodes [get edge label] left_node [car a_node_list]]
					    [prog [= right_node [get [car a_node_list] label]]
						  [print 'debug 0.91']
						  [= edge_node_pair [cons edge right_node]]]
					  [iterate_nodes [cdr a_node_list]]]]
				nil]
			      edge_node_pair]	    
			  [iterate_nodes nodes_list]]]
		   edges_list]]
					  
	
    [set story_event                            time                [find_right_node nodes_list [car [get this nodes_with_label `story_event]] `time]]
    [set story_event                            character_name      [find_right_node nodes_list [car [get this nodes_with_label `story_event]] `character]]
    [set story_event                            action_name         [find_right_node nodes_list [car [get this nodes_with_label `story_event]] `action]]
    [set story_event                            prepositional_frame prep_frame]
    [print 'debug 0']
    [mapc [funk [edge_node_pair] 
		[set [get story_event prepositional_frame] [car edge_node_pair] [cdr edge_node_pair]]]
	  [find_edge_node [car [get this nodes_with_label `prepositional_frame]] nodes_list edges_list]] 
		
    story_event]]
	    


[globalize my_prep_frame  [new frame]]
[have my_prep_frame add `direct_object `tomato]
[have my_prep_frame add `towards `mom]
[globalize my_story_event [new story_event 140 `Ralph `sit_down  my_prep_frame]]
  