'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk socket-new_server [port_num handle_client_proc]
  [cause-define cause-name `[socket-server ,port_num]]
  [let [[socket_fd [socket:socket socket:pf_inet socket:sock_stream 0]]]
    [terminal_format standard-terminal '\n' `[socket:socket ,socket:pf_inet ,socket:sock_stream 0] ': ' socket_fd]
    [terminal_format standard-terminal '\n' `[fcntl-nonblock-set ,socket_fd t] ': ' [fcntl-nonblock-set socket_fd t]]
    [let [[sin_family socket:pf_inet]
	  [sin_port   port_num]
	  [sin_addr   socket:inaddr_any]]
      [terminal_format standard-terminal '\n' `[socket:bind ,socket_fd ,sin_family ,sin_port ,sin_addr] ': ' [socket:bind   socket_fd sin_family sin_port sin_addr]]
      [terminal_format standard-terminal '\n' `[socket:listen ,socket_fd 5] ': ' [socket:listen socket_fd 5]]
      [let [[client_addr [new array 6]]]
	[while t
	  [let [[accept_fd [socket:accept socket_fd client_addr]]]
	    [if accept_fd
		[fiber handle_client_proc [conslist accept_fd]]]
	    [sleep 1]]]]]]]

[globalize socket-server:-buffer_size- [>> [* 64
					      1024] 3]]

[defunk socket-new_test_server [port_num]
  [let [[io_buffer             [new chunk socket-server:-buffer_size-]]
	[io_buffer-byte_start  0]
	[io_buffer-byte_length socket-server:-buffer_size-]]
    [socket-new_server port_num
		       [funk [client_fd]
			     [terminal_format standard-terminal '\naccepting client on client_fd=' client_fd '.']
			     [while t
			       `[socket:chunk-send io_buffer io_buffer-byte_start io_buffer-byte_length client_fd 0]
			       [sleep 1]
			       ]]]]]

[defunk socket-repl_server [port_num]
  [fiber [funk []
	       [socket-new_server port_num
				  [funk [client_fd]
					[terminal_format standard-terminal '\naccepting client on client_fd=' client_fd '.']
					[let [[width  80]
					      [height 25]]
					  [let [[client_terminal [terminal_print_frame-new stdout 0 width height 128 t nil t 1000000000]]]
					    [terminal_repl-io [socket_stream-new client_fd] client_terminal]]]]]]
	 nil]
  nil]

`['#include <arpa/inet.h>'
''
'#include <netdb.h>'
'#include <netinet/in.h>'
'#include <unistd.h>'
'#include <iostream>'
''
'#define MAX_MSG 100'
'#define LINE_ARRAY_SIZE (MAX_MSG+1)'
''
'using namespace std;'
''
'int main()'
'{'
'  int listenSocket, connectSocket, i;'
'  unsigned short int listenPort;'
'  socklen_t clientAddressLength;'
'  struct sockaddr_in clientAddress, serverAddress;'
'  char line[LINE_ARRAY_SIZE];'
''
'  cout << "Enter port number to listen on (between 1500 and 65000): ";'
'  cin >> listenPort;'
''
'  // Create socket for listening for client connection requests.'
'  listenSocket = socket(AF_INET, SOCK_STREAM, 0);'
'  if (listenSocket < 0) {'
'    cerr << "cannot create listen socket";'
'    exit(1);'
'  }'
'  '
'  // Bind listen socket to listen port.  First set various fields in'
'  // the serverAddress structure, then call bind().'
'  // htonl() and htons() convert long integers and short integers'
'  // (respectively) from host byte order (on x86 this is Least'
'  // Significant Byte first) to network byte order (Most Significant'
'  // Byte first).'
'  serverAddress.sin_family = AF_INET;'
'  serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);'
'  serverAddress.sin_port = htons(listenPort);'
'  '
'  if (bind(listenSocket,'
'           (struct sockaddr *) &serverAddress,'
'           sizeof(serverAddress)) < 0) {'
'    cerr << "cannot bind socket";'
'    exit(1);'
'  }'
''
'  // Wait for connections from clients.'
'  // This is a non-blocking call; i.e., it registers this program with'
'  // the system as expecting connections on this socket, and then'
'  // this thread of execution continues on.'
'  listen(listenSocket, 5);'
'  '
'  while (1) {'
'    cout << "Waiting for TCP connection on port " << listenPort << " ...\n";'
''
'    // Accept a connection with a client that is requesting one.  The'
'    // accept() call is a blocking call; i.e., this thread of'
'    // execution stops until a connection comes in.'
'    // connectSocket is a new socket that the system provides,'
'    // separate from listenSocket.  We *could* accept more'
'    // connections on listenSocket, before connectSocket is closed,'
'    // but this program doesn\'t do that.'
'    clientAddressLength = sizeof(clientAddress);'
'    connectSocket = accept(listenSocket,'
'                           (struct sockaddr *) &clientAddress,'
'                           &clientAddressLength);'
'    if (connectSocket < 0) {'
'      cerr << "cannot accept connection ";'
'      exit(1);'
'    }'
'    '
'    // Show the IP address of the client.'
'    // inet_ntoa() converts an IP address from binary form to the'
'    // standard "numbers and dots" notation.'
'    cout << "  connected to " << inet_ntoa(clientAddress.sin_addr);'
''
'    // Show the client\'s port number.'
'    // ntohs() converts a short int from network byte order (which is'
'    // Most Significant Byte first) to host byte order (which on x86,'
'    // for example, is Least Significant Byte first).'
'    cout << ":" << ntohs(clientAddress.sin_port) << "\n";'
''
'    // Read lines from socket, using recv(), storing them in the line'
'    // array.  If no messages are currently available, recv() blocks'
'    // until one arrives.'
'    // First set line to all zeroes, so we\'ll know where the end of'
'    // the string is.'
'    memset(line, 0x0, LINE_ARRAY_SIZE);'
'    while (recv(connectSocket, line, MAX_MSG, 0) > 0) {'
'      cout << "  --  " << line << "\n";'
''
'      // Convert line to upper case.'
'      for (i = 0; line[i] != \'\\0\'; i++)'
'        line[i] = toupper(line[i]);'
''
'      // Send converted line back to client.'
'      if (send(connectSocket, line, strlen(line) + 1, 0) < 0)'
'        cerr << "Error: cannot send modified data";'
''
'      memset(line, 0x0, LINE_ARRAY_SIZE);  // set line to all zeroes'
'    }'
'  }']
