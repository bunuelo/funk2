'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'resource'

[deframe resource [frame] [name
			   agency
			   fiber
			   active_mutex
			   active
			   active_funk
			   active_args
			   result
			   finished
			   done
			   pole_nanoseconds
			   trace_story
			   think_story]
  [new [name active_funk]
       [set this name             name]
       [set this agency           nil]  'We set this when the resource is added to an agency.'
       [set this active_funk      active_funk]
       [set this active_mutex     [new mutex]]
       [set this pole_nanoseconds 1000000000]
       [set this trace_story      [new story]]
       [set this think_story      [new story]]
       [set this fiber            [fiber [funk []
					       [cause-enable_reactive_critics [this-cause]]
					       [cause-define cause-name     `resource]
					       [cause-define resource-name  name]
					       [cause-define cause-resource this]
					       [let [[active_mutex [get this active_mutex]]
						     [done         nil]]
						 [while [not done]
						   [let [[active nil]]
						     [have active_mutex lock]
						     [= active [get this active]]
						     [have active_mutex unlock]
						     [if active
							 [prog [let [[active_funk nil]]
								 [have active_mutex lock]
								 [= active_funk [get this active_funk]]
								 [have active_mutex unlock]
								 [if active_funk
								     [let [[active_args nil]]
								       [have active_mutex lock]
								       [= active_args [get this active_args]]
								       [have active_mutex unlock]
								       [let [[result [apply active_funk active_args]]]
									 [have active_mutex lock]
									 [set this result result]
									 [have active_mutex unlock]]]
								   [format stdout '\nresource warning: active_funk is nil (name = ' [get this name] ').\n']]]
							       [have active_mutex lock]
							       [set this active   nil]
							       [set this finished t]
							       [have active_mutex unlock]]
						       [nanosleep [get this pole_nanoseconds]]]]
						   [have active_mutex lock]
						   [= done [get this done]]
						   [have active_mutex unlock]
						   ]
						 [format stdout '\nresource status: done.  (name = ' [get this name] ').\n']]]
					 nil]]
       this]]

[defmetro resource [name args :rest body]
  `[let [[this-resource [new resource [quote ,name] nil]]]
     [set this-resource active_funk [funk ,args @body]]
     this-resource]]

[deftypefunk resource get local_time []
  [get [get this fiber] bytecode_count]]

[deftypefunk resource get mind []
  [get [get this agency] mind]]

[deftypefunk resource execute add_new_trace_story_event [character_name action_name prepositional_frame]
  [have [get this trace_story] add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute add_new_think_story_event [character_name action_name prepositional_frame]
  [have [get this think_story] add_new_event [get this local_time] character_name action_name prepositional_frame]]

[deftypefunk resource execute think_to_self [:rest expressions]
  [have cause-resource add_new_think_story_event `I `think [frame direct_object expressions]]
  [apply &format [cons stdout `['\nResource ' ,[get this name] ' Thinks: ' @expressions]]]
  `[have-apply [get this world] format `['\nAgent ' ,[get this name] ' Thinks: ' @expressions]]
  nil
  ]

[deftypefunk resource execute activate [:rest args]
  [have this           add_new_trace_story_event [get cause-resource name] `activate [frame direct_object `me]]
  [have cause-resource add_new_trace_story_event `I                        `activate [frame direct_object [get this name]]]
  [let [[successful_activation nil]
	[active_mutex          [get this active_mutex]]]
    [prog [have active_mutex lock]
	  [if [not [get this active]]
	      [prog [set this active           t]
		    [set this active_args      args]
		    [=   successful_activation t]]]
	  [have active_mutex unlock]]
    [if successful_activation
	nil
      [error object_type     `resource
	     object_typefunk `activate
	     error_type      `resource-is-already-activated]]]]

[deftypefunk resource execute finish []
  [have this           add_new_trace_story_event [get cause-resource name] `finish [frame direct_object `me]]
  [have cause-resource add_new_trace_story_event `I                        `finish [frame direct_object [get this name]]]
  [let [[finished     nil]
	[result       nil]
	[active_mutex [get this active_mutex]]]
    [while [not finished]
      [have active_mutex lock]
      [= finished [get this finished]]
      [have active_mutex unlock]
      [if finished
	  [prog [have active_mutex lock]
		[=   result           [get this result]]
		[set this active      nil]
		[set this active_args nil]
		[set this result      nil]
		[set this finished    nil]
		[have active_mutex unlock]]
	[millisleep 100]]]
    result]]

[deftypefunk resource execute destroy []
  [set this done t]]

[deftypefunk resource execute quit []
  [have [get this fiber] quit]]

[deftypefunk resource execute call [:rest args]
  [have this           add_new_trace_story_event [get cause-resource name] `call [frame direct_object `me]]
  [have cause-resource add_new_trace_story_event `I                        `call [frame direct_object [get this name]]]
  [have-apply this activate args]
  [have this finish]]

[deftypefunk resource get stack_trace []
  [get [get this fiber] stack_trace]]

[deftypefunk resource execute print_stack_trace []
  [have [get this fiber] print_stack_trace]]


