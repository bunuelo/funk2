'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[defunk conslist_pattern-test [expression]
  [let [[patterns `[[a  [? object] has [? property]]
		    [an [? object] has [? property]]]]
	[parses   nil]]
    [mapc [funk [pattern]
		[let [[pattern_parses [conslist_pattern-match pattern expression]]]
		  [= parses [append parses
				    pattern_parses]]]]
	  patterns]
    parses]]



[defunk string_pattern-as_conslist_pattern [string_pattern]
  [let [[string_pattern-length [get string_pattern length]]
	[index                 0]
	[begin_variable_char   #\[]
        [conslist_pattern      nil]
	[conslist_pattern_iter nil]]
    [while [< index string_pattern-length]
      [let [[next_char [get string_pattern elt index]]]
	[cond [[eq next_char begin_variable_char] [let [[stream [string_stream-new string_pattern index]]]
						    [let [[variable_expression [stream-try_read stream]]]
						      [let [[variable_command [first variable_expression]]]
							[cond [[eq variable_command `?] [let [[variable_name [second variable_expression]]]
											  [let [[new_cons [cons `[? ,variable_name] nil]]]
											    [if [null conslist_pattern]
												[prog [= conslist_pattern      new_cons]
												      [= conslist_pattern_iter new_cons]]
											      [prog [set conslist_pattern_iter cdr new_cons]
												    [= conslist_pattern_iter new_cons]]]]
											  [= index [get stream index]]]]
							      [t                        [error bug_name            `string_pattern-parse-invalid_variable_command
											       string_pattern      string_pattern
											       variable_expression variable_expression]]]]]]]
	      [t                                  [let [[new_cons [cons next_char nil]]]
						    [if [null conslist_pattern]
							[prog [= conslist_pattern      new_cons]
							      [= conslist_pattern_iter new_cons]]
						      [prog [set conslist_pattern_iter cdr new_cons]
							    [= conslist_pattern_iter new_cons]]]
						    [++ index]]]]]]
    conslist_pattern]]



[defunk string_pattern-match [string_pattern string]
  [let [[matches [conslist_pattern-match [string_pattern-as_conslist_pattern string_pattern] [string_pattern-as_conslist_pattern string]]]]
    [mapc [funk [match]
		[mapc [funk [key]
			    [let* [[conslist        [have match lookup key]]
				   [conslist-length [length conslist]]
				   [string          [new string conslist-length #\ ]]
				   [index           0]]
			      [mapc [funk [char]
					  [set string elt index char]
					  [++ index]]
				    [have match lookup key]]
			      [have match add key string]]]
		      [get match keys]]]
	  matches]
    matches]]


[defunk string_pattern-test []
  [string_pattern-match 'The [? object] has [? property].' 'The dog has fleas.']]

