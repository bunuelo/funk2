'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'action_transframe_hypothesis_space_feature'

[defunk action_transframe_hypothesis_space_feature-phenomenal_name [phenomenal_name]
  [error bug_name deprecated_funktion]]

[deframe action_transframe_hypothesis_space_feature [frame] [phenomenal_name]
  [new [initial-phenomenal_name]
       [= phenomenal_name initial-phenomenal_name]
       nil]]


'action_transframe_hypothesis_space_change_feature'

[defunk action_transframe_hypothesis_space_change_feature-phenomenal_name [change_type feature_phenomenal_name]
  [assert-type symbol feature_phenomenal_name]
  [format nil change_type '_' feature_phenomenal_name]]

[deframe action_transframe_hypothesis_space_change_feature [frame] [change_type
								    feature_phenomenal_name
								    relative_start_time_from_action_start
								    relative_duration_time]
  [new [initial-change_type
	initial-feature_phenomenal_name]
       [assert-type symbol initial-change_type]
       [assert-type symbol initial-feature_phenomenal_name]
       [if [not [or [eq initial-change_type `add]
		    [eq initial-change_type `remove]]]
	   [error bug_name                              `action_transframe_hypothesis_space_change_feature-invalid_change_type
		  acceptive_change_types                `[add remove]
		  change_type                           initial-change_type
		  feature_phenomenal_name               initial-feature_phenomenal_name]]
       [= change_type             initial-change_type]
       [= feature_phenomenal_name initial-feature_phenomenal_name]
       [= relative_start_time_from_action_start [new relative_time [* 30 1000000000]]]
       [= relative_duration_time                [new relative_time [* 60 1000000000]]]
       nil]]


'action_transframe_hypothesis_space'

[deframe action_transframe_hypothesis_space [frame] [change_feature_set
						     concept_version_space]
  [new [initial-change_feature_set initial-concept_version_space]
       [= change_feature_set    initial-change_feature_set]
       [= concept_version_space initial-concept_version_space]
       nil]]

[deftypefunk action_transframe_hypothesis_space get new_copy []
  [new action_transframe_hypothesis_space
       [get change_feature_set    new_copy]
       [get concept_version_space new_copy]]]

[deftypefunk action_transframe_hypothesis_space execute train_on_example [example]
  [have concept_version_space train_on_example example]]

[deftypefunk action_transframe_hypothesis_space get supporting_hypotheses [example]
  [get concept_version_space supporting_hypotheses example]]

[deftypefunk action_transframe_hypothesis_space get opposing_hypotheses [example]
  [get concept_version_space opposing_hypotheses example]]


'traced_resource'

[deframe traced_resource [resource] [resource_knowledge_base_name
				     simulate_knowledge_base_names
				     [remember_simulate_knowledge_base_tokens_mutex [new mutex]]
				     [remember_simulate_knowledge_base_tokens_set   [new set]]
				     [feature_phenomenal_name_ptypehash             [new ptypehash]]
				     [change_feature_phenomenal_name_ptypehash      [new ptypehash]]
				     [precondition_hypothesis_space_set             [new set]]]
  [new [initial-name
	initial-active_funk
	initial-resource_knowledge_base_name
	initial-simulate_knowledge_base_names]
       [= resource_knowledge_base_name  initial-resource_knowledge_base_name]
       [= simulate_knowledge_base_names initial-simulate_knowledge_base_names]
       [set initial-active_funk name [get [format nil [type this] '-active_funk'] as-symbol]]
       [let [[wrapped_active_funk [get this wrapped_active_funk initial-active_funk]]]
	 [construct resource initial-name wrapped_active_funk]]]]

[deftypefunk traced_resource get remember_tokens []
  [have remember_simulate_knowledge_base_tokens_mutex lock]
  [let [[result [get remember_simulate_knowledge_base_tokens_set elements]]]
    [have remember_simulate_knowledge_base_tokens_mutex unlock]
    result]]

[deftypefunk traced_resource execute add_remember_token [remember_token]
  [have remember_simulate_knowledge_base_tokens_mutex lock]
  [have remember_simulate_knowledge_base_tokens_set add remember_token]
  [have remember_simulate_knowledge_base_tokens_mutex unlock]]

[deftypefunk traced_resource execute remove_remember_token [remember_token]
  [have remember_simulate_knowledge_base_tokens_mutex lock]
  [have remember_simulate_knowledge_base_tokens_set remove remember_token]
  [have remember_simulate_knowledge_base_tokens_mutex unlock]]

[deftypefunk traced_resource execute begin_wrapped_active_funk []
  [let [[remember_token [new remember_token [new semantic_time [time]]]]]
    [have this add_remember_token remember_token]
    [mapc [funk [simulate_knowledge_base_name]
		[let [[semantic_knowledge_base [get [get this mind] semantic_knowledge_base simulate_knowledge_base_name]]]
		  [have semantic_knowledge_base add_remember_token remember_token]]]
	  simulate_knowledge_base_names]]
  [let [[target [get this resource_semantic_frame]]]
    [set target active t]]]

[deftypefunk traced_resource execute finish_wrapped_active_funk []
  [let [[target [get this resource_semantic_frame]]]
    [set target active nil]
    nil]]

[deftypefunk traced_resource get wrapped_active_funk [active_funk]
  [let [[active_funk-args [get active_funk args]]]
    [eval `[let [[this_traced_resource ,this]]
	     [funk-new_with_name ,[get [format nil [get active_funk name] '-traced'] as-symbol] ,active_funk-args
				 [have this_traced_resource begin_wrapped_active_funk]
				 [let [[result [apply ,active_funk [conslist @active_funk-args]]]]
				   [have this_traced_resource finish_wrapped_active_funk]
				   result]]]]]]]

[deftypefunk traced_resource get resource_semantic_frame []
  [let [[resource_semantic_frame [type-get resource this resource_semantic_frame]]]
    [let [[resource_knowledge_base [get [get this mind] semantic_knowledge_base resource_knowledge_base_name]]]
      [if [not [get resource_knowledge_base contains_semantic_frame resource_semantic_frame]]
	  [have resource_knowledge_base add_semantic_frame resource_semantic_frame]]]
    resource_semantic_frame]]

[deftypefunk traced_resource execute activate [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent activating target]
    [type-have-apply resource this activate args]
    [semantic-remove agent activating target]]]

[deftypefunk traced_resource execute wait_to_activate [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_to_activate target]
    [type-have-apply resource this wait_to_activate args]
    [semantic-remove agent waiting_to_activate target]]]

[deftypefunk traced_resource execute wait_to_call [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_to_call target]
    [type-have-apply resource this wait_to_call args]
    [let [[result [shelter [semantic-remove agent waiting_to_call target]]]]
      [if [is-type `bug result]
	  [prog [terminal_format standard-terminal '\ntraced_resource ' name ' warning: ' result]
		]]]]]

[deftypefunk traced_resource execute call [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent calling target]
    [type-have-apply resource this call args]
    [semantic-remove agent calling target]]]

[deftypefunk traced_resource execute finish []
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_for_to_finish target]
    [type-have resource this finish]
    [semantic-remove agent waiting_for_to_finish target]]]

[deftypefunk traced_resource get feature [phenomenal_name]
  [assert-type symbol phenomenal_name]
  [let [[feature [have feature_phenomenal_name_ptypehash lookup phenomenal_name]]]
    [if [null feature]
	[prog [= feature [new action_transframe_hypothesis_space_feature phenomenal_name]]
	      [have feature_phenomenal_name_ptypehash add phenomenal_name feature]]]
    feature]]

[deftypefunk traced_resource get change_feature [change_type feature_phenomenal_name]
  [let [[change-phenomenal_name [action_transframe_hypothesis_space_change_feature-phenomenal_name change_type feature_phenomenal_name]]]
    [let [[change_feature [have change_feature_phenomenal_name_ptypehash lookup change-phenomenal_name]]]
      [if [null change_feature]
	  [prog [= change_feature [new action_transframe_hypothesis_space_change_feature change_type feature_phenomenal_name]]
		[have change_feature_phenomenal_name_ptypehash add change-phenomenal_name change_feature]]]
      change_feature]]]

[deftypefunk traced_resource get change_features []
  [get change_feature_phenomenal_name_ptypehash values]]

[deftypefunk traced_resource get concept_version_space_example_from_precondition_events [precondition_events example_truth]
  [let [[concept_version_space_example [new concept_version_space_example example_truth]]
	[positive_feature_set          [new set]]]
    [mapc [funk [precondition_event]
		[cond [[or [is-type `semantic_reflective_object_type_property_event precondition_event]
			   [is-type `semantic_reflective_object_type_relation_event precondition_event]] [let [[phenomenal_name [get precondition_event phenomenal_name]]]
													   [let [[feature [get this feature phenomenal_name]]]
													     [have positive_feature_set add feature]]]]
		      [t                                                                                 [prog `[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
																 [get [get this layer] name] ' resource, ' name ', '
																 'precondition event: ' precondition_event '.']
													       ]]
		      ]]
	  precondition_events]
    
    [mapc [funk [feature]
		[let [[positive [get positive_feature_set contains feature]]]
		  [have concept_version_space_example add_variable_value feature positive]]]
	  [get feature_phenomenal_name_ptypehash values]]
    
    concept_version_space_example]]


[deftypefunk traced_resource execute learn_precondition_hypothesis_space [knowledge_base start_time end_time]
  [let [[event_preconditions [get knowledge_base events_containing_time start_time]]
	[event_transframe    [get knowledge_base event_transframe       start_time end_time]]]
    
    [let [[event_transframe_changes [let [[element_set [semantic-lookup_set event_transframe change]]]
				      [if element_set
					  [get element_set elements]
					nil]]]]
      
      [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
		       [get [get this layer] name] ' resource, ' name ', '
		       'precondition count: ' [length event_preconditions] '.  change count: ' [length event_transframe_changes] '.']
      
      [let [[positive_concept_version_space_example [get this concept_version_space_example_from_precondition_events event_preconditions t]]
	    [negative_concept_version_space_example [get this concept_version_space_example_from_precondition_events event_preconditions nil]]]
	
	'too large to print.'
	`[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
			  [get [get this layer] name] ' resource, ' name ', '
			  'precondition training example: ' concept_version_space_example '.']
	
	[let [[change_feature_set [new set]]]
	  [mapc [funk [change]
		      [let [[change_type  [get change change_type]]
			    [change_event [get change change_event]]]
			`[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					  [get [get this layer] name] ' resource, ' name ', '
					  'transframe_change: ' change_type ' - ' change_event '.']
			[cond [[or [is-type `semantic_reflective_object_type_relation_event change_event]
				   [is-type `semantic_reflective_object_type_property_event change_event]] [let [[phenomenal_name [get change_event phenomenal_name]]]
													     `[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
															       [get [get this layer] name] ' resource, ' name ', '
															       'meta_relationship: ' change_type ' - ' meta_relationship '.']
													     
													     [let [[change_feature [get this change_feature change_type phenomenal_name]]]
													       [have change_feature_set add change_feature]]]]
			      [t                                                                           [prog `[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
																   [get [get this layer] name] ' resource, ' name ', '
																   'change event: ' change_type ' - ' change_event ' (not learning hypothesis space for change).']
														 ]]
			      ]]]
		event_transframe_changes]
	  
	  
	  [let [[non_intersecting_change_feature_set change_feature_set]]
	    [mapc [funk [precondition_hypothesis_space]
			[let [[precondition_hypothesis_space-change_feature_set [get precondition_hypothesis_space change_feature_set]]]
			  [let [[intersection [get non_intersecting_change_feature_set intersection precondition_hypothesis_space-change_feature_set]]]
			    [if [not [get intersection is_empty]]
				[let [[new_precondition_hypothesis_space-change_feature_set [- precondition_hypothesis_space-change_feature_set intersection]]]
				  [= non_intersecting_change_feature_set                    [- non_intersecting_change_feature_set              intersection]]
				  [set precondition_hypothesis_space change_feature_set new_precondition_hypothesis_space-change_feature_set]
				  [let [[new_precondition_hypothesis_space [new action_transframe_hypothesis_space intersection [get [get precondition_hypothesis_space concept_version_space] new_copy]]]]
				    [have precondition_hypothesis_space_set add new_precondition_hypothesis_space]]]]]]]
		  [get precondition_hypothesis_space_set elements]]
	    
	    [if [not [get non_intersecting_change_feature_set is_empty]]
		[have precondition_hypothesis_space_set add [new action_transframe_hypothesis_space non_intersecting_change_feature_set [new concept_version_space]]]]
	    
	    [mapc [funk [precondition_hypothesis_space]
			`[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					  [get [get this layer] name] ' resource, ' name ', '
					  'training change feature hypothesis space on precondition example.']
			
			[let [[precondition_hypothesis_space-change_feature_set [get precondition_hypothesis_space change_feature_set]]]
			  [if [get precondition_hypothesis_space-change_feature_set is_subset_of change_feature_set]
			      [have precondition_hypothesis_space train_on_example positive_concept_version_space_example]
			    [have precondition_hypothesis_space train_on_example negative_concept_version_space_example]]]
			
			`[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					  [get [get this layer] name] ' resource, ' name ', '
					  'precondition_hypothesis_space: ' `precondition_hypothesis_space '.']
			]
		  [get precondition_hypothesis_space_set elements]]
	    
	    [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
			     [get [get this layer] name] ' resource, ' name ', '
			     'done learning precondition hypotheses for changes.']
	    
	    [mapc [funk [remember_token]
			[if [< [get remember_token semantic_time] end_time]
			    [prog [have this remove_remember_token remember_token]
				  [mapc [funk [simulate_knowledge_base_name]
					      [let [[semantic_knowledge_base [get [get this mind] semantic_knowledge_base simulate_knowledge_base_name]]]
						[have semantic_knowledge_base remove_remember_token remember_token]]]
					simulate_knowledge_base_names]]]]
		  [get this remember_tokens]]
	    ]]]]]]



[deftypefunk traced_resource execute know_of_completed_action_sequence [action_sequence]
  [let [[transframe_start_time [get action_sequence absolute_start_time]]
	[transframe_end_time   [get action_sequence absolute_end_time]]]
    [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
		     'resource, ' name ', execution finish has reached reflective knowledge layer, so starting fiber to learn transframe when the time is appropriate.']
    [fiber [funk []
		 
		 [mapc [funk [simulate_knowledge_base_name]
			     [cond [[eq simulate_knowledge_base_name `physical_type_knowledge]      [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
															   'resource, ' name ', waiting for physical type knowledge stream to reach ' [get [get transframe_end_time value] date_and_time_string] '.']
													  [have [get [get this mind] physical_type_knowledge_reflective_timer] wait_until_after transframe_end_time]
													  ]]
				   [[eq simulate_knowledge_base_name `deliberative1_type_knowledge] [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
															   'resource, ' name ', waiting for plan type knowledge stream to reach ' [get [get transframe_end_time value] date_and_time_string] '.']
													  [have [get [get this mind] deliberative1_type_knowledge_reflective_timer] wait_until_after transframe_end_time]
													  ]]
				   ]]
		       simulate_knowledge_base_names]
		 
		 'Handle learning of transframe here.'
		 [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
				  'resource, ' name ', execution finish has occurred in reflective reflective knowledge time and simulate knowledge-base times have also caught up.'
				  '\n  All information is ready for learning transframe for resource.']
		 
		 [cond [[or [eq [get [get this layer] name] `builtin_reactive]
			    [eq [get [get this layer] name] `learned_reactive]] [let [[physical_type_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_knowledge]]]
										  
										  [have this learn_precondition_hypothesis_space physical_type_knowledge_base transframe_start_time transframe_end_time]
										  
										  ]]
		       [[eq [get [get this layer] name] `deliberative]          [let [[deliberative1_type_knowledge_base [get [get this mind] semantic_knowledge_base `deliberative1_type_knowledge]]]
										  
										  [have this learn_precondition_hypothesis_space deliberative1_type_knowledge_base transframe_start_time transframe_end_time]
										  
										  ]]
		       [[eq [get [get this layer] name] `reflective]            [prog]]
		       [t                                                       [terminal_format standard-terminal '\ntraced_resource warning: layer unrecognized, ' [get [get this layer] name] '.']]
		       ]]
	   []]
    
    ]]


[globalize no_reflective_learning nil]
[globalize no_dependency_tracing  t]

[deftypefunk traced_resource execute add_potential_effect_partial_state [partial_state]
  [let* [[feature_phenomenal_name                              [get partial_state phenomenal_name]]
	 [partial_state-add_change    [get this change_feature `add    feature_phenomenal_name]]
	 [partial_state-remove_change [get this change_feature `remove feature_phenomenal_name]]
	 [add_change_already_in_hypothesis_space               nil]
	 [remove_change_already_in_hypothesis_space            nil]]
    [mapc [funk [precondition_hypothesis_space]
		[let [[change_feature_set [get precondition_hypothesis_space change_feature_set]]]
		  [if [get change_feature_set contains add_change_already_in_hypothesis_space]
		      [= add_change_already_in_hypothesis_space t]]
		  [if [get change_feature_set contains remove_change_already_in_hypothesis_space]
		      [= remove_change_already_in_hypothesis_space t]]]]
	  [get precondition_hypothesis_space_set elements]]
    [let [[did_something nil]]
      [if [not add_change_already_in_hypothesis_space]
	  [let [[add_change_set [new set]]]
	    [terminal_format standard-terminal
			     '\ntraced_resource (' [get this as-natural_language_string] '): adding change hypothesis space for'
			     '\n                change feature: ' partial_state-add_change]
	    [have add_change_set add partial_state-add_change]
	    [have precondition_hypothesis_space_set add [new action_transframe_hypothesis_space add_change_set [new concept_version_space]]]
	    [= did_something t]]]
      [if [not remove_change_already_in_hypothesis_space]
	  [let [[remove_change_set [new set]]]
	    [terminal_format standard-terminal
			     '\ntraced_resource (' [get this as-natural_language_string] '): adding change hypothesis space for'
			     '\n                change feature: ' partial_state-remove_change]
	    [have remove_change_set add partial_state-remove_change]
	    [have precondition_hypothesis_space_set add [new action_transframe_hypothesis_space remove_change_set [new concept_version_space]]]
	    [= did_something t]]]
      did_something]]]


[deftypefunk traced_resource execute imagine_waiting_to_call [nonsemantic_plan_execution_node args]
  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
		   'resource, ' name ', imagining waiting to call.']
  
  [let [[counterfactual_knowledge_base nil]
	[semantic_planner              nil]]
    [cond [[or [eq [get [get this layer] name] `builtin_reactive]
	       [eq [get [get this layer] name] `learned_reactive]] [prog [= counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `physical_type_counterfactual_knowledge]]
									 [= semantic_planner [get [get [get this mind] agency `deliberative `plan] semantic_planner]]
									 ]]
	  [[eq [get [get this layer] name] `deliberative]          [prog [if [not no_reflective_learning]
									     [prog [= counterfactual_knowledge_base [get [get this mind] semantic_knowledge_base `deliberative1_type_counterfactual_knowledge]]
										   [= semantic_planner [get [get [get this mind] agency `reflective `plan] semantic_planner]]
										   ]]]]
	  [[eq [get [get this layer] name] `reflective]            nil]
	  [t                                                       [prog [terminal_format standard-terminal '\ntraced_resource warning: layer unrecognized, ' [get [get this layer] name] '.']
									 nil]]]
    
    [if [cause-lookup cause-traced_resource_activation_set]
	[have cause-traced_resource_activation_set add this]]
    
    [if counterfactual_knowledge_base
	[let [[imagine_time cause-imagine_time]]
	  [let [[precondition_time imagine_time]]
	    [let [[precondition_events [get counterfactual_knowledge_base events_containing_time precondition_time]]]
	      [let [[concept_version_space_example [get this concept_version_space_example_from_precondition_events precondition_events t]]]
		
		[mapc [funk [precondition_hypothesis_space]
			    [let [[change_hypothesis_dependencies [get precondition_hypothesis_space supporting_hypotheses concept_version_space_example]]]
			      
			      [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
					       'resource, ' name ', found ' [length change_hypothesis_dependencies] ' supporting hypotheses for change.']
			      [if change_hypothesis_dependencies
				  [mapc [funk [change_feature]
					      [let* [[feature_phenomenal_name               [get change_feature feature_phenomenal_name]]
						     [relative_start_time_from_action_start [get change_feature relative_start_time_from_action_start]]
						     [relative_duration_time                [get change_feature relative_duration_time]]
						     [counterfactual_event                  [new semantic_reflective_object_type_event [get [get this mind] semantic_realm] feature_phenomenal_name feature_phenomenal_name]]
						     [absolute_start_time                   [new semantic_time [+ [get precondition_time value] relative_start_time_from_action_start]]]
						     [absolute_end_time                     [new semantic_time `after]]]
						[set counterfactual_event absolute_start_time             absolute_start_time]
						[set counterfactual_event absolute_end_time               absolute_end_time]
						[set counterfactual_event nonsemantic_plan_execution_node nonsemantic_plan_execution_node]
						[terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
								 'resource, ' name ', adding counterfactual_event.'
								 '\n  counterfactual_event = ' counterfactual_event
								 '\n  absolute_start_time  = ' absolute_start_time
								 '\n  absolute_end_time    = ' absolute_end_time]
						[have counterfactual_knowledge_base     add_semantic_frame counterfactual_event]
						[have cause-imagine_semantic_event_tree insert             counterfactual_event]
						[if [not no_dependency_tracing]
						    [let [[semantic_dependency [new semantic_dependency [get [get this mind] semantic_realm]]]]
						      [set semantic_dependency precondition_time   precondition_time]
						      [set semantic_dependency resource_activation [get this resource_semantic_frame]]
						      
						      [have counterfactual_event add_lost_dependency_callback
							    [funk []
								  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
										   'resource, ' name ', counterfactual_event has lost dependency.']
								  [have semantic_dependency know_is_invalidated]
								  ]
							    nil]
						      [have semantic_dependency add_invalidated_callback
							    [funk []
								  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
										   'resource, ' name ', dependency has become invalidated.']
								  
								  'could attempt to find new hypothetical support for this dependency at this point in order to avoid announcing its complete loss of support.'
								  
								  [have semantic_dependency know_is_unsupported]
								  ]
							    nil]
						      [have semantic_dependency add_unsupported_callback
							    [funk []
								  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
										   'resource, ' name ', dependency has become unsupported.']
								  [have counterfactual_event know_has_lost_dependency]
								  [let [[result [shelter [prog [have counterfactual_knowledge_base remove_semantic_frame semantic_dependency]
											       [have counterfactual_knowledge_base remove_semantic_frame counterfactual_event]]]]]
								    [if [is-type `bug result]
									[let [[bug result]]
									  [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
											   'resource, ' name ', warning: received bug ' bug]
									  ]
								      [prog [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
											     'resource, ' name ', successfully removed unsupported counterfactual event and dependency.']
									    ]]]]
							    nil]
						      [mapc [funk [precondition_event]
								  [semantic-add semantic_dependency precondition_event precondition_event]
								  [have precondition_event add_lost_grounding_callback
									[funk []
									      [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
											       'resource, ' name ', counterfactual precondition has lost grounding.']
									      [have semantic_dependency know_of_precondition_lost_grounding]
									      ]
									nil]]
							    precondition_events]
						      [mapc [funk [change_hypothesis_dependency]
								  [semantic-add semantic_dependency change_hypothesis change_hypothesis_dependency]
								  [have change_hypothesis_dependency add_removal_callback
									[funk []
									      [terminal_format standard-terminal '\n' [get [time] date_and_time_string] ': '
											       'resource, ' name ', counterfactual knowledge change hypothesis dependency removed.']
									      [have semantic_dependency know_of_change_hypothesis_removal]
									      ]
									nil]]
							    change_hypothesis_dependencies]
						      [have counterfactual_knowledge_base add_semantic_frame semantic_dependency]
						      [semantic-add counterfactual_event dependency semantic_dependency]
						      ]]]]
					[get [get precondition_hypothesis_space change_feature_set] elements]]]]]
		      [get precondition_hypothesis_space_set elements]]
		
		[= cause-imagine_time [new semantic_time [+ [get imagine_time value] [new relative_time [* 60 1000000000]]]]]
		
		]]]]]
    
    ]]


