'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'traced_resource'

[deframe traced_resource [resource] [simulate_knowledge_base_names]
  [new [initial-name initial-active_funk initial-simulate_knowledge_base_names]
       [let [[wrapped_active_funk [get this wrapped_active_funk initial-active_funk]]]
	 [construct resource initial-name wrapped_active_funk]
	 
	 [= simulate_knowledge_base_names initial-simulate_knowledge_base_names]
	 
	 ]]]

[deftypefunk traced_resource execute begin_wrapped_active_funk []
  [let [[target [get this resource_semantic_frame]]]
    [set target active t]]]

[deftypefunk traced_resource execute finish_wrapped_active_funk []
  [let [[target [get this resource_semantic_frame]]]
    [set target active nil]
    nil]]

[deftypefunk traced_resource get wrapped_active_funk [active_funk]
  [let [[active_funk-args [get active_funk args]]]
    [eval `[let [[this_traced_resource ,this]]
	     [funk-new_with_name ,[get [format nil [get active_funk name] '-traced'] as-symbol] ,active_funk-args
				 [have this_traced_resource begin_wrapped_active_funk]
				 [let [[result [apply ,active_funk [conslist @active_funk-args]]]]
				   [have this_traced_resource finish_wrapped_active_funk]
				   result]]]]]]]

[deftypefunk traced_resource get resource_semantic_frame []
  [let [[resource_semantic_frame [type-get resource this resource_semantic_frame]]]
    [let [[reflective_knowledge [get [get this mind] semantic_knowledge_base `reflective_knowledge]]]
      [if [not [get reflective_knowledge contains_semantic_frame resource_semantic_frame]]
	  [have reflective_knowledge add_semantic_frame resource_semantic_frame]]]
    resource_semantic_frame]]

[deftypefunk traced_resource execute activate [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent activating target]
    [type-have-apply resource this activate args]
    [semantic-remove agent activating target]]]

[deftypefunk traced_resource execute wait_to_activate [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_to_activate target]
    [type-have-apply resource this wait_to_activate args]
    [semantic-remove agent waiting_to_activate target]]]

[deftypefunk traced_resource execute wait_to_call [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_to_call target]
    [type-have-apply resource this wait_to_call args]
    [semantic-remove agent waiting_to_call target]]]

[deftypefunk traced_resource execute call [:rest args]
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent calling target]
    [type-have-apply resource this call args]
    [semantic-remove agent calling target]]]

[deftypefunk traced_resource execute finish []
  [let [[agent  [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target [get this                                                   resource_semantic_frame]]]
    [semantic-add agent waiting_for_to_finish target]
    [type-have resource this finish]
    [semantic-remove agent waiting_for_to_finish target]]]



`[deftypefunk traced_resource execute learn_counterfactual_transframes_from_execution_event []
   ]