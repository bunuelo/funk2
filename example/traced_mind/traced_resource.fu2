'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'traced_resource'

[deframe traced_resource [resource] []
  [new [initial-name initial-active_funk]
       [let [[wrapped_active_funk [get this wrapped_active_funk initial-active_funk]]]
	 [construct resource initial-name wrapped_active_funk]
	 
	 ]]]

[deftypefunk traced_resource execute begin_wrapped_active_funk []
  [let [[action_name `cause_being_active]
	[agent       [get [if active_cause_resource active_cause_resource this] resource_semantic_frame]]
	[target      [get this                                                  resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event
					       [get [get this mind] semantic_realm]
					       action_name
					       agent
					       target]]]
      [if active_cause_event
	  [prog [terminal_format standard-terminal '\nadding active_cause_event.']
		[semantic-add semantic_resource_action_event is_caused_by active_cause_event]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      semantic_resource_action_event]]]

[deftypefunk traced_resource execute finish_wrapped_active_funk [semantic_resource_action_event]
  [if active_cause_resource
      [prog [semantic-set semantic_resource_action_event absolute_end_time [time]]
	    [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]

[deftypefunk traced_resource get wrapped_active_funk [active_funk]
  [let [[active_funk-args [get active_funk args]]]
    [eval `[let [[this_traced_resource ,this]]
	     [funk ,active_funk-args
		    [let [[semantic_resource_action_event [have this_traced_resource begin_wrapped_active_funk]]]
		      [let [[result [apply ,active_funk [conslist @active_funk-args]]]]
			[have this_traced_resource finish_wrapped_active_funk semantic_resource_action_event]
			result]]]]]]]

[deftypefunk traced_resource get resource_semantic_frame []
  [let [[resource_semantic_frame [type-get resource this resource_semantic_frame]]]
    [let [[mental_knowledge [get [get this mind] semantic_knowledge_base `mental_knowledge]]]
      [if [not [get mental_knowledge contains_semantic_frame resource_semantic_frame]]
	  [have mental_knowledge add_semantic_frame resource_semantic_frame]]]
    resource_semantic_frame]]

[deftypefunk traced_resource execute activate [:rest args]
  [let [[action_name `activate]
	[agent       [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target      [get this                                                   resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm] action_name agent target]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      [if [cause-lookup cause-resource]
	  [cause-define cause-resource_action_event semantic_resource_action_event]]
      [type-have-apply resource this activate args]
      [semantic-set semantic_resource_action_event absolute_end_time   [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]

[deftypefunk traced_resource execute wait_to_activate [:rest args]
  [let [[action_name `wait_to_activate]
	[agent       [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target      [get this                                                   resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm] action_name agent target]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      [if [cause-lookup cause-resource]
	  [cause-define cause-resource_action_event semantic_resource_action_event]]
      [type-have-apply resource this wait_to_activate args]
      [semantic-set semantic_resource_action_event absolute_end_time   [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]

[deftypefunk traced_resource execute wait_to_call [:rest args]
  [let [[action_name `wait_to_call]
	[agent       [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target      [get this                                                   resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm] action_name agent target]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      [if [cause-lookup cause-resource]
	  [cause-define cause-resource_action_event semantic_resource_action_event]]
      [type-have-apply resource this wait_to_call args]
      [semantic-set semantic_resource_action_event absolute_end_time   [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]

[deftypefunk traced_resource execute call [:rest args]
  [let [[action_name `call]
	[agent       [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target      [get this                                                   resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm] action_name agent target]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      [if [cause-lookup cause-resource]
	  [cause-define cause-resource_action_event semantic_resource_action_event]]
      [type-have-apply resource this call args]
      [semantic-set semantic_resource_action_event absolute_end_time   [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]

[deftypefunk traced_resource execute finish []
  [let [[action_name `finish]
	[agent       [get [if [cause-lookup cause-resource] cause-resource this] resource_semantic_frame]]
	[target      [get this                                                   resource_semantic_frame]]]
    [let [[semantic_resource_action_event [new semantic_resource_action_event [get [get this mind] semantic_realm] action_name agent target]]]
      [semantic-set semantic_resource_action_event absolute_start_time [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] add_semantic_frame semantic_resource_action_event]
      [if [cause-lookup cause-resource]
	  [cause-define cause-resource_action_event semantic_resource_action_event]]
      [type-have resource this finish]
      [semantic-set semantic_resource_action_event absolute_end_time   [time]]
      [have [get [get this mind] semantic_knowledge_base `mental_knowledge] remove_semantic_frame semantic_resource_action_event]]]]


