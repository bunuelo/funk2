'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_gripper'

[deframe blocks_world_gripper [blocks_world_block] [movement_command
						    [perception_list_mutex  [new mutex]]
						    [perception_list        nil]
						    [gripper_movement_speed 1.0]
						    [gripper_grab_speed     2.0]
						    [is_holding             nil]
						    [is_holding_relative_x  nil]]
  [new [initial-name
	initial-width
	initial-height
	initial-color
	initial-shape
	initial-x
	initial-y]
       [construct blocks_world_block
		  initial-name
		  initial-width
		  initial-height
		  initial-color
		  initial-shape
		  initial-x
		  initial-y]
       ]]

[deftypefunk blocks_world_gripper execute pursue_movement_command [desired_movement_command]
  [cond [[null movement_command]
	 ]
	[[eq movement_command `left]
	 [= x_velocity 0.0]
	 [= movement_command nil]]
	[[eq movement_command `right]
	 [= x_velocity 0.0]
	 [= movement_command nil]]
	]
  [if [not [null movement_command]]
      `busy
    [prog [= movement_command desired_movement_command]
	  nil]]]

`[deftypefunk blocks_world_gripper execute handle_movement [step_size]
  [cond [[null movement_command]
	 [= x_velocity 0.0]
	 [= y_velocity 0.0]]
	[[eq movement_command `left]
	 [= x_velocity [- gripper_movement_speed]]]
	[[eq movement_command `right]
	 [= x_velocity gripper_movement_speed]]
	[[eq movement_command `grab]
	 [= y_velocity gripper_grab_speed]]
	[[eq movement_command `recoil]
	 [= y_velocity [- gripper_grab_speed]]]
	[[eq movement_command `drop]
	 ]
	]]

`[deftypefunk blocks_world_gripper execute step [step_size]
  [let [[next_x [+ x [* step_size x_velocity]]]
	[next_y [+ y [* step_size y_velocity]]]]
    [if [< next_x 0.0]
	[= next_x 0.0]]
    [if [> next_x [- [get blocks_world_physics width] 1]]
	[= next_x [- [get blocks_world_physics width] 1]]]
    
    [let [[obstacle_below_y nil]
	  [obstacle_block   nil]]
      [mapc [funk [block]
		  [if [not [eq this block]]
		      [if [and [get this overlaps_horizontally block]
			       [< y [get block y]]
			       [or [null obstacle_below_y]
				   [< [get block y] obstacle_below_y]]]
			  [prog [= obstacle_below_y [get block y]]
				[= obstacle_block   block]]]]]
	    [get blocks_world_physics blocks]]
      [= on_block nil]
      [if [not [null obstacle_below_y]]
	  [prog `[terminal_format standard-terminal '\n' `[,name on ,[get block name]]]
		[let [[maximum_block_y [- obstacle_below_y height]]]
		  [if [< maximum_block_y next_y]
		      [prog [= on_block   obstacle_block]
			    [= next_y     maximum_block_y]
			    [= y_velocity 0.0]
			    [if [eq `grab movement_command]
				[prog [= movement_command      `recoil]
				      [= is_holding            obstacle_block]
				      [= is_holding_relative_x [- [get obstacle_block x] x]]
				      ]]]]]]]
      ]
    
    [if [< next_y 0.5]
	[prog [= next_y 0.5]
	      [if [eq `recoil movement_command]
		  [= movement_command nil]]]]
    
    [if [eq `drop movement_command]
	[prog [= movement_command      nil]
	      [= is_holding            nil]
	      [= is_holding_relative_x nil]]]
    
    [= x next_x]
    [= y next_y]]]

[deftypefunk blocks_world_gripper get perceptions []
  [have perception_list_mutex lock]
  [let [[perceptions perception_list]]
    [have perception_list_mutex unlock]
    perceptions]]

`[deftypefunk blocks_world_gripper execute __add_perception [perception]
  [= perception_list [cons perception perception_list]]]

[deftypefunk blocks_world_gripper execute calculate_perceptions []
  [have perception_list_mutex lock]
  [blocks_world_gripper-calculate_perceptions this]
  `[prog [= perception_list nil]
	 [mapc [funk [gripper]
		     [if [eq this gripper]
			 [prog [have this __add_perception `[,[get gripper name] is me]]
			       [have this __add_perception `[,[get gripper name] movement_command ,[if [get gripper movement_command]
												       [get gripper movement_command]
												     `nil]]]
			       ]]
		     
		     [have this __add_perception `[,[get gripper name] is-a gripper]]
		     [have this __add_perception `[,[get gripper name] color ,[get gripper color]]]
		     [have this __add_perception `[,[get gripper name] is-holding ,[if [get gripper is_holding]
										       [get [get gripper is_holding] name]
										     `nil]]]
		     
		     [if [> [get gripper x] x]
			 [have this __add_perception `[,[get gripper name] right-of ,name]]]
		     [if [< [get gripper x] x]
			 [have this __add_perception `[,[get gripper name] left-of ,name]]]
		     
		     ]
	       [get blocks_world_physics grippers]]
	 [mapc [funk [block]
		     [have this __add_perception `[,[get block name] is-a block]]
		     [have this __add_perception `[,[get block name] color ,[get block color]]]
		     [have this __add_perception `[,[get block name] shape ,[get block shape]]]
		     
		     [if [get block on_block]
			 [have this __add_perception `[,[get block name] on ,[get [get block on_block] name]]]]
		     
		     [if [> [get block x] x]
			 [have this __add_perception `[,[get block name] right-of ,name]]]
		     [if [< [get block x] x]
			 [have this __add_perception `[,[get block name] left-of ,name]]]
		     [if [and [> x [- [get block x] 0.25]]
			      [< x [+ [get block x] 0.25]]]
			 [have this __add_perception `[,[get block name] below ,name]]]
		     
		     ]
	       [get blocks_world_physics blocks]]
	 [= perception_list [reverse perception_list]]]
  [have perception_list_mutex unlock]]

[deftypefunk blocks_world_gripper set movement_command-left []
  [have this pursue_movement_command `left]]

[deftypefunk blocks_world_gripper set movement_command-right []
  [have this pursue_movement_command `right]]

[deftypefunk blocks_world_gripper set movement_command-grab []
  [have this pursue_movement_command `grab]]

[deftypefunk blocks_world_gripper set movement_command-drop []
  [have this pursue_movement_command `drop]]

[deftypefunk blocks_world_gripper set movement_command-stop []
  [have this pursue_movement_command nil]]


