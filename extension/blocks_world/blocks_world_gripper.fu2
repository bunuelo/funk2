'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_gripper'

[deframe blocks_world_gripper [blocks_world_block] [[movement_command            `stop]
						    [perception_list_mutex       [new mutex]]
						    [perception_list             nil]
						    [gripper_slow_movement_speed 0.25]
						    [gripper_movement_speed      1.0]
						    [gripper_grab_speed          4.0]
						    [is_holding                  nil]
						    [is_holding_relative_x       nil]]
  [new [initial-name
	initial-width
	initial-height
	initial-color
	initial-shape
	initial-x
	initial-y]
       [construct blocks_world_block
		  initial-name
		  initial-width
		  initial-height
		  initial-color
		  initial-shape
		  initial-x
		  initial-y]
       ]]

[deftypefunk blocks_world_gripper execute pursue_movement_command [desired_movement_command]
  [cond [[eq movement_command `stop]       [prog ]]
	[[eq movement_command `left]       [prog [= x_velocity 0.0]
						 [= movement_command `stop]]]
	[[eq movement_command `slow-left]  [prog [= x_velocity 0.0]
						 [= movement_command `stop]]]
	[[eq movement_command `right]      [prog [= x_velocity 0.0]
						 [= movement_command `stop]]]
	[[eq movement_command `slow-right] [prog [= x_velocity 0.0]
						 [= movement_command `stop]]]]
  [if [not [eq movement_command `stop]]
      `busy
    [prog [= movement_command desired_movement_command]
	  nil]]]

[deftypefunk blocks_world_gripper get perceptions []
  [have perception_list_mutex lock]
  [let [[perceptions perception_list]]
    [have perception_list_mutex unlock]
    perceptions]]

[deftypefunk blocks_world_gripper execute calculate_perceptions []
  [have perception_list_mutex lock]
  [blocks_world_gripper-calculate_perceptions this]
  [have perception_list_mutex unlock]]

[deftypefunk blocks_world_gripper set movement_command-left []
  [have this pursue_movement_command `left]]

[deftypefunk blocks_world_gripper set movement_command-slow_left []
  [have this pursue_movement_command `slow-left]]

[deftypefunk blocks_world_gripper set movement_command-right []
  [have this pursue_movement_command `right]]

[deftypefunk blocks_world_gripper set movement_command-slow_right []
  [have this pursue_movement_command `slow-right]]

[deftypefunk blocks_world_gripper set movement_command-grab []
  [have this pursue_movement_command `grab]]

[deftypefunk blocks_world_gripper set movement_command-drop []
  [have this pursue_movement_command `drop]]

[deftypefunk blocks_world_gripper set movement_command-stop []
  [have this pursue_movement_command `stop]]


