'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


'blocks_world_window'

[deframe blocks_world_gripper_controller [frame] [blocks_world
						  gripper
						  previous_perceptions
						  
						  gtk_frame
						  gtk_vbox
						  gtk_hbox
						  gtk_left_button
						  gtk_slow_left_button
						  gtk_stop_button
						  gtk_slow_right_button
						  gtk_right_button
						  gtk_grab_button
						  gtk_drop_button
						  gtk_text_view
						  
						  ]
  [new [initial-blocks_world
	initial-gripper]
       [= blocks_world initial-blocks_world]
       [= gripper      initial-gripper]
       
       [= gtk_frame             [gtk-frame-new [format nil [get gripper name]]]]
       [= gtk_vbox              [gtk-vbox-new 0]]
       [= gtk_hbox              [gtk-hbox-new 0]]
       [= gtk_left_button       [gtk-button-new_with_label 'Left']]
       [= gtk_slow_left_button  [gtk-button-new_with_label 'Slow Left']]
       [= gtk_stop_button       [gtk-button-new_with_label 'Stop']]
       [= gtk_slow_right_button [gtk-button-new_with_label 'Slow Right']]
       [= gtk_right_button      [gtk-button-new_with_label 'Right']]
       [= gtk_grab_button       [gtk-button-new_with_label 'Grab']]
       [= gtk_drop_button       [gtk-button-new_with_label 'Drop']]
       [= gtk_text_view         [gtk-text_view-new]]
       
       [have gtk_hbox pack_start gtk_left_button       nil nil 0]
       [have gtk_hbox pack_start gtk_slow_left_button  nil nil 0]
       [have gtk_hbox pack_start gtk_stop_button       nil nil 0]
       [have gtk_hbox pack_start gtk_slow_right_button nil nil 0]
       [have gtk_hbox pack_start gtk_right_button      nil nil 0]
       [have gtk_hbox pack_start gtk_grab_button       nil nil 0]
       [have gtk_hbox pack_start gtk_drop_button       nil nil 0]
       
       [have gtk_left_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command left.']
		   [set this movement_command-left]]
	     nil]
       
       [have gtk_slow_left_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command slow-left.']
		   [set this movement_command-slow_left]]
	     nil]
       
       [have gtk_stop_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command stop.']
		   [set this movement_command-stop]]
	     nil]
       
       [have gtk_slow_right_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command slow-right.']
		   [set this movement_command-slow_right]]
	     nil]
       
       [have gtk_right_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command right.']
		   [set this movement_command-right]]
	     nil]
       
       [have gtk_grab_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command grab.']
		   [set this movement_command-grab]]
	     nil]
       
       [have gtk_drop_button signal_connect 'clicked'
	     [funk []
		   [terminal_format standard-terminal '\nBlocks World: ' [get gripper name] ' movement_command drop.']
		   [set this movement_command-drop]]
	     nil]
       
       [have gtk_vbox pack_start gtk_hbox nil nil 0]
       [have gtk_vbox pack_start gtk_text_view t t 0]
       
       [have gtk_frame add gtk_vbox]
       
       [have this update]
       
       ]]

[deftypefunk blocks_world_gripper_controller get widget []
  gtk_frame]

[deftypefunk blocks_world_gripper_controller execute show_all []
  [have gtk_frame show_all]]

[deftypefunk blocks_world_gripper_controller set movement_command-right []
  [set gripper movement_command-right]]

[deftypefunk blocks_world_gripper_controller set movement_command-slow_right []
  [set gripper movement_command-slow_right]]

[deftypefunk blocks_world_gripper_controller set movement_command-left []
  [set gripper movement_command-left]]

[deftypefunk blocks_world_gripper_controller set movement_command-slow_left []
  [set gripper movement_command-slow_left]]

[deftypefunk blocks_world_gripper_controller set movement_command-stop []
  [set gripper movement_command-stop]]

[deftypefunk blocks_world_gripper_controller set movement_command-grab []
  [set gripper movement_command-grab]]

[deftypefunk blocks_world_gripper_controller set movement_command-drop []
  [set gripper movement_command-drop]]

[deftypefunk blocks_world_gripper_controller execute update []
  [let [[perceptions [get gripper perceptions]]]
    [if [not [eq perceptions previous_perceptions]]
	[prog [set [get gtk_text_view buffer] text [stringlist-intersperse [mapcar [funk [perception]
											 [format nil perception]]
										   perceptions]
									   '\n']]
	      [= previous_perceptions perceptions]]]
    
    ]]






	      

