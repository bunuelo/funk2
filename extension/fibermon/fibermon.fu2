'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe fibermon_notice_dialog [frame] [[window        [gtk-window-new]]
					 [vbox          [gtk-vbox-new 2]]
					 [label         nil]
					 [entry         [gtk-entry-new]]
					 [hbox          [gtk-hbox-new 2]]
					 [okay_button   [gtk-button-new_with_label 'Okay']]
					 [done          nil]]
  [new [note_string]
       [= label [gtk-label-new note_string]]
       [set  window title 'fibermon - notice dialog']
       [have window connect_hide_on_delete]
       [have window add vbox]
       [have vbox pack_start label nil nil 0]
       [have vbox pack_start entry nil nil 0]
       [have vbox pack_start hbox  nil nil 0]
       [have hbox pack_start okay_button nil nil 0]
       [have okay_button signal_connect 'clicked'
	     [funk []
		   [= done t]]
	     nil]
       [have window show_all]
       [fiber [funk []
		    [while [and [get window visible] [not done]]
		      [sleep 1]]
		    [have window destroy]]
	      nil]
       ]]

[deframe fibermon_define_object_dialog [frame] [[object        nil]
						[object_type   nil]
						[window        [gtk-window-new]]
						[vbox          [gtk-vbox-new 2]]
						[label         nil]
						[entry         [gtk-entry-new]]
						[hbox          [gtk-hbox-new 2]]
						[cancel_button [gtk-button-new_with_label 'Cancel']]
						[okay_button   [gtk-button-new_with_label 'Okay']]
						[done          nil]]
  [new [define_object define_object_type]
       [= object      define_object]
       [= object_type define_object_type]
       [= label       [gtk-label-new [format nil 'You have chosen to define this ' object_type '.\nPlease enter a global name for this ' object_type '.']]]
       [set  window title 'fibermon - define ' object_type ' dialog']
       [have window connect_hide_on_delete]
       [have window add vbox]
       [have vbox pack_start label nil nil 0]
       [have vbox pack_start entry nil nil 0]
       [have vbox pack_start hbox  nil nil 0]
       [have hbox pack_start cancel_button nil nil 0]
       [have hbox pack_start okay_button   nil nil 0]
       [have cancel_button signal_connect 'clicked'
	     [funk []
		   [= done t]]
	     nil]
       [have okay_button signal_connect 'clicked'
	     [funk []
		   [have this define_fiber_and_close]]
	     nil]
       [have entry key_press_event-signal_connect
	     [funk [key_event]
		   [let [[keyval [have key_event lookup `keyval]]]
		     [if [eq keyval GDK_Return]
			 [have this define_fiber_and_close]]]]
	     nil]
       
       [have window show_all]
       [fiber [funk []
		    [while [and [get window visible] [not done]]
		      [sleep 1]]
		    [have window destroy]]
	      nil]
       ]]

[deftypefunk fibermon_define_object_dialog execute define_fiber_and_close []
  [let [[object_name [get [get entry text] as-symbol]]]
    [terminal_format standard-terminal '\nDefining ' object_type ' as ' object_name '.\n']
    [eval `[globalize ,object_name ,object]]]
  [= done t]]


'fibermon_fiber'

[deframe fibermon_fiber [frame] [fiber
				 frame
				 vbox
				 menu_bar
				 
				 command_menu_item
				 command_menu
				 command_pause_menu_item
				 command_continue_menu_item
				 command_keep_undead_menu_item
				 command_dont_keep_undead_menu_item
				 command_quit_menu_item
				 
				 view_menu_item
				 view_menu
				 view_fiber_menu_item
				 view_fiber_value_menu_item
				 view_bug_menu_item
				 view_cause_menu_item
				 view_stack_trace_menu_item
				 view_stack_trace_first_block_menu_item
				 
				 environment_menu_item
				 environment_menu
				 environment_define_fiber_menu_item
				 environment_define_fiber_value_menu_item
				 environment_define_bug_menu_item
				 environment_define_cause_menu_item
				 environment_define_stack_trace_menu_item
				 environment_define_stack_trace_first_block_menu_item
				 
				 hbox
				 progress_bar
				 table
				 table_labels
				 time
				 execution_nanoseconds
				 bytecode_count
				 bytecodes_per_second
				 execution_efficiency
				 elapsed_nanoseconds
				 elapsed_execution_nanoseconds
				 elapsed_bytecode_count]
  [new [fiber]
       [fibermon_fiber-construct_fast this]
       
       [set this fiber fiber]
       
       'We maintain a reference to the frame until we finish initializing it.'
       [have frame ref]
       [fiber [funk []
		    [have command_pause_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon commanding fiber to pause.\n']
				[set fiber paused t]]
			  nil]
		    [have command_continue_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon commanding fiber to continue.\n']
				[set fiber paused nil]]
			  nil]
		    [have command_keep_undead_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon commanding fiber to keep undead.\n']
				[set fiber keep_undead t]]
			  nil]
		    [have command_dont_keep_undead_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon commanding fiber to not keep undead.\n']
				[set fiber keep_undead nil]]
			  nil]
		    [have command_quit_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon commanding fiber to quit.\n']
				[have fiber quit]]
			  nil]
		    [have view_fiber_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon printing fiber:\n']
				[print fiber]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    [have view_fiber_value_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon printing fiber value:\n']
				[print [get fiber value]]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    [have view_bug_menu_item signal_connect 'activate'
			  [funk []
				[let [[fiber-value [get fiber value]]]
				  [if [not [is-type `bug fiber-value]]
				      [terminal_format standard-terminal '\n\nfibermon: fiber value is not bug.\n']
				    [prog [terminal_format standard-terminal '\n\nfibermon printing bug:\n']
					  [labels [[print_bug [bug]
							      [print bug]
							      [cond [[eq [get bug bug_type] 7]
								     [let [[subbug [have [get bug frame] lookup `value]]]
								       [print_bug subbug]]]
								    ]]]
						  [print_bug fiber-value]]
					  [terminal_format standard-terminal '\n\n']]]]]
			  nil]
		    [have view_cause_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon printing fiber cause register:\n']
				[print [get fiber cause_reg]]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    [have view_stack_trace_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon printing fiber stack trace blocks:\n']
				[mapc &print [get [get fiber stack_trace] blocks]]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    [have view_stack_trace_first_block_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nfibermon printing fiber first block of stack trace:\n']
				[print [first [get [get fiber stack_trace] blocks]]]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    [have environment_define_fiber_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nenvironment define fiber.\n']
				[new fibermon_define_object_dialog fiber `fiber]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    [have environment_define_fiber_value_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nenvironment define fiber value.\n']
				[new fibermon_define_object_dialog [get fiber value] `fiber-value]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    [have environment_define_bug_menu_item signal_connect 'activate'
			  [funk []
				[let [[fiber-value [get fiber value]]]
				  [if [not [is-type `bug fiber-value]]
				      [terminal_format standard-terminal '\n\nfibermon: fiber value is not bug.\n']
				    [let [[bug_index 1]]
				      [labels [[print_bug [bug]
							  [cond [[eq [get bug bug_type] 7]
								 [let [[subbug             [have [get bug frame] lookup `value]]
								       [source_filename    [have [get bug frame] lookup `source_filename]]
								       [source_line_number [have [get bug frame] lookup `source_line_number]]
								       [funktion_name      [have [get bug frame] lookup `funktion_name]]]
								   [print_bug subbug]
								   [let [[bug_variable [get [format nil 'bug' bug_index] as-symbol]]]
								     [= bug_index [+ bug_index 1]]
								     [eval `[globalize ,bug_variable ,bug]]
								     [terminal_format standard-terminal '\nfibermon: defining ' bug_variable ': in ' [get funktion_name as-string] ' from ' source_filename ':' [get source_line_number as-string]]]]]
								[[eq [get bug bug_type] 8]
								 [let [[bug_name           [have [get bug frame] lookup `bug_name]]
								       [subbug             [have [get bug frame] lookup `value]]
								       [source_filename    [have [get bug frame] lookup `source_filename]]
								       [source_line_number [have [get bug frame] lookup `source_line_number]]
								       [funktion_name      [have [get bug frame] lookup `funktion_name]]]
								   [print_bug subbug]
								   [let [[bug_variable [get [format nil 'bug' bug_index] as-symbol]]]
								     [= bug_index [+ bug_index 1]]
								     [eval `[globalize ,bug_variable ,bug]]
								     [terminal_format standard-terminal '\nfibermon: defining ' bug_variable ': in ' [get funktion_name as-string] ' from ' source_filename ':' [get source_line_number as-string] ' bug_name=' [get bug_name as-string]]
								     ]]]
								[[eq [get bug bug_type] 13]
								 [let [[bug_name           [have [get bug frame] lookup `bug_name]]
								       [source_filename    [have [get bug frame] lookup `source_filename]]
								       [source_line_number [have [get bug frame] lookup `source_line_number]]
								       [funktion_name      [have [get bug frame] lookup `funktion_name]]]
								   [let [[bug_variable [get [format nil 'bug' bug_index] as-symbol]]]
								     [= bug_index [+ bug_index 1]]
								     [eval `[globalize ,bug_variable ,bug]]
								     [terminal_format standard-terminal '\nfibermon: defining ' bug_variable ': in ' [get funktion_name as-string] ' from ' source_filename ':' [get source_line_number as-string] ' bug_name=' [get bug_name as-string]]
								     ]]]
								[t
								 [let [[bug_variable [get [format nil 'bug' bug_index] as-symbol]]]
								   [= bug_index [+ bug_index 1]]
								   [eval `[globalize ,bug_variable ,bug]]
								   [terminal_format standard-terminal '\nfibermon: defining bug_type ' [get bug bug_type] ' as ' bug_variable '.']
								   ]]
								]]]
					      [print_bug fiber-value]]
				      [terminal_format standard-terminal '\n\n']]]]]
			  nil]
		    
		    [have environment_define_cause_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nenvironment define cause.\n']
				[new fibermon_define_object_dialog [get fiber cause_reg] `cause]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    [have environment_define_stack_trace_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nenvironment define stack trace.\n']
				[new fibermon_define_object_dialog [get fiber stack_trace] `fiber_stack_trace]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    [have environment_define_stack_trace_first_block_menu_item signal_connect 'activate'
			  [funk []
				[terminal_format standard-terminal '\n\nenvironment define first block of stack trace.\n']
				[let [[blocks [get [get fiber stack_trace] blocks]]]
				  [if [== [length blocks] 0]
				      [new fibermon_notice_dialog [format nil 'You have chosen to define the first block of this fiber\'s stack trace,\n'
									  'but this fiber does not have any stack trace blocks,\n'
									  'so there is no first block to define.']]
				    [new fibermon_define_object_dialog [first blocks] `fiber_stack_trace_block]]]
				[terminal_format standard-terminal '\n\n']]
			  nil]
		    
		    'We release our extra reference to the frame since we have now finished initializing it.'
		    [have frame unref]]
	      nil]
       
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_fiber get widget []
 frame]

[deftypefunk fibermon_fiber execute redraw []
  [fibermon_fiber-redraw_fast this]
  nil]

[deftypefunk fibermon_fiber execute recompute_statistics []
  [fibermon_fiber-recompute_statistics_fast this]
  nil]

'fibermon_processor'

[deframe fibermon_processor [frame] [index
				     frame
				     vbox
				     progress_bar
				     scrolled_window
				     fiber_vbox
				     fibermon_fiber_hash
				     table
				     table_labels
				     execution_nanoseconds
				     bytecode_count
				     bytecodes_per_second
				     execution_efficiency
				     elapsed_nanoseconds
				     elapsed_execution_nanoseconds
				     elapsed_bytecode_count
				     total_used_memory
				     total_free_memory]
  [new [index]
       [set this index index]
       [fibermon_processor-construct_fast this]
       [have this recompute_statistics]
       [have this redraw]
       this]]

[deftypefunk fibermon_processor get widget []
  frame]

[deftypefunk fibermon_processor execute redraw []
  [fibermon_processor-redraw_fast this]
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber redraw]]
	[get fibermon_fiber_hash values]]
  nil]

[deftypefunk fibermon_processor execute recompute_statistics []
  [mapc [funk [fibermon_fiber]
	      [have fibermon_fiber recompute_statistics]]
	[get fibermon_fiber_hash values]]
  [fibermon_processor-recompute_statistics_fast this]
  nil]

[deftypefunk fibermon_processor execute add_fiber [fibermon_fiber]
  [if [not [is-type `fibermon_fiber fibermon_fiber]]
      [error bug_type `attempted_to_add_fiber_that_is_not_a_fibermon_fiber]]
  [have fiber_vbox pack_start fibermon_fiber nil nil 0]
  [have [get fibermon_fiber widget] show_all]
  [have fibermon_fiber_hash add [get fibermon_fiber fiber] fibermon_fiber]]

[deftypefunk fibermon_processor execute remove_fiber [fibermon_fiber]
  [if [not [is-type `fibermon_fiber fibermon_fiber]]
      [error bug_type `attempted_to_remove_fiber_that_is_not_a_fibermon_fiber]]
  [have [get fibermon_fiber widget] hide_all]
  [have fiber_vbox remove fibermon_fiber]
  [have fibermon_fiber_hash remove [get fibermon_fiber fiber]]]

[deftypefunk fibermon_processor execute move_fiber [fibermon_fiber destination_processor]
  [if [not [is-type `fibermon_fiber fibermon_fiber]]
      [error bug_type `attempted_to_remove_fiber_that_is_not_a_fibermon_fiber]]
  [have [get fibermon_fiber widget] hide_all]
  [have [get fibermon_fiber widget] ref]
  [have fiber_vbox remove fibermon_fiber]
  [have fibermon_fiber_hash remove [get fibermon_fiber fiber]]
  [have destination_processor add_fiber fibermon_fiber]
  [have [get fibermon_fiber widget] unref]]


'fibermon'

[deframe fibermon [frame] [[win                     [gtk-window-new]]
			   [vbox                    [gtk-vbox-new 2]]
			   [menu_bar                [gtk-menu_bar-new]]
			   [fibermon_menu_item      [gtk-menu_item-new 'Fibermon']]
			   [fibermon_menu           [gtk-menu-new]]
			   [fibermon_exit_menu_item [gtk-menu_item-new 'Exit']]
			   [scrolled_window         [gtk-scrolled_window-new]]
			   [processor_hbox          [gtk-hbox-new 2]]
			   [processor_array         [new array 8]]
			   [done                    nil]
			   [fiber                   nil]
			   [processor_count         8]
			   [index_fiber_hash        [new ptypehash]]
			   [fibermon_fiber_hash     [new ptypehash]]]
  [new []
       [set  win default_size 1900 800]
       [set  win title 'fibermon']
       [have win connect_hide_on_delete]
       [have fibermon_menu append fibermon_exit_menu_item]
       [set  fibermon_menu_item submenu fibermon_menu]
       [have fibermon_exit_menu_item signal_connect 'activate'
	     [funk []
		   [terminal_format standard-terminal '\nfibermon received exit command from user.\n']
		   [= done t]]
	     nil]
       [have menu_bar append fibermon_menu_item]
       [dotimes [index processor_count]
	 [set processor_array elt index [new fibermon_processor index]]]
       [dotimes [index processor_count]
	 [have processor_hbox pack_start [get processor_array elt index] t t 0]]
       [have scrolled_window add_with_viewport processor_hbox]
       [have vbox pack_start menu_bar        nil nil 0]
       [have vbox pack_start scrolled_window t t 0]
       [have win add vbox]
       [= fiber [fiber [funk []
			     [cause-define cause-name `fibermon]
			     [terminal_format standard-terminal '\nfibermon starting.\n']
			     [have win show_all]
			     [while [not done]
			       [have this reorganize_fibers]
			       [have this recompute_statistics]
			       [have this redraw]
			       [sleep 1]
			       [if [not [get win visible]]
				   [= done t]]]
			     [have win destroy]
			     [terminal_format standard-terminal '\nfibermon exiting.\n']]
		       nil]]
       this]]

[deftypefunk fibermon execute reorganize_fibers []
  [mapc [funk [fibermon_fiber]
	      [let [[fiber [get fibermon_fiber fiber]]]
		[if [null [get fiber processor_assignment_index]]
		    [prog [have [get processor_array elt [have index_fiber_hash lookup fiber]] remove_fiber fibermon_fiber]
			  [have index_fiber_hash    remove fiber]
			  [have fibermon_fiber_hash remove fiber]
			  ]]]]
	[get fibermon_fiber_hash values]]
  [mapc [funk [fiber]
	      [let [[current_index [get fiber processor_assignment_index]]]
		[if current_index
		    [prog [if [get index_fiber_hash contains fiber]
			      [let [[old_known_index [have index_fiber_hash lookup fiber]]]
				[if [not [== old_known_index current_index]]
				    [let [[fibermon_fiber [have fibermon_fiber_hash lookup fiber]]]
				      [have index_fiber_hash remove fiber]
				      [have [get processor_array elt old_known_index] move_fiber fibermon_fiber [get processor_array elt current_index]]
				      [have index_fiber_hash add fiber current_index]]]]
			    [let [[fibermon_fiber [new fibermon_fiber fiber]]]
			      [have index_fiber_hash    add fiber current_index]
			      [have fibermon_fiber_hash add fiber fibermon_fiber]
			      [have [get processor_array elt current_index] add_fiber fibermon_fiber]]]]]]]
	[global_scheduler-active_fibers]]
  nil]

[deftypefunk fibermon execute redraw []
  [dotimes [index processor_count]
    [have [get processor_array elt index] redraw]]
  nil]

[deftypefunk fibermon execute recompute_statistics []
  [dotimes [index processor_count]
    [have [get processor_array elt index] recompute_statistics]]
  nil]

[defunk fibermon-command_line [:rest args]
  [let [[print_usage_message_and_exit nil]]
    [if args
	[let [[iter args]]
	  [while iter
	    [let [[arg [first iter]]]
	      [cond [[or [eq arg `-h]
			 [eq arg `help]] [prog [= print_usage_message_and_exit t]]]
		    [t                   [prog [terminal_format standard-terminal '\nfibermon fatal: unrecognized command line argument, ' arg '.\n']
					       [= print_usage_message_and_exit t]]]]]
	    [= iter [next iter]]]]]
    [if print_usage_message_and_exit
	[terminal_format standard-terminal 'FIBERMON(1)'
			 '\n'   'NAME'
			 '\n'   '       fibermon - display Funk fibers'
			 '\n'   ''
			 '\n'   'SYNOPSIS'
			 '\n'   '       fibermon -h'
			 '\n'   ''
			 '\n'   'DESCRIPTION'
			 '\n'   '       The fibermon program provides a dynamic real-time view of a running system.  It can '
			 '\n'   '       display system summary information as well as a list of tasks currently being managed '
			 '\n'   '       by the Funk kernel.'
			 '\n'   ''
			 '\n'   '       This description is inspired by the TOP Linux man page.']
      [let [[fibermon [new fibermon]]]
	nil]]]]

[defmetro fibermon [:rest args]
  `[fibermon-command_line @[mapcar [funk [arg] `[quote ,arg]] args]]]


