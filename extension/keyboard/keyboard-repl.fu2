'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk keyboard-check_keypress []
  [let [[old_opts [keyboard-current_mode]]]
    [keyboard-enable_noncanonical_mode]
    [let [[ch [keyboard-try_read_character]]]
      [if [null ch]
	  nil
	[let [[result [cond [[eq ch #c7F] `key:backspace]
			    [[eq ch #c1B] [let [[escaped_ch [keyboard-try_read_character]]]
					    [if [null escaped_ch]
						`key:escape
						[cond [[equals [get escaped_ch string] '['] [let [[ansi_ch [keyboard-try_read_character]]]
											      [if [null ansi_ch]
												  [prog [terminal_format standard-terminal '^[[']
													`key:invalid]
												[cond [[equals [get ansi_ch string] 'A'] `key:up]
												      [[equals [get ansi_ch string] 'B'] `key:down]
												      [[equals [get ansi_ch string] 'C'] `key:right]
												      [[equals [get ansi_ch string] 'D'] `key:left]
												      [t                                 [prog [terminal_format standard-terminal '^[[' [get ansi_ch string]]
																	       `key:invalid]]]]]]
						      [[equals [get escaped_ch string] 'O'] [let [[other_ch [keyboard-try_read_character]]]
											      [if [null other_ch]
												  [prog [terminal_format standard-terminal '^[O']
													`key:invalid]
												[cond [[equals [get other_ch string] 'H'] `key:home]
												      [[equals [get other_ch string] 'F'] `key:end]
												      [t                                  [prog [terminal_format standard-terminal '^[O' [get other_ch string]]
																		`key:invalid]]]]]]
						      [t                                    [prog [terminal_format standard-terminal '^[' [get escaped_ch string]]
												  `key:invalid]]]]]]
			    [t            ch]]]]
	  [keyboard-current_mode-set old_opts]
	  result]]]]]

[deframe keyboard_editor [frame] [[old_termios_options             nil]
				  [history_sequence                nil]
				  [done                            nil]
				  [start_x                         0]
				  [start_y                         0]
				  [cursor_x                        0]
				  [cursor_y                        0]
				  [buffer_max_x                    0]
				  [buffer_max_y                    0]
				  [saving_x_column_during_movement nil]
				  [saved_x_column                  0]
				  line_array]
  [new []
       [= line_array [new array 1]]
       [set line_array elt 0 '']]]

[deftypefunk keyboard_editor execute insert_char [line_index char_index char]
  [let [[line_str [get line_array elt line_index]]]
    [let [[first_part [get line_str substring 0          char_index]]
	  [last_part  [get line_str substring char_index [get line_str length]]]]
      [set line_array elt line_index [format nil first_part [get char string] last_part]]]]]

[deftypefunk keyboard_editor execute remove_char [line_index char_index]
  [let [[line_str [get line_array elt line_index]]]
    [let [[first_part [get line_str substring 0                char_index]]
	  [last_part  [get line_str substring [+ char_index 1] [get line_str length]]]]
      [set line_array elt line_index [format nil first_part last_part]]]]]

[deftypefunk keyboard_editor execute insert_line [line_index]
  [let [[old_array line_array]]
    [= line_array [new array [+ [get old_array length] 1]]]
    [dotimes [i line_index]
      [set line_array elt i [get old_array elt i]]]
    [set line_array elt line_index '']
    [dotimes [i [- [get old_array length] line_index]]
      [set line_array elt [+ line_index i 1] [get old_array elt [+ line_index i]]]]]]

[deftypefunk keyboard_editor execute remove_line [line_index]
  [let [[old_array line_array]]
    [= line_array [new array [- [get old_array length] 1]]]
    [dotimes [i [- line_index 1]]
      [set line_array elt i [get old_array elt i]]]
    [dotimes [i [- [get old_array length] line_index]]
      [set line_array elt [- [+ line_index i] 1] [get old_array elt [+ line_index i]]]]]]

[deftypefunk keyboard_editor get line_num []
  [get line_array length]]

[deftypefunk keyboard_editor get current_line []
  [get line_array elt cursor_y]]

[deftypefunk keyboard_editor get line [line_index]
  [get line_array elt line_index]]

[deftypefunk keyboard_editor set line [line_index new_line]
  [set line_array elt line_index new_line]]

[deftypefunk keyboard_editor execute print_debug [:rest expressions]
  [print-ansi-move [- cursor_x] [- [+ cursor_y 1]]]
  [let [[begin_x [get standard-terminal x]]
	[begin_y [get standard-terminal height]]]
    [apply &terminal_format [cons standard-terminal expressions]]
    [let [[end_x [get standard-terminal x]]
	  [end_y [get standard-terminal height]]]
      [print-ansi-move [- cursor_x [- end_x begin_x]]
		       [- [+ cursor_y 1] [- end_y begin_y]]]]]]

[deftypefunk keyboard_editor execute press_backspace []
  [if [> cursor_x 0]
      [prog [= cursor_x [- cursor_x 1]]
	    [have this remove_char cursor_y cursor_x]
	    [terminal_format standard-terminal '\b']
	    [let [[current_line [get this current_line]]]
	      [terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]] ' ']
	      [print-ansi-move [- cursor_x [get current_line length] 1] 0]]]
    [if [> cursor_y 0]
	[prog [let [[this_line [get this line cursor_y]]
		    [prev_line [get this line [- cursor_y 1]]]]
		[have this remove_line cursor_y]
		[= cursor_x [get prev_line length]]
		[= cursor_y [- cursor_y 1]]
		[let [[new_line [format nil prev_line this_line]]]
		  [set this line cursor_y new_line]
		  [if [> [get new_line length] buffer_max_x]
		      [= buffer_max_x [get new_line length]]]]
		[= buffer_max_y [- [get this line_num] 1]]
		[print-ansi-move 0 -1]
		[dotimes [i [- [+ buffer_max_y 1] cursor_y]]
		  [let [[line [get this line [+ cursor_y i]]]]
		    [terminal_format standard-terminal line]
		    [dotimes [j [- buffer_max_x [get line length]]]
		      [terminal_format standard-terminal ' ']]
		    [print-ansi-move [- buffer_max_x] 1]]]
		[dotimes [j buffer_max_x]
		  [terminal_format standard-terminal ' ']]
		[print-ansi-move [- cursor_x buffer_max_x] [- cursor_y [+ buffer_max_y 1]]]
		]]]]]

[deftypefunk keyboard_editor execute insert_enter_char []
  [let [[old_line [get this current_line]]]
    [have this insert_line cursor_y]
    [set this line cursor_y       [get old_line substring 0 cursor_x]]
    [set this line [+ cursor_y 1] [get old_line substring cursor_x [get old_line length]]]]
  [if [> [- [get this line_num] 1] buffer_max_y]
      [= buffer_max_y [- [get this line_num] 1]]]
  [print-ansi-move [- cursor_x] 0]
  [= cursor_x 0]
  [= cursor_y [+ cursor_y 1]]
  [dotimes [i [- [+ buffer_max_y 1] cursor_y]]
    [if [!= i 0]
	[print-ansi-move [- [+ buffer_max_x 1]] 1]]
    [let [[line [get this line [- [+ cursor_y i] 1]]]]
      [terminal_format standard-terminal line]
      [dotimes [j [- [+ buffer_max_x 1] [get line length]]]
	[terminal_format standard-terminal ' ']]]]
  [terminal_format standard-terminal '\n']
  [dotimes [i start_x]
    [terminal_format standard-terminal ' ']]
  [let [[line [get this line buffer_max_y]]]
    [terminal_format standard-terminal line]
    [print-ansi-move [- [get line length]] [- cursor_y buffer_max_y]]]] 

[deftypefunk keyboard_editor get input []
  [let [[stringlist nil]]
    [dotimes [i [get this line_num]]
      [= stringlist [cons [get this line [- buffer_max_y i]] stringlist]]]
    [have [format nil '[' [stringlist-intersperse stringlist '\n'] ']'] read]]]

[deftypefunk keyboard_editor execute press_enter []
  [if [and [== cursor_y buffer_max_y]
	   [== cursor_x [get [get this current_line] length]]]
      [if [get this input]
	  [= done t]]]
  [if [not done]
      [have this insert_enter_char]]]

[deftypefunk keyboard_editor execute press_tab []
  [let [[tab_space_num [- [<< [>> [+ cursor_x 8] 3] 3] cursor_x]]]
    [let [[space [get ' ' elt 0]]]
      [dotimes [i tab_space_num]
	[have this press_char_key space]]]]]

[deftypefunk keyboard_editor execute press_escape []
  [= done t]]

[deftypefunk keyboard_editor execute press_up []
  [if [> cursor_y 0]
      [prog [= cursor_y [- cursor_y 1]]
	    [print-ansi-move 0 -1]
	    [if saving_x_column_during_movement
		[prog [print-ansi-move [- saved_x_column cursor_x] 0]
		      [= cursor_x saved_x_column]]]
	    [let [[line [get this line cursor_y]]]
	      [if [> cursor_x [get line length]]
		  [prog [if [not saving_x_column_during_movement]
			    [prog [= saving_x_column_during_movement t]
				  [= saved_x_column                  cursor_x]]]
			[print-ansi-move [- [get line length] cursor_x] 0]
			[= cursor_x [get line length]]]]]]]]


[deftypefunk keyboard_editor execute press_down []
  [if [< cursor_y buffer_max_y]
      [prog [= cursor_y [+ cursor_y 1]]
	    [print-ansi-move 0 1]
	    [if saving_x_column_during_movement
		[prog [print-ansi-move [- saved_x_column cursor_x] 0]
		      [= cursor_x saved_x_column]]]
	    [let [[line [get this line cursor_y]]]
	      [if [> cursor_x [get line length]]
		  [prog [if [not saving_x_column_during_movement]
			    [prog [= saving_x_column_during_movement t]
				  [= saved_x_column                  cursor_x]]]
			[print-ansi-move [- [get line length] cursor_x] 0]
			[= cursor_x [get line length]]]]]]]]

[deftypefunk keyboard_editor execute press_right []
  [if [< cursor_x [get [get this line cursor_y] length]]
      [prog [= cursor_x [+ cursor_x 1]]
	    [print-ansi-move 1 0]]]]

[deftypefunk keyboard_editor execute press_left []
  [if [> cursor_x 0]
      [prog [= cursor_x [- cursor_x 1]]
	    [print-ansi-move -1 0]]]]

[deftypefunk keyboard_editor execute press_home []
  [print-ansi-move [- cursor_x] 0]
  [= cursor_x 0]]

[deftypefunk keyboard_editor execute press_end []
  [print-ansi-move [- [get [get this line cursor_y] length] cursor_x] 0]
  [= cursor_x [get [get this line cursor_y] length]]]

[deftypefunk keyboard_editor execute press_char_key [key]
  [cond [[equals [get key string] '\n'] [have this press_enter]]
	[[equals [get key string] '\t'] [have this press_tab]]
	[t                              [prog [have this insert_char cursor_y cursor_x key]
					      [= cursor_x [+ cursor_x 1]]
					      [terminal_format standard-terminal [get key string]]
					      [let [[current_line [get this current_line]]]
						[terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]]]
						[print-ansi-move [- cursor_x [get current_line length]] 0]
						[if [> [get current_line length] buffer_max_x]
						    [= buffer_max_x [get current_line length]]]]]]]]

[deftypefunk keyboard_editor execute press_unknown_key []
  [dotimes [i 10]
    [terminal_format standard-terminal '.']
    [millisleep 10]]
  [terminal_format standard-terminal '!']
  [millisleep 10]
  [terminal_format standard-terminal '\b \b']
  [millisleep 10]
  [dotimes [i 10]
    [terminal_format standard-terminal '\b \b']
    [millisleep 10]]
  [terminal_format standard-terminal standard-terminal]]

[deftypefunk keyboard_editor execute check_key []
  [let [[key [keyboard-check_keypress]]]
    [if [null key]
	[millisleep 100]
      [prog [if [not [or [eq key `key:up]
			 [eq key `key:down]]]
		[= saving_x_column_during_movement nil]]
            [cond [[eq key `key:backspace]        [have this press_backspace]]
		  [[eq key `key:escape]           [have this press_escape]]
		  [[eq key `key:up]               [have this press_up]]
		  [[eq key `key:down]             [have this press_down]]
		  [[eq key `key:right]            [have this press_right]]
		  [[eq key `key:left]             [have this press_left]]
		  [[eq key `key:home]             [have this press_home]]
		  [[eq key `key:end]              [have this press_end]]
		  [[is-type `char key]            [have this press_char_key key]]
		  [t                              [have this press_unknown_key]]]
	    `[have this print_debug cursor_x ' ' cursor_y '    ']]]]]


[deftypefunk keyboard_editor execute initialize []
  [= history_sequence [cons line_array history_sequence]]
  [= line_array       [new array 1]]
  [set line_array elt 0 '']
  [= done nil]
  [= old_termios_options [keyboard-current_mode]]
  [keyboard-enable_noncanonical_mode]
  [= start_x [get standard-terminal x]]
  [= start_y [get standard-terminal height]]
  nil]

[deftypefunk keyboard_editor execute destroy []
  [keyboard-current_mode-set old_termios_options]]

[deftypefunk keyboard_editor execute reads []
  [have this initialize]
  'Temporarily catch bug if there is one, so that we can get back out of canonical keyboard mode below.'
  [let [[result [shelter [while [not done]
			   [have this check_key]]]]]
    [have this destroy]
    [if [is-type `bug result]
	[bug result]
      [get this input]]]]


[defunk keyboard-reads []
  [let [[keyboard_editor [new keyboard_editor]]]
    [have keyboard_editor reads]]]

[defunk keyboard-repl []
  [let [[keyboard_editor [new keyboard_editor]]]
    [let [[done nil]]
      [while [not done]
	[ansi-stream-foreground [get standard-terminal stream] terminal_repl-prompt_color]
	[terminal_format standard-terminal '\n in-> ']
	[ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
	[let [[reads [have keyboard_editor reads]]]
	  [let [[iter reads]]
	    [while iter
	      [let [[read [car iter]]]
		[cond [[eq read `quit] [prog [= done t]
					     [= iter nil]]]
		      [t               [let [[result [shelter [cause-define cause-name `repl-eval]
							      [cause-define cause-exp  read]
							      [ansi-stream-reset [get standard-terminal stream]]
							      [eval read]]]]
					 [if [is-type `bug result]
					     [prog [have result pretty_print]
						   [= iter nil]]
					   [prog [ansi-stream-foreground [get standard-terminal stream] terminal_repl-prompt_color]
						 [terminal_format standard-terminal '\nout-> ']
						 [terminal_write standard-terminal result]]]]]]]
	      [if iter
		  [= iter [cdr iter]]]]]]]]]]



