'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk keyboard-check_keypress []
  [let [[old_opts [keyboard-current_mode]]]
    [keyboard-enable_noncanonical_mode]
    [let [[ch [keyboard-try_read_character]]]
      [if [null ch]
	  nil
	[let [[result [cond [[eq ch #c7F] `key:backspace]
			    [[eq ch #c1B] [let [[escaped_ch [keyboard-try_read_character]]]
					    [if [null escaped_ch]
						`key:escape
						[cond [[equals [get escaped_ch string] '['] [let [[ansi_ch [keyboard-try_read_character]]]
											      [if [null ansi_ch]
												  [prog [terminal_format standard-terminal '^[[']
													`key:invalid]
												[cond [[equals [get ansi_ch string] 'A'] `key:up]
												      [[equals [get ansi_ch string] 'B'] `key:down]
												      [[equals [get ansi_ch string] 'C'] `key:right]
												      [[equals [get ansi_ch string] 'D'] `key:left]
												      [t                                 [prog [terminal_format standard-terminal '^[[' [get ansi_ch string]]
																	       `key:invalid]]]]]]
						      [[equals [get escaped_ch string] 'O'] [let [[other_ch [keyboard-try_read_character]]]
											      [if [null other_ch]
												  [prog [terminal_format standard-terminal '^[O']
													`key:invalid]
												[cond [[equals [get other_ch string] 'H'] `key:home]
												      [[equals [get other_ch string] 'F'] `key:end]
												      [t                                  [prog [terminal_format standard-terminal '^[O' [get other_ch string]]
																		`key:invalid]]]]]]
						      [t                                    [prog [terminal_format standard-terminal '^[' [get escaped_ch string]]
												  `key:invalid]]]]]]
			    [t            ch]]]]
	  [keyboard-current_mode-set old_opts]
	  result]]]]]

[deframe keyboard_editor [frame] [[done         nil]
				  [start_x      0]
				  [start_y      0]
				  [cursor_x     0]
				  [cursor_y     0]
				  [buffer_max_x 0]
				  [buffer_max_y 0]
				  line_array]
  [new []
       [= line_array [new array 1]]
       [set line_array elt 0 '']]]

[deftypefunk keyboard_editor execute insert_char [line_index char_index char]
  [let [[line_str [get line_array elt line_index]]]
    [let [[first_part [get line_str substring 0          char_index]]
	  [last_part  [get line_str substring char_index [get line_str length]]]]
      [set line_array elt line_index [format nil first_part [get char string] last_part]]]]]

[deftypefunk keyboard_editor execute remove_char [line_index char_index]
  [let [[line_str [get line_array elt line_index]]]
    [let [[first_part [get line_str substring 0                char_index]]
	  [last_part  [get line_str substring [+ char_index 1] [get line_str length]]]]
      [set line_array elt line_index [format nil first_part last_part]]]]]

[deftypefunk keyboard_editor execute insert_line [line_index]
  [let [[old_array line_array]]
    [= line_array [new array [+ [get old_array length] 1]]]
    [dotimes [i line_index]
      [set line_array elt i [get old_array elt i]]]
    [set line_array elt line_index '']
    [dotimes [i [- [get old_array length] line_index]]
      [set line_array elt [+ line_index i 1] [get old_array elt [+ line_index i]]]]]]

[deftypefunk keyboard_editor get current_line []
  [get line_array elt cursor_y]]

[deftypefunk keyboard_editor get line [line_index]
  [get line_array elt line_index]]

[deftypefunk keyboard_editor execute print_debug [:rest expressions]
  [print-ansi-move [- cursor_x] [- [+ cursor_y 1]]]
  [let [[begin_x [get standard-terminal x]]
	[begin_y [get standard-terminal height]]]
    [apply &terminal_format [cons standard-terminal expressions]]
    [let [[end_x [get standard-terminal x]]
	  [end_y [get standard-terminal height]]]
      [print-ansi-move [- cursor_x [- end_x begin_x]]
		       [- [+ cursor_y 1] [- end_y begin_y]]]]]]

[defunk print-ansi-erase_line []
  [terminal_format standard-terminal [get #c1B string] '[K']]

[deftypefunk keyboard_editor execute __check_key []
  [let [[key [keyboard-check_keypress]]]
    [if [null key]
	[millisleep 100]
      [prog [cond [[eq key `key:backspace]        [if [> cursor_x 0]
						      [prog [= cursor_x [- cursor_x 1]]
							    [have this remove_char cursor_y cursor_x]
							    [terminal_format standard-terminal '\b']
							    [let [[current_line [get this current_line]]]
							      [terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]] ' ']
							      [print-ansi-move [- cursor_x [get current_line length] 1] 0]]]]]
		  [[eq key `key:escape]           [= done t]]
		  [[eq key `key:up]               [if [> cursor_y 0]
						      [prog [= cursor_y [- cursor_y 1]]
							    [print-ansi-move 0 -1]]]]
		  [[eq key `key:down]             [if [< cursor_y buffer_max_y]
						      [prog [= cursor_y [+ cursor_y 1]]
							    [print-ansi-move 0 1]]]]
		  [[eq key `key:right]            [if [< cursor_x buffer_max_x]
						      [prog [= cursor_x [+ cursor_x 1]]
							    [print-ansi-move 1 0]]]]
		  [[eq key `key:left]             [if [> cursor_x 0]
						      [prog [= cursor_x [- cursor_x 1]]
							    [print-ansi-move -1 0]]]]
		  [[eq key `key:home]             ]
		  [[eq key `key:end]              ]
		  [[is-type `char key]            [cond [[equals [get key string] '\n'] [prog [= cursor_x 0]
											      [= cursor_y [+ cursor_y 1]]
											      [if [> cursor_y buffer_max_y]
												  [= buffer_max_y cursor_y]]
											      [have this insert_line cursor_y]
											      [dotimes [i [+ [- buffer_max_y cursor_y] 1]]
												[terminal_format standard-terminal '\n']
												[dotimes [i start_x]
												  [terminal_format standard-terminal ' ']]
												[terminal_format standard-terminal [get this line [+ cursor_y i]]]]
											      [print-ansi-move 0 [- [- buffer_max_y cursor_y 1]]]
											      [terminal_format standard-terminal '\r']
											      [dotimes [i start_x]
												[terminal_format standard-terminal ' ']]
											      ]]
							[[equals [get key string] '\t'] [let [[tab_space_num [- [<< [>> [+ cursor_x 8] 3] 3] cursor_x]]]
											  [= cursor_x [+ cursor_x tab_space_num]]
											  [if [> cursor_x buffer_max_x]
											      [= buffer_max_x cursor_x]]
											  [dotimes [i tab_space_num]
											    [terminal_format standard-terminal ' ']]]]
							[t                              [prog [have this insert_char cursor_y cursor_x key]
											      [= cursor_x [+ cursor_x 1]]
											      [terminal_format standard-terminal [get key string]]
											      [let [[current_line [get this current_line]]]
												[terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]]]
												[print-ansi-move [- cursor_x [get current_line length]] 0]
												[if [> [get current_line length] buffer_max_x]
												    [= buffer_max_x [get current_line length]]]]]]]]
		  [t                              [prog [dotimes [i 10]
							  [terminal_format standard-terminal '.']
							  [millisleep 10]]
							[terminal_format standard-terminal '!']
							[millisleep 10]
							[terminal_format standard-terminal '\b \b']
							[millisleep 10]
							[dotimes [i 10]
							  [terminal_format standard-terminal '\b \b']
							  [millisleep 10]]
							[terminal_format standard-terminal standard-terminal]
							]]]
	    [have this print_debug cursor_x ' ' cursor_y '    ']]]]]


[deftypefunk keyboard_editor execute read []
  [let [[old_opts [keyboard-current_mode]]]
    [keyboard-enable_noncanonical_mode]
    'Temporarily catch bug if there is one, so that we can get back out of canonical keyboard mode below.'
    [let [[result [shelter [= start_x [get standard-terminal x]]
			   [= start_y [get standard-terminal height]]
			   [keyboard-check_keypress] 'get rid of first enter.'
			   [while [not done]
			     [have this __check_key]]]]]
      [keyboard-current_mode-set old_opts]
      [if [is-type `bug result]
	  [bug result]
	result]]]]


[defunk keyboard-read []
  [let [[keyboard_editor [new keyboard_editor]]]
    [have keyboard_editor read]
    keyboard_editor]]

[defunk keyboard-repl []
  [terminal_format standard-terminal '\n in-> ']
  [keyboard-read]]



