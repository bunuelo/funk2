'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[globalize current_keyboard_editor_mutex [new mutex]]
[globalize current_keyboard_editor       nil]

[deframe keyboard_editor [frame] [[old_termios_options             nil]
				  [history_sequence                nil]
				  [future_sequence                 nil]
				  [done                            nil]
				  [start_x                         0]
				  [start_y                         0]
				  [cursor_x                        0]
				  [cursor_y                        0]
				  [buffer_max_x                    0]
				  [buffer_max_y                    0]
				  [saving_x_column_during_movement nil]
				  [saved_x_column                  0]
				  [last_keypress_time              [time]]
				  [debug	                   nil]
				  line_array]
  [new []
       [= line_array [new array 1]]
       [set line_array elt 0 '']]]

[deftypefunk keyboard_editor execute initialize []
  [= history_sequence [cons line_array history_sequence]]
  [= line_array       [new array 1]]
  [set line_array elt 0 '']
  [= cursor_x                        0]
  [= cursor_y                        0]
  [= buffer_max_x                    0]
  [= buffer_max_y                    0]
  [= saving_x_column_during_movement nil]
  [= done                            nil]
  [= old_termios_options [keyboard-current_mode]]
  [keyboard-enable_noncanonical_mode]
  [= start_x [get standard-terminal x]]
  [= start_y [get standard-terminal height]]
  nil]

[deftypefunk keyboard_editor execute destroy []
  [keyboard-current_mode-set old_termios_options]]

[deftypefunk keyboard_editor execute insert_char [line_index char_index char]
  [keyboard_editor-insert_char line_index char_index char]]

[deftypefunk keyboard_editor execute remove_char [line_index char_index]
  [let [[line_str [get line_array elt line_index]]]
    [let [[first_part [get line_str substring 0                char_index]]
	  [last_part  [get line_str substring [+ char_index 1] [get line_str length]]]]
      [set line_array elt line_index [format nil first_part last_part]]]]]

[deftypefunk keyboard_editor execute insert_line [line_index]
  [let [[old_array line_array]]
    [= line_array [new array [+ [get old_array length] 1]]]
    [dotimes [i line_index]
      [set line_array elt i [get old_array elt i]]]
    [set line_array elt line_index '']
    [dotimes [i [- [get old_array length] line_index]]
      [set line_array elt [+ line_index i 1] [get old_array elt [+ line_index i]]]]]]

[deftypefunk keyboard_editor execute remove_line [line_index]
  [let [[old_array line_array]]
    [= line_array [new array [- [get old_array length] 1]]]
    [dotimes [i [- line_index 1]]
      [set line_array elt i [get old_array elt i]]]
    [dotimes [i [- [get old_array length] line_index]]
      [set line_array elt [- [+ line_index i] 1] [get old_array elt [+ line_index i]]]]]]

[deftypefunk keyboard_editor get line_num []
  [get line_array length]]

[deftypefunk keyboard_editor get current_line []
  [keyboard_editor-current_line this]]

[deftypefunk keyboard_editor get line [line_index]
  [get line_array elt line_index]]

[deftypefunk keyboard_editor set line [line_index new_line]
  [set line_array elt line_index new_line]]

[deftypefunk keyboard_editor execute print_debug [:rest expressions]
  [print-ansi-move [- cursor_x] [- [+ cursor_y 1]]]
  [let [[begin_x [get standard-terminal x]]
	[begin_y [get standard-terminal height]]]
    [apply &terminal_format [cons standard-terminal expressions]]
    [let [[end_x [get standard-terminal x]]
	  [end_y [get standard-terminal height]]]
      [print-ansi-move [- cursor_x [- end_x begin_x]]
		       [- [+ cursor_y 1] [- end_y begin_y]]]]]]

[deftypefunk keyboard_editor execute press_backspace []
  [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
  [if [> cursor_x 0]
      [prog [= cursor_x [- cursor_x 1]]
	    [have this remove_char cursor_y cursor_x]
	    [terminal_format standard-terminal '\b']
	    [let [[current_line [get this current_line]]]
	      [terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]] ' ']
	      [print-ansi-move [- cursor_x [get current_line length] 1] 0]]]
    [if [> cursor_y 0]
	[let [[this_line [get this line cursor_y]]
	      [prev_line [get this line [- cursor_y 1]]]]
	  [have this remove_line cursor_y]
	  [= cursor_x [get prev_line length]]
	  [= cursor_y [- cursor_y 1]]
	  [let [[new_line [format nil prev_line this_line]]]
	    [set this line cursor_y new_line]
	    [if [> [get new_line length] buffer_max_x]
		[= buffer_max_x [get new_line length]]]]
	  [= buffer_max_y [- [get this line_num] 1]]
	  [print-ansi-move 0 -1]
	  [dotimes [i [- [+ buffer_max_y 1] cursor_y]]
	    [let [[line [get this line [+ cursor_y i]]]]
	      [terminal_format standard-terminal line]
	      [terminal_format standard-terminal [get ' ' multiply [- buffer_max_x [get line length]]]]
	      [print-ansi-move [- buffer_max_x] 1]]]
	  [terminal_format standard-terminal [get ' ' multiply buffer_max_x]]
	  [print-ansi-move [- cursor_x buffer_max_x] [- cursor_y [+ buffer_max_y 1]]]
	  ]]]
  [ansi-stream-reset [get standard-terminal stream]]]

[deftypefunk keyboard_editor execute press_delete []
  [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
  [let [[current_line [get this current_line]]]
    [if [< cursor_x [get current_line length]]
	[prog [have this remove_char cursor_y cursor_x]
	      [let [[current_line [get this current_line]]]
		[terminal_format standard-terminal [get current_line substring cursor_x [get current_line length]] ' ']
		[print-ansi-move [- cursor_x [get current_line length] 1] 0]]]
      [if [< cursor_y [- [get this line_num] 1]]
	  [let [[this_line [get this line cursor_y]]
		[next_line [get this line [+ cursor_y 1]]]]
	    [have this remove_line cursor_y]
	    [let [[new_line [format nil this_line next_line]]]
	      [set this line cursor_y new_line]
	      [if [> [get new_line length] buffer_max_x]
		  [= buffer_max_x [get new_line length]]]]
	    [= buffer_max_y [- [get this line_num] 1]]
	    [print-ansi-move [- cursor_x] 0]
	    [dotimes [i [- [+ buffer_max_y 1] cursor_y]]
	      [let [[line [get this line [+ cursor_y i]]]]
		[terminal_format standard-terminal line]
		[terminal_format standard-terminal [get ' ' multiply [- buffer_max_x [get line length]]]]
		[print-ansi-move [- buffer_max_x] 1]]]
	    [terminal_format standard-terminal [get ' ' multiply buffer_max_x]]
	    [print-ansi-move [- cursor_x buffer_max_x] [- cursor_y [+ buffer_max_y 1]]]
	    ]]]]
  [ansi-stream-reset [get standard-terminal stream]]]

[deftypefunk keyboard_editor execute press_insert []
  ]

[deftypefunk keyboard_editor execute insert_enter_char []
  [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
  [let [[old_line [get this current_line]]]
    [have this insert_line cursor_y]
    [set this line cursor_y       [get old_line substring 0 cursor_x]]
    [set this line [+ cursor_y 1] [get old_line substring cursor_x [get old_line length]]]]
  [if [> [- [get this line_num] 1] buffer_max_y]
      [= buffer_max_y [- [get this line_num] 1]]]
  [print-ansi-move [- cursor_x] 0]
  [= cursor_x 0]
  [= cursor_y [+ cursor_y 1]]
  [dotimes [i [- [+ buffer_max_y 1] cursor_y]]
    [if [!= i 0]
	[print-ansi-move [- [+ buffer_max_x 1]] 1]]
    [let [[line [get this line [- [+ cursor_y i] 1]]]]
      [terminal_format standard-terminal line]
      [terminal_format standard-terminal [get ' ' multiply [- [+ buffer_max_x 1] [get line length]]]]]]
  [terminal_format standard-terminal '\n']
  [terminal_format standard-terminal [get ' ' multiply start_x]]
  [let [[line [get this line buffer_max_y]]]
    [terminal_format standard-terminal line]
    [print-ansi-move [- [get line length]] [- cursor_y buffer_max_y]]]
  [ansi-stream-reset [get standard-terminal stream]]]

[deftypefunk keyboard_editor get input []
  [let [[stringlist nil]]
    [dotimes [i [get this line_num]]
      [= stringlist [cons [get this line [- buffer_max_y i]] stringlist]]]
    [let [[total_input_string [format nil '[' [stringlist-intersperse stringlist '\n'] ']']]]
      [if debug
	  [have this print_debug 'total_input_string: "' total_input_string '"']]
      [have total_input_string read]]]]

[deftypefunk keyboard_editor execute press_enter []
  [if [and [== cursor_y buffer_max_y]
	   [== cursor_x [get [get this current_line] length]]]
      [if [let [[input [get this input]]]
	    [if debug
		[have this print_debug 'input: ' input]]
	    input]
	  [= done t]]]
  [if [not done]
      [have this insert_enter_char]]]

[deftypefunk keyboard_editor execute press_tab []
  [let [[tab_space_num [- [<< [>> [+ cursor_x 8] 3] 3] cursor_x]]]
    [let [[space [get ' ' elt 0]]]
      [dotimes [i tab_space_num]
	[have this press_char_key space]]]]]

[deftypefunk keyboard_editor execute press_escape []
  [= done t]]

[deftypefunk keyboard_editor execute press_up []
  [if [> cursor_y 0]
      [prog [= cursor_y [- cursor_y 1]]
	    [print-ansi-move 0 -1]
	    [if saving_x_column_during_movement
		[prog [print-ansi-move [- saved_x_column cursor_x] 0]
		      [= cursor_x saved_x_column]]]
	    [let [[line [get this line cursor_y]]]
	      [if [> cursor_x [get line length]]
		  [prog [if [not saving_x_column_during_movement]
			    [prog [= saving_x_column_during_movement t]
				  [= saved_x_column                  cursor_x]]]
			[print-ansi-move [- [get line length] cursor_x] 0]
			[= cursor_x [get line length]]]]]]
    [if [get this previous_page_exists]
	[let [[old_cursor_x cursor_x]]
	  [have this goto_previous_page]
	  [= cursor_y buffer_max_y]
	  [let [[line [get this line cursor_y]]]
	    [= saving_x_column_during_movement nil]
	    [= cursor_x                        [get line length]]]
	  [print-ansi-move cursor_x cursor_y]]]]]


[deftypefunk keyboard_editor execute press_down []
  [if [< cursor_y buffer_max_y]
      [prog [= cursor_y [+ cursor_y 1]]
	    [print-ansi-move 0 1]
	    [if saving_x_column_during_movement
		[prog [print-ansi-move [- saved_x_column cursor_x] 0]
		      [= cursor_x saved_x_column]]]
	    [let [[line [get this line cursor_y]]]
	      [if [> cursor_x [get line length]]
		  [prog [if [not saving_x_column_during_movement]
			    [prog [= saving_x_column_during_movement t]
				  [= saved_x_column                  cursor_x]]]
			[print-ansi-move [- [get line length] cursor_x] 0]
			[= cursor_x [get line length]]]]]]
    [if [get this next_page_exists]
	[let [[old_cursor_x cursor_x]]
	  [have this goto_next_page]
	  [= cursor_y buffer_max_y]
	  [let [[line [get this line cursor_y]]]
	    [= saving_x_column_during_movement nil]
	    [= cursor_x                        [get line length]]]
	  [print-ansi-move cursor_x cursor_y]]]]]


[deftypefunk keyboard_editor execute press_right []
  [if [< cursor_x [get [get this line cursor_y] length]]
      [prog [= cursor_x [+ cursor_x 1]]
	    [print-ansi-move 1 0]]
    [if [< cursor_y buffer_max_y]
	[prog [print-ansi-move [- cursor_x] 1]
	      [= cursor_x 0]
	      [= cursor_y [+ cursor_y 1]]]]]]

[deftypefunk keyboard_editor execute press_left []
  [if [> cursor_x 0]
      [prog [= cursor_x [- cursor_x 1]]
	    [print-ansi-move -1 0]]
    [if [> cursor_y 0]
	[prog [= cursor_y [- cursor_y 1]]
	      [= cursor_x [get [get this current_line] length]]
	      [print-ansi-move cursor_x -1]]]]]

[deftypefunk keyboard_editor execute press_home []
  [print-ansi-move [- cursor_x] 0]
  [= cursor_x 0]]

[deftypefunk keyboard_editor execute press_end []
  [print-ansi-move [- [get [get this line cursor_y] length] cursor_x] 0]
  [= cursor_x [get [get this line cursor_y] length]]]

[deftypefunk keyboard_editor execute clear_current_page []
  [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
  [print-ansi-move [- cursor_x] [- cursor_y]]
  [dotimes [j [get line_array length]]
    [if [!= j 0]
	[print-ansi-move 0 1]]
    [terminal_format standard-terminal [get ' ' multiply buffer_max_x]]
    [print-ansi-move [- buffer_max_x] 0]]
  [print-ansi-move 0 [- [+ buffer_max_y 1]]]
  [ansi-stream-reset [get standard-terminal stream]]]

[deftypefunk keyboard_editor execute restore_current_page []
  [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
  [dotimes [j [get line_array length]]
    [terminal_format standard-terminal '\n']]
  [print-ansi-move start_x [- [- [get line_array length] 1]]]
  [dotimes [j [get line_array length]]
    [if [> [get [get line_array elt j] length] buffer_max_x]
	[= buffer_max_x [get [get line_array elt j] length]]]]
  [= buffer_max_y [- [get line_array length] 1]]
  [dotimes [j [get line_array length]]
    [if [!= j 0]
	[print-ansi-move 0 1]]
    [let [[line [get line_array elt j]]]
      [terminal_format standard-terminal line]
      [print-ansi-move [- [get line length]] 0]]]
  [print-ansi-move 0 [- buffer_max_y]]
  [= cursor_x 0]
  [= cursor_y 0]
  [ansi-stream-reset [get standard-terminal stream]]]

[deftypefunk keyboard_editor get previous_page_exists []
  [not [null history_sequence]]]

[deftypefunk keyboard_editor get next_page_exists []
  [not [null future_sequence]]]

[deftypefunk keyboard_editor execute goto_previous_page []
  [if [get this previous_page_exists]
      [prog [have this clear_current_page]
	    [let [[history_line_array [car history_sequence]]]
	      [= history_sequence [cdr history_sequence]]
	      [= future_sequence [cons line_array future_sequence]]
	      [= line_array history_line_array]]
	    [have this restore_current_page]]]]

[deftypefunk keyboard_editor execute goto_next_page []
  [if [get this next_page_exists]
      [prog [have this clear_current_page]
	    [let [[future_line_array [car future_sequence]]]
	      [= future_sequence [cdr future_sequence]]
	      [= history_sequence [cons line_array history_sequence]]
	      [= line_array future_line_array]]
	    [have this restore_current_page]]]]

[deftypefunk keyboard_editor execute press_page_up []
  [if [get this previous_page_exists]
      [prog [have this goto_previous_page]
	    [= cursor_y buffer_max_y]
	    [= cursor_x [get [get this line cursor_y] length]]
	    [print-ansi-move cursor_x cursor_y]]]]

[deftypefunk keyboard_editor execute press_page_down []
  [if [get this next_page_exists]
      [prog [have this goto_next_page]
	    [= cursor_y buffer_max_y]
	    [= cursor_x [get [get this line cursor_y] length]]
	    [print-ansi-move cursor_x cursor_y]]]]

[deftypefunk keyboard_editor execute press_char_key [key]
  [keyboard_editor-press_and_insert_char_key this standard-terminal key]]

[deftypefunk keyboard_editor execute press_f1 []
  [have this print_debug '<F1> pressed.  Entering debug mode.']
  [sleep 1]
  [have this print_debug '                                   ']
  [= debug t]]

[deftypefunk keyboard_editor execute press_ctrl_c []
  [terminal_format standard-terminal '\nrepl: exiting funk2.']
  [quit]]

[deftypefunk keyboard_editor execute press_ctrl_space []
  ]

[deftypefunk keyboard_editor execute press_ctrl_k []
  ]

[deftypefunk keyboard_editor execute press_ctrl_w []
  ]

[deftypefunk keyboard_editor execute press_ctrl_y []
  ]

[deftypefunk keyboard_editor execute press_unknown_key []
  ]

[deftypefunk keyboard_editor execute handle_key []
  [let [[old_cursor_x cursor_x]
	[old_cursor_y cursor_y]]
    [ansi-stream-foreground [get standard-terminal stream] terminal_repl-user_input_color]
    [let [[key [shelter [keyboard_editor-handle_text_keys this standard-terminal]]]]
      [ansi-stream-reset [get standard-terminal stream]]
      [if [null key]
	  [if [> [get [- [time] last_keypress_time] total_nanoseconds] [* 10 1000000000]]
	      [sleep 1]
	    [millisleep 100]]
	[prog [= last_keypress_time [time]]
	      [if [is-type `bug key]
		  [if [== [get key bug_type] 777]
		      [have this press_ctrl_c]
		    [bug key]]
		[prog `[print-ansi-hide_cursor]
		      [if [not [or [eq key `key:up]
				   [eq key `key:down]]]
			  [= saving_x_column_during_movement nil]]
		      [cond [[eq key `key:enter]            [have this press_enter]]
			    [[eq key `key:tab]              [have this press_tab]]
			    [[eq key `key:backspace]        [have this press_backspace]]
			    [[eq key `key:delete]           [have this press_delete]]
			    [[eq key `key:ctrl_d]           [have this press_delete]]
			    [[eq key `key:insert]           [have this press_insert]]
			    [[eq key `key:escape]           [have this press_escape]]
			    [[eq key `key:up]               [have this press_up]]
			    [[eq key `key:down]             [have this press_down]]
			    [[eq key `key:right]            [have this press_right]]
			    [[eq key `key:left]             [have this press_left]]
			    [[eq key `key:home]             [have this press_home]]
			    [[eq key `key:end]              [have this press_end]]
			    [[eq key `key:page_up]          [have this press_page_up]]
			    [[eq key `key:page_down]        [have this press_page_down]]
			    [[eq key `key:ctrl_space]       [have this press_ctrl_space]]
			    [[eq key `key:ctrl_k]           [have this press_ctrl_k]]
			    [[eq key `key:ctrl_w]           [have this press_ctrl_w]]
			    [[eq key `key:ctrl_y]           [have this press_ctrl_y]]
			    [[eq key `key:f1]               [have this press_f1]]
			    [t                              [have this press_unknown_key]]]]]]]
      [if [or [not [== old_cursor_x cursor_x]]
	      [not [== old_cursor_y cursor_y]]]
	  [prog `[have this print_debug cursor_x ' ' cursor_y '    ']
		`[print-ansi-show_cursor]]]]]]



[deftypefunk keyboard_editor execute reads []
  [have this initialize]
  'Temporarily catch bug if there is one, so that we can get back out of canonical keyboard mode below.'
  [let [[result [shelter [while [not done]
			   [have this handle_key]]]]]
    [have this destroy]
    [if [is-type `bug result]
	[bug result]
      [get this input]]]]


[defunk keyboard-reads []
  [let [[keyboard_editor [new keyboard_editor]]]
    [have keyboard_editor reads]]]

[defunk keyboard-repl []
  [shelter [cause-define cause-name `keyboard-repl]
	   [let [[keyboard_editor [new keyboard_editor]]]
	     [have current_keyboard_editor_mutex lock]
	     [= current_keyboard_editor keyboard_editor]
	     [have current_keyboard_editor_mutex unlock]
	     [let [[done nil]]
	       [while [not done]
		 [ansi-stream-foreground [get standard-terminal stream] terminal_repl-prompt_color]
		 [terminal_format standard-terminal '\n in-> ']
		 [ansi-stream-reset [get standard-terminal stream]]
		 [let [[reads [have keyboard_editor reads]]]
		   [let [[iter reads]]
		     [while iter
		       [let [[read [car iter]]]
			 [cond [[eq read `quit] [prog [= done t]
						      [= iter nil]]]
			       [t               [let [[result [shelter [cause-define cause-name `repl-eval]
								       [cause-define cause-exp  read]
								       [eval read]]]]
						  [have current_keyboard_editor_mutex lock]
						  [if [not [eq current_keyboard_editor keyboard_editor]]
						      [= done t]]
						  [have current_keyboard_editor_mutex unlock]
						  [if done
						      [= iter nil]
						    [if [is-type `bug result]
							[let [[bug result]]
							  [if [eq [have [get bug frame] lookup `bug_name] `save_memory_image]
							      [prog [= done t]
								    [= iter nil]]
							    [prog `[have bug pretty_print]
								  [have bug print_backtrace]
								  [= iter nil]]]]
						      [prog [ansi-stream-foreground [get standard-terminal stream] terminal_repl-prompt_color]
							    [terminal_format standard-terminal '\nout-> ']
							    [terminal_write standard-terminal result]]]]]]]]
		       [if iter
			   [= iter [cdr iter]]]]]]
		 ]]]]]

[defunk repl []
  [keyboard-repl]]

