'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcore lick 'extension/lick/.libs/libf2e_lick.so']

[defcorefunk lick-core_extension_ping       lick lick__core_extension_ping]
[defcorefunk lick-core_extension_initialize lick lick__core_extension_initialize]

[defcorefunk object_list-lick_first_n_chunks lick object_list__lick_first_n_chunks]

[lick-core_extension_ping]

[defunk lick-new_from_object [root_object]
  [let [[this [new lick root_object]]]
    [let [[note_object_hash [new ptypehash]]]
      [let [[chunk_note_hash [get this chunk_note_hash]]]
	[have this object-gather_lick_notes root_object note_object_hash 5000000]
	[let [[objects [get note_object_hash keys]]]
	  [terminal_format standard-terminal '\nlick-new_from_object type=' [type root_object] ' length=' [length objects] ' root_object=' root_object]
	  [let [[index              0]
		[next_printed_index 1000]]
	    [let [[iter objects]]
	      [while iter
		[if [>= index next_printed_index]
		    [prog [terminal_format standard-terminal '\n                     index=' index]
			  [= next_printed_index [+ next_printed_index 1000]]]]
		[= iter [object_list-lick_first_n_chunks iter note_object_hash chunk_note_hash 1000]]
		[= index [+ index 1000]]]]]]]]
    [terminal_format standard-terminal '\nlick-new_from_object this=' this]
    this]]

[defunk lick-to-file [object filename]
  [have [get [lick-new_from_object object] as-chunk] save filename]]

[defunk unlick-from-file [filename]
  [have [get [chunk-load filename] as-lick] unlick]]

