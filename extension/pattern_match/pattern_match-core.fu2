'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk conslist_pattern-match_with_frame  pattern_match conslist_pattern__match_with_frame]
[defcorefunk conslist_pattern-match             pattern_match conslist_pattern__match]
[defcorefunk string_pattern-as-conslist_pattern pattern_match string_pattern__as__conslist_pattern]
[defcorefunk string_pattern-match               pattern_match string_pattern__match]


'**'

[defcorefunk pattern_match-core_extension-ping         pattern_match pattern_match__core_extension__ping]
[defcorefunk pattern_match-core_extension-define_types pattern_match pattern_match__core_extension__define_types]
[defcorefunk pattern_match-core_extension-initialize   pattern_match pattern_match__core_extension__initialize]

[pattern_match-core_extension-define_types]


[deftypefunk string get as-conslist_pattern []
  [string_pattern-as-conslist_pattern this]]

[deftypefunk string get matches [string]
  [string_pattern-match this string]]

[deftypefunk string execute match [string_pattern]
  [string_pattern-match string_pattern this]]


'tests'

[defunk conslist_pattern-test [expression]
  [let [[patterns `[[a  [? object] has [? property]]
		    [an [? object] has [? property]]]]
	[parses   nil]]
    [mapc [funk [pattern]
		[let [[pattern_parses [conslist_pattern-match pattern expression]]]
		  [= parses [append parses
				    pattern_parses]]]]
	  patterns]
    parses]]

[defunk string_pattern-test [:rest expressions]
  [let [[patterns `['the [? object] has [? property]'
		    'an [? object] has [? property]'
		    'a [? object] has [? property]']]]
    [apply &append [mapcar [funk [pattern]
				 [string_pattern-match pattern expression]]
			   patterns]]]]



