'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcore semantic_frame 'extension/semantic_frame/.libs/libf2e_semantic_frame.so']

[defcorefunk semantic_frame-core_extension-ping         semantic_frame semantic_frame__core_extension__ping]
[defcorefunk semantic_frame-core_extension-initialize   semantic_frame semantic_frame__core_extension__initialize]
[defcorefunk semantic_frame-core_extension-define_types semantic_frame semantic_frame__core_extension__define_types]

[defcorefunk object-semantic-lookup       semantic_frame object__semantic__lookup]
[defcorefunk object-semantic-lookup-apply semantic_frame object__semantic__lookup__apply]
[defcorefunk object-semantic-add          semantic_frame object__semantic__add]
[defcorefunk object-semantic-add-apply    semantic_frame object__semantic__add__apply]
[defcorefunk object-semantic-remove       semantic_frame object__semantic__remove]
[defcorefunk object-semantic-remove-apply semantic_frame object__semantic__remove__apply]
[defcorefunk object-semantic-get          semantic_frame object__semantic__get]
[defcorefunk object-semantic-get-apply    semantic_frame object__semantic__get__apply]
[defcorefunk object-semantic-set          semantic_frame object__semantic__set]
[defcorefunk object-semantic-set-apply    semantic_frame object__semantic__set__apply]

[semantic_frame-core_extension-define_types]


[defmetro semantic-lookup       [this slot_name :rest args] `[object-semantic-lookup       ,this [quote ,slot_name] @args]]
[defmetro semantic-lookup-apply [this slot_name       args] `[object-semantic-lookup-apply ,this [quote ,slot_name] ,args]]
[defmetro semantic-add          [this slot_name :rest args] `[object-semantic-add          ,this [quote ,slot_name] @args]]
[defmetro semantic-add-apply    [this slot_name       args] `[object-semantic-add-apply    ,this [quote ,slot_name] ,args]]
[defmetro semantic-remove       [this slot_name :rest args] `[object-semantic-remove       ,this [quote ,slot_name] @args]]
[defmetro semantic-remove-apply [this slot_name       args] `[object-semantic-remove-apply ,this [quote ,slot_name] ,args]]
[defmetro semantic-get          [this slot_name :rest args] `[object-semantic-get          ,this [quote ,slot_name] @args]]
[defmetro semantic-get-apply    [this slot_name       args] `[object-semantic-get-apply    ,this [quote ,slot_name] ,args]]
[defmetro semantic-set          [this slot_name :rest args] `[object-semantic-set          ,this [quote ,slot_name] @args]]
[defmetro semantic-set-apply    [this slot_name       args] `[object-semantic-set-apply    ,this [quote ,slot_name] ,args]]

[defmetro semantic-is-type [type_name object]
  `[get ,object is_semantic_type ,type_name]]




`[defmetro semantic-get-apply [this slot_name args]
  `[let* [[this      ,this]
	  [value_set [semantic-lookup-apply this ,slot_name ,args]]]
     [if [null value_set]
	 [error this      this
		slot_name [quote ,slot_name]
		args      [quote ,args]
		funkname  `semantic-get
		bug_type  `no_value_set_defined_for_this_slot_name]
       [let [[values [get value_set elements]]]
	 [if [!= 1 [length values]]
	     [error this      this
		    slot_name [quote ,slot_name]
		    args      [quote ,args]
		    funkname  `semantic-get
		    bug_type  `too_many_values_in_value_set_defined_for_this_slot_name]
	   [first values]]]]]]

`[defmetro semantic-get [this slot_name :rest args]
  `[semantic-get-apply ,this ,slot_name [conslist @args]]]

`[defmetro semantic-set-apply [this slot_name args]
  `[let [[this ,this]
	 [args ,args]]
     [let [[value_set [semantic-lookup this ,slot_name]]]
       [if [null value_set]
	   [error this      this
		  slot_name [quote ,slot_name]
		  args      [quote ,args]
		  funkname  `semantic-set
		  bug_type  `no_value_set_defined_for_this_slot_name]
	 [let [[values [get value_set elements]]]
	   [if [!= 1 [length values]]
	       [error this        this
		      slot_name   [quote ,slot_name]
		      args        [quote ,args]
		      funkname    `semantic-set
		      bug_type    `expected_exactly_one_value_in_value_set_defined_for_this_slot_name
		      value_count [length values]
		      ]
	     [let [[value [first values]]]
	       [semantic-remove    this ,slot_name value]
	       [semantic-add-apply this ,slot_name args]
	       nil]]]]]]]

`[defmetro semantic-set [this slot_name :rest args]
  `[semantic-set-apply ,this ,slot_name [conslist @args]]]


