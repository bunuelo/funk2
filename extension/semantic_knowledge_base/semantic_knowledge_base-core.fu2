'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcore semantic_knowledge_base 'extension/semantic_knowledge_base/.libs/libf2e_semantic_knowledge_base.so']

[defcorefunk semantic_knowledge_base-core_extension-ping       semantic_knowledge_base semantic_knowledge_base__core_extension__ping]
[defcorefunk semantic_knowledge_base-core_extension-initialize semantic_knowledge_base semantic_knowledge_base__core_extension__initialize]

[semantic_knowledge_base-core_extension-ping]


[defmetro semantic-lookup       [this slot_name :rest args] `[object-semantic-lookup       ,this [quote ,slot_name] @args]]
[defmetro semantic-lookup-apply [this slot_name       args] `[object-semantic-lookup-apply ,this [quote ,slot_name] ,args]]
[defmetro semantic-add          [this slot_name :rest args] `[object-semantic-add          ,this [quote ,slot_name] @args]]
[defmetro semantic-add-apply    [this slot_name       args] `[object-semantic-add-apply    ,this [quote ,slot_name] ,args]]
[defmetro semantic-remove       [this slot_name :rest args] `[object-semantic-remove       ,this [quote ,slot_name] @args]]
[defmetro semantic-remove-apply [this slot_name       args] `[object-semantic-remove-apply ,this [quote ,slot_name] ,args]]

[defmetro semantic-get-apply [this slot_name args] `[let* [[this      ,this]
							   [value_set [semantic-lookup-apply this ,slot_name ,args]]]
						      [if [null value_set]
							  [error this      this
								 slot_name [quote ,slot_name]
								 args      [quote ,args]
								 funkname  `semantic-get
								 bug_type  `no_value_set_defined_for_this_slot_name]
							[let [[values [get value_set elements]]]
							  [if [!= 1 [length values]]
							      [error this      this
								     slot_name [quote ,slot_name]
								     args      [quote ,args]
								     funkname  `semantic-get
								     bug_type  `too_many_values_in_value_set_defined_for_this_slot_name]
							    [first values]]]]]]
[defmetro semantic-get [this slot_name :rest args] `[semantic-get-apply ,this ,slot_name [conslist @args]]]

[defmetro semantic-set-apply [this slot_name args] `[let [[this ,this]
							  [args ,args]]
						      [let [[value_set [semantic-lookup this ,slot_name]]]
							[if [null value_set]
							    [error this      this
								   slot_name [quote ,slot_name]
								   args      [quote ,args]
								   funkname  `semantic-set
								   bug_type  `no_value_set_defined_for_this_slot_name]
							  [let [[values [get value_set elements]]]
							    [if [!= 1 [length values]]
								[error this        this
								       slot_name   [quote ,slot_name]
								       args        [quote ,args]
								       funkname    `semantic-set
								       bug_type    `expected_exactly_one_value_in_value_set_defined_for_this_slot_name
								       value_count [length values]
								       ]
							      [let [[value [first values]]]
								[semantic-remove    this ,slot_name value]
								[semantic-add-apply this ,slot_name args]
								nil]]]]]]]
[defmetro semantic-set [this slot_name :rest args] `[semantic-set-apply ,this ,slot_name [conslist @args]]]


[defmetro semantic-is-type [type_name object]
  `[get ,object is_semantic_type ,type_name]]

