'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk semantic_partial_state_property-core_extension-ping         semantic_partial_state_property semantic_partial_state_property__core_extension__ping]
[defcorefunk semantic_partial_state_property-core_extension-initialize   semantic_partial_state_property semantic_partial_state_property__core_extension__initialize]
[defcorefunk semantic_partial_state_property-core_extension-define_types semantic_partial_state_property semantic_partial_state_property__core_extension__define_types]

[semantic_partial_state_property-core_extension-define_types]


[defcorefunk semantic_partial_state_property-phenomenal_name semantic_partial_state_property semantic_partial_state_property__phenomenal_name]

`[property gripper is-me t
	   movement_command
	   stop]

`[property gripper movement_command stop
	   is-me
	   t]

[deftypefunk semantic_partial_state_property get as-declarative_natural_language_string []
  [let [[source_type  [get this source_type]]
	[source_key   [get this source_key]]
	[source_value [get this source_value]]
	[key          [get this key]]
	[target_type  [get this target_type]]]
    [if [eq source_value t]
	[if [eq target_type t]
	    [stringlist-concat `['a ' ,[get source_type as-string] ' that ' ,[get source_key as-string] ' and ' ,[get key as-string]]]
	  [stringlist-concat `['a ' ,[get source_type as-string] ' that ' ,[get source_key as-string] ' and has ' ,[get target_type as-string] ' ' ,[get key as-string]]]]
      [if [eq target_type t]
	  [stringlist-concat `['a ' ,[get source_type as-string] ' that has ' ,[get source_value as-string] ' ' ,[get source_key as-string] ' and ' ,[get key as-string]]]
	[stringlist-concat `['a ' ,[get source_type as-string] ' that has ' ,[get source_value as-string] ' ' ,[get source_key as-string] ' and ' ,[get target_type as-string] ' ' ,[get key as-string]]]]]]]

[deftypefunk semantic_partial_state_property get as-natural_language_string []
  [get this as-declarative_natural_language_string]]

[deftypefunk semantic_partial_state_property get as-string []
  [get this as-natural_language_string]]

