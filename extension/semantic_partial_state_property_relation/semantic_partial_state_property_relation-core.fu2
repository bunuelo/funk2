'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk semantic_partial_state_property_relation-core_extension-ping         semantic_partial_state_property_relation semantic_partial_state_property_relation__core_extension__ping]
[defcorefunk semantic_partial_state_property_relation-core_extension-initialize   semantic_partial_state_property_relation semantic_partial_state_property_relation__core_extension__initialize]
[defcorefunk semantic_partial_state_property_relation-core_extension-define_types semantic_partial_state_property_relation semantic_partial_state_property_relation__core_extension__define_types]

[semantic_partial_state_property_relation-core_extension-define_types]


[defcorefunk semantic_partial_state_property_relation-phenomenal_name semantic_partial_state_property_relation semantic_partial_state_property_relation__phenomenal_name]


[deftypefunk semantic_partial_state_property_relation get as-declarative_english_conslist []
  [let [[source_type  [get this source_type]]
	[source_key   [get this source_key]]
	[source_value [get this source_value]]
	[key          [get this key]]
	[target_type  [get this source_type]]
	[target_key   [get this source_key]]
	[target_value [get this source_value]]]
    [append [if [eq source_value t]
		`[a ,source_type that ,source_key]
	      `[a ,source_value ,source_key ,source_type]]
	    `[is]
	    `[,key]
	    [if [eq target_value t]
		`[a ,target_type that ,target_key]
	      `[a ,target_value ,target_key ,target_type]]]]]

[deftypefunk semantic_partial_state_property_relation get as-declarative_english_string []
  [conslist-as-english_string [get this as-declarative_english_conslist]]]


[deftypefunk semantic_partial_state_property_relation get as-english_conslist []
  [get this as-declarative_english_conslist]]

[deftypefunk semantic_partial_state_property_relation get as-english_string []
  [conslist-as-english_string [get this as-english_conslist]]]

[deftypefunk semantic_partial_state_property_relation get as-string []
  [get this as-english_string]]

