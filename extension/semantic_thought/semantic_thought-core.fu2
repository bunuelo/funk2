'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk semantic_thought-core_extension-ping         semantic_thought semantic_thought__core_extension__ping]
[defcorefunk semantic_thought-core_extension-initialize   semantic_thought semantic_thought__core_extension__initialize]
[defcorefunk semantic_thought-core_extension-define_types semantic_thought semantic_thought__core_extension__define_types]

[semantic_thought-core_extension-define_types]


[defunk semantic_planner-new_semantic_thought [semantic_planner funk args]
  [shelter [let* [[semantic_knowledge_base_set [have semantic_planner lookup `semantic_knowledge_base_set]]
		  [semantic_knowledge_bases    [get semantic_knowledge_base_set elements]]]
	     [if [null semantic_knowledge_bases]
		 [error funkname `semantic_planner-new_semantic_thought
			bug_name `semantic_knowledge_bases-is-nil]]
	     
	     [cause-define cause-name [get [get semantic_plan nonsemantic_plan] unique_name]]
	     [let* [[thought_fiber-start_trigger [new fiber_trigger]]
		    [thought_fiber               [fiber [funk []
							      [wait-for-trigger thought_fiber-start_trigger]
							      [apply funk args]]
							[]]]
		    [semantic_thought            [new semantic_thought [get semantic_planner semantic_realm]]]]
	       [have [get fiber cause_reg] define `this-fiber-semantic_thought semantic_thought]
	       [set semantic_thought fiber thought_fiber]
	       
	       [mapc [funk [semantic_knowledge_base]
			   [have semantic_knowledge_base add_semantic_frame semantic_thought]]
		     semantic_knowledge_bases]
	       [semantic-add semantic_planner thought semantic_thought]
	       
	       [have thought_fiber-start_trigger trigger]
	       [let [[result [fiber-sheltered_join thought_fiber]]]
		 
		 [semantic-remove semantic_planner thought semantic_thought]
		 [mapc [funk [semantic_knowledge_base]
			     [have semantic_knowledge_base remove_semantic_frame semantic_thought]]
		       semantic_knowledge_bases]
		 
		 result]]]]]

