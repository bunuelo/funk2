'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk semantic_thought-core_extension-ping         semantic_thought semantic_thought__core_extension__ping]
[defcorefunk semantic_thought-core_extension-initialize   semantic_thought semantic_thought__core_extension__initialize]
[defcorefunk semantic_thought-core_extension-define_types semantic_thought semantic_thought__core_extension__define_types]

[semantic_thought-core_extension-define_types]

[deftypefunk string get pattern_evaluation [variable_lookup_funk]
  [if [not [get this contains '[']]
      this
    [let* [[conslist_pattern [string_pattern-as-conslist_pattern this]]
	   [result_length    0]]
      [let [[expanded_conslist [mapcar [funk [expression]
					     [if [is-type `char expression]
						 [prog [++ result_length]
						       expression]
					       [let [[variable_command [first expression]]]
						 [cond [[eq variable_command `?] [let [[variable_value_string [let [[variable_name [second expression]]]
														[let [[variable_value [funkall variable_lookup_funk variable_name]]]
														  [cond [[is-type `string variable_value] variable_value]
															[t                                [get variable_value as-string]]]]]]]
										   [= result_length [+ result_length [get variable_value_string length]]]
										   variable_value_string]]
						       [t                        [error bug_name         `semantic_thought-evaluate_string-invalid_variable_command
											variable_command variable_command
											expression       expression
											this             this]]]]]]
				       conslist_pattern]]]
	[let [[result [new string result_length #\ ]]
	      [index  0]]
	  [mapc [funk [expression]
		      [if [is-type `char expression]
			  [prog [set result elt index expression]
				[++ index]]
			[let [[expression_length [get expression length]]]
			  [dotimes [i expression_length]
			    [set result elt index [get expression elt i]]
			    [++ index]]]]]
		expanded_conslist]
	  result]]]]]


[deftypefunk semantic_thought execute evaluate_string [string]
  [get string pattern_evaluation
       [funk [variable_name]
	     [have this lookup_a_variable_value variable_name]]]]



										 
      