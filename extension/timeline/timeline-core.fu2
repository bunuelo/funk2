'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defcorefunk timeline-core_extension-ping         timeline timeline__core_extension__ping]
[defcorefunk timeline-core_extension-initialize   timeline timeline__core_extension__initialize]
[defcorefunk timeline-core_extension-define_types timeline timeline__core_extension__define_types]

[timeline-core_extension-define_types]


[defunk timeline-as-image-given_height [this pixel_height]
  [have this calculate_positions]
  [let [[x_width  [get this x_width]]
	[y_height [get this y_height]]]
    [let [[pixel_width  [get [/ [* pixel_height x_width] y_height] as-integer]]]
      [let* [[cairo_surface [new cairo_image_surface `ARGB32 pixel_width pixel_height]]
	     [cairo_context [new cairo_context cairo_surface]]]
	[have cairo_context scale [get pixel_width as-double] [get pixel_height as-double]]
	[have cairo_context move_to 0.0 0.0]
	[have this cairo_render cairo_context]
	
	[let [[image [get cairo_surface as-image]]]
	  [have cairo_context destroy]
	  [have cairo_surface destroy]
	  image]]]]]

[deftypefunk timeline get as-image-given_height [pixel_height]
  [timeline-as-image-given_height this pixel_height]]


[defunk timeline-as-image-given_width [this pixel_width]
  [have this calculate_positions]
  [let [[x_width  [get this x_width]]
	[y_height [get this y_height]]]
    [let [[pixel_height [get [/ [* pixel_width y_height] x_width] as-integer]]]
      [let* [[cairo_surface [new cairo_image_surface `ARGB32 pixel_width pixel_height]]
	     [cairo_context [new cairo_context cairo_surface]]]
	[have cairo_context scale [get pixel_width as-double] [get pixel_height as-double]]
	[have cairo_context move_to 0.0 0.0]
	[have this cairo_render cairo_context]
	
	[let [[image [get cairo_surface as-image]]]
	  [have cairo_context destroy]
	  [have cairo_surface destroy]
	  image]]]]]

[deftypefunk timeline get as-image-given_width [pixel_width]
  [timeline-as-image-given_width this pixel_width]]


[defunk timeline-as-constrained_image [this pixel_width pixel_height]
  [have this calculate_positions]
  [let [[x_width  [get this x_width]]
	[y_height [get this y_height]]]
    [if [> [/ x_width y_height] [/ [get pixel_width as-double] pixel_height]]
	[let [[subimage [timeline-as-image-given_width this pixel_width]]]
	  [let [[image [new image pixel_width pixel_height nil]]]
	    [have image clear 255 255 255 255]
	    [have subimage copy_rectangle_to 0 0 image 0 [/ [- pixel_height [get subimage height]] 2] [get subimage width] [get subimage height]]
	    image]]
      [let [[subimage [timeline-as-image-given_height this pixel_height]]]
	[let [[image [new image pixel_width pixel_height nil]]]
	  [have image clear 255 255 255 255]
	  [have subimage copy_rectangle_to 0 0 image [/ [- pixel_width [get subimage width]] 2] 0 [get subimage width] [get subimage height]]
	  image]]]]]

[deftypefunk timeline get as-constrained_image [pixel_width pixel_height]
  [timeline-as-constrained_image this pixel_width pixel_height]]


[defunk timeline-as-image [this scale]
  [have this calculate_positions]
  [let [[x_width  [get this x_width]]
	[y_height [get this y_height]]]
    [let [[pixel_width [get [* x_width scale] as-integer]]]
      [timeline-as-image-given_width this pixel_width]]]]

[deftypefunk timeline get as-image [scale]
  [timeline-as-image this scale]]

[deftypefunk timeline execute save_to_pdf [filename]
  [have this calculate_positions]
  [let [[x_width  [* 16.0 [get this x_width]]]
	[y_height [* 16.0 [get this y_height]]]]
    [let* [[cairo_surface [new cairo_pdf_surface filename [get x_width as-double] [get y_height as-double]]]
	   [cairo_context [new cairo_context cairo_surface]]]
      [have cairo_context scale [get x_width as-double] [get y_height as-double]]
      [have cairo_context move_to 0.0 0.0]
      [have this cairo_render cairo_context]
      [have cairo_context destroy]
      [have cairo_surface destroy]
      nil]]]

