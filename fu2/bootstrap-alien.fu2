' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk is_argtype [exp] [or [eq exp `integer]
			     [eq exp `float]
			     [eq exp `double]
			     [eq exp `pointer]
			     [eq exp `char*]]]

[defunk type-is-primitive_argtype [argtype exp]
  [cond [[eq argtype `integer] [is-type `integer exp]]
	[[eq argtype `pointer] [is-type `pointer exp]]
	[[eq argtype `float]   [is-type `float   exp]]
	[[eq argtype `double]  [is-type `double  exp]]
	[t                     [error `argtype-unknown `type-is-primitive_argtype]]]]

[defunk argtype-to_primitive_argtype [argtype]
  [cond [[eq argtype `integer] `integer]
	[[eq argtype `pointer] `pointer]
	[[eq argtype `char*]   `pointer]
	[[eq argtype `float]   `float]
	[[eq argtype `double]  `double]
	[t                     [error `argtype-unknown `argtype-to_primitive_argtype]]]]

[defunk argtypes-primitive_cfunk [return_type argtypes]
  [cond [[null return_type]        [let [[argtypes_iter argtypes]]
				     [if [null argtypes_iter] &funkall-raw_c_funk-v-v
				       [let [[argtype [car argtypes_iter]]]
					 [= argtypes_iter [cdr argtypes_iter]]
					 [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-i
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ii
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iii
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iiii
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iiiii
																									    [let [[argtype [car argtypes_iter]]]
																									      [= argtypes_iter [cdr argtypes_iter]]
																									      [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iiiiip
																													     [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																										    [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																						   [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iiiip
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-iiip
																					   [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [[eq argtype `double]  [if [null argtypes_iter] &funkall-raw_c_funk-v-iid
																	  [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										
										[[eq argtype `double]  [if [null argtypes_iter] &funkall-raw_c_funk-v-id
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `double]  [if [null argtypes_iter] &funkall-raw_c_funk-v-idd
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `double]  [if [null argtypes_iter] &funkall-raw_c_funk-v-iddd
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `double]  [if [null argtypes_iter] &funkall-raw_c_funk-v-idddd
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										
										[[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ip
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ipp
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ippp
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ipppp
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-p
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-v-pi
													 [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]
										[[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-pp
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ppp
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-pppp
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-v-ppppp
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `double] [if [null argtypes_iter]
									 &funkall-raw_c_funk-v-d
								       [let [[argtype [car argtypes_iter]]]
									 [= argtypes_iter [cdr argtypes_iter]]
									 [cond [[eq argtype `double] [if [null argtypes_iter]
													 &funkall-raw_c_funk-v-dd
												       [let [[argtype [car argtypes_iter]]]
													 [= argtypes_iter [cdr argtypes_iter]]
													 [cond [[eq argtype `double] [if [null argtypes_iter]
																	 &funkall-raw_c_funk-v-ddd
																       [let [[argtype [car argtypes_iter]]]
																	 [= argtypes_iter [cdr argtypes_iter]]
																	 [cond [[eq argtype `double] [if [null argtypes_iter]
																					 &funkall-raw_c_funk-v-dddd
																				       [let [[argtype [car argtypes_iter]]]
																					 [= argtypes_iter [cdr argtypes_iter]]
																					 [cond [[eq argtype `double] [if [null argtypes_iter]
																									 &funkall-raw_c_funk-v-ddddd
																								       [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																	       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
													       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
									       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]
	[[eq return_type `integer] [let [[argtypes_iter argtypes]]
				     [if [null argtypes_iter] &funkall-raw_c_funk-i-v
				       [let [[argtype [car argtypes_iter]]]
					 [= argtypes_iter [cdr argtypes_iter]]
					 [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-i-i
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ii
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-i-iii
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-i-iiii
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-i-iiiii
																									    [let [[argtype [car argtypes_iter]]]
																									      [= argtypes_iter [cdr argtypes_iter]]
																									      [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-iiiiip
																													     [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																										    [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ip
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ipp
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ippp
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ipppp
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-p
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-pp
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ppp
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-pppp
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-i-ppppp
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `double] [if [null argtypes_iter]
									 &funkall-raw_c_funk-i-d
								       [let [[argtype [car argtypes_iter]]]
									 [= argtypes_iter [cdr argtypes_iter]]
									 [cond [[eq argtype `double] [if [null argtypes_iter]
													 &funkall-raw_c_funk-i-dd
												       [let [[argtype [car argtypes_iter]]]
													 [= argtypes_iter [cdr argtypes_iter]]
													 [cond [[eq argtype `double] [if [null argtypes_iter]
																	 &funkall-raw_c_funk-i-ddd
																       [let [[argtype [car argtypes_iter]]]
																	 [= argtypes_iter [cdr argtypes_iter]]
																	 [cond [[eq argtype `double] [if [null argtypes_iter]
																					 &funkall-raw_c_funk-i-dddd
																				       [let [[argtype [car argtypes_iter]]]
																					 [= argtypes_iter [cdr argtypes_iter]]
																					 [cond [[eq argtype `double] [if [null argtypes_iter]
																									 &funkall-raw_c_funk-i-ddddd
																								       [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																	       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
													       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
									       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]
	[[eq return_type `double]  [let [[argtypes_iter argtypes]]
				     [if [null argtypes_iter] &funkall-raw_c_funk-d-v
				       [let [[argtype [car argtypes_iter]]]
					 [= argtypes_iter [cdr argtypes_iter]]
					 [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-d-i
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-d-ii
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-d-iii
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-d-iiii
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-d-iiiii
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `double] [if [null argtypes_iter]
									 &funkall-raw_c_funk-d-d
								       [let [[argtype [car argtypes_iter]]]
									 [= argtypes_iter [cdr argtypes_iter]]
									 [cond [[eq argtype `double] [if [null argtypes_iter]
													 &funkall-raw_c_funk-d-dd
												       [let [[argtype [car argtypes_iter]]]
													 [= argtypes_iter [cdr argtypes_iter]]
													 [cond [[eq argtype `double] [if [null argtypes_iter]
																	 &funkall-raw_c_funk-d-ddd
																       [let [[argtype [car argtypes_iter]]]
																	 [= argtypes_iter [cdr argtypes_iter]]
																	 [cond [[eq argtype `double] [if [null argtypes_iter]
																					 &funkall-raw_c_funk-d-dddd
																				       [let [[argtype [car argtypes_iter]]]
																					 [= argtypes_iter [cdr argtypes_iter]]
																					 [cond [[eq argtype `double] [if [null argtypes_iter]
																									 &funkall-raw_c_funk-d-ddddd
																								       [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																	       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
													       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
									       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]
	[[eq return_type `float]   [let [[argtypes_iter argtypes]]
				     [if [null argtypes_iter] &funkall-raw_c_funk-f-v
				       [let [[argtype [car argtypes_iter]]]
					 [= argtypes_iter [cdr argtypes_iter]]
					 [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-f-i
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-f-ii
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-f-iii
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-f-iiii
																					   [let [[argtype [car argtypes_iter]]]
																					     [= argtypes_iter [cdr argtypes_iter]]
																					     [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-f-iiiii
																									    [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																						   [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																		  [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [[eq argtype `double] [if [null argtypes_iter]
									 &funkall-raw_c_funk-f-d
								       [let [[argtype [car argtypes_iter]]]
									 [= argtypes_iter [cdr argtypes_iter]]
									 [cond [[eq argtype `double] [if [null argtypes_iter]
													 &funkall-raw_c_funk-f-dd
												       [let [[argtype [car argtypes_iter]]]
													 [= argtypes_iter [cdr argtypes_iter]]
													 [cond [[eq argtype `double] [if [null argtypes_iter]
																	 &funkall-raw_c_funk-f-ddd
																       [let [[argtype [car argtypes_iter]]]
																	 [= argtypes_iter [cdr argtypes_iter]]
																	 [cond [[eq argtype `double] [if [null argtypes_iter]
																					 &funkall-raw_c_funk-f-dddd
																				       [let [[argtype [car argtypes_iter]]]
																					 [= argtypes_iter [cdr argtypes_iter]]
																					 [cond [[eq argtype `double] [if [null argtypes_iter]
																									 &funkall-raw_c_funk-f-ddddd
																								       [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]
																					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
																	       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
													       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
									       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [t [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]
	[[eq return_type `pointer] [let [[argtypes_iter argtypes]]
				     [if [null argtypes_iter] &funkall-raw_c_funk-p-v
				       [let [[argtype [car argtypes_iter]]]
					 [= argtypes_iter [cdr argtypes_iter]]
					 [cond [[eq argtype `integer] [if [null argtypes_iter] &funkall-raw_c_funk-p-i
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-ip
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-ipp
																	  [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]]]]]
					       [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-p
									[let [[argtype [car argtypes_iter]]]
									  [= argtypes_iter [cdr argtypes_iter]]
									  [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-pp
													 [let [[argtype [car argtypes_iter]]]
													   [= argtypes_iter [cdr argtypes_iter]]
													   [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-ppp
																	  [let [[argtype [car argtypes_iter]]]
																	    [= argtypes_iter [cdr argtypes_iter]]
																	    [cond [[eq argtype `pointer] [if [null argtypes_iter] &funkall-raw_c_funk-p-pppp
																					   [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]
																		  [t                     [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
														 [t                     [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
										[t                     [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]
					       [t                     [error `no-primitive-cfunk-matches-argtypes [list return_type argtypes]]]]]]]]
	[t [error `too-many-args-for-primitive-cfunk [list return_type argtypes]]]]]

[defunk raw_c_funk [return_type cfunk_ptr argtypes]
  [if [not [is-type `pointer cfunk_ptr]] [error `wrong-type 'cfunk_ptr should be pointer']]
  [mapc [funk [argtype] [if [not [is_argtype argtype]] [error `wrong-type 'argtype should be either integer, float, double, or pointer.']]]
	argtypes]
  [if [not [or [null return_type] [is_argtype return_type]]] [error `wrong-type 'return_type must be either nil or a valid argtype.']]
  [let [[this               [array-new 5]]
	[primitive_argtypes [mapcar [funk [x] [argtype-to_primitive_argtype x]] argtypes]]]
    [put return_type                                               [elt this 0]]
    [put cfunk_ptr                                                 [elt this 1]]
    [put argtypes                                                  [elt this 2]]
    [put primitive_argtypes                                        [elt this 3]]
    [put [argtypes-primitive_cfunk return_type primitive_argtypes] [elt this 4]]
    this]]
[defmetro raw_c_funk-return_type        [this] `[elt ,this 0]]
[defmetro raw_c_funk-cfunk_ptr          [this] `[elt ,this 1]]
[defmetro raw_c_funk-argtypes           [this] `[elt ,this 2]]
[defmetro raw_c_funk-primitive_argtypes [this] `[elt ,this 3]]
[defmetro raw_c_funk-primitive_cfunk    [this] `[elt ,this 4]]

[defunk apply-raw_c_funk [raw_c_funk args]
  [let [[argtype_iter [raw_c_funk-primitive_argtypes raw_c_funk]]]
    [mapc [funk [arg]
		[let [[argtype [car argtype_iter]]]
		  [if [not [type-is-primitive_argtype argtype arg]] [error `wrong-type [list 'arg must be of type' argtype]]]
		  [= argtype_iter [cdr argtype_iter]]]]
	  args]
    [if argtype_iter [error `wrong-argument-number 'too few arguments passed']]
    [apply [raw_c_funk-primitive_cfunk raw_c_funk] [cons [raw_c_funk-cfunk_ptr raw_c_funk] args]]]]

[defunk funkall-raw_c_funk [cfunk_ptr :rest args]
  [apply-raw_c_funk cfunk_ptr args]]

[defunk gmodule-lookup_symbol-safe [gmodule symbol_name]
  [let [[cfunk_ptr [gmodule-symbol gmodule symbol_name]]]
    [if [or [null cfunk_ptr] [is-type `exception cfunk_ptr]]
	[error `could-not-lookup-symbol [list symbol_name cfunk_ptr]]
      cfunk_ptr]]]

[defmetro defunk-alien [gmodule_name local_name return_type extern_symbol argpairs]
  [let [[types [mapcar [funk [argpair] [if [not [is-type `cons argpair]] [error `defunk-alien-argpair-type 'must of form: [type name]']] [car  argpair]] argpairs]]
	[args  [mapcar [funk [argpair]                                                                                           [cadr argpair]] argpairs]]]
    `[let [[raw_c_funk nil]]
       [defunk ,local_name ,args
	 [if [null raw_c_funk]
	     [= raw_c_funk [raw_c_funk [quote ,return_type] [gmodule-lookup_symbol-safe ,gmodule_name ,extern_symbol] [quote ,types]]]]
	 [funkall-raw_c_funk raw_c_funk @args]]]]]


