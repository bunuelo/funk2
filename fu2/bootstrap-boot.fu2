'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[globalize user-boot-commands nil]

[globalize bug_count 0]

[defunk post_userfile_init_boot []
  [have scheduler:global_scheduler clean]
  [let [[user_command_string [get command_line user_command_string]]
	[launch_repl         nil]]
    [let [[result [shelter [if user_command_string
			       [prog [eval [have user_command_string read]]
				     [quit]]
			     [prog [if user-boot-commands
				       [mapc [funk [user-boot-command]
						   [eval user-boot-command]]
					     user-boot-commands]]
				   [ansi-stream-foreground [get standard-terminal stream] 15]
				   [terminal_format standard-terminal
						    '\n*************************'
						    '\n**                     **'
						    '\n**  ']
				   [ansi-stream-foreground [get standard-terminal stream] 9]
				   [terminal_format standard-terminal 'Welcome to funkœ©']
				   [ansi-stream-foreground [get standard-terminal stream] 15]
				   [terminal_format standard-terminal '!  **'
						    '\n**                     **'
						    '\n*************************'
						    '\n']]]]]]
      
      [if [is-type `bug result]
	  [let [[bug result]]
	    [let [[global_bug_name [get [string-concat 'bug-' [get bug_count as-string]] as-symbol]]]
	      [= bug_count [bytecode:add bug_count 1]]
	      [terminal_format standard-terminal '\nbug: defining ' global_bug_name ' globally.  View with ' `[inspect ,global_bug_name] '.  Starting REPL for debugging.']
	      [let [[new_bug [shelter [error bug_name            `post_userfile_init_boot-bug_in_user_command
					     user_command_string user_command_string
					     subbug              bug]]]]
		[eval `[globalize ,global_bug_name [quote ,new_bug]]]]]]]
      
      [ansi-stream-reset [get standard-terminal stream]]
      [repl]]]]

[defunk boot []
  [with-new-cause [cause-define standard-terminal [terminal_print_frame-new stdout 0 [termios-width] [termios-height] 128 t nil t 1000000000]]
		  [cause-define standard-input    stdin]
		  [post_userfile_init_boot]]]

[defunk boot-add_user_command [user_command]
  [mutate user-boot-commands [append user-boot-commands
				     [cons user_command nil]]]]



