'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk bug execute pretty_print [] [bug-pretty_print this]]

[globalize bug-crawl_through_backtrace-known_bug_response_frame [frame]]

[defunk bug-crawl_through_backtrace-add_bug_type_response [bug_type response_funk]
  [have bug-crawl_through_backtrace-known_bug_response_frame add bug_type response_funk]]

[defunk bug-crawl_through_backtrace-lookup_bug_type_response [bug_type]
  [have bug-crawl_through_backtrace-known_bug_response_frame lookup bug_type]]

[defunk bug-crawl_through_backtrace-remove_bug_type_response [bug_type]
  [have bug-crawl_through_backtrace-known_bug_response_frame remove bug_type]]


[defmetro new-crawl_through_backtrace-bug_type_response [bug_type :rest codes]
  `[bug-crawl_through_backtrace-add_bug_type_response ,bug_type
						      [funk [print_bug_continuation_funk
							     get_bug_index_funk
							     set_bug_index_funk
							     bug
							     print_terminal
							     define_name_prefix]
							    [define-funk print_bug     print_bug_continuation_funk]
							    [define-funk get_bug_index get_bug_index_funk]
							    [define-funk set_bug_index set_bug_index_funk]
							    @codes]]]

[defunk bug-get-object-as-short_string [object]
  [let [[string [get object as-string]]]
    [if [bytecode:less_than [get string length] 180]
	string
      [format nil '<' [type object] '>']]]]

[deftypefunk bug execute execute_response [print_bug_continuation_funk
					   get_bug_index_funk
					   set_bug_index_funk
					   print_terminal
					   define_name_prefix]
  [let [[known_bug_response_funk [bug-crawl_through_backtrace-lookup_bug_type_response [get this bug_type]]]]
    [if [null known_bug_response_funk]
	[= known_bug_response_funk [bug-crawl_through_backtrace-lookup_bug_type_response `unknown]]]
    [if known_bug_response_funk
	[let [[result [shelter [funkall known_bug_response_funk
					print_bug_continuation_funk
					get_bug_index_funk
					set_bug_index_funk
					this
					print_terminal
					define_name_prefix]]]]
	  [if [is-type `bug result]
	      [if print_terminal
		  [prog [terminal_format print_terminal '\nbug occurred while executing backtrace response, removing buggy bug_type, ' [get this bug_type] ', response.']
			[bug-crawl_through_backtrace-remove_bug_type_response [get this bug_type]]
			[= known_bug_response_funk nil]]]]]]
    [if [null known_bug_response_funk]
	[let [[bug_variable [get [format nil define_name_prefix '-' [funkall get_bug_index_funk]] as-symbol]]]
	  [funkall set_bug_index_funk [bytecode:add [funkall get_bug_index_funk] 1]]
	  [if print_terminal
	      [terminal_format print_terminal '\n  ']]
	  [if define_name_prefix
	      [prog [if print_terminal
			[terminal_format print_terminal 'defining ' bug_variable ': ']]
		    [eval `[globalize ,bug_variable ,this]]]]
	  [if print_terminal
	      [terminal_format print_terminal 'bug_type ' [get this bug_type] '.']]]]
    ]]

[deftypefunk bug execute crawl_through_backtrace [print_terminal define_name_prefix]
  [let [[result [shelter [let [[bug_index 1]]
			   [labels [[get_bug_index []              bug_index]
				    [set_bug_index [new_bug_index] [= bug_index new_bug_index]]
				    [print_bug     [bug]           [have bug execute_response
									 &print_bug
									 &get_bug_index
									 &set_bug_index
									 print_terminal
									 define_name_prefix]]]
				   [print_bug this]]]]]]
    [if [is-type `bug result]
	[prog [terminal_format standard-terminal '\nbug-execute-crawl_through_backtrace has fatal errors.']
	      [shelter [terminal_format standard-terminal '\n  original bug: ' this]]
	      [shelter [terminal_format standard-terminal '\n  backtrace printing bug: ' result]]
	      nil]
      result]]]

[deftypefunk bug execute print_backtrace []
  [have this crawl_through_backtrace standard-terminal nil]]

[deftypefunk bug execute define_backtrace []
  [have this crawl_through_backtrace standard-terminal 'bug']]

[deftypefunk bug execute show_inspect_details []
  [have this crawl_through_backtrace standard-terminal 'inspect_bug']
  [mapc [funk [stack_trace_block]
	      [terminal_format standard-terminal '\n' stack_trace_block]]
	[get [get [get this creation_fiber] stack_trace] blocks]]]

[defunk inspect [exp]
  [cond [[is-type `bug exp] [let [[bug exp]]
			      [have bug show_inspect_details]]]
	[t                  [prog [terminal_format standard-terminal '\ninspect: try inspecting bugs.']
				  nil]]]]

[defmetro assert-type [correct_type value]
  `[let [[assert_value ,value]]
     [if [not [is-type [quote ,correct_type] assert_value]]
	 [error bug_name      `value_failed_type_assertion
		expected_type [quote ,correct_type]
		actual_type   [type assert_value]
		value_name    [quote ,value]
		assert_value  assert_value]
       assert_value]]]


  