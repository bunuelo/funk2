' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk bug-symbolic_type [this]
  [let [[type [bug-type this]]]
    [let [[symbolic_type [if [symbol? type]
			     type
			   [if [integer? type]
			       [cond [[eq type 1]  `function_argument_does_not_have_correct_type-bug_type]
				     [[eq type 18]    `tried_to_funk_object_that_is_not_funkable-bug_type]
				     [t                               `unspecified_error_occured-bug_type]]
			     `unknown-bug_type]]]]
      symbolic_type]]]

[defunk bug-english_sentence_list [this]
  [let [[symbolic_type [bug-symbolic_type this]]]
    [cond [[eq symbolic_type `function_argument_does_not_have_correct_type-bug_type] [list 'Bug is from primitive virtual machine larva.' '\n'
											   'The larva signifies that a function argument did not have the correct type.'
											   ]]
	  [[eq symbolic_type `tried_to_funk_object_that_is_not_funkable-bug_type]    [list 'Bug is from primitive virtual machine larva.' '\n'
											   'The larva signifies that the thread tried to execute an object that was not an executable object.'
											   ]]
	  [[eq symbolic_type `unspecified_error_occured-bug_type]                    [list 'Bug is from primitive virtual machine larva.' '\n'
											   'The larva signifies that an unspecified error occured.'
											   ]]
	  [[eq symbolic_type `unknown-bug_type]                                      [list 'Bug is from primitive virtual machine larva that was not recognized.' '\n'
											   'Unknown category of bug type has occured.'
											   ]]
	  [t                                                                         [list 'Meta error recognizing symbolic bug type (a meta bug in bug-print_human_readable).']]]]]

[defunk bug-print_english_sentence [this]
  [ansi-stream-foreground stdout 15]
  [apply &format [cons stdout [bug-english_sentence_list this]]]]

