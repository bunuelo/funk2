'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk bug-symbolic_type [this]
  [if [not [is-type `bug this]]
      `not-bug
    [let [[bug_type [object-get this `bug_type]]]
      [let [[symbolic_type [if [is-type `symbol bug_type]
			       bug_type
			     [if [is-type `integer bug_type]
				 [cond [[eq bug_type 1]  `function_argument_does_not_have_correct_type-bug_type]
				       [[eq bug_type 18]    `tried_to_funk_object_that_is_not_funkable-bug_type]
				       [[eq bug_type 23]     `failed_to_lookup_variable_in_environment-bug_type]
				       [[eq bug_type 24]              `cfunkable_must_be_funk_or_metro-bug_type]
				       [[eq bug_type 63]                                   `user_space-bug_type]
				       [t                                  `unspecified_error_occurred-bug_type]]
			       `unknown-bug_type]]]]
	symbolic_type]]]]

[defunk bug-english_sentence_conslist [this]
  [let [[symbolic_type [bug-symbolic_type this]]]
    [cond [[eq symbolic_type `function_argument_does_not_have_correct_type-bug_type] `[Bug is from primitive virtual machine larva.
											   The larva signifies that a function argument did not have the correct type.
											   ]]
	  [[eq symbolic_type `tried_to_funk_object_that_is_not_funkable-bug_type]    `[Bug is from primitive virtual machine larva.
											   The larva signifies that the fiber tried to execute an object that was not an executable object.
											   ]]
	  [[eq symbolic_type `failed_to_lookup_variable_in_environment-bug_type]     `[Bug is from primitive virtual machine larva.
											   The larva signifies that the fiber tried to lookup a symbol that could not be found in the current environment.
											   ]]
	  [[eq symbolic_type `cfunkable_must_be_funk_or_metro-bug_type]              `[Bug is from primitive virtual machine larva.
											   The larva signifies that the fiber tried to execute an object that was not a funkable object, such as a funk or a metro.
											   ]]
	  [[eq symbolic_type `unspecified_error_occurred-bug_type]                    `[Bug is from primitive virtual machine larva.
											   The larva signifies that an unspecified error occurred.
											   ]]
	  [[eq symbolic_type `unknown-bug_type]                                      `[Bug is from primitive virtual machine larva that was not recognized.
											   Unknown category of bug type has occurred.
											   ]]
	  [[eq symbolic_type `user_space-bug_type]                                   `[Bug is one of those regular old friendly user-space bugs.
											   ]]
	  [[eq symbolic_type `not-bug]                                               `[We are trying to print an english description of a bug that is not a bug.
											  A meta bug has occurred in trying to print a bug.
											  Unknown category of bug type has occurred.
											  ]]
	  [t                                                                         `[Meta error recognizing symbolic bug type [a meta bug in bug-print_human_readable].]]
	  ]]]

[defunk bug-print_english_sentence [this]
  [ansi-stream-foreground stdout 15]
  [apply &format [cons stdout [bug-english_sentence_conslist this]]]]

