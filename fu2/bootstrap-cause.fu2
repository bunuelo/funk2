' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defmetro funktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_funk_funks]]]
     [set [this-cause] bytecode_funk_funks [cons [funk [fiber bytecode funk args]
						       @body]
						 funks]]
     nil]]

[defmetro endfunktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_endfunk_funks]]]
     [set [this-cause] bytecode_endfunk_funks [cons [funk [fiber bytecode value funk]
							  @body]
						    funks]]
     nil]]

[defmetro branchtracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_branch_funks]]]
     [set [this-cause] bytecode_branch_funks [cons [funk [fiber bytecode program_counter branch_program_counter value]
							 @body]
						   funks]]
     nil]]

[defmetro valuetracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_tracer_funks]]]
     [set [this-cause] bytecode_tracer_funks [cons [funk [fiber bytecode value]
							 @body]
						   funks]]
     nil]]

[defunk safe-to-print [x]
  [or [null                x]
      [is-type `integer    x]
      [is-type `double     x]
      [is-type `float      x]
      [is-type `pointer    x]
      [is-type `symbol     x]
      [is-type `string     x]
      [is-type `bug        x]
      [is-type `funk       x]
      [is-type `cfunk      x]
      [is-type `metro      x]
      [is-type `metrocfunk x]]]

[defunk what-to-print-safe [x]
  [if [safe-to-print x]
      [conslist [type x] x]
    [conslist [type x] `<>]]]

[defunk print-safe [x]
  [print [what-to-print-safe x]]]

[defunk test-tracers []
  [funktracer    [print [list `funktracer----: [get funk name]
			       [let* [[funk-args      [get funk args]]
				      [what-to-prints [mapcar &what-to-print-safe args]]
				      [slots          nil]]
				 [while [and funk-args what-to-prints]
				   [let [[funk-arg      [car funk-args]]
					 [what-to-print [car what-to-prints]]]
				     [= slots [cons [list funk-arg what-to-print] slots]]]
				   [= funk-args      [cdr funk-args]]
				   [= what-to-prints [cdr what-to-prints]]]
				 slots]
			       [get bytecode command]]]]
  [endfunktracer [print [list `endfunktracer-: [type value] [get funk name] [get funk args]]]]
  [branchtracer  [print [list `branchtracer--: [not [not value]] [get bytecode command]]]]
  [valuetracer   [print [list `valuetracer---: [type value] [get bytecode command] [get bytecode arg0] [get bytecode arg1]]]]
  nil]


