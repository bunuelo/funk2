' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defmetro funktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_funk_funks]]]
     [set [this-cause] bytecode_funk_funks [cons [funk [fiber bytecode funk args]
						       @body]
						 funks]]
     nil]]

[defmetro endfunktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_endfunk_funks]]]
     [set [this-cause] bytecode_endfunk_funks [cons [funk [fiber bytecode value funk]
							  @body]
						    funks]]
     nil]]

[defmetro branchtracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_branch_funks]]]
     [set [this-cause] bytecode_branch_funks [cons [funk [fiber bytecode program_counter branch_program_counter value]
							 @body]
						   funks]]
     nil]]

[defmetro valuetracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_tracer_funks]]]
     [set [this-cause] bytecode_tracer_funks [cons [funk [fiber bytecode value]
							 @body]
						   funks]]
     nil]]

[defunk safe-to-print [x]
  [or [null             x]
      [is-type `integer x]
      [is-type `double  x]
      [is-type `float   x]
      [is-type `pointer x]
      [is-type `symbol  x]
      [is-type `string  x]
      [is-type `bug     x]]]

[defunk what-to-print-safe [x]
  [if [safe-to-print x]
      [conslist [type x] x]
    [conslist [type x] `<>]]]

[defunk print-safe [x]
  [print [what-to-print-safe x]]]

[deframe critic [frame] [cause funk_funk endfunk_funk branch_funk value_funk]]

[defmetro push-slot [x object slot]
  `[let [[object ,object]]
     [let [[push-seq [get object ,slot]]]
       [set object ,slot [cons ,x push-seq]]]]]

[deftypefunk critic execute activate [cause]
  [if [get this cause]
      [have this suppress]]
  [set this cause cause]
  [let [[funk [get this funk_funk]]]    [if funk [push-slot funk cause bytecode_funk_funks]]]
  [let [[funk [get this endfunk_funk]]] [if funk [push-slot funk cause bytecode_endfunk_funks]]]
  [let [[funk [get this branch_funk]]]  [if funk [push-slot funk cause bytecode_branch_funks]]]
  [let [[funk [get this tracer_funk]]]  [if funk [push-slot funk cause bytecode_tracer_funks]]]
  ]

[defmetro remove-from-slot [x object slot]
  [print 'critic should remove tracers, but does not.']
  nil]

[deftypefunk critic execute suppress []
  [let [[cause [get this cause]]]
    [let [[funk [get this funk_funk]]]    [if funk [remove-from-slot funk cause bytecode_funk_funks]]]
    [let [[funk [get this endfunk_funk]]] [if funk [remove-from-slot funk cause bytecode_endfunk_funks]]]
    [let [[funk [get this branch_funk]]]  [if funk [remove-from-slot funk cause bytecode_branch_funks]]]
    [let [[funk [get this tracer_funk]]]  [if funk [remove-from-slot funk cause bytecode_tracer_funks]]]
    ]
  [set this cause nil]
  ]

[defunk test-tracers []
  [funktracer    [print [list [get [time] nanoseconds_since_1970] `funktracer----: [get funk name] [get funk args] [mapcar &what-to-print-safe args]]]]
  [endfunktracer [print [list [get [time] nanoseconds_since_1970] `endfunktracer-: [get funk name] [get funk args]         [what-to-print-safe value]]]]
  [branchtracer  [print [list [get [time] nanoseconds_since_1970] `branchtracer--: [what-to-print-safe value] [get bytecode command]]]]
  [valuetracer   [print [list [get [time] nanoseconds_since_1970] `valuetracer---: [type value] [get bytecode command] [get bytecode arg0] [get bytecode arg1]]]]
  nil]


