' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defmetro funktracer_funk [:rest body] 
  `[funk [object_cause fiber bytecode funk args]
	 @body]]

[defmetro funktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_funk_funks]]]
     [set [this-cause] bytecode_funk_funks [cons [funktracer_funk @body]
						 funks]]
     nil]]

[defmetro endfunktracer_funk [:rest body] 
  `[funk [object_cause fiber bytecode value funk]
	 @body]]

[defmetro endfunktracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_endfunk_funks]]]
     [set [this-cause] bytecode_endfunk_funks [cons [endfunktracer_funk @body]
						    funks]]
     nil]]

[defmetro branchtracer_funk [:rest body] 
  `[funk [object_cause fiber bytecode program_counter branch_program_counter value]
	 @body]]

[defmetro branchtracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_branch_funks]]]
     [set [this-cause] bytecode_branch_funks [cons [branchtracer_funk @body]
						   funks]]
     nil]]

[defmetro valuetracer_funk [:rest body] 
  `[funk [object_cause fiber bytecode value]
	 @body]]

[defmetro valuetracer [:rest body] 
  `[let [[funks [get [this-cause] bytecode_tracer_funks]]]
     [set [this-cause] bytecode_tracer_funks [cons [valuetracer_funk @body]
						   funks]]
     nil]]

[defunk safe-to-print [x]
  [or [null             x]
      [is-type `integer x]
      [is-type `double  x]
      [is-type `float   x]
      [is-type `pointer x]
      [is-type `symbol  x]
      [is-type `string  x]
      [is-type `bug     x]]]

[defunk what-to-print-safe [x]
  [if [safe-to-print x]
      [conslist [type x] x]
    [conslist [type x] `<>]]]

[defunk print-safe [x]
  [print [what-to-print-safe x]]]

[deframe critic [frame] [causes funk_funk endfunk_funk branch_funk value_funk]]

[defmetro push-slot [x object slot]
  `[let [[object ,object]]
     [let [[push-seq [get object ,slot]]]
       [set object ,slot [cons ,x push-seq]]]]]

[deftypefunk critic execute activate []
  [let [[funk [get this funk_funk]]]    [if funk [push-slot funk cause bytecode_funk_funks]]]
  [let [[funk [get this endfunk_funk]]] [if funk [push-slot funk cause bytecode_endfunk_funks]]]
  [let [[funk [get this branch_funk]]]  [if funk [push-slot funk cause bytecode_branch_funks]]]
  [let [[funk [get this tracer_funk]]]  [if funk [push-slot funk cause bytecode_tracer_funks]]]
  ]

[defmetro remove-from-slot [x object slot]
  [print 'critic should remove tracers, but does not.']
  nil]

[deftypefunk critic execute suppress []
  [let [[cause [get this cause]]]
    [let [[funk [get this funk_funk]]]    [if funk [remove-from-slot funk cause bytecode_funk_funks]]]
    [let [[funk [get this endfunk_funk]]] [if funk [remove-from-slot funk cause bytecode_endfunk_funks]]]
    [let [[funk [get this branch_funk]]]  [if funk [remove-from-slot funk cause bytecode_branch_funks]]]
    [let [[funk [get this tracer_funk]]]  [if funk [remove-from-slot funk cause bytecode_tracer_funks]]]
    ]]

[deframe print_critic [critic] [stream]]

`[deftypeconstruct print_critic [stream]
  [set this stream stream]
  [set this cause [this-cause]]
  [set this funk_funk    [funktracer_funk    [print [list [get [time] nanoseconds_since_1970] `funktracer----: [get funk name] [get funk args] [mapcar &what-to-print-safe args]]]]]
  [set this endfunk_funk [endfunktracer_funk [print [list [get [time] nanoseconds_since_1970] `endfunktracer-: [get funk name] [get funk args]         [what-to-print-safe value]]]]]
  [set this branch_funk  [branchtracer_funk  [print [list [get [time] nanoseconds_since_1970] `branchtracer--: [what-to-print-safe value] [get bytecode command]]]]]
  [set this tracer_funk  [valuetracer_funk   [print [list [get [time] nanoseconds_since_1970] `valuetracer---: [type value] [get bytecode command] [get bytecode arg0] [get bytecode arg1]]]]]
  [have this activate [this-cause]]
  this]

[defunk start-tracers []
  [funktracer    [print [list [get [time] nanoseconds_since_1970] `funktracer----: [get funk name] [get funk args] [mapcar &what-to-print-safe args]]]]
  [endfunktracer [print [list [get [time] nanoseconds_since_1970] `endfunktracer-: [get funk name] [get funk args]         [what-to-print-safe value]]]]
  [branchtracer  [print [list [get [time] nanoseconds_since_1970] `branchtracer--: [what-to-print-safe value] [get bytecode command]]]]
  [valuetracer   [print [list [get [time] nanoseconds_since_1970] `valuetracer---: [type value] [get bytecode command] [get bytecode arg0] [get bytecode arg1]]]]
  nil]

[defunk test-tracers []
  [fiber [funk [] [cause] [test-tracers]] nil]
  []]

[deftypefunk cause execute trace []
  [print 'hi']
  [let [[funks [get this bytecode_funk_funks]]]
    [print 'hi']
    [set this bytecode_funk_funks
	 [cons &bytecode_funk_callback-create_and_trace_event
	       funks]]]
  [print 'hi']
  [let [[funks [get this bytecode_endfunk_funks]]]
    [print 'hi']
    [set this bytecode_endfunk_funks
	 [cons &bytecode_endfunk_callback-finish_and_abstract_event
	       funks]]]
  [print 'hi']
  nil]



