'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defmetro timer [exp]
  [eval `[let [[begin_time [time]]]
	   [prog ,exp]
	   [let [[end_time [time]]]
	     [- end_time begin_time]]]]]

[defmetro count_bytecodes [exp]
  `[let [[bytecode_count        nil]
	 [execution_nanoseconds nil]
	 [bytes_allocated_count nil]
	 [relative_time         nil]]
     [let [[begin_time [time]]]
       [let [[cause_group [new cause_group]]]
	 [have [this-cause] add_cause_group cause_group]
	 [prog ,exp]
	 [set [this-cause] cause_groups nil]
	 [let [[end_time [time]]]
	   [= bytecode_count        [get cause_group bytecode_count]]
	   [= execution_nanoseconds [get cause_group execution_nanoseconds]]
	   [= bytes_allocated_count [get cause_group bytes_allocated_count]]
	   [= relative_time         [- end_time begin_time]]]]]
     [let [[total_nanoseconds [get relative_time total_nanoseconds]]]
       [terminal_format standard-terminal
			'\nreal time           : ' relative_time
			'\nexecution_time      : ' [new relative_time execution_nanoseconds]
			'\nreal kbc/s          : ' [get [/ [get bytecode_count        as-double] [/ [get total_nanoseconds     as-double] 1000000]] as-integer] ' kbc/s'
			'\nbytes_allocated     : ' bytes_allocated_count ' bytes'
			'\nexecution kb/s      : ' [get [/ [get bytes_allocated_count as-double] [/ [get execution_nanoseconds as-double] 1000000]] as-integer] ' kb/s'
			'\nexecution kbc/s     : ' [get [/ [get bytecode_count        as-double] [/ [get execution_nanoseconds as-double] 1000000]] as-integer] ' kbc/s'
			'\nreal kb/s           : ' [get [/ [get bytes_allocated_count as-double] [/ [get total_nanoseconds     as-double] 1000000]] as-integer] ' kb/s'
			'\nreal kbc/s          : ' [get [/ [get bytecode_count        as-double] [/ [get total_nanoseconds     as-double] 1000000]] as-integer] ' kbc/s']
       nil]]]


[defunk cause_group-test []
  [let [[n 10000]]
    [dotimes [i 9]                                                           
      [let [[p [<< 1 i]]]                                                    
	[terminal_format standard-terminal '\ni=' i ' p=' p]
	[eval `[count_bytecodes [partimes [i ,p] [dotimes [i ,[/ n p]]]]]]]]]]

