'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[defmetro machine_code [:rest assembly_codes]
  `[bytecode jump_machine_code
	     ,[expression-compile_x86 `[rawcode @assembly_codes]]
	     nil
	     nil]]

[defmetro machine_code-apply [pointer :rest assembly_codes]
  [let [[machine_code_chunk [expression-compile_x86 `[rawcode @assembly_codes]]]]
    `[let [[pointer            ,pointer]
	   [machine_code_chunk ,machine_code_chunk]]
       [eval `[rawcode [bytecode set value ,pointer nil]
		       [bytecode jump_machine_code
				 ,machine_code_chunk
				 nil
				 nil]]]]]]

`[defunk machine_code-test-integer []
   [machine_code 1]]

`[defunk machine_code-test-pointer []
   [machine_code #xFEEDFEEDFEEDFEED]]

'00000000004004c4 <return_memory_value>:
   4004c4:	55                   	push   %rbp
   4004c5:	48 89 e5             	mov    %rsp,%rbp
   4004c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   4004cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   4004d0:	48 8b 00             	mov    (%rax),%rax
   4004d3:	5d                   	pop    %rbp
   4004d4:	c3                   	retq   '

[defunk machine_code-return_memory_value [pointer]
  [machine_code-apply pointer
		      [push [register rbp]]
		      [mov  [register rsp] [register rbp]]
		      [mov  [register rdi] [relative [- #x8] [register rbp]]]
		      [mov  [relative [- #x8] [register rbp]] [register rax]]
		      [mov  [deref [register rax]] [register rax]]
		      [pop  [register rbp]]
		      [retq]]]

[defunk machine_code-return_memory_value-test []
  [let [[chunk [new chunk 8]]]
    [set chunk bit8-elt 0 #x01]
    [machine_code-return_memory_value [get chunk bytes]]]]

[defunk machine_code-return_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push [register rbp]]
		      [mov  [register rsp] [register rbp]]
		      [mov  [register rdi] [relative [- #x8] [register rbp]]]
		      [mov  [relative [- #x08] [register rbp]] [register rax]]
		      [mov  [relative    #x08  [register rax]] [register rax]]
		      [pop  [register rbp]]
		      [retq]]]

[defunk machine_code-return_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit8-elt 8 #x01]
    [machine_code-return_relative_memory_value [get chunk bytes]]]]

[defunk machine_code-test-return_memory_value []
  [machine_code [push [register rbp]]
		[mov  [register rsp] [register rbp]]
		[mov  [register rdi] [relative [- #x8] [register rbp]]]
		[mov  [relative [- #x8] [register rbp]] [register rax]]
		[pop  [register rbp]]
		[retq]]]

'00000000004004e7 <return_dynamic_relative_memory_value>:
   4004e7:	55                   	push   %rbp
   4004e8:	48 89 e5             	mov    %rsp,%rbp
   4004eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   4004ef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   4004f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   4004f7:	48 03 45 f8          	add    -0x8(%rbp),%rax
   4004fb:	0f b6 00             	movzbl (%rax),%eax
   4004fe:	0f b6 c0             	movzbl %al,%eax
   400501:	5d                   	pop    %rbp
   400502:	c3                   	retq   '

[defunk machine_code-return_dynamic_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x08] [register rbp]]]
		      [mov    [register rsi] [relative [- #x10] [register rbp]]]
		      [mov    [relative [- #x10] [register rbp]] [register rax]]
		      [add    [relative [- #x08] [register rbp]] [register rax]]
		      [movzbl [deref [register rax]] [register eax]]
		      [movzbl [register al] [register eax]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-return_dynamic_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit64-elt 8 #x00]
    [set chunk bit64-elt 0 [get chunk bytes]]
    [machine_code-return_dynamic_relative_memory_value [get chunk bytes]]]]


'0000000000400503 <call_and_return_dynamic_relative_memory_value>:
   400503:	55                   	push   %rbp
   400504:	48 89 e5             	mov    %rsp,%rbp
   400507:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   40050b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   40050f:	48 8b 00             	mov    (%rax),%rax
   400512:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   400516:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   40051a:	48 8b 40 08          	mov    0x8(%rax),%rax
   40051e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   400522:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   400526:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   40052a:	48 01 d0             	add    %rdx,%rax
   40052d:	48 8b 00             	mov    (%rax),%rax
   400530:	5d                   	pop    %rbp
   400531:	c3                   	retq   '

[defunk machine_code-call_and_return_dynamic_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x18] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x10] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [relative #x08 [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x08] [register rbp]]]
		      [mov    [relative [- #x08] [register rbp]] [register rax]]
		      [mov    [relative [- #x10] [register rbp]] [register rdx]]
		      [add    [register rdx] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-call_and_return_dynamic_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit64-elt 0 [get chunk bytes]]
    [set chunk bit64-elt 8 #x08]
    [machine_code-call_and_return_dynamic_relative_memory_value [get chunk bytes]]]]


'0000000000400572 <dotimes_loop_backward>:
   400572:	55                   	push   %rbp
   400573:	48 89 e5             	mov    %rsp,%rbp
   400576:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   40057a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   40057e:	48 8b 00             	mov    (%rax),%rax
   400581:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   400585:	eb 05                	jmp    40058c <dotimes_loop+0x1a>
   400587:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   40058c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   400591:	75 f4                	jne    400587 <dotimes_loop+0x15>
   400593:	5d                   	pop    %rbp
   400594:	c3                   	retq   '
    
[defunk machine_code-dotimes_loop_backward [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x18] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x08] [register rbp]]]
		      [jmp    #x05]
		      [subq   [constant #x01] [relative [- #x08] [register rbp]]]
		      [cmpq   [constant #x00] [relative [- #x08] [register rbp]]]
		      [jne    [- #x0C]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-dotimes_loop_backward-test [loop_count]
  [let [[chunk [new chunk 8]]]
    [set chunk bit64-elt 0 [get loop_count as-pointer]]
    [machine_code-dotimes_loop_backward [get chunk bytes]]]]

'0000000000400595 <dotimes_loop>:
   400595:	55                   	push   %rbp
   400596:	48 89 e5             	mov    %rsp,%rbp
   400599:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   40059d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   4005a1:	48 8b 00             	mov    (%rax),%rax
   4005a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   4005a8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   4005af:	00 
   4005b0:	eb 05                	jmp    4005b7 <dotimes_loop+0x22>
   4005b2:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
   4005b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   4005bb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   4005bf:	72 f1                	jb     4005b2 <dotimes_loop+0x1d>
   4005c1:	5d                   	pop    %rbp
   4005c2:	c3                   	retq   '

[defunk machine_code-dotimes_loop [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x18] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x08] [register rbp]]]
		      [movq   [constant #x00] [relative [- #x10] [register rbp]]]
		      [jmp    #x05]
		      [addq   [constant #x01] [relative [- #x10] [register rbp]]]
		      [mov    [relative [- #x10] [register rbp]] [register rax]]
		      [cmp    [relative [- #x08] [register rbp]] [register rax]]
		      [jb     [- #x0F]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-dotimes_loop-test [loop_count]
  [let [[chunk [new chunk 8]]]
    [set chunk bit64-elt 0 [get loop_count as-pointer]]
    [machine_code-dotimes_loop [get chunk bytes]]]]

[globalize x86:metro_name_ptypehash [new ptypehash]]

[defmetro defx86metro [name variables :rest body]
  [terminal_format standard-terminal '\n' `[defx86metro ,name ,variables]]
  [have x86:metro_name_ptypehash add name [eval `[metro-new_with_name ,name ,variables
								      @body]]]
  nil]

[defunk x86:demetropolize_full [expression]
  [let [[did_something nil]
	[result        expression]]
    [if [is-type `cons expression]
	[let [[command [car expression]]]
	  [let [[command_metro [have x86:metro_name_ptypehash lookup command]]]
	    [if command_metro
		[prog [= did_something t]
		      [= result [apply command_metro [cdr expression]]]]
	      [let [[argument_results [mapcar [funk [argument]
						    [let [[argument-resultpair [x86:demetropolize_full argument]]]
						      [let [[argument-did_something [car argument-resultpair]]
							    [argument-result        [cdr argument-resultpair]]]
							[if argument-did_something
							    [= did_something t]]
							argument-result]]]
					      [cdr expression]]]]
		[if did_something
		    [= result [cons command argument_results]]]]]]]]
    [if did_something
	[let [[resultpair [x86:demetropolize_full result]]]
	  [let [[resultpair-did_something [car resultpair]]
		[resultpair-result        [cdr resultpair]]]
	    [cons t resultpair-result]]]
      [cons nil expression]]]]

[defunk x86:demetropolize [expression]
  [let [[resultpair [x86:demetropolize_full expression]]]
    [cdr resultpair]]]


[defx86metro variable [name]
  [let [[x86_variable_name_ptypehash [have [this-cause] lookup `x86_variable_name_ptypehash]]]
    [have x86_variable_name_ptypehash lookup name]]]

[defmetro defx86funk [name variables :rest body]
  [terminal_format standard-terminal `[defx86funk ,name ,variables]]
  [let [[this [new x86_funk name variables body]]]
    [with-new-cause [cause-define x86_variable_name_ptypehash [new ptypehash]]
		    [let [[offset 8]]
		      [mapc [funk [variable]
				  [= offset [+ offset 8]]
				  [have x86_variable_name_ptypehash add variable `[relative [- ,[get offset as-pointer]] [register rbp]]]]
			    variables]
		      [set this machine_code_chunk [expression-compile_x86 [x86:demetropolize `[rawcode [push   [register rbp]]
													[mov    [register rsp] [register rbp]]
													[mov    [register rdi] [relative [- #x18] [register rbp]]]
													[mov    [relative [- #x18] [register rbp]] [register rax]]
													[mov    [deref [register rax]] [register rax]]
													[mov    [register rax] [relative [- #x08] [register rbp]]]
													[rawcode @body]
													[pop    [register rbp]]
													[retq]]]]]]]
    [eval `[globalize-funk ,name ,this]]
    nil]]

`[defx86funk x86funk-test []
  [movq [constant #x00] [register rax]]]

