'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[defmetro machine_code [:rest assembly_codes]
  `[bytecode jump_machine_code
	     ,[expression-compile_x86 `[rawcode @assembly_codes]]
	     nil
	     nil]]

[defmetro machine_code-apply [pointer :rest assembly_codes]
  [let [[machine_code_chunk [expression-compile_x86 `[rawcode @assembly_codes]]]]
    `[let [[pointer            ,pointer]
	   [machine_code_chunk ,machine_code_chunk]]
       [eval `[rawcode [bytecode set value ,pointer nil]
		       [bytecode jump_machine_code
				 ,machine_code_chunk
				 nil
				 nil]]]]]]

`[defunk machine_code-test-integer []
   [machine_code 1]]

`[defunk machine_code-test-pointer []
   [machine_code #xFEEDFEEDFEEDFEED]]

'00000000004004c4 <return_memory_value>:
   4004c4:	55                   	push   %rbp
   4004c5:	48 89 e5             	mov    %rsp,%rbp
   4004c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   4004cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   4004d0:	48 8b 00             	mov    (%rax),%rax
   4004d3:	5d                   	pop    %rbp
   4004d4:	c3                   	retq   '

[defunk machine_code-return_memory_value [pointer]
  [machine_code-apply pointer
		      [push [register rbp]]
		      [mov  [register rsp] [register rbp]]
		      [mov  [register rdi] [relative [- #x8] [register rbp]]]
		      [mov  [relative [- #x8] [register rbp]] [register rax]]
		      [mov  [deref [register rax]] [register rax]]
		      [pop  [register rbp]]
		      [retq]]]

[defunk machine_code-return_memory_value-test []
  [let [[chunk [new chunk 8]]]
    [set chunk bit8-elt 0 #x01]
    [machine_code-return_memory_value [get chunk bytes]]]]

[defunk machine_code-return_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push [register rbp]]
		      [mov  [register rsp] [register rbp]]
		      [mov  [register rdi] [relative [- #x8] [register rbp]]]
		      [mov  [relative [- #x08] [register rbp]] [register rax]]
		      [mov  [relative    #x08  [register rax]] [register rax]]
		      [pop  [register rbp]]
		      [retq]]]

[defunk machine_code-return_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit8-elt 8 #x01]
    [machine_code-return_relative_memory_value [get chunk bytes]]]]

[defunk machine_code-test-return_memory_value []
  [machine_code [push [register rbp]]
		[mov  [register rsp] [register rbp]]
		[mov  [register rdi] [relative [- #x8] [register rbp]]]
		[mov  [relative [- #x8] [register rbp]] [register rax]]
		[pop  [register rbp]]
		[retq]]]

'00000000004004e7 <return_dynamic_relative_memory_value>:
   4004e7:	55                   	push   %rbp
   4004e8:	48 89 e5             	mov    %rsp,%rbp
   4004eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   4004ef:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   4004f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   4004f7:	48 03 45 f8          	add    -0x8(%rbp),%rax
   4004fb:	0f b6 00             	movzbl (%rax),%eax
   4004fe:	0f b6 c0             	movzbl %al,%eax
   400501:	5d                   	pop    %rbp
   400502:	c3                   	retq   '

[defunk machine_code-return_dynamic_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x08] [register rbp]]]
		      [mov    [register rsi] [relative [- #x10] [register rbp]]]
		      [mov    [relative [- #x10] [register rbp]] [register rax]]
		      [add    [relative [- #x08] [register rbp]] [register rax]]
		      [movzbl [deref [register rax]] [register eax]]
		      [movzbl [register al] [register eax]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-return_dynamic_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit64-elt 8 #x00]
    [set chunk bit64-elt 0 [get chunk bytes]]
    [machine_code-return_dynamic_relative_memory_value [get chunk bytes]]]]


'0000000000400503 <call_and_return_dynamic_relative_memory_value>:
   400503:	55                   	push   %rbp
   400504:	48 89 e5             	mov    %rsp,%rbp
   400507:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   40050b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   40050f:	48 8b 00             	mov    (%rax),%rax
   400512:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   400516:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   40051a:	48 8b 40 08          	mov    0x8(%rax),%rax
   40051e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   400522:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   400526:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   40052a:	48 01 d0             	add    %rdx,%rax
   40052d:	48 8b 00             	mov    (%rax),%rax
   400530:	5d                   	pop    %rbp
   400531:	c3                   	retq   '

 #x55
 #x48 #x89 #xe5
 #x48 #x89 #x7d #xe8
 #x48 #x8b #x45 #xe8
 #x48 #x8b #x00
 #x48 #x89 #x45 #xf0
 #x48 #x8b #x45 #xe8
 #x48 #x8b #x40 #x08
 #x48 #x89 #x45 #xf8
 #x48 #x8b #x45 #xf8
 #x48 #x8b #x55 #xf0
 #x48 #x01 #xd0
 #x48 #x8b #x00
 #x5d
 #xc3

[defunk machine_code-call_and_return_dynamic_relative_memory_value [pointer]
  [machine_code-apply pointer
		      [push   [register rbp]]
		      [mov    [register rsp] [register rbp]]
		      [mov    [register rdi] [relative [- #x18] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x10] [register rbp]]]
		      [mov    [relative [- #x18] [register rbp]] [register rax]]
		      [mov    [relative #x08 [register rax]] [register rax]]
		      [mov    [register rax] [relative [- #x08] [register rbp]]]
		      [mov    [relative [- #x08] [register rbp]] [register rax]]
		      [mov    [relative [- #x10] [register rbp]] [register rdx]]
		      [add    [register rdx] [register rax]]
		      [mov    [deref [register rax]] [register rax]]
		      [pop    [register rbp]]
		      [retq]]]

[defunk machine_code-call_and_return_dynamic_relative_memory_value-test []
  [let [[chunk [new chunk 16]]]
    [set chunk bit64-elt 0 [get chunk bytes]]
    [set chunk bit64-elt 8 #x08]
    [let [[result [machine_code-return_dynamic_relative_memory_value [get chunk bytes]]]]
      [cons result chunk]]]]


    

