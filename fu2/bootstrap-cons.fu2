'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk cons get     elt         [index]           [elt this index]]
[deftypefunk cons set     elt         [index value]     [elt-set this index value]]
[deftypefunk cons get     as-array    []                [conslist-as-array this]]
[deftypefunk cons get     as-conslist []                this]
[deftypefunk cons execute as-array    []                [conslist-as-array this]]
[deftypefunk cons execute as-conslist []                this]
[deftypefunk cons execute sort        [comparison_funk] [conslist-sort this comparison_funk]]

[deftypefunk cons get contains [element]
  [define result       nil]
  [define iter         this]
  [define this-element nil]
  [while iter
    [= this-element [car iter]]
    [if [eq this-element element]
	[prog [= result t]
	      [= iter   nil]]
      [= iter [cdr iter]]]]
  result]

[deftypefunk cons execute flatten_constree []
  [let [[result nil]]
    [labels [[visit_leaves [exp]
			   [if [is-type `cons exp]
			       [mapc [funk [subexp]
					   [visit_leaves subexp]]
				     exp]
			     [= result [cons exp result]]]]]
	    [visit_leaves this]]
    [reverse result]]]

[defunk flatten_constree [expression]
  [have expression flatten_constree]]


[deftypefunk cons execute flatten []
  [have this flatten_constree]]

[deftypefunk cons get flattened []
  [have this flatten]]

[defunk flatten [expression]
  [have expression flatten]]

