'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk critic-reactive-integer_type_bug [fiber bug]
  [ansi-stream-reset stdout]
  [terminal_format standard-terminal
		   '\n\n'
		   [append `[A bug has occurred.]
			    [bug-english_sentence_conslist bug]]
		   '\n\n']
  [globalize last-error-fiber fiber]
  `bug_not_handled]

[defunk critic-reactive-unknown_bug [fiber]
  [let [[value       [get fiber value]]
	[bug_handled nil]]
    [if [is-type `bug value]
	[let [[bug value]]
	  [ansi-stream-foreground stdout 10]
	  [terminal_format standard-terminal '\n\nbug:']
	  [print bug]]
      [terminal_format standard-terminal '\ncritic-reactive-unknown_bug: fiber does not have a bug.\n']]
    [ansi-stream-reset stdout]]]

[defunk critic-reactive-unknown_repl_bug [fiber]
  [ansi-stream-foreground stdout 10]
  [let [[value       [get fiber value]]
	[bug_handled nil]]
    [if [is-type `bug value]
	[let [[bug value]]
	  [terminal_format standard-terminal '\n\nbug:']
	  [print bug]]
      [terminal_format standard-terminal '\ncritic-reactive-unknown_bug: fiber does not have a bug.\n']]
    [repl]]]

[defunk critic-reactive-primitive_response [fiber]
  [critic-reactive-unknown_bug fiber]]

[defunk critic-reactive-primitive_repl_response [fiber]
  [critic-reactive-unknown_repl_bug fiber]]

[globalize fiber:-environment_critics- [conslist &critic-reactive-unknown_bug]]

[defmetro criticize [var code :rest body]
  `[prog [define fiber:-environment_critics- [conslist [funk [,var]
							     ,code]]]
	 @body]]

[defunk cause-enable_reactive_critics [this]
  [if this
      [object-set this `critics &critic-reactive-primitive_response]]]

[defunk cause-enable_reactive_repl_critics [this]
  [if this
      [object-set this `critics &critic-reactive-primitive_repl_response]]]

[cause-enable_reactive_repl_critics [this-cause]]

[boot-add_user_command `[cause-enable_reactive_repl_critics [this-cause]]]

