'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk critic-reactive-integer_type_bug [fiber bug]
  [ansi-stream-reset [get standard-terminal stream]]
  [terminal_format standard-terminal
		   '\n\n'
		   [append `[A bug has occurred.]
			    [bug-english_sentence_conslist bug]]
		   '\n\n']
  [globalize last-error-fiber fiber]
  `bug_not_handled]

[globalize background_bug_count 0]

[defunk critic-reactive-unknown_bug [fiber]
  [let [[value       [get fiber value]]
	[bug_handled nil]]
    [if [is-type `bug value]
	[let [[bug value]]
	  [if [not [cause-lookup cause-ignore_background_bug]]
	      [prog [ansi-stream-reset [get standard-terminal stream]]
		    [let [[bug-fiber [have [get bug frame] lookup `fiber]]]
		      [if bug-fiber
			  [let [[global_bug_name [get [string-concat 'background_bug-' [get background_bug_count as-string]] as-symbol]]]
			    [= background_bug_count [bytecode:add background_bug_count 1]]
			    [terminal_format standard-terminal '\nbug: defining globally as ' global_bug_name]
			    [eval `[globalize ,global_bug_name [quote ,bug]]]
			    nil]]]]]]
      [terminal_format standard-terminal '\ncritic-reactive-unknown_bug: fiber does not have a bug.\n']]
    [ansi-stream-reset [get standard-terminal stream]]]]

[defunk critic-reactive-unknown_repl_bug [fiber]
  [let [[value       [get fiber value]]
	[bug_handled nil]]
    [if [is-type `bug value]
	[let [[bug value]]
	  `[print [this-cause]]
	  `[print fiber]
	  `[print [get fiber cause_reg]]
	  `[print [get fiber cause]]
	  `[terminal_format standard-terminal bug]
	  [ansi-stream-foreground [get standard-terminal stream] 7]
	  [let [[bug-fiber [have [get bug frame] lookup `fiber]]]
	    [if bug-fiber
		[prog [terminal_format standard-terminal '\n\nUser Bug Fiber Stack Trace:']
		      [have bug print_backtrace]
		      [mapc [funk [x] [terminal_format standard-terminal '\n  ' x]] [get [get bug-fiber stack_trace] blocks]]]]]]
      [terminal_format standard-terminal '\ncritic-reactive-unknown_bug: fiber does not have a bug.\n']]
    [repl]]]

[defunk critic-reactive-primitive_response [fiber]
  [critic-reactive-unknown_bug fiber]]

[defunk critic-reactive-primitive_repl_response [fiber]
  [critic-reactive-unknown_repl_bug fiber]]

[globalize fiber:-environment_critics- [conslist &critic-reactive-unknown_bug]]

[defmetro criticize [var code :rest body]
  `[prog [define fiber:-environment_critics- [conslist [funk [,var]
							     ,code]]]
	 @body]]

[defunk cause-enable_reactive_critics [this]
  [if this
      [object-set this `critics &critic-reactive-primitive_response]]]

[defunk cause-enable_reactive_repl_critics [this]
  [if this
      [object-set this `critics &critic-reactive-primitive_repl_response]]]

[cause-enable_reactive_repl_critics [this-cause]]

[boot-add_user_command `[cause-enable_reactive_repl_critics [this-cause]]]

