' 
 Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[deftypefunk frame execute add [slot_name value]
  [have this add_type_var_value `variable slot_name value]]

[deftypefunk frame execute lookup [slot_name]
  [get this type_var_value `variable slot_name nil]]

[deftypefunk frame execute check_has [slot_name]
  [have this check_has_type_slot `variable slot_name]]

[deftypefunk frame get keys []
  [get this type_var-keys `variable]]

[deftypefunk frame get slots []
  [get this keys]]

[deftypefunk frame get values []
  [get this type_var-values `variable]]

[deftypefunk frame execute map_type_key_values [type_key_value_funk]
  [mapc [funk [key_type]
	      [mapc [funk [key]
			  [let [[value [get this type_var_value key_type key]]]
			    [funkall type_key_value_funk key_type key value]]]
		    [get this type_var-keys key_type]]]
	[get this key_types]]]

[deftypefunk frame execute map_keys [key_funk]
  [mapc key_funk [get this keys]]]

[deftypefunk frame execute map_values [value_funk]
  [mapc value_funk [get this values]]]

[deftypefunk frame execute map [key_value_funk]
  [have this map_keys [funk [key]
			    [apply key_value_funk [conslist key [have this lookup key]]]]]]

[defmetro frame [:rest slot_value_pairs]
  `[new frame @[let [[iter          slot_value_pairs]
		     [reverse_codes nil]]
		 [while iter
		   [let [[key [car iter]]]
		     [= iter [cdr iter]]
		     [let [[value [car iter]]]
		       [= reverse_codes [cons `[quote ,key] reverse_codes]]
		       [= reverse_codes [cons  value        reverse_codes]]]]
		   [= iter [cdr iter]]]
		 [reverse reverse_codes]]]]

[defunk frame-add_to_graph_with_ptypehash_recursive [this graph ptypehash]
  [if [have this add_to_graph_with_ptypehash graph ptypehash]
      [mapc [funk [value]
		  [if [is-type `frame value]
		      [frame-add_to_graph_with_ptypehash_recursive value graph ptypehash]]]
	    [get this values]]]]

