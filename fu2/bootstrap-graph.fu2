'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk graph get     nodes                           []                           [graph-nodes                           this]]
[deftypefunk graph get     edges                           []                           [graph-edges                           this]]
[deftypefunk graph execute add_node                        [node]                       [graph-add_node                        this node]]
[deftypefunk graph execute add_new_node                    [label]                      [graph-add_new_node                    this label]]
[deftypefunk graph execute add_edge                        [edge]                       [graph-add_edge                        this edge]]
[deftypefunk graph execute add_new_edge                    [label left_node right_node] [graph-add_new_edge                    this label left_node right_node]]
[deftypefunk graph get     node_count                      []                           [graph-node_count                      this]]
[deftypefunk graph get     contains_node                   [node]                       [graph-contains_node                   this node]]
[deftypefunk graph get     nodes_with_label                [label]                      [graph-nodes_with_label                this label]]
[deftypefunk graph get     contains_node_label             [label]                      [graph-contains_node_label             this label]]
[deftypefunk graph get     contains_edge                   [edge]                       [graph-contains_edge                   this edge]]
[deftypefunk graph get     edges_with_label                [label]                      [graph-edges_with_label                this label]]
[deftypefunk graph get     contains_edge_label             [label]                      [graph-contains_edge_label             this label]]
[deftypefunk graph get     contains                        [graph]                      [graph-contains                        this graph]]
[deftypefunk graph get     lookup_nodes_with_label         [node_label]                 [graph-lookup_nodes_with_label         this node_label]]
[deftypefunk graph get     random_nonempty_strict_subgraph []                           [graph-random_nonempty_strict_subgraph this]]
[deftypefunk graph get     minus                           [that]                       [graph-minus                           this that]]
[deftypefunk graph get     copy                            []                           [graph-copy                            this]]
[deftypefunk graph get     copy_with_node_label            [node_label]                 [graph-copy_with_node_label            this node_label]]
[deftypefunk graph get     node_isomorphisms               [node]                       [graph-node_isomorphisms               this node]]
[deftypefunk graph get     edges_with_label_between_nodes  [label left_node right_node] [graph-edges_with_label_between_nodes  this label left_node right_node]]
[deftypefunk graph get     as-dot_code                     []                           [graph-as-dot_code                     this]]
[deftypefunk graph get     union                           [:rest graphs]               [graph_list-union                      [cons this graphs]]]
[deftypefunk graph get     edges_between_nodes             [left_node right_node]       [graph-edges_between_nodes             this left_node right_node]]


[deftypefunk graph_isomorphism execute add_mapping       [left_node right_node] [graph_isomorphism-add_mapping       this left_node right_node]]
[deftypefunk graph_isomorphism get     mapping_count     []                     [graph_isomorphism-mapping_count     this]]
[deftypefunk graph_isomorphism execute map_left_to_right [left_node]            [graph_isomorphism-map_left_to_right this left_node]]
[deftypefunk graph_isomorphism execute map_right_to_left [right_node]           [graph_isomorphism-map_right_to_left this right_node]]
[deftypefunk graph_isomorphism get     union             [that]                 [graph_isomorphism-union             this that]]

[deftypefunk graph_decomposition_lattice_node execute combine_children_isomorphisms [left_child_isomorphisms right_child_isomorphisms graph]  [graph_decomposition_lattice_node-combine_children_isomorphisms this left_child_isomorphisms right_child_isomorphisms graph]]

[deftypefunk graph_decomposition_lattice execute add_node                        [node]             [graph_decomposition_lattice-add_node                  this node]]
[deftypefunk graph_decomposition_lattice execute decompose_graph                 [graph]            [graph_decomposition_lattice-decompose_graph           this graph]]
[deftypefunk graph_decomposition_lattice execute decompose_graph_with_root_graph [graph root_graph] [graph_decomposition_lattice-decompose_graph           this graph root_graph]]
[deftypefunk graph_decomposition_lattice get     subgraph_isomorphisms           [graph]            [graph_decomposition_lattice-subgraph_isomorphisms     this graph]]
[deftypefunk graph_decomposition_lattice get     subgraph_max_isomorphisms       [graph]            [graph_decomposition_lattice-subgraph_max_isomorphisms this graph]]


[defunk graph-new_from_recursive_frame [frame]
  [let [[graph [new graph]]]
    [frame-add_to_graph_with_ptypehash_recursive frame graph [new ptypehash]]
    graph]]

