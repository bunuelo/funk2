'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk strings-prog [:rest these]
  [stringlist-rawcode these]]

`[defunk graphviz-node_color [color]
   [format nil 'node [fillcolor = white, color = "' color '", style = filled];']]

`[defunk graphviz-edge_color [color]
   [format nil 'edge [color = "' color '"];']]

`[defunk graphviz-node [name label]
   [format nil name ' [label = "' label '"];']]

`[defunk graphviz-box_node [name label]
   [format nil name ' [shape=box,fillcolor=white,style=filled,label="' label '",height=.1,width=.1];']]

`[defunk graphviz-edge_tail_head [tail head]
   [format nil 'edge [arrowtail = ' tail ', arrowhead = ' head '];']]

`[defunk graphviz-edge [from_node to_node]
   [format nil from_node ' -> ' to_node ';']]

[defunk graphviz-to_string [exp]
  [if exp
      [let [[type [type exp]]]
	[cond [[eq type `symbol] [exp-to_string exp]]
	      [[eq type `string] exp]
	      [t                 [format nil [exp-to_string type] '_' [exp-to_string [pointer exp]]]]]]
    '[]']]

[defunk graphviz-labelize [exp]
  [if exp
      [let [[result [graphviz-to_string exp]]]
	[mapc [funk [replace_pair]
		    [let [[token       [first replace_pair]]
			  [replacement [second replace_pair]]]
		      [= result [have result replace_all token replacement]]]]
	      `[[' ' '_SPACE_']
		['-' '_DASH_']
		['#' '_HASH_']
		['[' '_BSQPAREN_']
		[']' '_ESQPAREN_']
		['(' '_BPAREN_']
		[')' '_EPAREN_']
		]]
	result]
    'nil']]

[defunk graphviz-edge_labelize [label left_node right_node]
  [format nil 'LABEL__' [graphviz-labelize label] '__LEFT_NODE__' [graphviz-labelize left_node] '__RIGHT_NODE__' [graphviz-labelize right_node]]]

[defunk graphviz-labelled_edge [label left_node right_node]
  [let [[edge__labelized [graphviz-edge_labelize label left_node right_node]]]
    [stringlist-rawcode `[,[graphviz-box_node edge__labelized label]
			,[graphviz-edge_tail_head 'crow' 'none']
			 ,[graphviz-edge [graphviz-labelize left_node] edge__labelized]
			  ,[graphviz-edge_tail_head 'none' 'normal']
			   ,[graphviz-edge edge__labelized [graphviz-labelize right_node]]]]]]

[deftypefunk graph get as-dot_code []
  [let [[nodes [get this nodes]]
	[edges [get this edges]]]
    [strings-prog [graphviz-digraph [graphviz-node_color '#000000']
				    [graphviz-edge_color '#000000']
				    [stringlist-rawcode [mapcar [funk [node]
								   [graphviz-node [graphviz-labelize node] [graphviz-to_string node]]]
							     nodes]]
				    [stringlist-rawcode [mapcar [funk [edge]
								   [let [[label      [get edge label]]
									 [left_node  [get edge left_node]]
									 [right_node [get edge right_node]]]
								     [graphviz-labelled_edge label left_node right_node]]]
							     edges]]
				    ]]]]

[defunk system-dot [dot_filename ps_filename]
  [let [[command [string-concat 'dot -Tps -o' ps_filename ' ' dot_filename]]]
    [if [!= 0 [system command]]
	[error `runtime `[dot-command: ,command]]]]]

[defunk system-gv [ps_filename]
  [let [[command [string-concat 'gv ' ps_filename]]]
    [if [!= 0 [system command]]
	[error `runtime `[gv-command: ,command]]]]]


[deftypefunk graph execute gview []
  [have [get this as-dot_code] save 'graphviz-temp.dot']
  [system-dot 'graphviz-temp.dot' 'graphviz-temp.ps']
  [system-gv 'graphviz-temp.ps']]

[defunk graph-test_gview []
  [let [[this [new graph]]]
    [have this add_edge `contains `the-bucket `the-mud]
    [have this add_edge `are-made-dirty-by `my-clothes `the-mud]
    [have this gview]]]

`[[[[
    [graphviz-node_color '#0000CC']
				    [graphviz-edge_color '#0000CC']
				    [graphviz-node 'i_deliberative' 'I\\n(deliberative)']
				    [graphviz-box_node 'i_deliberative_want_the_bucket_contains_the_mud' 'want\\n(deliberative)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_deliberative' 'i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_deliberative_want_the_bucket_contains_the_mud' 'the_bucket_contains_the_mud']
				    [graphviz-box_node 'i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'avoid\\n(deliberative)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_deliberative' 'i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-node_color '#008800']
				    [graphviz-edge_color '#008800']
				    [graphviz-node 'i_reflective' 'I\\n(reflective)']
				    [graphviz-box_node 'i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'focus-on\\n(reflective)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_reflective' 'i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-box_node 'i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'ignore\\n(reflective)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_reflective' 'i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-node_color '#CC0000']
				    [graphviz-edge_color '#CC0000']
				    [graphviz-node 'i_self_reflective' 'I\\n(self-reflective)']
				    [graphviz-box_node 'i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'would\\n(self-reflective)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_self_reflective' 'i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-box_node 'i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'would\\n(self-reflective)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'i_self_reflective' 'i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-node_color '#CC00CC']
				    [graphviz-edge_color '#CC00CC']
				    [graphviz-node 'my_mother_self_conscious' 'my-mother\\n(self-conscious)']
				    [graphviz-box_node 'my_mother_self_conscious_praises_i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'praises\\n(self-conscious)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'my_mother_self_conscious' 'my_mother_self_conscious_praises_i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'my_mother_self_conscious_praises_i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud' 'i_self_reflective_would_i_reflective_focus_on_i_deliberative_want_the_bucket_contains_the_mud']
				    [graphviz-box_node 'my_mother_self_conscious_scolds_i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'scolds\\n(self-conscious)']
				    [graphviz-edge_tail_head 'crow' 'none']
				    [graphviz-edge 'my_mother_self_conscious' 'my_mother_self_conscious_scolds_i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    [graphviz-edge_tail_head 'none' 'normal']
				    [graphviz-edge 'my_mother_self_conscious_scolds_i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud' 'i_self_reflective_would_i_reflective_ignore_i_deliberative_avoid_my_clothes_are_made_dirty_by_the_mud']
				    ]]
    ]]

