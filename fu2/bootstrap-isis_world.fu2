'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deframe isis_world_client [frame] [xmlrpc_client]]

[deftypeconstruct isis_world_client [xmlrpc_url]
  [set this xmlrpc_client [new xmlrpc_client xmlrpc_url]]
  this]

[deftypefunk isis_world_client execute call [:rest args] [have-apply [get this xmlrpc_client] call args]]

'isis_world specific funks below.'

[deftypefunk isis_world_client execute sense                   []                   [have this call `do `sense]]
[deftypefunk isis_world_client execute turn_left-start         []                   [have this call `do `turn_left-start]]
[deftypefunk isis_world_client execute turn_left-stop          []                   [have this call `do `turn_left-stop]]
[deftypefunk isis_world_client execute turn_right-start        []                   [have this call `do `turn_right-start]]
[deftypefunk isis_world_client execute turn_right-stop         []                   [have this call `do `turn_right-stop]]
[deftypefunk isis_world_client execute move_forward-start      []                   [have this call `do `move_forward-start]]
[deftypefunk isis_world_client execute move_forward-stop       []                   [have this call `do `move_forward-stop]]
[deftypefunk isis_world_client execute move_backward-start     []                   [have this call `do `move_backward-start]]
[deftypefunk isis_world_client execute move_backward-stop      []                   [have this call `do `move_backward-stop]]
[deftypefunk isis_world_client execute look_left-start         []                   [have this call `do `look_left-start]]
[deftypefunk isis_world_client execute look_left-stop          []                   [have this call `do `look_left-stop]]
[deftypefunk isis_world_client execute look_right-start        []                   [have this call `do `look_right-start]]
[deftypefunk isis_world_client execute look_right-stop         []                   [have this call `do `look_right-stop]]
[deftypefunk isis_world_client execute look_up-start           []                   [have this call `do `look_up-start]]
[deftypefunk isis_world_client execute look_up-stop            []                   [have this call `do `look_up-stop]]
[deftypefunk isis_world_client execute look_down-start         []                   [have this call `do `look_down-start]]
[deftypefunk isis_world_client execute look_down-stop          []                   [have this call `do `look_down-stop]]
[deftypefunk isis_world_client execute pick_up_with_right_hand [object]             [have this call `do `pick_up_with_right_hand [frame object object]]]
[deftypefunk isis_world_client execute pick_up_with_left_hand  [object]             [have this call `do `pick_up_with_left_hand  [frame object object]]]
[deftypefunk isis_world_client execute drop_from_right_hand    []                   [have this call `do `drop_from_right_hand]]
[deftypefunk isis_world_client execute drop_from_left_hand     []                   [have this call `do `drop_from_left_hand]]
[deftypefunk isis_world_client execute use                     [object with_object] [have this call `do `use                     [frame object object with_object with_object]]]
[deftypefunk isis_world_client execute say                     [message]            [have this call `do `say                     [frame message message]]]
[deftypefunk isis_world_client execute step_simulation         [seconds]            [have this call `do `step_simulation         [frame seconds seconds]]]

