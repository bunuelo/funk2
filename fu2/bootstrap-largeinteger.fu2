'Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk largeinteger execute less_than              [that] [largeinteger-less_than              this that]]
[deftypefunk largeinteger execute greater_than           [that] [largeinteger-greater_than           this that]]
[deftypefunk largeinteger execute add                    [that] [largeinteger-add                    this that]]
[deftypefunk largeinteger execute negative               []     [largeinteger-negative               this]]
[deftypefunk largeinteger execute bitshift_left          [that] [largeinteger-bitshift_left          this that]]
[deftypefunk largeinteger execute bitshift_right         [that] [largeinteger-bitshift_right         this that]]
[deftypefunk largeinteger execute subtract               [that] [largeinteger-subtract               this that]]
[deftypefunk largeinteger execute multiply               [that] [largeinteger-multiply               this that]]
[deftypefunk largeinteger execute quotient_and_remainder [that] [largeinteger-quotient_and_remainder this that]]
[deftypefunk largeinteger execute divide                 [that] [largeinteger-divide                 this that]]
[deftypefunk largeinteger execute modulo                 [that] [largeinteger-modulo                 this that]]
[deftypefunk largeinteger execute print                  []     [largeinteger-print                  this]]
[deftypefunk largeinteger get     greatest_common_factor [that] [largeinteger-greatest_common_factor this that]]
[deftypefunk largeinteger get     square_root            []     [largeinteger-square_root            this]]
[deftypefunk largeinteger get     prime_factors          []     [largeinteger-prime_factors          this]]

[defunk gcf [x y]
  [largeinteger-greatest_common_factor [new largeinteger x] [new largeinteger y]]]

[defunk prime_factors [x]
  [largeinteger-prime_factors [new largeinteger x]]]

