'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[load 'fu2/bootstrap-little_carol_world.fu2']

[deframe difference_engine [frame] [name fiber frame reduce_difference_funk active alive]]
[deftypeconstruct difference_engine [name reduce_difference_funk]
  [set this name                   name]
  [set this reduce_difference_funk reduce_difference_funk]
  this]

w[defmetro difference_engine [name :rest reduce_difference_body]
  `[new difference_engine [quote ,name]
	[funk [difference_engine]
	  @reduce_difference_body]]]

[deftypefunk difference_engine execute live []
  [if [not [get this alive]]
      [set this fiber [fiber [funk []
				   [while t
				     [if [get this active]
					 [have this reduce_difference]
				       [sleep 1]]]]
			     nil]]]
  nil]

[deftypefunk goal execute activate [frame]
  [if [get this active]
      [error error_type `goal_already_active goal_name [get this name]]
    [set this frame frame]]]

[deftypefunk goal execute handle []
  [shelter [set [this-fiber] cause_reg [get this cause]]
	   [funkall [get this handle_funk] this]]]

[deftypefunk goal get slot [name]
  [have [get goal frame] lookup name]]

[deftypefunk female_child_agent execute set_enable_random_move_goal [enable_random_move_goal]
  [let [[old_enable_random_move_goal [have this lookup `enable_random_move_goal]]]
    [if [not [eq old_enable_random_move_goal enable_random_move_goal]]
	[prog [have this add_reactive_trace `set_enable_random_move_goal [get this now] enable_random_move_goal]
	      [have this add `enable_random_move_goal enable_random_move_goal]]]]
  nil]

`[deftypefunk female_child_agent execute define-choose_random_move_goal []
  [have this add `choose_random_move_goal-goal [goal choose_random_move_goal
						     [let [[object [get goal slot `put_object_at_goal__object]]]
						       [if [not object]
							   [let [[random_object   [get carol_scene random_object]]
								 [random_position [get carol_scene random_position]]]
							     [if [and [is-type `physical_object random_object]
								      [not [eq random_object carol]]
								      [let [[transform [get random_object transform]]]
									[let [[object_position [get transform position]]
									      [position        [get this      position]]]
									  [let [[distance [get position distance object_position]]]
									    [> distance arms_length]]]]]
								 [prog [format stdout
									       '\n'
									       '\nenable_random_move_goal:'
									       '\n  random_object   = ' [get [get random_object texture] texture_name]
									       '\n  random_position = ' random_position]
								       [let [[event_id [gensym]]]
									 [have this add_reactive_trace `causes [get this now] event_id]
									 [have this add_reactive_trace `resource   event_id `random_move_goal]
									 [have this add_reactive_trace `event_name event_id `put_object_at_goal]
									 [have this add_reactive_trace `object     event_id random_object]
									 [have this add_reactive_trace `position   event_id random_position]]
								       [have this set_put_object_at_goal random_object random_position]]]]]]]]
  nil]


[deftypefunk female_child_agent execute choose_random_move_goal []
  [let [[goal [have this lookup `choose_random_move_goal-goal]]]
    [have goal handle]

[deftypefunk female_child_agent execute choose_random_move_goal []
  [let [[put_object_at_goal__object [have this lookup `put_object_at_goal__object]]]
    [if [not put_object_at_goal__object]
	[let [[random_object   [get carol_scene random_object]]
	      [random_position [get carol_scene random_position]]]
	  [if [and [is-type `physical_object random_object]
		   [not [eq random_object carol]]
		   [let [[transform [get random_object transform]]]
		     [let [[object_position [get transform position]]
			   [position        [get this      position]]]
		       [let [[distance [get position distance object_position]]]
			 [> distance arms_length]]]]]
	      [prog [format stdout
			    '\n'
			    '\nenable_random_move_goal:'
			    '\n  random_object   = ' [get [get random_object texture] texture_name]
			    '\n  random_position = ' random_position]
		    [let [[event_id [gensym]]]
		      [have this add_reactive_trace `causes [get this now] event_id]
		      [have this add_reactive_trace `resource   event_id `random_move_goal]
		      [have this add_reactive_trace `event_name event_id `put_object_at_goal]
		      [have this add_reactive_trace `object     event_id random_object]
		      [have this add_reactive_trace `position   event_id random_position]]
		    [have this set_put_object_at_goal random_object random_position]]]]]]]

[deftypefunk female_child_agent execute handle_enable_random_move_goal []
  [let [[enable_random_move_goal [have this lookup `enable_random_move_goal]]]
    [if enable_random_move_goal
	[have this choose_random_move_goal]]]
  nil]

[deftypefunk female_child_agent execute set_put_object_at_goal [object position]
  [let [[old_put_object_at_goal__object   [have this lookup `put_object_at_goal__object]]
	[old_put_object_at_goal__position [have this lookup `put_object_at_goal__position]]]
    [if [or [not [eq old_put_object_at_goal__object   object]]
	    [not [eq old_put_object_at_goal__position position]]]
	[prog [let [[event_symbol [gensym]]]
		[have this add_reactive_trace `set_put_object_at_goal [get this now] event_symbol]
		[have this add_reactive_trace `object   event_symbol object]
		[have this add_reactive_trace `position event_symbol position]]
	      [have this add `put_object_at_goal__object   object]
	      [have this add `put_object_at_goal__position position]]]]
  nil]

[deftypefunk female_child_agent execute handle_put_object_at_goal []
  [let [[goal_object   [have this lookup `put_object_at_goal__object]]
	[goal_position [have this lookup `put_object_at_goal__position]]]
    [if goal_object
	[let [[holding_object [get this holding_object goal_object]]]
	  [if [not holding_object]
	      [prog [let [[event_id [gensym]]]
		      [have this add_reactive_trace `causes [get this now] event_id]
		      [have this add_reactive_trace `resource   event_id `put_object_at_goal]
		      [have this add_reactive_trace `event_name event_id `pick_up_object_goal]
		      [have this add_reactive_trace `object     event_id goal_object]]
		    [have this set_pick_up_object_goal goal_object]]
	    [let [[position [get this position]]]
	      [if [> [get position distance goal_position] 0.0001]
		  [have this set_move_to_goal goal_position]
		[prog [prog [let [[event_id [gensym]]]
			      [have this add_reactive_trace `causes [get this now] event_id]
			      [have this add_reactive_trace `resource   event_id `put_object_at_goal]
			      [have this add_reactive_trace `event_name event_id `drop_object_goal]
			      [have this add_reactive_trace `object     event_id goal_object]]
			    [have this set_drop_object_goal goal_object]]
		      [have this set_put_object_at_goal nil nil]]]]]]]]
  nil]

[deftypefunk female_child_agent execute set_drop_object_goal [drop_object_goal]
  [let [[old_drop_object_goal [have this lookup `drop_object_goal]]]
    [if [not [eq old_drop_object_goal drop_object_goal]]
	[prog [have this add_reactive_trace `set_drop_object_goal [get this now] drop_object_goal]
	      [have this add `drop_object_goal drop_object_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_drop_object_goal []
  [let [[drop_object_goal [have this lookup `drop_object_goal]]]
    [if drop_object_goal
	[let [[left_hand_object  [get this left_hand_object]]
	      [right_hand_object [get this right_hand_object]]]
	  [let [[position [get this position]]]
	    [let [[x [get position x]]
		  [y [get position y]]
		  [z [get position z]]]
	      [cond [[eq left_hand_object  drop_object_goal] [prog [have this set_left_hand_object nil]
								   [set drop_object_goal position [new physical_position x y z]]
								   [have carol_scene add_object drop_object_goal]
								   ]]
		    [[eq right_hand_object drop_object_goal] [prog [have this set_right_hand_object nil]
								   [set drop_object_goal position [new physical_position x y z]]
								   [have carol_scene add_object drop_object_goal]
								   ]]]]]]]]
  nil]

[deftypefunk female_child_agent execute set_pick_up_object_goal [pick_up_object_goal]
  [let [[old_pick_up_object_goal [have this lookup `pick_up_object_goal]]]
    [if [not [eq old_pick_up_object_goal pick_up_object_goal]]
	[prog [have this add_reactive_trace `set_pick_up_object_goal [get this now] pick_up_object_goal]
	      [have this add `pick_up_object_goal pick_up_object_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_pick_up_object_goal []
  [let [[pick_up_object_goal [have this lookup `pick_up_object_goal]]]
    [if pick_up_object_goal
	[if [get carol_scene contains_object pick_up_object_goal]
	    [let [[transform [get pick_up_object_goal transform]]]
	      [let [[goal_position [get transform position]]
		    [position      [get this      position]]]
		[let [[distance [get position distance goal_position]]]
		  [if [< distance arms_length]
		      [let [[posture [get this posture]]]
			[if [eq posture `standing]
			    [let [[x      [get position      x]]
				  [goal_x [get goal_position x]]]
			      [if [< goal_x x]
				  [have this set_posture_goal `sitting_right]
				[have this set_posture_goal `sitting_left]]]
			  [prog [have carol_scene remove_object pick_up_object_goal]
				[set transform position [new physical_position 0 0 0]]
				[have this set_left_hand_object pick_up_object_goal]
				[have this set_pick_up_object_goal nil]]]]
		    [prog [let [[event_id [gensym]]]
			    [have this add_reactive_trace `causes [get this now] event_id]
			    [have this add_reactive_trace `resource   event_id `pick_up_object_goal]
			    [have this add_reactive_trace `event_name event_id `move_near_object_goal]
			    [have this add_reactive_trace `object     event_id pick_up_object_goal]]
			  [have this set_move_near_object_goal pick_up_object_goal]]]]]]
	  [prog [format stdout '\npick_up_object_goal failed because object is not in scene.']
		[have this set_pick_up_object_goal nil]]]]]
  nil]

[deftypefunk female_child_agent execute set_move_near_object_goal [move_near_object_goal]
  [let [[old_move_near_object_goal [have this lookup `move_near_object_goal]]]
    [if [not [eq old_move_near_object_goal move_near_object_goal]]
	[prog [have this add_reactive_trace `set_move_near_object_goal [get this now] move_near_object_goal]
	      [have this add `move_near_object_goal move_near_object_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_move_near_object_goal []
  [let [[move_near_object_goal [have this lookup `move_near_object_goal]]]
    [if move_near_object_goal
	[let [[transform [get move_near_object_goal transform]]]
	  [let [[goal_position [get transform position]]
		[position      [get this      position]]]
	    [let [[distance [get position distance goal_position]]]
	      [if [< distance arms_length]
		  [prog [have this set_move_to_goal          nil]
			[have this set_move_near_object_goal nil]]
		[prog [let [[event_id [gensym]]]
			[have this add_reactive_trace `causes [get this now] event_id]
			[have this add_reactive_trace `resource   event_id `move_near_object_goal]
			[have this add_reactive_trace `event_name event_id `move_to_goal]
			[have this add_reactive_trace `position   event_id goal_position]]
		      [have this set_move_to_goal goal_position]]]]]]]]
  nil]

[deftypefunk female_child_agent execute set_posture_goal [posture_goal]
  [let [[old_posture_goal [have this lookup `posture_goal]]]
    [if [not [eq old_posture_goal posture_goal]]
	[prog [have this add_reactive_trace `set_posture_goal [get this now] posture_goal]
	      [have this add `posture_goal posture_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_posture_goal []
  [let [[posture_goal [have this lookup `posture_goal]]]
    [if posture_goal
	[let [[posture [get this posture]]]
	  [prog [set this posture posture_goal]
		[have this set_posture_goal nil]]]]]
  nil]

[deftypefunk female_child_agent execute set_move_in_direction_goal [move_in_direction_goal]
  [let [[old_move_in_direction_goal [have this lookup `move_in_direction_goal]]]
    [if [not [eq old_move_in_direction_goal move_in_direction_goal]]
	[prog [have this add_reactive_trace `set_move_in_direction_goal [get this now] move_in_direction_goal]
	      [have this add `move_in_direction_goal move_in_direction_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_move_in_direction_goal []
  [let [[move_in_direction_goal [have this lookup `move_in_direction_goal]]]
    [if move_in_direction_goal
	[let [[posture [get this posture]]]
	  [if [not [eq posture `standing]]
	      [prog [let [[event_id [gensym]]]
		      [have this add_reactive_trace `causes [get this now] event_id]
		      [have this add_reactive_trace `resource   event_id `move_in_direction_goal]
		      [have this add_reactive_trace `event_name event_id `posture_goal]
		      [have this add_reactive_trace `posture    event_id `standing]]
		    [have this set_posture_goal `standing]]
	    [let [[goal_direction_x [get move_in_direction_goal x]]
		  [goal_direction_y [get move_in_direction_goal y]]
		  [goal_direction_z [get move_in_direction_goal z]]]
	      [let [[position [get this position]]]
		[let [[x [get position x]]
		      [y [get position y]]
		      [z [get position z]]]
		  [set position x [+ x goal_direction_x]]
		  [set position y [+ y goal_direction_y]]
		  [set position z [+ z goal_direction_z]]
		  [have this set_move_in_direction_goal nil]]]]]]]]
  nil]

[deftypefunk female_child_agent execute set_move_to_goal [move_to_goal]
  [let [[old_move_to_goal [have this lookup `move_to_goal]]]
    [if [not [eq old_move_to_goal move_to_goal]]
	[prog [have this add_reactive_trace `set_move_to_goal [get this now] move_to_goal]
	      [have this add `move_to_goal move_to_goal]]]]
  nil]

[deftypefunk female_child_agent execute handle_move_to_goal []
  `[print 'handle_move_to_goal: here.']
  [let [[move_to_goal [have this lookup `move_to_goal]]]
    `[format stdout '\nhandle_move_to_goal: move_to_goal=' move_to_goal]
    [if move_to_goal
	[prog `[format stdout '\nagent move_to_goal = ' move_to_goal]
	      [let [[goal_x [get move_to_goal x]]
		    [goal_y [get move_to_goal y]]
		    [goal_z [get move_to_goal z]]]
		[let [[position [get this position]]]
		  [if position
		      [prog `[format stdout '\nagent position = ' position]
			    [let [[x [get position x]]
				  [y [get position y]]
				  [z [get position z]]]
			      [let [[speed 0.05]]
				[let [[move_x 0]
				      [move_y 0]
				      [move_z 0]]
				  [cond [[< x [- goal_x speed]] [= move_x speed]]
					[[> x [+ goal_x speed]] [= move_x [- speed]]]
					[t                      [= move_x [- goal_x x]]]]
				  [cond [[< y [- goal_y speed]] [= move_y speed]]
					[[> y [+ goal_y speed]] [= move_y [- speed]]]
					[t                      [= move_y [- goal_y y]]]]
				  [cond [[< z [- goal_z speed]] [= move_z speed]]
					[[> z [+ goal_z speed]] [= move_z [- speed]]]
					[t                      [= move_z [- goal_z z]]]]
				  [if [and [< [abs move_x] 0.0001]
					   [< [abs move_y] 0.0001]
					   [< [abs move_z] 0.0001]]
				      [have this set_move_to_goal nil]
				    [let [[direction [new physical_position move_x move_y move_z]]]
				      [let [[event_id [gensym]]]
					[have this add_reactive_trace `causes [get this now] event_id]
					[have this add_reactive_trace `resource   event_id `move_to_goal]
					[have this add_reactive_trace `event_name event_id `move_in_direction_goal]
					[have this add_reactive_trace `direction  event_id direction]]
				      [have this set_move_in_direction_goal direction]]]
				  ]]]]]]]]]]
  nil]


[deftypefunk female_child_agent execute perceive_think_act []
  `[print 'perceive_think_act: here.']
  [let [[past   [get this now]]
	[future [gensym]]]
    [have this add_reactive_trace `past-future past future]
    [set this now future]]
  [let [[perception glwindow_value]]
    `[print 'perceive_think_act: debug 0.']
     [
     [have this handle_enable_random_move_goal]
     
     [have this handle_put_object_at_goal]
     [have this handle_pick_up_object_goal]
     [have this handle_move_near_object_goal]
     [have this handle_move_to_goal]
     [have this handle_move_in_direction_goal]
     [have this handle_posture_goal]
     [have this handle_drop_object_goal]
     ]
  nil]


'must be run on carol in order for her to actually go.'
[deftypefunk female_child_agent execute start_mind []
  [have this add `fiber [fiber [funk [] [while t
					  `[print 'female_child_agent construct: fiber here.']
					   [let [[paused [have this lookup `paused]]]
					     [if paused
						 [sleep 1]
					       [have this perceive_think_act]]]
					   ]]
			       nil]]
  nil]


