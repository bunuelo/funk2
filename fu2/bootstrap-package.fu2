'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk stream-try_read_source_expression [this]
  [let [[first_line   [get this line_number]]
	[first_column [get this column_number]]]
    [let [[read_result [stream-try_read this]]]
      [if [and [is-type `exception read_result] [eq [get read_result tag] `reader:end_of_file-exception]]
	  nil
	[let [[body           read_result]
	      [last_line      [get this line_number]]
	      [last_column    [get this column_number]]
	      [subexpressions nil]]
	  [stream-skip_whitespace this]
	  [new source_expression body first_line last_line first_column last_column subexpressions]]]]]]

[defunk source-read [this]
  [let [[code [get this code]]]
    [let [[code_stream        [string_stream-new [string-concat code ' '] 0]]
	  [done               nil]
	  [source_expressions nil]]
      [while [not done]
	[let [[read_result [stream-try_read_source_expression code_stream]]]
	  [if [null read_result]
	      [= done `t]
	    [= source_expressions [cons read_result source_expressions]]]]]
      [reverse source_expressions]]]]

[defunk source-eval [this]
  [mapc [funk [source_expression]
	      [let [[eval_result [shelter [eval [get source_expression body]]]]]
		[if [is-type `bug eval_result]
		    [prog [have [get bug frame] add `source_expression source_expression]
			  [bug bug]]]]]
	[source-read this]]]

[globalize file_loaded_modification_time_hash [hash]]

[defunk filename-load [this]
  [cause-define source-filename this]
  [source-eval [source-load this]]
  [let [[stat [pathname-stat this]]]
    [let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
      [have file_loaded_modification_time_hash add this time_of_last_modification]]]
  nil]

[defunk filename-load_if_modified [this]
  [let [[last_loaded_modification_time [have file_loaded_modification_time_hash lookup this]]]
    [if [or [null last_loaded_modification_time]
	    [let [[stat [pathname-stat this]]]
	      [let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
		[not [get last_loaded_modification_time equals time_of_last_modification]]]]]
	[filename-load this]]]]

[defunk load [:rest filenames]
  [mapc [funk [filename]
	      [filename-load filename]]
	filenames]]

[defunk load-if-modified [:rest filenames]
  [mapc [funk [filename]
	      [filename-load_if_modified filename]]
	filenames]]

[deftypefunk symbol get is-defined [] [not [is-type `bug [shelter [eval this]]]]]

[globalize packages_frame [frame]]
[globalize packages_search_path `['example/resource/'
				  'example/isis_world/']]

[defmetro defpackage [name :rest dependencies]
  [let [[package_dependencies nil]
	[source_dependencies  nil]]
    [let [[iter dependencies]]
      [while iter
	[let [[key   [car  iter]]
	      [value [cadr iter]]]
	  [cond [[eq key `:packages] [= package_dependencies value]]
		[[eq key `:sources]  [= source_dependencies  value]]
		[t                   [error bug_type `unknown_package_dependency_key_type funkname `defpackage]]]]
	[= iter [cddr iter]]]]
    `[have packages_frame add [quote ,name] [new package
						 [pathname-directory_pathname source-filename]
						 [quote ,name]
						 [conslist @[mapcar [funk [package_dependency]
									  `[quote ,package_dependency]]
								    package_dependencies]]
						 [conslist @source_dependencies]]]]]

[defunk lookup-package [name]
  [have packages_frame lookup name]]

[defmetro package [name]
  `[lookup-package [quote ,name]]]

[defmetro package-defined [name]
  `[not [null [package ,name]]]]

[defunk pathnames-all_fpkg_filenames [this]
  [let [[fpkg_filenames nil]]
    [mapc [funk [pathname]
		[= fpkg_filenames [append fpkg_filenames [let [[result [print [shelter [pathname-scan_for_filenames_by_extension [print pathname] 'fpkg']]]]]
							   [if [is-type `bug result]
							       nil
							     result]]]]]
	  this]
    fpkg_filenames]]

[defunk reload_all_package_definitions []
  [apply &load [pathnames-all_fpkg_filenames packages_search_path]]]

[defunk package-load [name]
  [let [[package [lookup-package name]]]
    [mapc [funk [package_dependency]
		[package-load_if_modified package_dependency]]
	  [get package package_dependencies]]
    [mapc [funk [source_dependency]
		[load [pathname-concat [get package pathname] source_dependency]]]
	  [get package source_dependencies]]]]

[defunk package-load_if_modified [name]
  [let [[package [lookup-package name]]]
    [mapc [funk [package_dependency]
		[package-load_if_modified package_dependency]]
	  [get package package_dependencies]]
    [mapc [funk [source_dependency]
		[load-if-modified [pathname-concat [get package pathname] source_dependency]]]
	  [get package source_dependencies]]]]

[defmetro require [name]
  `[package-load_if_modified [quote ,name]]]

[defmetro load-package [name]
  `[package-load [quote ,name]]]

