'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk stream-try_read_source_expression [this]
  [let [[first_line   [get this line_number]]
	[first_column [get this column_number]]]
    [let [[read_result [stream-try_read this]]]
      [if [and [is-type `exception read_result] [eq [get read_result tag] `reader:end_of_file-exception]]
	  nil
	[let [[body           read_result]
	      [last_line      [get this line_number]]
	      [last_column    [get this column_number]]
	      [subexpressions nil]]
	  [stream-skip_whitespace this]
	  [new source_expression body first_line last_line first_column last_column subexpressions]]]]]]

[defunk source-read [this]
  [let [[code [get this code]]]
    [let [[code_stream        [string_stream-new [string-concat code ' '] 0]]
	  [done               nil]
	  [source_expressions nil]]
      [while [not done]
	[let [[read_result [stream-try_read_source_expression code_stream]]]
	  [if [null read_result]
	      [= done `t]
	    [= source_expressions [cons read_result source_expressions]]]]]
      [reverse source_expressions]]]]

[defunk source-eval [this]
  [mapc [funk [source_expression]
	      [let [[eval_result [with-new-cause [cause-define source_expression source_expression]
						 [eval [get source_expression body]]]]]
		[if [is-type `bug eval_result]
		    [let [[bug eval_result]]
		      [have [get bug frame] add `source_expression source_expression]
		      [bug bug]]]]]
	[source-read this]]]

[globalize file_loaded_modification_time_hash [hash]]

[globalize -global_source_path- `['./' '/var/lib/funk2/']]

[defunk filename-is_global [filename]
  [equals [get filename substring 0 1] '/']]

[defunk package_filename-stat [this]
  [if [filename-is_global this]
      [pathname-stat this]
    [let [[stat   nil]
	  [result nil]]
      [let [[iter -global_source_path-]]
	[while iter
	  [let* [[source_path   [car iter]]
		 [full_filename [pathname-concat source_path this]]]
	    [= result [shelter [pathname-stat full_filename]]]
	    [if [not [is-type `bug result]]
		[prog [= stat result]
		      [= iter nil]]
	      [= iter [cdr iter]]]]]]
      [if [is-type `bug result]
	  [bug result]
	stat]]]]

[defunk package_filename-to_absolute_pathname [this]
  [if [filename-is_global this]
      this
    [let [[successful_full_filename nil]
	  [result                   nil]]
      [let [[iter -global_source_path-]]
	[while iter
	  [let* [[source_path   [car iter]]
		 [full_filename [pathname-concat source_path this]]]
	    [= result [shelter [pathname-stat full_filename]]]
	    [if [not [is-type `bug result]]
		[prog [= successful_full_filename full_filename]
		      [= iter nil]]
	      [= iter [cdr iter]]]]]]
      [if [is-type `bug result]
	  [bug result]
	successful_full_filename]]]]

[defunk filename-load [this]
  [with-new-cause [cause-define source-filename this]
		  [cause-define cause-name      `filename-load]
		  [if [or [have [this-cause] lookup `load_carefully]
			  [not [have [this-cause] lookup `load_quickly]]]
		      [prog [print `[filename-load loading ,this carefully]] 
			    [source-eval [source-load this -global_source_path-]]]
		    [prog [print `[filename-load loading ,this quickly]]
			  [primfunk:load this]]]
		  [memory-debug_assert_valid]
		  [let [[stat [package_filename-stat this]]]
		    [let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
		      [have file_loaded_modification_time_hash add this time_of_last_modification]]]]
  nil]

[defunk filename-load_if_modified [this]
  [let [[file_was_loaded nil]]
    [let [[last_loaded_modification_time [have file_loaded_modification_time_hash lookup this]]]
      [if [or [null last_loaded_modification_time]
	      [let [[stat [package_filename-stat this]]]
		[let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
		  [not [get last_loaded_modification_time equals time_of_last_modification]]]]]
	  [prog [package_filename-load this]
		[= file_was_loaded t]]]]
    file_was_loaded]]

[defunk package_filename-load [:rest filenames]
  [mapc [funk [filename]
	      [filename-load filename]]
	filenames]]

[defunk load-if-modified [:rest filenames]
  [let [[a_file_was_loaded nil]]
    [mapc [funk [filename]
		[let [[file_was_loaded [filename-load_if_modified filename]]]
		  [if file_was_loaded
		      [= a_file_was_loaded t]]]]
	  filenames]
    a_file_was_loaded]]

[deftypefunk symbol get is-defined []
  [not [is-type `bug [shelter [eval this]]]]]

[set [global_package_handler] package_search_paths `['built-in/alien/'
						     'built-in/ansi/'
						     'built-in/basic_bug_responses/'
						     'built-in/utilities/'
						     'built-in/number/'
						     'built-in/math/'
						     'built-in/mutex/'
						     'built-in/graphviz/'
						     'built-in/xmlrpc/'
						     'built-in/graph_match_error_correcting/'
						     'built-in/graph_cluster/'
						     'built-in/natural_language/'
						     'extension/blocks_world/'
						     'extension/cairo/'
						     'extension/concept_version_space/'
						     'extension/conceptnet/'
						     'extension/equals_hash/'
						     'extension/event_stream/'
						     'extension/fibermon/'
						     'extension/forgetful_event_stream/'
						     'extension/forward_planner/'
						     'extension/frame_ball/'
						     'extension/graph_isomorphism/'
						     'extension/gtk_extension/'
						     'extension/image/'
						     'extension/image_sequence/'
						     'extension/interval_tree/'
						     'extension/keyboard/'
						     'extension/lick/'
						     'extension/meta_semantic_knowledge_base/'
						     'extension/movie/'
						     'extension/propogator/'
						     'extension/semantic_action/'
						     'extension/semantic_action_event/'
						     'extension/semantic_action_knowledge_base/'
						     'extension/semantic_agent/'
						     'extension/semantic_category/'
						     'extension/semantic_causal_concept/'
						     'extension/semantic_containment_object/'
						     'extension/semantic_directed_action_event/'
						     'extension/semantic_event/'
						     'extension/semantic_event_knowledge_base/'
						     'extension/semantic_event_transframe/'
						     'extension/semantic_goal/'
						     'extension/semantic_goal_event/'
						     'extension/semantic_goal_action_causal_hypothesis/'
						     'extension/semantic_causal_event/'
						     'extension/semantic_causal_object/'
						     'extension/semantic_event_sequence/'
						     'extension/semantic_event_tree/'
						     'extension/semantic_frame/'
						     'extension/semantic_know_of_existence_event/'
						     'extension/semantic_know_of_relationship_event/'
						     'extension/semantic_knowledge_base/'
						     'extension/semantic_object_type_event/'
						     'extension/semantic_object/'
						     'extension/semantic_ordered_object/'
						     'extension/semantic_packable_object/'
						     'extension/semantic_physical_object/'
						     'extension/semantic_physical_object_type_event/'
						     'extension/semantic_physical_object_type_property_event/'
						     'extension/semantic_physical_object_type_relation_event/'
						     'extension/semantic_plan_object/'
						     'extension/semantic_plan_object_type_event/'
						     'extension/semantic_plan_object_type_relation_event/'
						     'extension/semantic_plan_operator_sequence/'
						     'extension/semantic_plan_operator_parallel/'
						     'extension/semantic_plan_operator_activation/'
						     'extension/semantic_plan_operator_suppression/'
						     'extension/semantic_planner/'
						     'extension/semantic_proprioception/'
						     'extension/semantic_proprioceptual_object/'
						     'extension/semantic_proprioceptual_orientation/'
						     'extension/semantic_proprioceptual_position/'
						     'extension/semantic_realm/'
						     'extension/semantic_relationship_key/'
						     'extension/semantic_resource/'
						     'extension/semantic_resource_action_event/'
						     'extension/semantic_resource_action_sequence/'
						     'extension/semantic_resource_event_knowledge_base/'
						     'extension/semantic_self/'
						     'extension/semantic_situation/'
						     'extension/semantic_situation_category/'
						     'extension/semantic_situation_transition/'
						     'extension/semantic_somatosensation/'
						     'extension/semantic_somatosensory_object/'
						     'extension/semantic_temporal_object/'
						     'extension/semantic_time/'
						     'extension/semantic_visual_object/'
						     'extension/timeline/'
						     'extension/transframe/'
						     'example/cannons_algorithm/'
						     'example/divisi2/'
						     'example/em_two_webpage/'
						     'example/english_language/'
						     'example/facebook/'
						     'example/funk2-htmldoc/'
						     'example/funk2-webpage/'
						     'example/graph_match/'
						     'example/gtk_timeline/'
						     'example/isis_world/'
						     'example/isis_world_client/'
						     'example/macbeth/'
						     'example/mindmon-1.0/'
						     'example/mindmon-blocks_world/'
						     'example/mindmon-isis_world/'
						     'example/moral_compass/'
						     'example/moral_compass-isis_world/'
						     'example/mind/'
						     'example/mindmon/'
						     'example/rct_webpage/'
						     'example/reflective_mind/'
						     'example/reflective_mind-blocks_world/'
						     'example/reflective_timer/'
						     'example/roboverse/'
						     'example/socket-client/'
						     'example/socket-server/'
						     'example/traced_mind/'
						     'example/visualize/'
						     'test/cairo-test/'
						     'test/concept_version_space-test/'
						     'test/gtk-test/'
						     'test/interval_tree-test/'
						     'test/optimize-test/'
						     'test/propogator-test/'
						     'test/keyboard-test/'
						     'test/timeline-test/'
						     'test/xmlrpc-test/'
						     ]]

[defmetro defpackage [name :rest dependencies]
  [print `[defpackage ,name]]
  [let [[package_dependencies         nil]
	[source_dependencies          nil]
	[documentation                nil]
	[binary_dependencies          nil]
	[dynamic_library_dependencies nil]]
    [let [[iter dependencies]]
      [while iter
	[let [[key   [car  iter]]
	      [value [cadr iter]]]
	  [cond [[eq key `:packages]          [= package_dependencies         value]]
		[[eq key `:sources]           [= source_dependencies          value]]
		[[eq key `:documentation]     [= documentation                value]]
		[[eq key `:binaries]          [= binary_dependencies          value]]
		[[eq key `:dynamic_libraries] [= dynamic_library_dependencies value]]
		[t                            [error bug_type `unknown_package_dependency_key_type funkname `defpackage]]]]
	[= iter [cddr iter]]]]
    `[have [get [global_package_handler] package_frame] add [quote ,name] [new package
									       [pathname-directory_pathname source-filename]
									       [quote ,name]
									       [conslist @[mapcar [funk [package_dependency]
													`[quote ,package_dependency]]
												  package_dependencies]]
									       [conslist @source_dependencies]
									       ,documentation
									       [conslist @binary_dependencies]
									       [conslist @dynamic_library_dependencies]
									       ]]]]

[defunk package_names []
  [get [get [global_package_handler] package_frame] keys]]

[defunk lookup-package [name]
  [global_package_handler-lookup_package name]]

[defmetro package [name]
  `[lookup-package [quote ,name]]]

[defmetro package-defined [name]
  `[not [null [package ,name]]]]

[defunk pathnames-all_fpkg_filenames [this]
  [let [[fpkg_filenames nil]]
    [mapc [funk [pathname]
		[let [[iter -global_source_path-]]
		  [while iter
		    [let* [[source_path   [car iter]]
			   [full_pathname [pathname-concat source_path pathname]]]
		      [format stdout '\nscanning ' full_pathname ' for package definitions.']
		      [= fpkg_filenames [append fpkg_filenames [let [[result [shelter [pathname-scan_for_filenames_by_extension full_pathname 'fpkg']]]]
								 [if [is-type `bug result]
								     nil
								   [prog [= iter nil]
									 result]]]]]]
		    [if iter
			[= iter [cdr iter]]]]]]
	  this]
    fpkg_filenames]]


[defunk reload_all_package_definitions []
  [mapc [funk [filename]
	      [memory-debug_assert_valid]
	      [package_filename-load filename]]
	[pathnames-all_fpkg_filenames [get [global_package_handler] package_search_paths]]]
  [memory-debug_assert_valid]]

[defunk package-load [name]
  [let [[load_if_modified_before_time [time]]]
    [let [[package [lookup-package name]]]
      [packages-load_if_modified_before [get package package_dependencies] load_if_modified_before_time nil t]
      [with-new-cause [cause-define cause-object_types_defined nil]
		      [mapc [funk [source_dependency]
				  [let [[full_source_dependency [if [filename-is_global source_dependency]
								    source_dependency
								  [pathname-concat [get package pathname] source_dependency]]]]
				    [package_filename-load full_source_dependency]]]
			    [get package source_dependencies]]
		      [mapc [funk [object_type_defined]
				  [have [get package object_types_defined_set] add object_type_defined]]
			    cause-object_types_defined]]
      [set package loaded_all_dependencies_time [time]]]]]

[defunk package-load_if_modified_before [name before_time checked_package_hash dependencies_are_sticky]
  [if [null checked_package_hash]
      [= checked_package_hash [new ptypehash]]]
  [if [not [get checked_package_hash contains name]]
      [prog [have checked_package_hash add name t]
	    [let [[package             [lookup-package name]]
		  [loaded_a_dependency nil]
		  [package_was_loaded  nil]]
	      [if [null package]
		  [error bug_type     `package_definition_not_loaded
			 description  [format nil 'We tried to load the package named \'' name '\', but the package does not exist.']
			 package_name name]]
	      [let [[loaded_all_dependencies_time [get package loaded_all_dependencies_time]]]
		[if [or [null loaded_all_dependencies_time]
			[bytecode:less_than loaded_all_dependencies_time before_time]]
		    [prog [terminal_format standard-terminal '\nchecking ' name ' for updated dependencies.']
			  [let [[dependency_was_loaded [packages-load_if_modified_before [get package package_dependencies] before_time checked_package_hash dependencies_are_sticky]]]
			    [if dependency_was_loaded
				[= loaded_a_dependency t]]]
			  [mapc [funk [binary_dependency]
				      [let [[binary_pathname [pathname-concat [get package pathname] binary_dependency]]]
					[let [[stat [package_filename-stat binary_pathname]]]
					  [let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
					    [let [[binary_modified [or [null loaded_all_dependencies_time]
								       [bytecode:greater_than time_of_last_modification loaded_all_dependencies_time]]]]
					      [if binary_modified
						  [= loaded_a_dependency t]]]]]]]
				[get package binary_dependencies]]
			  [with-new-cause [cause-define cause-object_types_defined nil]
					  [mapc [funk [source_dependency]
						      [let [[full_source_dependency [if [filename-is_global source_dependency]
											source_dependency
										      [pathname-concat [get package pathname] source_dependency]]]]
							[let [[filename full_source_dependency]]
							  [if [and dependencies_are_sticky loaded_a_dependency]
							      [prog [package_filename-load filename]
								    [= package_was_loaded t]]
							    [let [[a_file_was_loaded [load-if-modified filename]]]
							      [if a_file_was_loaded
								  [= package_was_loaded t]]]]]]]
						[get package source_dependencies]]
					  [mapc [funk [object_type_defined]
						      [have [get package object_types_defined_set] add object_type_defined]]
						cause-object_types_defined]]
			  [set package loaded_all_dependencies_time [time]]]]]
	      [or loaded_a_dependency
		  package_was_loaded]]]]]

[defunk packages-load_if_modified_before [names before_time checked_package_hash dependencies_are_sticky]
  [if [null checked_package_hash]
      [= checked_package_hash [new ptypehash]]]
  [let* [[loaded_a_dependency nil]
	 [load_fibers         [mapcar [funk [name]
					    [fiber [funk []
							 [let [[package [lookup-package name]]]
							   [let [[dependency_graph [get package dependency_graph]]]
							     [let [[contains_cycle [get dependency_graph contains_cycle]]]
							       [if contains_cycle
								   [error bug_type     `tried_to_load_package_that_has_dependency_cycle
									  package_name name]]]]
							   [while [have [get package load_cmutex] trylock]
							     [millisleep 100]]
							   [let [[load_fiber [get package load_fiber]]]
							     [if [null load_fiber]
								 [prog [set package load_fiber [this-fiber]]
								       [have [get package load_cmutex] unlock]
								       [let [[dependency_loaded [package-load_if_modified_before name before_time checked_package_hash dependencies_are_sticky]]]
									 [if dependency_loaded
									     [= loaded_a_dependency t]]]
								       [while [have [get package load_cmutex] trylock]
									 [millisleep 100]]
								       [set package load_fiber nil]
								       [have [get package load_cmutex] unlock]]
							       [prog [have [get package load_cmutex] unlock]
								     [join load_fiber]]]]
							   ]]
						   nil]]
				      names]]]
    [apply &join load_fibers]
    loaded_a_dependency]]

[defmetro load-package [name]
  `[package-load [quote ,name]]]


[defunk require-package [:rest names]
  [let [[load_if_modified_before_time [time]]]
    [global_core_extension_handler-unload_changed]
    [global_dlfcn_dynamic_library-unload_changed]
    [packages-load_if_modified_before names load_if_modified_before_time nil t]]]

[defmetro require [:rest names]
  `[prog [print [quote ,`[require @names]]]
	 [require-package @[mapcar [funk [name] `[quote ,name]] names]]]]

[defunk reload-package [:rest names]
  [let [[load_if_modified_before_time [time]]]
    [global_core_extension_handler-unload_changed]
    [global_dlfcn_dynamic_library-unload_changed]
    [packages-load_if_modified_before names load_if_modified_before_time nil nil]]]

[defmetro reload [:rest names]
  `[prog [print [quote ,`[reload @names]]]
	 [reload-package @[mapcar [funk [name] `[quote ,name]] names]]]]

