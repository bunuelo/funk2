'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk stream-try_read_source_expression [this]
  [let [[first_line   [get this line_number]]
	[first_column [get this column_number]]]
    [let [[read_result [stream-try_read this]]]
      [if [and [is-type `exception read_result] [eq [get read_result tag] `reader:end_of_file-exception]]
	  nil
	[let [[body           read_result]
	      [last_line      [get this line_number]]
	      [last_column    [get this column_number]]
	      [subexpressions nil]]
	  [stream-skip_whitespace this]
	  [new source_expression body first_line last_line first_column last_column subexpressions]]]]]]

[defunk source-read [this]
  [let [[code [get this code]]]
    [let [[code_stream        [string_stream-new [string-concat code ' '] 0]]
	  [done               nil]
	  [source_expressions nil]]
      [while [not done]
	[let [[read_result [stream-try_read_source_expression code_stream]]]
	  [if [null read_result]
	      [= done `t]
	    [= source_expressions [cons read_result source_expressions]]]]]
      [reverse source_expressions]]]]

[defunk source-eval [this]
  [mapc [funk [source_expression]
	      [let [[eval_result [shelter [eval [get source_expression body]]]]]
		[if [is-type `bug eval_result]
		    [prog [have [get bug frame] add `source_expression source_expression]
			  [bug bug]]]]]
	[source-read this]]]

[defunk load [:rest filenames]
  [mapc [funk [filename]
	      [source-eval [source-load filename]]]
	filenames]]

`[old-code-being converted to f2_package.[ch]
		 [deftypefunk symbol get is-defined [] [not [is-type `bug [shelter [eval this]]]]]
		 
		 [globalize packages_frame [frame]]
		 [globalize packages_search_path `['./example/resource/'
						   './example/isis_world/']]
		 
		 [deframe          package [frame] [name dependencies]]
		 [deftypeconstruct package [name dependencies]
		   [set this name         name]
		   [set this dependencies dependencies]
		   this]
		 
		 [defmetro defpackage [name :rest dependencies]
		   `[have packages_frame add [quote ,name] [new package [quote ,name] [quote ,`[nil @dependencies]]]]]
		 
		 [defmetro package [name]
		   `[have packages_frame lookup [quote ,name]]]
		 
		 [defmetro package-defined [name]
		   `[not [null [package ,name]]]]
		 
		 ]

