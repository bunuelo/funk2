'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk stream-try_read_source_expression [this]
  [let [[first_line   [get this line_number]]
	[first_column [get this column_number]]]
    [let [[read_result [stream-try_read this]]]
      [if [and [is-type `exception read_result] [eq [get read_result tag] `reader:end_of_file-exception]]
	  nil
	[let [[body           read_result]
	      [last_line      [get this line_number]]
	      [last_column    [get this column_number]]
	      [subexpressions nil]]
	  [stream-skip_whitespace this]
	  [new source_expression body first_line last_line first_column last_column subexpressions]]]]]]

[defunk source-read [this]
  [let [[code [get this code]]]
    [let [[code_stream        [string_stream-new [string-concat code ' '] 0]]
	  [done               nil]
	  [source_expressions nil]]
      [while [not done]
	[let [[read_result [stream-try_read_source_expression code_stream]]]
	  [if [null read_result]
	      [= done `t]
	    [= source_expressions [cons read_result source_expressions]]]]]
      [reverse source_expressions]]]]

[defunk source-eval [this]
  [mapc [funk [source_expression]
	      [let [[eval_result [with-new-cause [cause-define source_expression          source_expression]
						 [eval [get source_expression body]]]]]
		[if [is-type `bug eval_result]
		    [prog [have [get bug frame] add `source_expression source_expression]
			  [bug bug]]]]]
	[source-read this]]]

[globalize file_loaded_modification_time_hash [hash]]

[defunk filename-load [this]
  [with-new-cause [cause-define source-filename this]
		  [cause-define cause-name      `filename-load]
		  [if [or [have [this-cause] lookup `load_carefully]
			  [not [have [this-cause] lookup `load_quickly]]]
		      [prog [print `[filename-load loading ,this carefully]] 
			    [source-eval [source-load this]]]
		    [prog [print `[filename-load loading ,this quickly]]
			  [primfunk:load this]]]
		  [memory-debug_assert_valid]
		  [let [[stat [pathname-stat this]]]
		    [let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
		      [have file_loaded_modification_time_hash add this time_of_last_modification]]]]
  nil]

[defunk filename-load_if_modified [this]
  [let [[file_was_loaded nil]]
    [let [[last_loaded_modification_time [have file_loaded_modification_time_hash lookup this]]]
      [if [or [null last_loaded_modification_time]
	      [let [[stat [pathname-stat this]]]
		[let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
		  [not [get last_loaded_modification_time equals time_of_last_modification]]]]]
	  [prog [package_filename-load this]
		[= file_was_loaded t]]]]
    file_was_loaded]]

[defunk package_filename-load [:rest filenames]
  [mapc [funk [filename]
	      [filename-load filename]]
	filenames]]

[defunk load-if-modified [:rest filenames]
  [let [[a_file_was_loaded nil]]
    [mapc [funk [filename]
		[let [[file_was_loaded [filename-load_if_modified filename]]]
		  [if file_was_loaded
		      [= a_file_was_loaded t]]]]
	  filenames]
    a_file_was_loaded]]

[deftypefunk symbol get is-defined [] [not [is-type `bug [shelter [eval this]]]]]

[globalize packages_frame [frame]]
[globalize packages_search_path `['built-in/alien/'
				  'built-in/ansi/'
				  'built-in/utilities/'
				  'built-in/perception_lattice/'
				  'built-in/object_lattice/'
				  'built-in/number/'
				  'built-in/math/'
				  'built-in/graphviz/'
				  'built-in/xmlrpc/'
				  'built-in/graph_match_error_correcting/'
				  'built-in/graph_cluster/'
				  'built-in/gtk/'
				  'built-in/natural_language/'
				  'extension/cairo/'
				  'extension/conceptnet/'
				  'extension/equals_hash/'
				  'extension/event_stream/'
				  'extension/fibermon/'
				  'extension/forgetful_event_stream/'
				  'extension/forward_planner/'
				  'extension/frame_ball/'
				  'extension/graph_isomorphism/'
				  'extension/image/'
				  'extension/image_sequence/'
				  'extension/lick/'
				  'extension/mentality/'
				  'extension/meta_semantic_knowledge_base/'
				  'extension/movie/'
				  'extension/propogator/'
				  'extension/semantic_action_event/'
				  'extension/semantic_containment_object/'
				  'extension/semantic_directed_action_event/'
				  'extension/semantic_event/'
				  'extension/semantic_agent/'
				  'extension/semantic_causal_event/'
				  'extension/semantic_event_sequence/'
				  'extension/semantic_frame/'
				  'extension/semantic_knowledge_base/'
				  'extension/semantic_object_type/'
				  'extension/semantic_object/'
				  'extension/semantic_ordered_object/'
				  'extension/semantic_packable_object/'
				  'extension/semantic_physical_object/'
				  'extension/semantic_realm/'
				  'extension/semantic_relationship_key/'
				  'extension/semantic_resource/'
				  'extension/semantic_resource_action_event/'
				  'extension/semantic_resource_action_sequence/'
				  'extension/semantic_resource_action_sequence_action/'
				  'extension/semantic_temporal_object/'
				  'extension/semantic_visual_object/'
				  'extension/timeline/'
				  'example/cairo-test/'
				  'example/divisi2/'
				  'example/english_language/'
				  'example/funk2_webpage/'
				  'example/graph_match/'
				  'example/gtk-test/'
				  'example/isis_world_client/'
				  'example/isis_world_demo/'
				  'example/isismon/'
				  'example/little_carol_world/'
				  'example/macbeth/'
				  'example/mindmon/'
				  'example/moral_compass/'
				  'example/mind/'
				  'example/muddy_carol/'
				  'example/propogator-test/'
				  'example/roboverse/'
				  'example/socket-client/'
				  'example/socket-server/'
				  'example/timeline-test/'
				  'example/traced_mind/'
				  'example/xmlrpc-test/'
				  ]]

[defmetro defpackage [name :rest dependencies]
  [let [[package_dependencies nil]
	[source_dependencies  nil]
	[documentation        nil]
	[binary_dependencies  nil]]
    [let [[iter dependencies]]
      [while iter
	[let [[key   [car  iter]]
	      [value [cadr iter]]]
	  [cond [[eq key `:packages]      [= package_dependencies value]]
		[[eq key `:sources]       [= source_dependencies  value]]
		[[eq key `:documentation] [= documentation        value]]
		[[eq key `:binaries]      [= binary_dependencies  value]]
		[t                        [error bug_type `unknown_package_dependency_key_type funkname `defpackage]]]]
	[= iter [cddr iter]]]]
    `[have packages_frame add [quote ,name] [new package
						 [pathname-directory_pathname source-filename]
						 [quote ,name]
						 [conslist @[mapcar [funk [package_dependency]
									  `[quote ,package_dependency]]
								    package_dependencies]]
						 [conslist @source_dependencies]
						 ,documentation
						 [conslist @binary_dependencies]
						 ]]]]

[defunk package_names []
  [get packages_frame keys]]

[defunk lookup-package [name]
  [have packages_frame lookup name]]

[defmetro package [name]
  `[lookup-package [quote ,name]]]

[defmetro package-defined [name]
  `[not [null [package ,name]]]]

[defunk pathnames-all_fpkg_filenames [this]
  [let [[fpkg_filenames nil]]
    [mapc [funk [pathname]
		[memory-debug_assert_valid]
		[format stdout '\nscanning ' pathname ' for package definitions.']
		[= fpkg_filenames [append fpkg_filenames [let [[result [shelter [pathname-scan_for_filenames_by_extension pathname 'fpkg']]]]
							   [if [is-type `bug result]
							       nil
							     result]]]]]
	  this]
    [memory-debug_assert_valid]
    fpkg_filenames]]

[defunk reload_all_package_definitions []
  [mapc [funk [filename]
	      [memory-debug_assert_valid]
	      [package_filename-load filename]]
	[pathnames-all_fpkg_filenames packages_search_path]]
  [memory-debug_assert_valid]]

[defunk package-load [name]
  [let [[load_if_modified_before_time [time]]]
    [let [[package [lookup-package name]]]
      [mapc [funk [package_dependency]
		  [package-load_if_modified_before package_dependency load_if_modified_before_time]]
	    [get package package_dependencies]]
      [with-new-cause [cause-define cause-object_types_defined nil]
		      [mapc [funk [source_dependency]
				  [package_filename-load [pathname-concat [get package pathname] source_dependency]]]
			    [get package source_dependencies]]
		      [mapc [funk [object_type_defined]
				  [have [get package object_types_defined_set] add object_type_defined]]
			    cause-object_types_defined]]
      [set package loaded_all_dependencies_time [time]]]]]

[defunk package-load_if_modified_before [name before_time]
  [let [[package             [lookup-package name]]
	[loaded_a_dependency nil]
	[package_was_loaded  nil]]
    [if [null package]
	[error bug_type     `package_definition_not_loaded
	       description  [format nil 'We tried to load the package named \'' name '\', but the package does not exist.']
	       package_name name]]
    [let [[loaded_all_dependencies_time [get package loaded_all_dependencies_time]]]
      [if [or [null loaded_all_dependencies_time]
	      [< loaded_all_dependencies_time before_time]]
	  [prog [terminal_format standard-terminal '\nchecking ' name ' for updated dependencies.']
		[mapc [funk [package_dependency]
			    [let [[dependency_was_loaded [package-load_if_modified_before package_dependency before_time]]]
			      [if dependency_was_loaded
				  [= loaded_a_dependency t]]]]
		      [get package package_dependencies]]
		[mapc [funk [binary_dependency]
			    [let [[binary_pathname [pathname-concat [get package pathname] binary_dependency]]]
			      [let [[stat [pathname-stat binary_pathname]]]
				[let [[time_of_last_modification [have stat lookup `time_of_last_modification]]]
				  [let [[binary_modified [or [null loaded_all_dependencies_time]
							     [> time_of_last_modification loaded_all_dependencies_time]]]]
				    [if binary_modified
					[= loaded_a_dependency t]]]]]]]
		      [get package binary_dependencies]]
		[with-new-cause [cause-define cause-object_types_defined nil]
				[mapc [funk [source_dependency]
					    [let [[filename [pathname-concat [get package pathname] source_dependency]]]
					      [if loaded_a_dependency
						  [prog [package_filename-load filename]
							[= package_was_loaded t]]
						[let [[a_file_was_loaded [load-if-modified filename]]]
						  [if a_file_was_loaded
						      [= package_was_loaded t]]]]]]
				      [get package source_dependencies]]
				[mapc [funk [object_type_defined]
					    [have [get package object_types_defined_set] add object_type_defined]]
				      cause-object_types_defined]]
		[set package loaded_all_dependencies_time [time]]]]]
    [or loaded_a_dependency
	package_was_loaded]]]

[defunk require-package [:rest names]
  [let [[load_if_modified_before_time [time]]]
    [global_core_extension_handler-unload_changed]
    [global_dlfcn_dynamic_library-unload_changed]
    [mapc [funk [name]
		[package-load_if_modified_before name load_if_modified_before_time]]
	  names]]]

[defmetro require [:rest names]
  `[require-package @[mapcar [funk [name] `[quote ,name]] names]]]

[defmetro load-package [name]
  `[package-load [quote ,name]]]

