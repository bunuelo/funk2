'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk graph execute add_node                     [node]                                                       [graph-add_node                     this node]]
[deftypefunk graph execute add_edge                     [label left_node right_node]                                 [graph-add_edge                     this label left_node right_node]]
[deftypefunk graph get     contains_node                [node]                                                       [graph-contains_node                this node]]
[deftypefunk graph get     contains_edge                [label left_node right_node]                                 [graph-contains_edge                this label left_node right_node]]
[deftypefunk graph get     contains_edge_type           [label]                                                      [graph-contains_edge_type           this label]]
[deftypefunk graph execute intersect                    [that]                                                       [graph-intersect                    this that]]
[deftypefunk graph execute union                        [that]                                                       [graph-union                        this that]]
[deftypefunk graph execute remove_node                  [node]                                                       [graph-remove_node                  this node]]
[deftypefunk graph execute remove_edge                  [label left_node right_node]                                 [graph-remove_edge                  this label left_node right_node]]
[deftypefunk graph get     copy                         []                                                           [graph-copy                         this]]
[deftypefunk graph get     difference                   [that]                                                       [graph-difference                   this that]]
[deftypefunk graph get     variables                    []                                                           [graph-variables                    this]]
[deftypefunk graph get     nodes                        []                                                           [graph-nodes                        this]]
[deftypefunk graph get     edges                        []                                                           [graph-edges                        this]]
[deftypefunk graph execute replace_node                 [old_node new_node]                                          [graph-replace_node                 this old_node new_node]]
[deftypefunk graph execute replace_edge                 [edge_label left_node_label right_node_label new_edge_label] [graph-replace_node                 this old_node new_node]]
[deftypefunk graph execute make_rooted                  [root_node]                                                  [graph-make_rooted                  this root_node]]
[deftypefunk graph execute make_rootless                []                                                           [graph-make_rootless                this]]
[deftypefunk graph execute make_node_variable           [node variable_name]                                         [graph-make_node_variable           this node variable_name]]
[deftypefunk graph execute make_node_wildcard           [node]                                                       [graph-make_node_wildcard           this node]]
[deftypefunk graph execute make_edge_variable           [edge_label left_node_label right_node_label variable_name]  [graph-make_node_variable           this node variable_name]]
[deftypefunk graph execute make_edge_wildcard           [edge_label left_node_label right_node_label]                [graph-make_node_wildcard           this node]]
[deftypefunk graph get     contains_match_with_bindings [that bindings]                                              [graph-contains_match_with_bindings this that bindings]]

[deftypefunk graph_variable get is_wildcard [] [graph_variable-is_wildcard this]]

