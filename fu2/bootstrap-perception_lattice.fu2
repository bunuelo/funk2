'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk graph execute add_node                [node]                          [graph-add_node                this node]]
[deftypefunk graph execute add_edge                [label left_node right_node]    [graph-add_edge                this label left_node right_node]]
[deftypefunk graph get     node-ins_and_outs       [node]                          [graph-node-ins_and_outs       this node]]
[deftypefunk graph get     contains_node           [node]                          [graph-contains_node           this node]]
[deftypefunk graph get     contains_edge           [label left_node right_node]    [graph-contains_edge           this label left_node right_node]]
[deftypefunk graph get     node-ins                [node]                          [graph-node-ins                this node]]
[deftypefunk graph get     node-outs               [node]                          [graph-node-outs               this node]]
[deftypefunk graph execute to_string               []                              [graph-to_string               this]]
[deftypefunk graph get     subgraphs_of_node_range [min_node_count max_node_count] [graph-subgraphs_of_node_range this min_node_count max_node_count]]
[deftypefunk graph get     subgraphs               []                              [graph-subgraphs               this]]
[deftypefunk graph execute intersect               [that]                          [graph-intersect               this that]]
[deftypefunk graph execute union                   [that]                          [graph-union                   this that]]
[deftypefunk graph execute subtract_node           [node]                          [graph-subtract_node           this node]]
[deftypefunk graph execute subtract_edge           [label left_node right_node]    [graph-subtract_edge           this label left_node right_node]]
[deftypefunk graph execute copy                    []                              [graph-copy                    this]]
[deftypefunk graph get     difference              [that]                          [graph-difference              this that]]

