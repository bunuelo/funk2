'Copyright (c) 2007-2010 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk frametype-slotdef-name [this]
  [cond [[is-type `symbol this] this]
	[[is-type `cons   this] [first this]]
	[t                      [error `deframe `[compound-slotdef-name ,this]]]]]

[defunk frametype-slotdef-value [this]
  [cond [[is-type `symbol this] nil]
	[[is-type `cons   this] [second this]]
	[t                      [error `deframe `[compound-slotdef-value ,this]]]]]

[defunk type-has_parent [type_name parent_name]
  [primobject_type-has_parent_type [lookup_type type_name] parent_name]]

[defmetro deframe [type_name parents slot_name_value_pairs :rest properties]
  [print `[deframe ,type_name ,parents ,[mapcar &frametype-slotdef-name slot_name_value_pairs]]]
  [let [[initialize_funk_args nil]
	[initialize_funk_body nil]]
    [mapc [funk [property]
		[if [not [is-type `cons property]]
		    [error bug_type `invalid_deframe_property
			   property property]
		  [let [[property_type [car property]]]
		    [cond [[eq property_type `new] [prog [= initialize_funk_args [cadr property]]
							 [= initialize_funk_body [cddr property]]]]
			  [t                       [error bug_type      `unrecognized_deframe_property_type
							  property_type property_type]]]]]]
	  properties]
    [let [[primobject_type [primobject_type-new nil]]
	  [initialize_type_funk [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-initialize_type']] as-symbol] [this @initialize_funk_args]
							    [frame-add_var_value this `type [quote ,type_name]]
							    [prog @[mapcar [funk [slot_name_value_pair]
										 [let [[slot_name  [frametype-slotdef-name  slot_name_value_pair]]
										       [slot_value [frametype-slotdef-value slot_name_value_pair]]]
										   `[frame-add_var_value this [quote ,slot_name] ,slot_value]]]
									   slot_name_value_pairs]]
							    [prog @initialize_funk_body]
							    this]]]]
      [primobject_type-add_slot_type primobject_type `execute `initialize_type
				     initialize_type_funk]
      [primobject_type-add_slot_type primobject_type `execute `new
				     [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-new']] as-symbol] ,initialize_funk_args
								 [let [[this [frame-new]]]
								   [apply ,initialize_type_funk
									   [conslist this @initialize_funk_args]]
								   this]]]]
      [primobject_type-add_slot_type primobject_type `get `type
				     [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-type']] as-symbol] [this]
								 [quote ,type_name]]]]
      [primobject_type-add_slot_type primobject_type `execute `is_type
				     [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-is_type']] as-symbol] [exp]
								 [and exp [frame-is_type exp] [let [[exp_frame_type_name [frame-lookup_var_value exp `type nil]]]
												[or [eq exp_frame_type_name [quote ,type_name]]
												    [type-has_parent exp_frame_type_name [quote ,type_name]]]]]]]]
      [mapc [funk [slot_name_value_pair]
		  [let [[slot_name [frametype-slotdef-name slot_name_value_pair]]]
		    [primobject_type-add_slot_type primobject_type `get slot_name
						   [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-' [exp-as-string slot_name]]] as-symbol] [this]
									       [frame-lookup_var_value this [quote ,slot_name] `get-slot-does-not-exist]]]]
		    [primobject_type-add_slot_type primobject_type `set slot_name
						   [eval `[funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-' [exp-as-string slot_name] '-set']] as-symbol] [this value]
									       [frame-var_value-set this [quote ,slot_name] value `slot-does-not-exist]]]]]]
	    slot_name_value_pairs]
      [have primobject_type add_type_var_value `variable `parents parents]
      [add_type type_name primobject_type]]]
  nil]

`[defmetro deftypeconstruct [type_name args :rest body]
   [print `[deftypeconstruct ,type_name ,args]]
   `[let [[previous_initialize_type_funk [primobject_type-lookup_slot_type_funk [lookup_type [quote ,type_name]] `execute `initialize_type]]
	  [previous_new_funk             [primobject_type-lookup_slot_type_funk [lookup_type [quote ,type_name]] `execute `new]]]
      [primobject_type-add_slot_type [lookup_type [quote ,type_name]] `execute `initialize_type
				     [funk [this @args]
					   [apply previous_initialize_type_funk [cons this nil]]
					   @body]]
      [primobject_type-add_slot_type [lookup_type [quote ,type_name]] `execute `new
				     [funk ,args
					    [let [[this [apply previous_new_funk nil]]]
					      @body]]]]]

[defmetro initialize [type_name this :rest args]
  `[let [[initialize_type_funk [primobject_type-lookup_slot_type_funk [lookup_type [quote ,type_name]] `execute `initialize_type]]]
     [apply initialize_type_funk [conslist this @args]]]]

[defunk add_type_funk [type_name slot_type slot_name funk]
  [primobject_type-add_slot_type [lookup_type type_name] slot_type slot_name funk]]

[defmetro deftypefunk [type_name slot_type slot_name args :rest body]
  [print `[deftypefunk ,type_name ,slot_type ,slot_name ,args]]
  `[add-type_funk [quote ,type_name] [quote ,slot_type] [quote ,slot_name]
		  [funk-new_with_name ,[get [stringlist-concat [conslist [exp-as-string type_name] '-' [exp-as-string slot_name]]] as-symbol] [this @args]
				       @body]]]

