' 
 Copyright (c) 2007 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk slotdef-name [exp]
  [cond [[is-type `symbol exp] exp]
	[[is-type `cons   exp] [first exp]]
	[t                     [error `compile-time `[slotdef-name ,exp]]]]]

[defunk slotdef-default_exp [exp]
  [cond [[is-type `symbol exp] nil]
	[[is-type `cons   exp] [second exp]]
	[t                     [error `compile-time `[slotdef-default_exp ,exp]]]]]

[globalize -primobject_type-name-hash- [hashtable-new 10]]

[defunk   primobject_slot_type-new         [name type default_exp array_index]  [array `primobject_slot_type type default_exp array_index]]
[defmetro primobject_slot_type-name        [this]                              `[array-elt ,this 1]]
[defmetro primobject_slot_type-default_exp [this]                              `[array-elt ,this 2]]
[defmetro primobject_slot_type-array_index [this]                              `[array-elt ,this 3]]

[defunk   primobject_type-new                  [name slot_type_frame initial_array_length]  [array `primobject_type name slot_type_frame initial_array_length]]
[defmetro primobject_type-name                 [this]                                      `[array-elt ,this 1]]
[defmetro primobject_type-slot_type_frame      [this]                                      `[array-elt ,this 2]]
[defmetro primobject_type-initial_array_length [this]                                      `[array-elt ,this 3]]

[defunk primobject_type-lookup [name]
  [hashtable-lookup_value -primobject_type-name-hash- name]]

[defunk primobject_type_frame-new_from_slotdefs [slotdefs]
  [let [[this        [frame-new]]
	[array_index 3]]
    [mapc [funk [slotdef]
		[let [[name        [slotdef-name        slotdef]]
		      [default_exp [slotdef-default_exp slotdef]]]
		  [let [[slot_type [primobject_slot_type-new name default_exp array_index]]]
		    [frame-add_var_value this name slot_type]
		    [= array_index [+ array_index 1]]]]]
	  slotdefs]
    this]]

'
  f2__primcfunk__init(frame__add_var_value);
  f2__primcfunk__init(frame__lookup_var_value);
  f2__primcfunk__init(frame__var_value__set);
  f2__primcfunk__init(frame__add_funkvar_value);
  f2__primcfunk__init(frame__lookup_funkvar_value);
  f2__primcfunk__init(frame__funkvar_value__set);
'

[defmetro defprimobject [type_name :rest slotdefs]
  [let [[primobject_type [primobject_type-new type_name
					      [primobject_type_frame-new_from_slotdefs slotdefs]
					      [+ 3 [length slotdefs]]]]]
    [hashtable-add_keyvalue_pair -primobject_type-name-hash- type_name primobject_type]
    nil
    ]]


`[defunk primobject-brief [this]
   [let [[type_name [unsafe:primobject-type this]]]
     [let [[type [hashtable-lookup_var_value -primobject_type-name-hash- type_name]]]
       [let [[frame [frame-new]]]
	 [mapc [funk [slot]
		     [frame-add_var_value frame [primobject_slot_type-name slot] [brief [array-elt this [primobject_slot_type-array_index type]]]]]
	       [hashtable-values [frame-var_hashtable [primobject_type-slot_type_frame type]]]]
	 frame]]]]

