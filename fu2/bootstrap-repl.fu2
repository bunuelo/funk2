[globalize -funk2-bootstrap-copyright- ' 
 Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.']

[primfunk:ansi__stream__reset stdout]
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout '
']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '
  /----------------------------------------\\
  |                                        |
  | ']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'funkœ© img']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '/']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'bootstrap']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '.']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'img compiling now']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '.']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout ' |
  |                                        |
  \\----------------------------------------/

']
[primfunk:ansi__stream__reset stdout]

[primfunk:memory__assert_valid]

`[primfunk:defragmenter__signal_start]
`[yield]

`[primfunk:memory__assert_valid]

[primfunk:load 'fu2/primfunks.fu2']
[primfunk:load 'fu2/primfunks-array.fu2']
[primfunk:load 'fu2/primfunks-apropos.fu2']
[primfunk:load 'fu2/primfunks-bug.fu2']
[primfunk:load 'fu2/primfunks-cause.fu2']
[primfunk:load 'fu2/primfunks-chunk.fu2']
[primfunk:load 'fu2/primfunks-core_extension.fu2']
[primfunk:load 'fu2/primfunks-core_extension_funk.fu2']
[primfunk:load 'fu2/primfunks-compile.fu2']
[primfunk:load 'fu2/primfunks-cpu.fu2']
[primfunk:load 'fu2/primfunks-defragmenter.fu2']
[primfunk:load 'fu2/primfunks-dlfcn.fu2']
[primfunk:load 'fu2/primfunks-errno.fu2']
[primfunk:load 'fu2/primfunks-fcntl.fu2']
[primfunk:load 'fu2/primfunks-fiber.fu2']
[primfunk:load 'fu2/primfunks-fiber_trigger.fu2']
[primfunk:load 'fu2/primfunks-frame.fu2']
[primfunk:load 'fu2/primfunks-garbage_collector.fu2']
[primfunk:load 'fu2/primfunks-gmodule.fu2']
[primfunk:load 'fu2/primfunks-graph.fu2']
[primfunk:load 'fu2/primfunks-hash.fu2']
[primfunk:load 'fu2/primfunks-ioctl.fu2']
[primfunk:load 'fu2/primfunks-largeinteger.fu2']
[primfunk:load 'fu2/primfunks-locale.fu2']
[primfunk:load 'fu2/primfunks-management_thread.fu2']
[primfunk:load 'fu2/primfunks-memory.fu2']
[primfunk:load 'fu2/primfunks-object.fu2']
[primfunk:load 'fu2/primfunks-optimize.fu2']
[primfunk:load 'fu2/primfunks-package.fu2']
[primfunk:load 'fu2/primfunks-package_handler.fu2']
[primfunk:load 'fu2/primfunks-primes.fu2']
[primfunk:load 'fu2/primfunks-primobject_type.fu2']
[primfunk:load 'fu2/primfunks-primobject_type_handler.fu2']
[primfunk:load 'fu2/primfunks-primobjects.fu2']
[primfunk:load 'fu2/primfunks-print.fu2']
[primfunk:load 'fu2/primfunks-ptypes.fu2']
[primfunk:load 'fu2/primfunks-reader.fu2']
[primfunk:load 'fu2/primfunks-redblacktree.fu2']
[primfunk:load 'fu2/primfunks-scheduler.fu2']
[primfunk:load 'fu2/primfunks-set.fu2']
[primfunk:load 'fu2/primfunks-signal.fu2']
[primfunk:load 'fu2/primfunks-socket.fu2']
[primfunk:load 'fu2/primfunks-sort.fu2']
[primfunk:load 'fu2/primfunks-stdlib.fu2']
[primfunk:load 'fu2/primfunks-string.fu2']
[primfunk:load 'fu2/primfunks-surrogate_parent.fu2']
[primfunk:load 'fu2/primfunks-terminal_print.fu2']
[primfunk:load 'fu2/primfunks-termios.fu2']
[primfunk:load 'fu2/primfunks-time.fu2']
[primfunk:load 'fu2/primfunks-trace.fu2']
[primfunk:load 'fu2/primfunks-virtual_processor_handler.fu2']
[primfunk:load 'fu2/primfunks-zlib.fu2']

[memory-assert_valid]

[globalize -first_cause- [this-cause]]
[frame-add_var_value [primfunk:cause__frame [this-cause]] `standard-terminal [terminal_print_frame-new stdout 0 [termios-width] [termios-height] 256 t nil t 4000000000]]
[frame-add_var_value [primfunk:cause__frame [this-cause]] `standard-input    stdin]

[define -current_env_name- `global-environment]

[globalize optimize_funk_space t]

[globalize-funk funk-new_with_name_and_environment-original [metro-new [bytecode copy env value nil] `funk-new_with_name_and_environment `[name environment args :rest body]
								       `[[define demetroed     [exps-demetropolize_full body]]
									 [define compiled_funk [funk-new [bytecode copy env value nil] name args
													 demetroed
													 body
													 nil
													 nil
													 nil]]
									 [define compiled_bcs  [primfunk:array__elt compiled_funk  4]]
									 [define is_funktional [primfunk:array__elt compiled_funk 10]]
									 [if optimize_funk_space
									     `[funk-new ,environment [quote ,name] [quote ,args]
											nil
											nil
											[quote ,compiled_bcs]
											,is_funktional
											nil]
									   `[funk-new ,environment [quote ,name] [quote ,args]
										      [quote ,demetroed]
										      [quote ,body]
										      [quote ,compiled_bcs]
										      ,is_funktional
										      nil]]]
								       nil
								       nil
								       nil
								       nil]]

[globalize-funk funk-new_with_name_and_environment-optimize [metro-new [bytecode copy env value nil] `funk-new_with_name_and_environment `[name environment args :rest body]
								       `[[define demetroed     [exps-demetropolize_full body]]
									 [define compiled_funk [funk-new [bytecode copy env value nil] name args
													 demetroed
													 body
													 nil
													 nil
													 nil]]
									 [funk-optimize compiled_funk 10]
									 [define compiled_bcs  [primfunk:array__elt compiled_funk  4]]
									 [define is_funktional [primfunk:array__elt compiled_funk 10]]
									 [if optimize_funk_space
									     `[funk-new ,environment [quote ,name] [quote ,args]
											nil
											nil
											[quote ,compiled_bcs]
											,is_funktional
											nil]
									   `[funk-new ,environment [quote ,name] [quote ,args]
										      [quote ,demetroed]
										      [quote ,body]
										      [quote ,compiled_bcs]
										      ,is_funktional
										      nil]]]
								       nil
								       nil
								       nil
								       nil]]


[globalize-funk funk-new_with_name_and_environment &funk-new_with_name_and_environment-original]

[globalize-funk funk-new_with_name [metro-new [bytecode copy env value nil] `funk-new_with_name `[name args :rest body]
					      `[`[funk-new_with_name_and_environment ,name [bytecode copy env value nil] ,args @body]]
					      nil
					      nil
					      nil
					      nil]]

[globalize-funk metro-new_with_name_and_environment [metro-new [bytecode copy env value nil] `metro-new_with_name_and_environment `[name environment args :rest body]
							       `[[define demetroed     [exps-demetropolize_full body]]
								 [define compiled_funk [funk-new [bytecode copy env value nil] name args
												 demetroed
												 body
												 nil
												 nil
												 nil]]
								 [define compiled_bcs  [primfunk:array__elt compiled_funk  4]]
								 [define is_funktional [primfunk:array__elt compiled_funk 10]]
								 `[metro-new ,environment [quote ,name] [quote ,args]
									     [quote ,demetroed]
									     [quote ,body]
									     [quote ,compiled_bcs]
									     ,is_funktional
									     nil]]
							       nil
							       nil
							       nil
							       nil]]

[globalize-funk metro-new_with_name [metro-new [bytecode copy env value nil] `metro-new_with_name `[name args :rest body]
					       `[`[metro-new_with_name_and_environment ,name [bytecode copy env value nil] ,args @body]]
						nil
						nil
						nil
						nil]]

'defmetro is later redefined.  search for "defmetro defmetro" below.'

[globalize-funk defmetro
		[metro-new_with_name `defmetro [name args :rest body]
				      [exp-format stdout '\n'] `[exp-format stdout 'stdout: '] [exp-format stdout `[defmetro ,name ,args]]
				      `[globalize-funk ,name [metro-new_with_name ,name ,args
										   @body]]]]

[globalize-funk defmetro-local
		[metro-new_with_name `defmetro-local [name args :rest body]
				      [exp-format stdout '\n'] `[exp-format stdout 'stdout: '] [exp-format stdout `[defmetro-local ,name ,args]]
				      `[define-funk ,name [metro-new_with_name ,name ,args
										@body]]]]

[defmetro prog [:rest body]
  `[funk-apply [funk-new_with_name prog []
				   @body]
	       nil]]

[defmetro apply [proc args]
   `[funk-apply ,proc ,args]]

[defmetro funk [args :rest body]
  `[funk-new_with_name funk ,args
		       @body]]

[defmetro metro [args :rest body]
  `[metro-new_with_name metro ,args
			@body]]

'defunk is later redefined.  search for "defmetro defunk" below.'

[defmetro defunk [name args :rest body]
  [exp-format stdout '\n'] `[exp-format stdout 'stdout: '] [exp-format stdout `[defunk ,name ,args]]
  `[globalize-funk ,name
		   [funk-new_with_name ,name ,args
				       @body]]]

[defmetro defunk-local [name args :rest body]
  [exp-format stdout '\n'] `[exp-format stdout 'stdout: '] [exp-format stdout `[defunk-local ,name ,args]]
  `[define-funk ,name
     [funk-new_with_name ,name ,args
			 @body]]]

[defunk eval [exp]
  [funk-apply [funk-new [bytecode copy env value nil] `eval []
			[cons exp nil]
			[cons exp nil]
			nil
			nil
			nil]
	      nil]]

[defmetro or [:rest conds]
  [if [null conds]
      nil
    `[if ,[first conds]
	 `t
       ,[funk-apply &or [next conds]]]]]

[defmetro and [:rest conds]
  [if [null conds]
      ``t
    `[if [null ,[first conds]]
	 nil
       ,[funk-apply &and [next conds]]]]]

[defmetro chunk-write_8bit  [x y z] `[chunk-write_8bit_integer  ,x ,y [coerce-to-int ,z]]]
[defmetro chunk-write_16bit [x y z] `[chunk-write_16bit_integer ,x ,y [coerce-to-int ,z]]]
[defmetro chunk-write_32bit [x y z] `[chunk-write_32bit_integer ,x ,y [coerce-to-int ,z]]]

[defmetro object_type-type-funk    [name slot_type_name slot_name] `[primobject_type-lookup_slot_type_funk [lookup_type ,name] ,slot_type_name ,slot_name]]
[defmetro object_type-get-funk     [name slot_name]                `[object_type-type-funk                              ,name  `get            ,slot_name]]
[defmetro object_type-set-funk     [name slot_name]                `[object_type-type-funk                              ,name  `set            ,slot_name]]
[defmetro object_type-execute-funk [name slot_name]                `[object_type-type-funk                              ,name  `execute        ,slot_name]]

[defmetro type-get-apply     [type_name this slot_name args] `[apply [object_type-get-funk     [quote ,type_name] [quote ,slot_name]] [cons ,this ,args]]]
[defmetro type-set-apply     [type_name this slot_name args] `[apply [object_type-set-funk     [quote ,type_name] [quote ,slot_name]] [cons ,this ,args]]]
[defmetro type-execute-apply [type_name this slot_name args] `[apply [object_type-execute-funk [quote ,type_name] [quote ,slot_name]] [cons ,this ,args]]]
[defmetro type-have-apply    [type_name this slot_name args] `[apply [object_type-execute-funk [quote ,type_name] [quote ,slot_name]] [cons ,this ,args]]]

[defmetro type-get     [type_name this slot_name :rest args] `[type-get-apply     ,type_name ,this ,slot_name [immutable_conslist @args]]]
[defmetro type-set     [type_name this slot_name :rest args] `[type-set-apply     ,type_name ,this ,slot_name [immutable_conslist @args]]]
[defmetro type-execute [type_name this slot_name :rest args] `[type-execute-apply ,type_name ,this ,slot_name [immutable_conslist @args]]]
[defmetro type-have    [type_name this slot_name :rest args] `[type-have-apply    ,type_name ,this ,slot_name [immutable_conslist @args]]]

[defmetro object-get-funk [this slot_name]
  `[object-slot-type_funk ,this `get ,slot_name]]

[defmetro object-set-funk [this slot_name]
  `[object-slot-type_funk ,this `set ,slot_name]]

[defmetro object-execute-funk [this slot_name]
  `[object-slot-type_funk ,this `execute ,slot_name]]

[defmetro object_type-new-funk [name]
  `[primobject_type-lookup_slot_type_funk [lookup_type ,name] `execute `new]]


[defmetro object-get           [this slot_name :rest args] [define this_gensym [gensym 'get-this']]     `[prog [define ,this_gensym ,this] [apply [object-get-funk     ,this_gensym ,slot_name] [immutable_conslist ,this_gensym @args]]]]
[defmetro object-get-apply     [this slot_name args]       [define this_gensym [gensym 'get-this']]     `[prog [define ,this_gensym ,this] [apply [object-get-funk     ,this_gensym ,slot_name] [cons               ,this_gensym ,args]]]]
[defmetro object-set           [this slot_name :rest args] [define this_gensym [gensym 'set-this']]     `[prog [define ,this_gensym ,this] [apply [object-set-funk     ,this_gensym ,slot_name] [immutable_conslist ,this_gensym @args]]]]
[defmetro object-set-apply     [this slot_name args]       [define this_gensym [gensym 'set-this']]     `[prog [define ,this_gensym ,this] [apply [object-set-funk     ,this_gensym ,slot_name] [cons               ,this_gensym ,args]]]]
[defmetro object-execute       [this slot_name :rest args] [define this_gensym [gensym 'execute-this']] `[prog [define ,this_gensym ,this] [apply [object-execute-funk ,this_gensym ,slot_name] [immutable_conslist ,this_gensym @args]]]]
[defmetro object-execute-apply [this slot_name args]       [define this_gensym [gensym 'execute-this']] `[prog [define ,this_gensym ,this] [apply [object-execute-funk ,this_gensym ,slot_name] [cons               ,this_gensym ,args]]]]



[defunk object_type-new [name :rest args]
  [apply [object_type-new-funk name] args]]

[defunk object_type-new-apply [name args]
  [apply [object_type-new-funk name] args]]

[defmetro new [type_name :rest args]
  `[object_type-new [quote ,type_name] @args]]

[defmetro new-apply [type_name args]
  `[object_type-new-apply [quote ,type_name] ,args]]

[defmetro get [this slot_name :rest args]
  `[object-get ,this [quote ,slot_name] @args]]

[defmetro get-apply [this slot_name args]
  `[object-get-apply ,this [quote ,slot_name] ,args]]

[defmetro set [this slot_name :rest value_args]
  `[object-set ,this [quote ,slot_name] @value_args]]

[defmetro set-apply [this slot_name value_args]
  `[object-set-apply ,this [quote ,slot_name] ,value_args]]

[defmetro execute [this slot_name :rest args]
  `[object-execute ,this [quote ,slot_name] @args]]

[defmetro execute-apply [this slot_name args]
  `[object-execute-apply ,this [quote ,slot_name] ,args]]

[defmetro have [this slot_name :rest args]
  `[object-execute ,this [quote ,slot_name] @args]]

[defmetro have-apply [this slot_name args]
  `[object-execute-apply ,this [quote ,slot_name] ,args]]


[globalize-funk type &object-type]

[globalize-funk cons &primfunk:cons__new]
[defmetro car     [x]   `[object-get ,x `car]]
[defmetro cdr     [x]   `[object-get ,x `cdr]]
[defmetro car-set [x y] `[object-set ,x `car ,y]]
[defmetro cdr-set [x y] `[object-set ,x `cdr ,y]]

[defunk wrong_argument_number [] [error-new `bug_type `wrong_number_of_arguments] nil]
[wrong_argument_number-bcs-set [get &wrong_argument_number body_bytecodes]]

[defmetro label [name args :rest body]
  `[define-funk ,name
     [funk-new_with_name label ,args
			 @body]]]

[defunk mapc [proc seq]
  [while seq
    [apply proc [cons [car seq] nil]]
    [mutate seq [cdr seq]]]]

[defunk critic-reactive-basic_unknown_bug [fiber]
  [terminal_format standard-terminal [object-get fiber `value]]]

[defunk cause-enable_reactive_critics [this]
  `[format stdout '\ncompile note: reactive_critics not yet defined.']
  [object-set this `critics &critic-reactive-basic_unknown_bug]
  nil]

[defunk silent-fiber [funk args]
  [define fiber [fiber_parallel [funk-new_with_name silent-fiber []
						    [cause]
						    [apply funk args]]
				nil]]
  [set fiber keep_undead nil]
  fiber]

[defunk fiber [funk args]
  [silent-fiber [funk-new_with_name fiber []
				    [cause-enable_reactive_critics [this-cause]]
				    [apply funk args]]
		nil]]

[defunk parseq [proc seq]
  [if [null seq]
      nil
    [cons [fiber proc [cons [car seq] nil]]
	  [parseq proc [cdr seq]]]]]

[defunk mapcar [proc seq]
  [if [null seq]
      nil
    [prog [define result      [apply proc [cons [car seq] nil]]]
	  [define cons_result [cons result nil]]
	  [define iter        cons_result]
	  [mapc [funk [elt]
		      [define new_cons [cons [apply proc [cons elt nil]] nil]]
		      [cdr-set iter new_cons]
		      [mutate iter [cdr iter]]]
		[cdr seq]]
	  cons_result]]]



[defunk filter [cond_proc seq]
  [if [null seq]
      nil
    [prog [define exp    [car seq]]
	  [define result [apply cond_proc [cons exp nil]]]
	  [if result
	      [cons exp [filter cond_proc [cdr seq]]]
	    [filter cond_proc [cdr seq]]]]]]

[defunk is-type [type_name exp]
  [apply [primobject_type-lookup_slot_type_funk [lookup_type type_name] `execute `is_type] [cons exp nil]]]

[defunk terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe [this]
  [terminal_print_frame-prepare_for_printing-thread_unsafe this [termios-width] [integer-subtract [termios-height] 3]]]

[defunk slots [exp]
  [primobject_type-type_funk-keys [lookup_type [type exp]] `get]]

[defmetro cadr [seq]
  `[car [cdr ,seq]]]

[defmetro caddr [seq]
  `[car [cdr [cdr ,seq]]]]

[defmetro cadddr [seq]
  `[car [cdr [cdr [cdr ,seq]]]]]

[defmetro cddr [seq]
  `[cdr [cdr ,seq]]]

[defunk first [seq]
  [car seq]]

[defunk second [seq]
  [car [cdr seq]]]

[defunk third [seq]
  [car [cdr [cdr seq]]]]

[defunk fourth [seq]
  [car [cdr [cdr [cdr seq]]]]]

[defmetro let [varpairs :rest body]
  [define let-vars [mapcar [funk [varpair] [car varpair]] varpairs]]
  `[apply [funk-new_with_name let ,let-vars
			      @body]
	  [immutable_conslist @[mapcar [funk [varpair] [car [cdr varpair]]] varpairs]]]]

[defunk terminal_format-thread_unsafe [terminal_print_frame :rest exps]
  [if [null terminal_print_frame]
      [apply &string-format exps]
    [mapc [funk [exp]
		[terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
		[if [is-type `string exp]
		    [terminal_print_frame-write_string-thread_unsafe terminal_print_frame exp]
		  [exp-terminal_print_with_frame-thread_unsafe exp terminal_print_frame]]]
	  exps]]]

[defunk terminal_format [terminal_print_frame :rest exps]
  [while [have [get terminal_print_frame cmutex] trylock]]
  [let [[result [apply &terminal_format-thread_unsafe [cons terminal_print_frame exps]]]]
    [have [get terminal_print_frame cmutex] unlock]
    result]]

[defmetro parlet [varpairs :rest body]
  `[let ,[mapcar [funk [varpair]
		       [let [[var       [first  varpair]]
			     [value_exp [second varpair]]]
			 `[,var [fiber [funk [] ,value_exp] []]]]]
		 varpairs]
     [define-funk parlet-wait-loop
       [funk []
	     [if [and @[mapcar [funk [varpair]
				     [let [[var [first varpair]]]
				       `[fiber-complete? ,var]]]
			       varpairs]]
		 []
	       [prog [yield]
		     [parlet-wait-loop]]]]]
     [parlet-wait-loop]
     [let ,[mapcar [funk [varpair]
			 [let [[var       [first  varpair]]
			       [value_exp [second varpair]]]
			   `[,var [fiber-value ,var]]]]
		   varpairs]
       @body]]]

`[defunk join-test [:rest fibers]
  [define-funk fibers-wait-loop
    [funk []
	  [define-funk fibers-scan-loop
	    [funk [fiber_iter]
		  [if [null fiber_iter]
		      t
		    [let [[fiber [car fiber_iter]]]
		      [if [null [get fiber is_complete]]
			  nil
			[fibers-scan-loop [cdr fiber_iter]]]]]]]
	  [if [fibers-scan-loop fibers]
	      nil
	    [prog [millisleep 100]
		  [fibers-wait-loop]]]]]
  [fibers-wait-loop]]

`[defunk join [:rest fibers]
  [define-funk fibers-wait-loop
    [funk []
	  [define-funk fibers-scan-loop
	    [funk [fiber_iter]
		  [if [null fiber_iter]
		      t
		    [let [[fiber [car fiber_iter]]]
		      [if [null [get fiber is_complete]]
			  nil
			[fibers-scan-loop [cdr fiber_iter]]]]]]]
	  [if [fibers-scan-loop fibers]
	      nil
	    [prog [millisleep 100]
		  [fibers-wait-loop]]]]]
  [fibers-wait-loop]]

[defunk sleep_for_nanoseconds [nanoseconds]
  [sleep_for_nanoseconds_without_yield nanoseconds]
  [yield]]

[defunk nanosleep [nanoseconds]
  [sleep_for_nanoseconds nanoseconds]]

[defunk microsleep [microseconds]
  [nanosleep [integer-multiply 1000 microseconds]]]

[defunk millisleep [milliseconds]
  [microsleep [integer-multiply 1000 milliseconds]]]

[defunk sleep [seconds]
  [millisleep [integer-multiply 1000 seconds]]]

[defmetro parog [:rest codes]
  'run commands in parallel'
  `[let [[parog-fibers [immutable_conslist @[mapcar [funk [code]
							  `[fiber [funk [] ,code] []]]
						    codes]]]]
     [apply &join parog-fibers]]]

[defunk parc [proc seq]
  'run mapc commands in parallel'
  [let [[parc-fibers [mapcar [funk [exp]
				    [fiber proc [cons exp nil]]]
			      seq]]]
    [apply &join parc-fibers]]]

[defmetro cause-define-funk [name value]
  `[have [this-cause] define-funk [quote ,name] ,value]]

[defmetro cause-lookup-funk [name]
  `[have [this-cause] lookup-funk [quote ,name]]]

[defmetro cause-defunk [name args :rest body]
  `[cause-define-funk ,name [funk ,args @body]]]

[defmetro cause-define [name value]
  `[have [this-cause] define [quote ,name] ,value]]

[defmetro cause-lookup [name]
  `[have [this-cause] lookup [quote ,name]]]

[defunk parcar [proc seq]
  'run mapcar commands in parallel'
  [let [[parcar-fibers [mapcar [funk [exp]
				      [fiber proc [cons exp nil]]]
				seq]]]
    [apply &join parcar-fibers]
    [mapcar [funk [x] [get x value]] parcar-fibers]]]

[defmetro cond [:rest clauses]
  [if [null clauses]
      nil
    [let [[clause [car clauses]]]
      `[if ,[car clause]
	   [prog @[cdr clause]]
	 ,[apply &cond [cdr clauses]]]]]]

[defunk elt-1d-seq [seq index]
  [cond [[null seq]                   [error-new `bug_type `conslist-index-too-big]]
	[[integer-equal_sign index 0] [car seq]]
	[t                            [elt-1d-seq [cdr seq] [integer-subtract index 1]]]]]

[defunk elt-1d [collection index]
  [cond [[is-type `cons  collection] [elt-1d-seq collection index]]
	[[is-type `array collection] [array-elt  collection index]]
	[t                           [error-new `bug_type `unknown-collection-type]]]]

[defunk elt [collection :rest indices]
  [let [[rest_indices [cdr indices]]]
    [if [null rest_indices]
	[elt-1d collection [car indices]]
      [funkall &elt [elt-1d collection [car indices]] rest_indices]]]]

[defunk elt-1d-seq-set [seq index value]
  [cond [[null seq]                   [error-new `bug_type `conslist-index-too-big]]
	[[integer-equal_sign index 0] [car-set seq value]]
	[t                            [elt-1d-seq-set [cdr seq] [integer-subtract index 1] value]]]]

[defunk elt-1d-set [collection index value]
  [cond [[is-type `cons  collection] [elt-1d-seq-set collection index value]]
	[[is-type `array collection] [array-elt-set  collection index value]]
	[t                           [error-new `bug_type `unknown-collection-type]]]]

[defunk elt-set [collection indices value]
  [if [is-type `cons indices]
      [if [null [cdr indices]]
	  [elt-1d-set collection [car indices] value]
	[elt-set [elt collection [car indices]] [cdr indices] value]]
    [elt-1d-set collection indices value]]]

`[defmetro dotimes [var-max_index :rest body]
   [let [[var       [car  var-max_index]]
	 [max_index [cadr var-max_index]]]
     `[let [[,var      0]
	    [max_index ,max_index]]
	[define-funk dotimes-loop
	  [funk []
		[prog @body]
		[mutate ,var [integer-add ,var 1]]
		[if [integer-less_than ,var max_index]
		    [dotimes-loop]]]]
	[if [integer-less_than ,var max_index]
	    [dotimes-loop]]]]]

[defmetro dotimes [var-max_index :rest body]
  [let [[var       [car  var-max_index]]
	[max_index [cadr var-max_index]]]
    `[let [[,var      0]
	   [max_index ,max_index]]
       [while [integer-less_than ,var max_index]
	 [prog @body]
	 [mutate ,var [integer-add ,var 1]]]]]]

[defunk range [min max]
  [if [integer-less_than min max]
      [cons min [range [integer-add min 1] max]]]]

[defmetro partimes [var-max_index :rest body]
  [let [[var       [car  var-max_index]]
	[max_index [cadr var-max_index]]]
    `[let [[partimes-proc [funk [,var] @body]]
	   [max_index ,max_index]]
       [let [[partimes-seq [range 0 max_index]]]
	 [apply &join [parseq partimes-proc partimes-seq]]]]]]

[defunk conslist-set_cdr [seq value]
  [if [null seq] [error-new `description `[[funk conslist-set_cdr] [desc [null seq]] [funk-args ,seq ,value]]]]
  [let [[cdr_seq [cdr seq]]]
    [if cdr_seq
	[conslist-set_cdr cdr_seq value]
      [prog [cdr-set seq value]
	    seq]]]]

[defunk conslist-copy [seq]
  [mapcar &identity seq]]

[defunk append [first_seq :rest rest_seqs]
  [if [null first_seq]
      [if [null rest_seqs]
	  nil
	[apply &append rest_seqs]]
    [let [[first_seq_copy [conslist-copy first_seq]]]
      [if [null rest_seqs]
	  first_seq_copy
	[prog [conslist-set_cdr first_seq_copy [apply &append rest_seqs]]
	      first_seq_copy]]]]]

[defunk format [stream :rest exps]
  [if [null stream]
      [apply &string-format exps]
    [mapc [funk-new_with_name format-mapc [exp] [exp-format stream exp]] exps]]]

[defunk format-html [stream :rest exps]
  [mapc [funk-new_with_name format-html-mapc [exp] [exp-format-html stream exp]] exps]]

[defunk fwrite_html [stream :rest exps]
  [mapc [funk-new_with_name fwrite_html-mapc [exp] [exp-fwrite_html stream exp]] exps]]

[defunk print-html [exp] [format-html stdout '\nstdout: '] [fwrite_html stdout exp]]

`[defmetro while [cond :rest body]
   `[prog [define-funk while-loop
	    [funk-new_with_name while []
				[if ,cond
				    [prog [prog @body]
					  [while-loop]]]]]
	  [while-loop]]]

[defmetro funkall [funk :rest args]
  `[apply ,funk [immutable_conslist @args]]]

[defunk find [exp seq key test]
  [if [null seq]
      nil
    [let [[car [car seq]]]
      [let [[car-key [funkall key car]]]
	[if [funkall test exp car-key]
	    car
	  [find exp [cdr seq] key test]]]]]]

[defunk fiber-find_last_trace_env [fiber]
  [find `trace_env [fiber-trace fiber] [funk [x] [car x]] &eq]]

[defunk array-new [:rest lengths]
  [if [null lengths]
      []
    [let [[cdr    [cdr lengths]]
	  [length [car lengths]]]
      [let [[a    [array-new_1d length]]]
	[if cdr [dotimes [i length] [array-elt-set a i [apply &array-new cdr]]]]
	a]]]]

[defunk hashtable-new [bin_num_power] [hashtable bin_num_power [array-new [integer-bitshift_left 1 bin_num_power]]]]

`[defunk print [x]
   [format stdout '\n']
   [exp-print x]]

[defunk terminal_write-thread_unsafe [terminal_print_frame x]
  [terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
  [exp-terminal_print_with_frame-thread_unsafe x terminal_print_frame]
  x]

[defunk terminal_write [terminal_print_frame x]
  [while [have [get terminal_print_frame cmutex] trylock]]
  [let [[result [terminal_write-thread_unsafe terminal_print_frame x]]]
    [have [get terminal_print_frame cmutex] unlock]
    result]]

[defunk terminal_print-thread_unsafe [terminal_print_frame x]
  [terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
  [terminal_print_frame-write_string-thread_unsafe terminal_print_frame '\n']
  [exp-terminal_print_with_frame-thread_unsafe x terminal_print_frame]
  x]

[defunk terminal_print [terminal_print_frame x]
  [while [have [get terminal_print_frame cmutex] trylock]]
  [let [[result [terminal_print-thread_unsafe terminal_print_frame x]]]
    [have [get terminal_print_frame cmutex] unlock]
    result]]

[defunk print [x]
  [let [[terminal_print_frame [get standard-terminal new_copy]]]
    [terminal_print [get standard-terminal new_copy] x]]]

[defunk demetropolize [x]
  [let [[demetro_pair [demetropolize_once x]]]
    [let [[did_something [car demetro_pair]]
	  [retval        [cdr demetro_pair]]]
      [if did_something
	  [demetropolize retval]
	retval]]]]

[defunk demetropolize1 [x]
  [cdr [demetropolize_once x]]]

[defmetro cmutexprog [cmutex :rest body]
  `[let [[cmutexprog-cmutex ,cmutex]]
     [while [cmutex-trylock cmutexprog-cmutex]]
     [prog @body]
     [cmutex-unlock cmutexprog-cmutex]]]

[defmetro defcmutexfunk [cmutex name args :rest body]
  `[defunk ,name ,args [cmutexprog ,cmutex @body]]]

[defmetro defunks-cmutex [cmutex :rest funkdefs] 
  `[let [[defunks_cmutex-cmutex ,cmutex]]
     @[mapcar [funk [funkdef]
		    `[defcmutexfunk defunks_cmutex-cmutex @funkdef]]]]]

[defmetro rest [exp]
  `[cdr ,exp]]

[defunk remove [element sequence]
  [let [[new_sequence [cons nil nil]]]
    [let [[new_sequence_iter new_sequence]]
      [mapc [funk [sequence_element]
		  [if [not [eq element sequence_element]]
		      [let [[new_cons [cons sequence_element nil]]]
			[cons-cdr-set new_sequence_iter new_cons]
			[mutate new_sequence_iter new_cons]]]]
	    sequence]
      [cdr new_sequence]]]]

[defmetro let* [var_value_pairs :rest body]
  [if [null var_value_pairs]
      `[prog @body]
    [let [[var_value_pair [car var_value_pairs]]]
      [let [[var   [first  var_value_pair]]
	    [value [second var_value_pair]]]
	`[let [[,var ,value]]
	   [let* ,[cdr var_value_pairs]
	     @body]]]]]]

[defunk is_conslist [exp]
  [if [null exp]
      t
    [if [is-type `cons exp]
	[is_conslist [cdr exp]]
      nil]]]

[defmetro bytecode_trace [exp]
  `[let [[this-cause [this-cause]]]
     [cause-bytecode_tracing_on-set this-cause t]
     ,exp
     [cause-bytecode_tracing_on-set this-cause nil]
     [let [[event_buffer_first [cause-event_buffer_first this-cause]]]
       [cause-event_buffer_first-set this-cause nil]
       [cause-event_buffer_last-set  this-cause nil]
       event_buffer_first]]]

[defunk maparray [map_proc exp]
  [let [[length [simple_length exp]]]
    [let [[new_array [array-new length]]]
      [dotimes [i length]
	[array-elt-set new_array i [funkall map_proc [cons [array-elt exp i] nil]]]]
      new_array]]]

[defunk error-new [:rest slot_value_pairs]
  [new larva 34 [new bug 34 [new-apply frame slot_value_pairs]]]]

[defunk bug [bug]
  [new larva [get bug bug_type] bug]]

[defmetro list [:rest elements] `[new list @elements]]

[defmetro length [x] `[let [[x ,x]] [if [null x] 0 [get x length]]]]

[defmetro = [var value] `[mutate ,var ,value]]

[defunk no-color []
  [set standard-terminal use_ansi_codes nil]]

[defmetro labels [label_definitions :rest body]
  [append [cons `prog [mapcar [funk-new_with_name compile-labels [label_definition]
						  [let [[name [car  label_definition]]
							[args [cadr label_definition]]
							[body [cddr label_definition]]]
						    `[define-funk ,name [funk-new_with_name ,name ,args @body]]]]
			      label_definitions]]
	  body]]

[defmetro error [:rest slot_value_pairs]
  `[error-new `source_filename   [quote ,[cause-lookup source-filename]]
	      `source_expression [quote ,[cause-lookup source_expression]]
              @[let [[iter          slot_value_pairs]
		     [reverse_codes nil]]
		 [while iter
		   [let [[key [car iter]]]
		     [= iter [cdr iter]]
		     [let [[value [car iter]]]
		       [= reverse_codes [cons `[quote ,key] reverse_codes]]
		       [= reverse_codes [cons  value        reverse_codes]]]]
		   [= iter [cdr iter]]]
		 [reverse reverse_codes]]]]

[defunk pause []
  [global_scheduler-remove_fiber [this-fiber]]
  [yield]]

[defunk resume [fiber]
  [global_scheduler-add_fiber fiber]]

[defunk wait-for-trigger [fiber_trigger]
  [have fiber_trigger add_waiting_fiber_and_remove_from_scheduler [this-fiber]]
  [yield]]

[defmetro on-trigger [trigger :rest body]
  `[let [[trigger ,trigger]]
     [fiber [funk []
		  [wait-for-trigger trigger]
		  @body]
	    nil]
     nil]]

[defunk fiber-wait_for_either_complete_or_encounter_bug [this]
  [fiber-wait_for_either_complete_or_encounter_bug-without_yield this]
  [yield]]

[defunk fiber-join [this]
  [fiber-wait_for_either_complete_or_encounter_bug this]
  [let [[exit_status [fiber-exit_status this]]]
    [cond [[eq exit_status `complete]
	   [get this value]]
	  [[eq exit_status `bug]
	   [let [[bug [get this value]]]
	     [if [is-type `bug bug]
		 [let [[bug_frame [get bug frame]]]
		   [if [is-type `frame bug_frame]
		       [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
			       [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
			   [frame-add_var_value bug_frame `stack_trace [get this stack_trace]]]]
		   [bug bug]]
	       [error bug_type    `fiber-join-fiber_paused_without_bug
		      fiber_value bug
		      join_fiber  this
		      stack_trace [get fiber stack_trace]]]]]
	  [t
	   [error bug_type    `fiber-join-unknown-fiber-exit-status
		  join_fiber  this
		  exit_status exit_status]]]]]

[defunk fiber-sheltered_join [this]
  [let [[not_done     t]
	[return_value nil]]
    [while not_done
      [fiber-wait_for_either_complete_or_encounter_bug this]
      [let [[exit_status [fiber-exit_status this]]]
	[cond [[eq exit_status `complete]
	       [prog [= return_value [get this value]]
		     [= not_done     nil]]]
	      [[eq exit_status `bug]
	       [let [[bug [get this value]]]
		 [if [is-type `bug bug]
		     [let [[bug_frame [get bug frame]]]
		       [if [is-type `frame bug_frame]
			   [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				   [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
			       [frame-add_var_value bug_frame `stack_trace [get this stack_trace]]]]
		       [= return_value bug]
		       [= not_done     nil]]
		   [error bug_type    `fiber-join_sheltered-fiber_paused_without_bug
			  fiber_value bug
			  join_fiber  this
			  stack_trace [get fiber stack_trace]]]]]
	      [t
	       [print `fiber-sheltered_join-unknown-fiber-exit-status]
	       `[error bug_type    `fiber-sheltered_join-unknown-fiber-exit-status
		       join_fiber  this
		       exit_status exit_status]]]]]
    return_value]]

[defmetro with-new-cause [:rest codes]
  `[fiber-join [fiber [funk-new_with_name with-new-cause []
					  [set [this-cause] critics nil]
					  @codes]
		      nil]]]

[defmetro with-new-cause-old [:rest codes]
  `[let* [[result     `bug]
	  [main_fiber [this-fiber]]
	  [fiber      [fiber [funk-new_with_name with-new-cause []
						 [set [this-cause] critics nil]
						 [while [global_scheduler-contains_active_fiber main_fiber]
						   [millisleep 100]]
						 [= result [prog @codes]]]
			     nil]]]
     [let [[complete_trigger [get fiber complete_trigger]]
	   [bug_trigger      [get fiber bug_trigger]]]
       [have complete_trigger add_waiting_fiber main_fiber]
       [have bug_trigger      add_waiting_fiber main_fiber]
       [pause]
       [let [[exit_status [get fiber exit_status]]]
	 [cond [[eq exit_status `complete]
		result]
	       [[eq exit_status `bug]
		[let [[bug [get fiber value]]]
		  [if [is-type `bug bug]
		      [let [[bug_frame [get bug frame]]]
			[if [is-type `frame bug_frame]
			    [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				    [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
				[frame-add_var_value bug_frame `stack_trace [get fiber stack_trace]]]]
			[bug bug]]
		    [error bug_type    `with-new-cause-fiber_paused_without_bug
			   fiber_value bug
			   stack_trace [get fiber stack_trace]]]]]
	       [t
		[error bug_type    `with-new-cause-unknown-fiber-exit-status
		       exit_status exit_status]]]]]]]

[defmetro with-new-cause-backup [:rest codes]
  `[let* [[result `bug]
	  [fiber  [fiber [funk-new_with_name with-new-cause []
					     [set [this-cause] critics nil]
					     [= result [prog @codes]]]
			 nil]]]
     [while [not [get fiber exit_status]]
       [millisleep 100]]
     [let [[exit_status [get fiber exit_status]]]
       [cond [[eq exit_status `complete]
	      result]
	     [[eq exit_status `bug]
	      [let [[bug [get fiber value]]]
		[if [is-type `bug bug]
		    [let [[bug_frame [get bug frame]]]
		      [if [is-type `frame bug_frame]
			  [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				  [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
			      [frame-add_var_value bug_frame `stack_trace [get fiber stack_trace]]]]
		      [bug bug]]
		  [error bug_type    `with-new-cause-fiber_paused_without_bug
			 fiber_value bug
			 stack_trace [get fiber stack_trace]]]]]
	     [t
	      [error bug_type    `with-new-cause-unknown-fiber-exit-status
		     exit_status exit_status]]]]]]

[defmetro shelter [:rest codes]
  `[fiber-sheltered_join [fiber [funk-new_with_name with-new-cause []
						    [set [this-cause] critics nil]
						    @codes]
				nil]]]

[defmetro shelter-old [:rest codes]
  `[let* [[result     `bug]
	  [main_fiber [this-fiber]]
	  [fiber      [fiber [funk-new_with_name shelter []
						 [set [this-cause] critics nil]
						 [while [global_scheduler-contains_active_fiber main_fiber]
						   [millisleep 100]]
						 [= result [prog @codes]]]
			     nil]]]
     [let [[complete_trigger [get fiber complete_trigger]]
	   [bug_trigger      [get fiber bug_trigger]]]
       [have complete_trigger add_waiting_fiber main_fiber]
       [have bug_trigger      add_waiting_fiber main_fiber]
       [pause]
       [let [[exit_status [get fiber exit_status]]]
	 [cond [[eq exit_status `complete]
		result]
	       [[eq exit_status `bug]
		[let [[bug [get fiber value]]]
		  [if [is-type `bug bug]
		      [let [[bug_frame [get bug frame]]]
			[if [is-type `frame bug_frame]
			    [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				    [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
				[frame-add_var_value bug_frame `stack_trace [get fiber stack_trace]]]]
			bug]
		    [error bug_type    `shelter-fiber_paused_without_bug
			   fiber_value bug
			   stack_trace [get fiber stack_trace]]]]]
	       [t
		[error bug_type    `shelter-unknown-fiber-exit-status
		       exit_status exit_status]]]]]]]

[defmetro shelter-backup [:rest codes]
  `[let* [[result `bug]
	  [fiber  [silent-fiber [funk-new_with_name shelter []
						    [set [this-cause] critics nil]
						    [= result [prog @codes]]]
				nil]]]
     [while [not [get fiber exit_status]]
       [millisleep 100]]
     [let [[exit_status [get fiber exit_status]]]
       [cond [[eq exit_status `complete]
	      result]
	     [[eq exit_status `bug]
	      [let [[bug [get fiber value]]]
		[if [is-type `bug bug]
		    [let [[bug_frame [get bug frame]]]
		      [if [is-type `frame bug_frame]
			  [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				  [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
			      [frame-add_var_value bug_frame `stack_trace [get fiber stack_trace]]]]
		      bug]
		  [error bug_type    `shelter-fiber_paused_without_bug
			 fiber_value bug
			 stack_trace [get fiber stack_trace]]]]]
	     [t
	      [error bug_type    `shelter-unknown-fiber-exit-status
		     exit_status exit_status]]]]]]

[defmetro defmetro [name args :rest body]
  `[prog [terminal_format standard-terminal '\n' [quote ,`[defmetro ,name ,args]]]
	 [globalize-funk ,name [metro-new_with_name ,name ,args
						    @body]]]]

[defmetro defunk [name args :rest body]
  `[prog [terminal_format standard-terminal '\n' [quote ,`[defunk ,name ,args]]]
	 [globalize-funk ,name
			 [funk-new_with_name ,name ,args
					     @body]]]]

[globalize memory:debug nil]

[defunk memory-debug_assert_valid []
  [if memory:debug
    [prog [terminal_format standard-terminal '\nmemory-debug_assert_valid: Asserting memory valid...']
	  [memory-assert_valid]
	  [terminal_format standard-terminal '  Memory is valid.']
	  nil]]]

[defunk exit [value]
  [management_thread-add_exit_command value]
  [let [[signal_exit_fiber [this-fiber]]]
    [fiber [funk-new_with_name exit []
			       [have signal_exit_fiber quit]]
	   nil]]
  [while t
    [yield]]]

[defunk quit []
  [exit 0]]

[defunk save_memory_image [filename]
  [let [[uid          [management_thread-add_save_memory_image_command filename]]
	[done         nil]
	[result_place [new place nil]]]
    [while [not [management_thread-check_command_uid_finished uid result_place]]
      [sleep 1]]
    [get result_place thing]]]

[defunk load_memory_image [filename]
  [let [[uid          [management_thread-add_load_memory_image_command filename]]
	[done         nil]
	[result_place [new place nil]]]
    [while [not [management_thread-check_command_uid_finished uid result_place]]
      [sleep 1]]
    [get result_place thing]]]

[primfunk:load 'fu2/repl.fu2']

[memory-debug_assert_valid]

[terminal_format standard-terminal '\n'
		 'funkœ©: done compiling fu2/bootstrap-repl.fu2.' '\n'
		 'funkœ©: saving half-baked memory_image to img/bootstrap-repl.img.' '\n']

[management_thread-add_save_memory_image_command 'img/bootstrap-repl.img']
[management_thread-add_exit_command 0]

