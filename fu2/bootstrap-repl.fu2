[globalize -funk2-bootstrap-copyright- ' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
']

[primfunk:ansi__stream__reset stdout]
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout '
']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '
  /----------------------------------------\\
  |                                        |
  | ']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'funk2 img']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '/']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'bootstrap']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '.']
[primfunk:ansi__stream__foreground stdout 9]
[primfunk:exp__format stdout 'img compiling now']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout '.']
[primfunk:ansi__stream__foreground stdout 15]
[primfunk:exp__format stdout ' |
  |                                        |
  \\----------------------------------------/

']
[primfunk:ansi__stream__reset stdout]

[primfunk:memory__assert_valid]

[primfunk:load 'fu2/primfunks.fu2']
[primfunk:load 'fu2/primfunks-array.fu2']
[primfunk:load 'fu2/primfunks-apropos.fu2']
[primfunk:load 'fu2/primfunks-blocks_world.fu2']
[primfunk:load 'fu2/primfunks-graph.fu2']
[primfunk:load 'fu2/primfunks-bug.fu2']
[primfunk:load 'fu2/primfunks-compile.fu2']
[primfunk:load 'fu2/primfunks-cpu.fu2']
[primfunk:load 'fu2/primfunks-errno.fu2']
[primfunk:load 'fu2/primfunks-fcntl.fu2']
[primfunk:load 'fu2/primfunks-fiber.fu2']
[primfunk:load 'fu2/primfunks-frame.fu2']
[primfunk:load 'fu2/primfunks-hash.fu2']
[primfunk:load 'fu2/primfunks-ioctl.fu2']
[primfunk:load 'fu2/primfunks-largeinteger.fu2']
[primfunk:load 'fu2/primfunks-locale.fu2']
[primfunk:load 'fu2/primfunks-management_thread.fu2']
[primfunk:load 'fu2/primfunks-object.fu2']
[primfunk:load 'fu2/primfunks-package.fu2']
[primfunk:load 'fu2/primfunks-primes.fu2']
[primfunk:load 'fu2/primfunks-primobject_type.fu2']
[primfunk:load 'fu2/primfunks-primobject_type_handler.fu2']
[primfunk:load 'fu2/primfunks-primobjects.fu2']
[primfunk:load 'fu2/primfunks-print.fu2']
[primfunk:load 'fu2/primfunks-ptypes.fu2']
[primfunk:load 'fu2/primfunks-scheduler.fu2']
[primfunk:load 'fu2/primfunks-search.fu2']
[primfunk:load 'fu2/primfunks-semantic_graph.fu2']
[primfunk:load 'fu2/primfunks-serialize.fu2']
[primfunk:load 'fu2/primfunks-set.fu2']
[primfunk:load 'fu2/primfunks-socket.fu2']
[primfunk:load 'fu2/primfunks-sort.fu2']
[primfunk:load 'fu2/primfunks-string.fu2']
[primfunk:load 'fu2/primfunks-surrogate_parent.fu2']
[primfunk:load 'fu2/primfunks-terminal_print.fu2']
[primfunk:load 'fu2/primfunks-termios.fu2']
[primfunk:load 'fu2/primfunks-text_buffer.fu2']
[primfunk:load 'fu2/primfunks-time.fu2']
[primfunk:load 'fu2/primfunks-trace.fu2']
[primfunk:load 'fu2/primfunks-reader.fu2']
[primfunk:load 'fu2/primfunks-redblacktree.fu2']
[primfunk:load 'fu2/primfunks-garbage_collector.fu2']
[primfunk:load 'fu2/primfunks-glwindow.fu2']
[primfunk:load 'fu2/primfunks-physical_objects.fu2']
[primfunk:load 'fu2/primfunks-cause.fu2']
[primfunk:load 'fu2/primfunks-zlib.fu2']

[memory-assert_valid]

[globalize -first_cause- [this-cause]]
[frame-add_var_value [primfunk:cause__frame [this-cause]] `standard-terminal [terminal_print_frame-new stdout 0 [termios-width] [termios-height] 128 t nil t 1000000000]]
[frame-add_var_value [primfunk:cause__frame [this-cause]] `standard-input    stdin]

[define -current_env_name- `global-environment]

[globalize-funk funk-new_with_name_and_environment [metro-new [this-env] `funk-new_with_name_and_environment `[name environment args :rest body]
							      `[[define demetroed     [exps-demetropolize_full body]]
								[define compiled_funk [funk-new [this-env] name args
												demetroed
												body
												nil
												nil
												nil]]
								[define compiled_bcs  [primfunk:array__elt compiled_funk  4]]
								[define is_funktional [primfunk:array__elt compiled_funk 10]]
								`[funk-new ,environment [quote ,name] [quote ,args]
									   [quote ,demetroed]
									   [quote ,body]
									   [quote ,compiled_bcs]
									   ,is_funktional
									    nil]]
							       nil
							       nil
							       nil
							       nil]]

[globalize-funk funk-new_with_name [metro-new [this-env] `funk-new_with_name `[name args :rest body]
					      `[`[funk-new_with_name_and_environment ,name [this-env] ,args @body]]
					       nil
					       nil
					       nil
					       nil]]

[globalize-funk metro-new_with_name_and_environment [metro-new [this-env] `metro-new_with_name_and_environment `[name environment args :rest body]
							       `[[define demetroed     [exps-demetropolize_full body]]
								 [define compiled_funk [funk-new [this-env] name args
												 demetroed
												 body
												 nil
												 nil
												 nil]]
								 [define compiled_bcs  [primfunk:array__elt compiled_funk  4]]
								 [define is_funktional [primfunk:array__elt compiled_funk 10]]
								 `[metro-new ,environment [quote ,name] [quote ,args]
									      [quote ,demetroed]
									      [quote ,body]
									      [quote ,compiled_bcs]
									      ,is_funktional
									       nil]]
								nil
								nil
								nil
								nil]]

[globalize-funk metro-new_with_name [metro-new [this-env] `metro-new_with_name `[name args :rest body]
					       `[`[metro-new_with_name_and_environment ,name [this-env] ,args @body]]
						nil
						nil
						nil
						nil]]

[globalize-funk defmetro
		[metro-new_with_name `defmetro [name args :rest body]
				      [exp-format stdout '\nstdout: '] [exp-format stdout `[defmetro ,name ,args]]
				      `[globalize-funk ,name [metro-new_with_name ,name ,args
										   @body]]]]

[globalize-funk defmetro-local
		[metro-new_with_name `defmetro-local [name args :rest body]
				      [exp-format stdout '\nstdout: '] [exp-format stdout `[defmetro-local ,name ,args]]
				      `[define-funk ,name [metro-new_with_name ,name ,args
										@body]]]]

[defmetro prog [:rest body]
  `[funk-apply [funk-new_with_name prog []
				   @body] []]]

[defmetro apply [proc args]
  [define debug-apply nil]
  [if debug-apply
      `[let [[proc ,proc]
	     [args [conslist @args]]]
	 [if proc
	     [funk-apply proc args]
	   [error-new `message 'apply error: proc is nil.']]]
    `[funk-apply ,proc ,args]]]

`[defmetro apply [proc args]
   `[funk-apply ,proc ,args]]

[defmetro funk [args :rest body]
  `[funk-new_with_name funk ,args
		       @body]]

[defmetro metro [args :rest body]
  `[metro-new_with_name metro ,args
			@body]]

`[exp-format stdout '\ndefining defunk\n']

[defmetro defunk [name args :rest body]
  [exp-format stdout '\nstdout: '] [exp-format stdout `[defunk ,name ,args]]
  `[globalize-funk ,name
		    [funk-new_with_name ,name ,args
					 @body]]]

[defmetro defunk-local [name args :rest body]
  [exp-format stdout '\nstdout: '] [exp-format stdout `[defunk-local ,name ,args]]
  `[define-funk ,name
     [funk-new_with_name ,name ,args
			  @body]]]

`[exp-format stdout '\ndone defining defunk\n']
`[exp-format stdout '\ndefining eval\n']


[defunk eval [exp]
  [funk-apply [funk-new [this-env] `eval []
			[cons exp nil]
			[cons exp nil]
			nil
			nil
			nil]
	      nil]]

`[exp-format stdout '\ndone defining eval\n']
`[exp-format stdout '\ndefining or\n']

[defmetro or [:rest conds]
  [if [null conds]
      nil
    `[if ,[first conds]
	 `t
       ,[funk-apply &or [next conds]]]]]

`[exp-format stdout '\ndone defining or\n']

[defmetro and [:rest conds]
  [if [null conds]
      ``t
    `[if [null ,[first conds]]
	 nil
       ,[funk-apply &and [next conds]]]]]

'Now we have defunk, basic logic (and, or), and errors (almost! :-) [exceptions are defined below])!  We can define "safe" type-checked primitive accessors and mutators:'

`[primfunk:load 'fu2/primobjects.fu2']

'primitive accessors and mututators completely defined at this point.'

[defmetro chunk-write_8bit  [x y z] `[chunk-write_8bit_integer  ,x ,y [coerce-to-int ,z]]]
[defmetro chunk-write_16bit [x y z] `[chunk-write_16bit_integer ,x ,y [coerce-to-int ,z]]]
[defmetro chunk-write_32bit [x y z] `[chunk-write_32bit_integer ,x ,y [coerce-to-int ,z]]]

`[defmetro car     [x]   `[first     ,x]]
`[defmetro car-set [x y] `[first-set ,x ,y]]
`[defmetro cdr     [x]   `[next      ,x]]
`[defmetro cdr-set [x y] `[next-set  ,x ,y]]
`[defmetro cir     [x]   `[prev      ,x]]
`[defmetro cir-set [x y] `[prev-set  ,x ,y]]

[defmetro object_type-type-funk    [name slot_type_name slot_name] `[primobject_type-lookup_slot_type_funk [lookup_type ,name] ,slot_type_name ,slot_name]]
[defmetro object_type-get-funk     [name slot_name]                `[object_type-type-funk                              ,name  `get            ,slot_name]]
[defmetro object_type-set-funk     [name slot_name]                `[object_type-type-funk                              ,name  `set            ,slot_name]]
[defmetro object_type-execute-funk [name slot_name]                `[object_type-type-funk                              ,name  `execute        ,slot_name]]

[defmetro object-get-funk [this slot_name]
  `[object-slot-type_funk ,this `get slot_name]]

`[defunk object-get [this slot_name :rest args]
   [apply [object-get-funk this slot_name] [cons this args]]]

[defunk object-get-apply [this slot_name args]
  [apply [object-get-funk this slot_name] [cons this args]]]

[defmetro object-set-funk [this slot_name]
  `[object-slot-type_funk ,this `set slot_name]]

`[defunk object-set [this slot_name :rest args]
   [apply [object-set-funk this slot_name] [cons this args]]]

[defunk object-set-apply [this slot_name args]
  [apply [object-set-funk this slot_name] [cons this args]]]

[defmetro object-execute-funk [this slot_name]
  `[object-slot-type_funk ,this `execute ,slot_name]]

`[defunk object-execute [this slot_name :rest args]
   [apply [object-execute-funk this slot_name] args]]

[defunk object-execute-apply [this slot_name args]
  [apply [object-execute-funk this slot_name] args]]

[defmetro object_type-new-funk [name]
  `[primobject_type-lookup_slot_type_funk [lookup_type ,name] `execute `new]]

[defunk object_type-new [name :rest args]
  [apply [object_type-new-funk name] args]]

[defunk object_type-new-apply [name args]
  [apply [object_type-new-funk name] args]]

[defmetro new [type_name :rest args]
  `[object_type-new [quote ,type_name] @args]]

[defmetro new-apply [type_name args]
  `[object_type-new-apply [quote ,type_name] ,args]]

[defmetro get [this slot_name :rest args]
  `[object-get ,this [quote ,slot_name] @args]]

[defmetro get-apply [this slot_name args]
  `[object-get-apply ,this [quote ,slot_name] ,args]]

[defmetro set [this slot_name :rest value_args]
  `[object-set ,this [quote ,slot_name] @value_args]]

[defmetro set-apply [this slot_name value_args]
  `[object-set-apply ,this [quote ,slot_name] ,value_args]]

[defmetro execute [this slot_name :rest args]
  `[object-execute ,this [quote ,slot_name] @args]]

[defmetro execute-apply [this slot_name args]
  `[object-execute-apply ,this [quote ,slot_name] ,args]]

[defmetro have [this slot_name :rest args]
  `[object-execute ,this [quote ,slot_name] @args]]

[defmetro have-apply [this slot_name args]
  `[object-execute-apply ,this [quote ,slot_name] ,args]]

`[defmetro have [this slot_name :rest args]
  [define -have-this- [string-as-symbol [stringlist-concat [conslist '-have-this-' [symbol-as-string [gensym]]]]]]
  `[let [[,-have-this-     ,this]
	 [-have-slot_name- [quote ,slot_name]]
	 [-have-args-      [quote ,args]]]
     [execute ,-have-this- ,slot_name ,-have-this- @args]]]

`[defmetro have-apply [this slot_name args]
  [define -have-this- [string-as-symbol [stringlist-concat [conslist '-have-this-' [symbol-as-string [gensym]]]]]]
  `[let [[,-have-this-      ,this]
	 [-have-slot_name- [quote ,slot_name]]
	 [-have-args-      [quote ,args]]]
     [execute-apply ,-have-this- ,slot_name [cons ,-have-this- ,args]]]]


[globalize-funk type &object-type]

[globalize-funk cons &primfunk:cons__new]
[defmetro car     [x]   `[object-get ,x `car]]
[defmetro cdr     [x]   `[object-get ,x `cdr]]
[defmetro car-set [x y] `[object-set ,x `car ,y]]
[defmetro cdr-set [x y] `[object-set ,x `cdr ,y]]

[defunk wrong_argument_number [] [error-new `bug_type `wrong_number_of_arguments] nil]
[wrong_argument_number-bcs-set [get &wrong_argument_number body_bytecodes]]

`[defunk conslist [:rest seq]
   [if [null seq]
       nil
     [cons [car seq]
	   [apply &conslist
		  [cdr seq]]]]]

[defmetro label [name args :rest body]
  `[define-funk ,name
     [funk-new_with_name label ,args
			 @body]]]

[defunk mapc [proc seq]
  [while seq
    [apply proc [cons [car seq] nil]]
    [mutate seq [cdr seq]]]]

[defunk critic-reactive-basic_unknown_bug [fiber]
  [terminal_format standard-terminal [object-get fiber `value]]]

[defunk cause-enable_reactive_critics [this]
  `[format stdout '\ncompile note: reactive_critics not yet defined.']
  [object-set this `critics &critic-reactive-basic_unknown_bug]
  nil]

[defunk silent-fiber [funk args]
  [fiber_parallel [funk-new_with_name silent-fiber []
				      [cause]
				      [apply funk args]]
		  nil]]

[defunk fiber [funk args]
  [print 'fiber-debug 0.0']
  [silent-fiber [funk-new_with_name fiber []
				    [print 'fiber-debug 0']
				    [cause-enable_reactive_critics [this-cause]]
				    [print 'fiber-debug 1']
				    [apply funk args]]
		nil]]

[defunk parseq [proc seq]
  [if [null seq]
      nil
    [cons [fiber proc [cons [car seq] nil]]
	  [parseq proc [cdr seq]]]]]

[defunk mapcar [proc seq]
  [if [null seq]
      nil
    [prog [define result [apply proc [cons [car seq] nil]]]
	  [define cons_result [cons result nil]]
	  [define iter   cons_result]
	  [mapc [funk [elt]
		      [define new_cons [cons [apply proc [cons elt nil]] nil]]
		      [cdr-set iter new_cons]
		      [mutate iter [cdr iter]]]
		[cdr seq]]
	  cons_result]]]

[defunk filter [cond_proc seq]
  [if [null seq]
      nil
    [prog [define exp    [car seq]]
	  [define result [apply cond_proc [cons exp nil]]]
	  [if result
	      [cons exp [filter cond_proc [cdr seq]]]
	    [filter cond_proc [cdr seq]]]]]]

[defunk is-type [type_name exp]
  [apply [primobject_type-lookup_slot_type_funk [lookup_type type_name] `execute `is_type] [cons exp nil]]]

[defunk terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe [this]
  [terminal_print_frame-prepare_for_printing-thread_unsafe this [termios-width] [integer-subtract [termios-height] 3]]]

[defunk slots [exp]
  [primobject_type-type_funk-keys [lookup_type [type exp]] `get]]

[defmetro cadr [seq]
  `[car [cdr ,seq]]]

[defmetro caddr [seq]
  `[car [cdr [cdr ,seq]]]]

[defmetro cadddr [seq]
  `[car [cdr [cdr [cdr ,seq]]]]]

[defmetro cddr [seq]
  `[cdr [cdr ,seq]]]

[defunk first [seq]
  [car seq]]

[defunk second [seq]
  [car [cdr seq]]]

[defunk third [seq]
  [car [cdr [cdr seq]]]]

[defunk fourth [seq]
  [car [cdr [cdr [cdr seq]]]]]

[defmetro let [varpairs :rest body]
  [define let-vars [mapcar [funk [varpair] [car varpair]] varpairs]]
  `[apply [funk-new_with_name let ,let-vars
			      @body]
	  [conslist @[mapcar [funk [varpair] [car [cdr varpair]]] varpairs]]]]

[defunk terminal_format-thread_unsafe [terminal_print_frame :rest exps]
  [if [null terminal_print_frame]
      [apply &string-format exps]
    [mapc [funk [exp]
		[terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
		[if [is-type `string exp]
		    [terminal_print_frame-write_string-thread_unsafe terminal_print_frame exp]
		  [exp-terminal_print_with_frame-thread_unsafe exp terminal_print_frame]]]
	  exps]]]

[defunk terminal_format [terminal_print_frame :rest exps]
  [have [get terminal_print_frame mutex] lock]
  [let [[result [apply &terminal_format-thread_unsafe [cons terminal_print_frame exps]]]]
    [have [get terminal_print_frame mutex] unlock]
    result]]

[defmetro parlet [varpairs :rest body]
  `[let ,[mapcar [funk [varpair]
		       [let [[var       [first varpair]]
			     [value_exp [second varpair]]]
			 `[,var [fiber [funk [] ,value_exp] []]]]]
		 varpairs]
     [define-funk parlet-wait-loop
       [funk []
	     [if [and @[mapcar [funk [varpair]
				     [let [[var [first varpair]]]
				       `[fiber-complete? ,var]]]
			       varpairs]]
		 []
	       [prog [yield]
		     [parlet-wait-loop]]]]]
     [parlet-wait-loop]
     [let ,[mapcar [funk [varpair]
			 [let [[var       [first varpair]]
			       [value_exp [second varpair]]]
			   `[,var [fiber-value ,var]]]]
		   varpairs]
       @body]]]

[defunk join [:rest fibers]
  [define-funk fibers-wait-loop
    [funk []
	  [define-funk fibers-scan-loop
	    [funk [fiber_iter]
		  [if [null fiber_iter]
		      t
		    [let [[fiber [car fiber_iter]]]
		      [if [null [get fiber is_complete]]
			  nil
			[fibers-scan-loop [cdr fiber_iter]]]]]]]
	  [if [fibers-scan-loop fibers]
	      nil
	    [prog [yield]
		  [fibers-wait-loop]]]]]
  [fibers-wait-loop]]

[defunk sleep_for_nanoseconds [nanoseconds]
  [sleep_for_nanoseconds_without_yield nanoseconds]
  [yield]]

[defunk nanosleep [nanoseconds]
  [sleep_for_nanoseconds nanoseconds]]

[defunk microsleep [microseconds]
  [nanosleep [integer-multiply 1000 microseconds]]]

[defunk millisleep [milliseconds]
  [microsleep [integer-multiply 1000 milliseconds]]]

[defunk sleep [seconds]
  [millisleep [integer-multiply 1000 seconds]]]

[defmetro parog [:rest codes]
  'run commands in parallel'
  `[let [[parog-fibers [conslist @[mapcar [funk [code]
						`[fiber [funk [] ,code] []]]
					  codes]]]]
     [apply &join parog-fibers]]]

[defunk parc [proc seq]
  'run mapc commands in parallel'
  [let [[parc-fibers [mapcar [funk [exp]
				    [fiber proc [cons exp nil]]]
			      seq]]]
    [apply &join parc-fibers]]]

[defmetro cause-define-funk [name value]
  `[have [this-cause] define-funk [quote ,name] ,value]]

[defmetro cause-lookup-funk [name]
  `[have [this-cause] lookup-funk [quote ,name]]]

[defmetro cause-defunk [name args :rest body]
  `[cause-define-funk ,name [funk ,args @body]]]

[defmetro cause-define [name value]
  `[have [this-cause] define [quote ,name] ,value]]

[defmetro cause-lookup [name]
  `[have [this-cause] lookup [quote ,name]]]

[defunk parcar [proc seq]
  'run mapcar commands in parallel'
  [let [[parcar-fibers [mapcar [funk [exp]
				      [fiber proc [cons exp nil]]]
				seq]]]
    [apply &join parcar-fibers]
    [mapcar [funk [x] [get x value]] parcar-fibers]]]

[defmetro cond [:rest clauses]
  [if [null clauses]
      nil
    [let [[clause [car clauses]]]
      `[if ,[car clause]
	   [prog @[cdr clause]]
	 ,[apply &cond [cdr clauses]]]]]]

[defunk elt-1d-seq [seq index]
  [cond [[null seq]                   [error-new `bug_type `conslist-index-too-big]]
	[[integer-equal_sign index 0] [car seq]]
	[t                            [elt-1d-seq [cdr seq] [integer-subtract index 1]]]]]

[defunk elt-1d [collection index]
  [cond [[is-type `cons  collection] [elt-1d-seq collection index]]
	[[is-type `array collection] [array-elt  collection index]]
	[t                           [error-new `bug_type `unknown-collection-type]]]]

[defunk elt [collection :rest indices]
  [let [[rest_indices [cdr indices]]]
    [if [null rest_indices]
	[elt-1d collection [car indices]]
      [funkall &elt [elt-1d collection [car indices]] rest_indices]]]]

[defunk elt-1d-seq-set [seq index value]
  [cond [[null seq]                   [error-new `bug_type `conslist-index-too-big]]
	[[integer-equal_sign index 0] [car-set seq value]]
	[t                            [elt-1d-seq-set [cdr seq] [integer-subtract index 1] value]]]]

[defunk elt-1d-set [collection index value]
  [cond [[is-type `cons  collection] [elt-1d-seq-set collection index value]]
	[[is-type `array collection] [array-elt-set  collection index value]]
	[t                           [error-new `bug_type `unknown-collection-type]]]]

[defunk elt-set [collection indices value]
  [if [is-type `cons indices]
      [if [null [cdr indices]]
	  [elt-1d-set collection [car indices] value]
	[elt-set [elt collection [car indices]] [cdr indices] value]]
    [elt-1d-set collection indices value]]]

`[defmetro dotimes [var-max_index :rest body]
   [let [[var       [car  var-max_index]]
	 [max_index [cadr var-max_index]]]
     `[let [[,var      0]
	    [max_index ,max_index]]
	[define-funk dotimes-loop
	  [funk []
		[prog @body]
		[mutate ,var [integer-add ,var 1]]
		[if [integer-less_than ,var max_index]
		    [dotimes-loop]]]]
	[if [integer-less_than ,var max_index]
	    [dotimes-loop]]]]]

[defmetro dotimes [var-max_index :rest body]
  [let [[var       [car  var-max_index]]
	[max_index [cadr var-max_index]]]
    `[let [[,var      0]
	   [max_index ,max_index]]
       [while [integer-less_than ,var max_index]
	 [prog @body]
	 [mutate ,var [integer-add ,var 1]]]]]]

[defunk range [min max]
  [if [integer-less_than min max]
      [cons min [range [integer-add min 1] max]]]]

[defmetro partimes [var-max_index :rest body]
  [let [[var       [car  var-max_index]]
	[max_index [cadr var-max_index]]]
    `[let [[partimes-proc [funk [,var] @body]]
	   [max_index ,max_index]]
       [let [[partimes-seq [range 0 max_index]]]
	 [apply &join [parseq partimes-proc partimes-seq]]]]]]

[defunk conslist-set_cdr [seq value]
  [if [null seq] [error-new `description `[[funk conslist-set_cdr] [desc [null seq]] [funk-args ,seq ,value]]]]
  [let [[cdr_seq [cdr seq]]]
    [if cdr_seq
	[conslist-set_cdr cdr_seq value]
      [prog [cdr-set seq value]
	    seq]]]]

[defunk conslist-copy [seq]
  [mapcar &identity seq]]

[defunk append [first_seq :rest rest_seqs]
  [if [null first_seq]
      [if [null rest_seqs]
	  nil
	[apply &append rest_seqs]]
    [let [[first_seq_copy [conslist-copy first_seq]]]
      [if [null rest_seqs]
	  first_seq_copy
	[prog [conslist-set_cdr first_seq_copy [apply &append rest_seqs]]
	      first_seq_copy]]]]]

[defunk format [stream :rest exps]
  [if [null stream]
      [apply &string-format exps]
    [mapc [funk-new_with_name format-mapc [exp] [exp-format stream exp]] exps]]]

[defunk format-html [stream :rest exps]
  [mapc [funk-new_with_name format-html-mapc [exp] [exp-format-html stream exp]] exps]]

[defunk fwrite_html [stream :rest exps]
  [mapc [funk-new_with_name fwrite_html-mapc [exp] [exp-fwrite_html stream exp]] exps]]

[defunk print-html [exp] [format-html stdout '\nstdout: '] [fwrite_html stdout exp]]

`[defmetro while [cond :rest body]
   `[prog [define-funk while-loop
	    [funk-new_with_name while []
				[if ,cond
				    [prog [prog @body]
					  [while-loop]]]]]
	  [while-loop]]]

[defmetro funkall [funk :rest args]
  `[apply ,funk [conslist @args]]]

[defunk find [exp seq key test]
  [if [null seq]
      nil
    [let [[car [car seq]]]
      [let [[car-key [funkall key car]]]
	[if [funkall test exp car-key]
	    car
	  [find exp [cdr seq] key test]]]]]]

[defunk fiber-find_last_trace_env [fiber]
  [find `trace_env [fiber-trace fiber] [funk [x] [car x]] &eq]]

[defunk array-new [:rest lengths]
  [if [null lengths]
      []
    [let [[cdr    [cdr lengths]]
	  [length [car lengths]]]
      [let [[a    [array-new_1d length]]]
	[if cdr [dotimes [i length] [array-elt-set a i [apply &array-new cdr]]]]
	a]]]]

[defunk hashtable-new [bin_num_power] [hashtable bin_num_power [array-new [integer-bitshift_left 1 bin_num_power]]]]

`[defunk print [x]
   [format stdout '\n']
   [exp-print x]]

[defunk terminal_write-thread_unsafe [terminal_print_frame x]
  [terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
  [exp-terminal_print_with_frame-thread_unsafe x terminal_print_frame]
  x]

[defunk terminal_write [terminal_print_frame x]
  [have [get terminal_print_frame mutex] lock]
  [let [[result [terminal_write-thread_unsafe terminal_print_frame x]]]
    [have [get terminal_print_frame mutex] unlock]
    result]]

[defunk terminal_print-thread_unsafe [terminal_print_frame x]
  [terminal_print_frame-prepare_for_printing_to_standard_terminal-thread_unsafe terminal_print_frame]
  [terminal_print_frame-write_string-thread_unsafe terminal_print_frame '\n']
  [exp-terminal_print_with_frame-thread_unsafe x terminal_print_frame]
  x]

[defunk terminal_print [terminal_print_frame x]
  [have [get terminal_print_frame mutex] lock]
  [let [[result [terminal_print-thread_unsafe terminal_print_frame x]]]
    [have [get terminal_print_frame mutex] unlock]
    result]]

[defunk print [x]
  [let [[terminal_print_frame [get standard-terminal new_copy]]]
    [terminal_print [get standard-terminal new_copy] x]]]

[defunk demetropolize [x]
  [let [[demetro_pair [demetropolize_once x]]]
    [let [[did_something [car demetro_pair]]
	  [retval        [cdr demetro_pair]]]
      [if did_something
	  [demetropolize retval]
	retval]]]]

[defunk demetropolize1 [x]
  [cdr [demetropolize_once x]]]

[defmetro mutexprog [mutex :rest body]
  `[let [[mutexprog-mutex ,mutex]]
     [mutex-lock   mutexprog-mutex]
     [prog @body]
     [mutex-unlock mutexprog-mutex]]]

[defmetro defmutexfunk [mutex name args :rest body]
  `[defunk ,name ,args [mutexprog ,mutex @body]]]

[defmetro defunks-mutex [mutex :rest funkdefs] 
  `[let [[defunks_mutex-mutex ,mutex]]
     @[mapcar [funk [funkdef]
		    `[defmutexfunk defunks_mutex-mutex @funkdef]]]]]

[defmetro rest [exp]
  `[cdr ,exp]]

[defunk remove [element sequence]
  [let [[new_sequence [cons nil nil]]]
    [let [[new_sequence_iter new_sequence]]
      [mapc [funk [sequence_element]
		  [if [not [eq element sequence_element]]
		      [let [[new_cons [cons sequence_element nil]]]
			[cons-cdr-set new_sequence_iter new_cons]
			[mutate new_sequence_iter new_cons]]]]
	    sequence]
      [cdr new_sequence]]]]

[defmetro let* [var_value_pairs :rest body]
  [if [null var_value_pairs]
      `[prog @body]
    [let [[var_value_pair [car var_value_pairs]]]
      [let [[var   [first  var_value_pair]]
	    [value [second var_value_pair]]]
	`[let [[,var ,value]]
	   [let* ,[cdr var_value_pairs]
	     @body]]]]]]

[defunk is_conslist [exp]
  [if [null exp]
      t
    [if [is-type `cons exp]
	[is_conslist [cdr exp]]
      nil]]]

[defmetro bytecode_trace [exp]
  `[let [[this-cause [this-cause]]]
     [cause-bytecode_tracing_on-set this-cause t]
     ,exp
     [cause-bytecode_tracing_on-set this-cause nil]
     [let [[event_buffer_first [cause-event_buffer_first this-cause]]]
       [cause-event_buffer_first-set this-cause nil]
       [cause-event_buffer_last-set  this-cause nil]
       event_buffer_first]]]

[defunk maparray [map_proc exp]
  [let [[length [simple_length exp]]]
    [let [[new_array [array-new length]]]
      [dotimes [i length]
	[array-elt-set new_array i [funkall map_proc [cons [array-elt exp i] nil]]]]
      new_array]]]

[defunk error-new [:rest slot_value_pairs]
  [new larva 34 [new bug 34 [new-apply frame slot_value_pairs]]]]

[defunk bug [bug]
  [new larva [get bug bug_type] bug]]

[defmetro list [:rest elements] `[new list @elements]]

[defmetro length [x] `[get ,x length]]

[defmetro = [var value] `[mutate ,var ,value]]

[defunk no-color []
  [set standard-terminal use_ansi_codes nil]]

[defmetro labels [label_definitions :rest body]
  [append [cons `prog [mapcar [funk-new_with_name compile-labels [label_definition]
						  [let [[name [car  label_definition]]
							[args [cadr label_definition]]
							[body [cddr label_definition]]]
						    `[define-funk ,name [funk-new_with_name ,name ,args @body]]]]
			      label_definitions]]
	  body]]

[defmetro with-new-cause [:rest codes]
  `[prog [format stdout '\nwnc-debug 0.0.0']
	 [let* [[result [prog [format stdout '\nwnc-debug 0.0']
			      `bug]]
		[fiber  [fiber [funk-new_with_name with-new-cause []
						   [print 'wnc-debug 0']
						   [set [this-cause] critics nil]
						   [print 'wnc-debug 1']
						   [= result [prog @codes]]]
			       nil]]]
	   [print 'wnc-debug 3']
	   'This is a bad hack to deal with noisy values in [get fiber is_complete] or [get fiber paused].'
	   [while [and [not [get fiber is_complete]]
		       [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
	     [while [and [not [get fiber is_complete]]
			 [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
	       [while [and [not [get fiber is_complete]]
			   [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
		 [while [and [not [get fiber is_complete]]
			     [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
		   [millisleep 100]]
		 [millisleep 100]]
	       [millisleep 100]]
	     [millisleep 100]]
	   [if [get fiber paused]
	       [let [[bug [get fiber value]]]
		 [if [is-type `bug bug]
		     [let [[bug_frame [get bug frame]]]
		       [if [is-type `frame bug_frame]
			   [if [or [not  [frame-contains_var bug_frame     `stack_trace]]
				   [null [frame-lookup_var_value bug_frame `stack_trace nil]]]
			       [frame-add_var_value bug_frame `stack_trace [get fiber stack_trace]]]]
		       [bug bug]]
		   [error bug_type    `with-new-cause-fiber_paused_without_bug
			  fiber_value bug
			  stack_trace [get fiber stack_trace]]]]]
	   [if [eq result `bug]
	       [if [is-type `bug [get fiber value]]
		   [get fiber value]
		 [prog [terminal_format standard-terminal '\nwith-new-cause warning: result is a bug, but there is not a bug in the fiber\'s value register.']
		       [terminal_format standard-terminal '\n  fiber: ' fiber]
		       [terminal_format standard-terminal '\n  value: ' [get fiber value]]
		       [terminal_format standard-terminal '\n  stack: ']
		       [have fiber print_stack_trace]
		       result]]
	     result]]]]

[defmetro shelter [:rest codes]
  `[let* [[result `bug]
	  [fiber  [silent-fiber [funk-new_with_name shelter []
						    [set [this-cause] critics nil]
						    [= result [prog @codes]]]
				nil]]]
     'This is a bad hack to deal with noisy values in [get fiber is_complete] or [get fiber paused].'
     [while [and [not [get fiber is_complete]]
		 [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
       [while [and [not [get fiber is_complete]]
		   [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
	 [while [and [not [get fiber is_complete]]
		     [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
	   [while [and [not [get fiber is_complete]]
		       [or [not [get fiber paused]] [not [is-type `bug [get fiber value]]]]]
	     [millisleep 100]]
	   [millisleep 100]]
	 [millisleep 100]]
       [millisleep 100]]
     [if [get fiber paused]
	 [let [[bug [get fiber value]]]
	   [if [not [is-type `bug bug]]
	       [error bug_type    `shelter-fiber_paused_without_bug
		      fiber_value bug
		      stack_trace [get fiber stack_trace]]
	     `bug]]]
     result]]

[defmetro error [:rest slot_value_pairs]
  `[error-new `source_filename   [quote ,[cause-lookup source-filename]]
	      `source_expression [quote ,[cause-lookup source_expression]]
              @[let [[iter          slot_value_pairs]
		     [reverse_codes nil]]
		 [while iter
		   [let [[key [car iter]]]
		     [= iter [cdr iter]]
		     [let [[value [car iter]]]
		       [= reverse_codes [cons `[quote ,key] reverse_codes]]
		       [= reverse_codes [cons  value        reverse_codes]]]]
		   [= iter [cdr iter]]]
		 [reverse reverse_codes]]]]

[defmetro defmetro [name args :rest body]
  [terminal_format standard-terminal '\n' `[defmetro ,name ,args]]
  `[globalize-funk ,name [metro-new_with_name ,name ,args
					       @body]]]


[defmetro defunk [name args :rest body]
  [terminal_format standard-terminal '\n' `[defunk ,name ,args]]
  `[globalize-funk ,name
		    [funk-new_with_name ,name ,args
					 @body]]]

[globalize memory:debug nil]

[defunk memory-debug_assert_valid []
  [if memory:debug
    [prog [terminal_format standard-terminal '\nfilename-load: Asserting memory valid...']
	  [memory-debug_assert_valid]
	  [terminal_format standard-terminal '  Memory is valid.']
	  nil]]]

[defunk exit [value]
  [management_thread-add_exit_command value]
  [let [[signal_exit_fiber [this-fiber]]]
    [fiber [funk-new_with_name exit []
			       [have signal_exit_fiber quit]]
	   nil]]
  [while t
    [yield]]]

[defunk quit []
  [exit 0]]

[defunk save_memory_image [filename]
  [let [[uid          [management_thread-add_save_memory_image_command filename]]
	[done         nil]
	[result_place [new place nil]]]
    [while [not [management_thread-check_command_uid_finished uid result_place]]
      [sleep 1]]
    [get result_place thing]]]

[defunk load_memory_image [filename]
  [let [[uid          [management_thread-add_load_memory_image_command filename]]
	[done         nil]
	[result_place [new place nil]]]
    [while [not [management_thread-check_command_uid_finished uid result_place]]
      [sleep 1]]
    [get result_place thing]]]

[primfunk:load 'fu2/repl.fu2']

[memory-debug_assert_valid]

[terminal_format standard-terminal '\n'
		 'funk2: done compiling fu2/bootstrap-repl.fu2.' '\n'
		 'funk2: saving half-baked memory_image to img/bootstrap-repl.img.' '\n']

`[primfunk:memory_image__save 'img/bootstrap-repl.img']


'
  These management commands don\'t actually execute until this file reaches EOF.
'
[management_thread-add_save_memory_image_command 'img/bootstrap-repl.img']
[management_thread-add_exit_command 0]

