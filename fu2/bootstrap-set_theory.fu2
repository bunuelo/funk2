'set operations'

[defunk is_member [x conslist]
  [if [null conslist]
      nil
    [or [equals [car conslist] x]
	[is_member x [cdr conslist]]
	]]]

[defunk remove-duplicates [x]
  [if [null x]
      nil
    [let [[car_x [car x]]]
      [if [is_member car_x [cdr x]]
          [remove-duplicates [cdr x]]
        [cons car_x [remove-duplicates [cdr x]]]]]]]

[defunk conslist-to-set [x] [remove-duplicates x]]

`[defmetro set [:rest elts] `[remove-duplicates [conslist @elts]]]
[defunk   set-new [:rest elts]  [remove-duplicates        elts]]

[defunk union [a b]
  [if [null a]
      b
    [let [[car_a [car a]]]
      [if [is_member car_a b]
          [union [cdr a] b]
        [cons car_a [union [cdr a] b]]]]]]

[defunk intersect [a b]
  [if [or [null a] [null b]] 
      nil
    [let [[car_a [car a]]]
      [if [is_member car_a b]
        [cons car_a [intersect [cdr a] b]]
        [intersect [cdr a] b]]]]]


[defunk difference [a b]
  [if [or [null a] [null b]]
      nil
    [let [[car_a [car a]]]
      [if [is_member car_a b]
          [difference [cdr a] b]
        [cons car_a [difference [cdr a] b]]]]]]


'[let [[y 0]] [mapc [funk [x] [= y [+ x y]]] [conslist 0 1 2 3 4]] y]'

'[mapcar [y 0] [funk [x,y] [+= y x] ] ]'


'tree functions'
[defunk is_branch [x] [is-type `cons x]]
[defunk is_leaf [x] [not [is_branch x]]]


[defunk maptree [proc tree]
  [if [null tree] nil
      [if [is_branch tree]
          [mapc [funk [x]
                  [maptree proc x]]
                tree]
        [funkall proc tree]]]]

[defunk mapcartree [proc tree]
  [if [null tree] nil
    [if [is_branch tree]
        [mapcar [funk [x]
                  [mapcartree proc x]]
                tree]
      [funkall proc tree]]]]



' [least-general-subsumer [schwinn seven-series]] => vehicle'


        
'[funkall &append [conslist 1] [conslist 2] [conslist 3]]'
'[apply &append [conslist [conslist 1] [conslist 2] [conslist 3]]]'


[defunk power-set [a]
  [let [[results [conslist nil]]]
    [mapc [funk [x]
            [let [[old_results results]]
              [= results nil]
              [mapc [funk [y]
                      [= results [cons [cons x y] results]]
                      [= results [cons y results]]]
                    old_results]]]
          a]
    results]]


`[prog [globalize a [conslist 1 2 3]]
       [globalize b [conslist 6 7 8 5]]
       
       [format stdout '\n remote-dups: ' a ' => ' [remove-duplicates a]]
       [format stdout '\n union      : ' [union a b]]
       [format stdout '\n intersect  : ' [intersect a b]]
       [format stdout '\n power-set  : ' [power-set a]]
       ]

