' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[deftypefunk ptype get as-string [] [exp-as-string this]]

[defunk string-concat [:rest seq]
  [stringlist-concat seq]]

[defunk string-intersperse [intersperse_string :rest seq]
  [stringlist-intersperse seq intersperse_string]]

[defunk stringlist-prog [seq]
  [stringlist-intersperse seq '\n']]

[defunk string-prog [:rest seq]
  [stringlist-prog seq]]

[defunk exp-to_symbol [exp]
  [string-to_symbol [exp-as-string exp]]]

[defunk string-read [this]
  [let [[read_exp [stream-try_read [string_stream-new [string-concat this ' '] 0]]]]
    [if [is-type `exception read_exp]
	[let [[tag [object-get read_exp `tag]]]
	  [if [eq tag `reader:end_of_file-exception]
	      [error error_type  `run_time
		     description `reached_end_of_string_stream_while_reading]]]
      read_exp]]]

[defunk string-format [:rest exps]
  [stringlist-concat [mapcar [funk [exp]
				   [if [is-type `string exp]
				       exp
				     [exp-as-string exp]]]
			     exps]]]

`[defunk string-replace_all [this token replacement]
   [stringlist-intersperse [string-split this token] replacement]]

[deftypefunk string execute replace_all [token replacement] [string-replace_all this token replacement]]
[deftypefunk string execute read        []                  [string-read        this]]
[deftypefunk string get     plus        [:rest strings]     [apply &string-concat [cons this strings]]]

'tests'

[defunk string_parse-test [exp]
  [if [not [equals exp [string-read [exp-as-string exp]]]]
      [error error_type `compile-time
	     error_name `string_parse-test
	     exp        exp]]]

[defunk string-split_intersperse_test [this token]
  [if [not [equals exp [stringlist-intersperse [string-split this token] token]]]
      [error error_type `compile-time
	     error_name `string-split_intersperse_test
	     this       this
	     token      token]]]

[defunk string-test []
  [string_parse-test []]
  [string_parse-test 1]
  [string_parse-test 12345]
  [string_parse-test #x1234]
  [string_parse-test 'string']
  [string_parse-test `symbol]
  [string-split_intersperse_test 'this is a test' 'is']
  ]


