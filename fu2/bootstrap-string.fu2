'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[deftypefunk ptype get as-string [] [exp-as-string this]]

[defunk string-concat [:rest seq]
  [stringlist-concat seq]]

[defunk string-intersperse [intersperse_string :rest seq]
  [stringlist-intersperse seq intersperse_string]]

[defunk stringlist-prog [seq]
  [stringlist-intersperse seq '\n']]

[defunk string-prog [:rest seq]
  [stringlist-prog seq]]

[defunk exp-to_symbol [exp]
  [string-to_symbol [exp-as-string exp]]]

[defunk string-read [this]
  [let [[read_exp [stream-try_read [string_stream-new [string-concat this ' '] 0]]]]
    [if [is-type `exception read_exp]
	[let [[tag [object-get read_exp `tag]]]
	  [if [eq tag `reader:end_of_file-exception]
	      [error error_type  `run_time
		     description `reached_end_of_string_stream_while_reading]]]
      read_exp]]]

[defunk string-format [:rest exps]
  [stringlist-concat [mapcar [funk [exp]
				   [if [is-type `string exp]
				       exp
				     [exp-as-string exp]]]
			     exps]]]

`[defunk string-replace_all [this token replacement]
   [stringlist-intersperse [string-split this token] replacement]]

[deftypefunk string execute replace_all [token replacement] [string-replace_all this token replacement]]
[deftypefunk string execute read        []                  [string-read        this]]
[deftypefunk string get     plus        [:rest strings]     [apply &string-concat [cons this strings]]]

'tests'

[defunk string_parse-test [exp]
  [if [not [equals exp [string-read [exp-as-string exp]]]]
      [error error_type `compile-time
	     error_name `string_parse-test
	     exp        exp]]]

[defunk string-split_intersperse_test [this token]
  [if [not [equals exp [stringlist-intersperse [string-split this token] token]]]
      [error error_type `compile-time
	     error_name `string-split_intersperse_test
	     this       this
	     token      token]]]

[defunk string-test []
  [string_parse-test []]
  [string_parse-test 1]
  [string_parse-test 12345]
  [string_parse-test #x1234]
  [string_parse-test 'string']
  [string_parse-test `symbol]
  [string-split_intersperse_test 'this is a test' 'is']
  ]



[defunk firstn [n exp]
  [if [< n 0]
      [error bug_name first_n-n_must_be_nonnegative
	     n        n
	     exp      exp]
    [if [== n 0]
	nil
      [let* [[exp_iter [cdr exp]]
	     [new_exp  [cons [car exp] nil]]
	     [iter     new_exp]]
	[dotimes [i [- n 1]]
	  [set iter cdr [cons [car exp_iter] nil]]
	  [= iter       [cdr iter]]
	  [= exp_iter   [cdr exp_iter]]]
	new_exp]]]]

[defunk restn [n exp]
  [if [< n 0]
      [error bug_name first_n-n_must_be_nonnegative
	     n        n
	     exp      exp]
    [if [== n 0]
	exp
      [dotimes [i n]
	[= exp [cdr exp]]]
      exp]]]

[defunk pattern-match_with_frame [pattern expression frame]
  `[terminal_format standard-terminal
		    '\n'
		    '\npattern    = ' pattern
		    '\nexpression = ' expression]
  [if [and [null pattern]
	   [null expression]]
      [cons frame nil]
    [if [or [null pattern]
	    [null expression]]
	nil
      [let [[pattern-car [car pattern]]]
	[if [eq pattern-car [car expression]]
	    [pattern-match_with_frame [cdr pattern] [cdr expression] frame]
	  [if [is-type `cons pattern-car]
	      [let [[command [car pattern-car]]]
		[cond [[eq command `?] [let [[variable_name  [elt pattern-car 1]]
					     [variable_value nil]]
					 [let [[expression_length [length expression]]
					       [done              nil]
					       [parses            nil]]
					   [dotimes [index expression_length]
					     [let [[subframe     [get frame new_copy]]
						   [match_length [+ index 1]]]
					       [have subframe add variable_name [firstn match_length expression]]
					       [let [[subparses [pattern-match_with_frame [cdr pattern] [restn match_length expression] subframe]]]
						 [= parses [append parses
								   subparses]]]]]
					   parses]]]
		      [t               [error bug_name `pattern-invalid_command]]]]
	    nil]]]]]]


[defunk pattern-match [pattern expression]
  [pattern-match_with_frame pattern expression [new frame]]]

[defunk pattern-test [expression]
  [let [[patterns `[[a  [? object] has [? property]]
		    [an [? object] has [? property]]]]
	[parses   nil]]
    [mapc [funk [pattern]
		[let [[pattern_parses [pattern-match pattern expression]]]
		  [= parses [append parses
				    pattern_parses]]]]
	  patterns]
    parses]]



[defunk string_pattern-as_conslist_pattern [string_pattern]
  [let [[string_pattern-length [get string_pattern length]]
	[index                 0]
	[begin_variable_char   [get '[' elt 0]]
	[conslist_pattern      nil]
	[conslist_pattern_iter nil]]
    [while [< index string_pattern-length]
      [let [[next_char [get string_pattern elt index]]]
	[cond [[eq next_char begin_variable_char] [let [[stream [string_stream-new string_pattern index]]]
						    [let [[variable_expression [stream-try_read stream]]]
						      [let [[variable_command [first variable_expression]]]
							[cond [[eq variable_command `?] [let [[variable_name [second variable_expression]]]
											  [let [[new_cons [cons `[? ,variable_name] nil]]]
											    [if [null conslist_pattern]
												[prog [= conslist_pattern      new_cons]
												      [= conslist_pattern_iter new_cons]]
											      [prog [set conslist_pattern_iter cdr new_cons]
												    [= conslist_pattern_iter new_cons]]]]
											  [= index [get stream index]]]]
							      [t                        [error bug_name            string_pattern-parse-invalid_variable_command
											       string_pattern      string_pattern
											       variable_expression variable_expression]]]]]]]
	      [t                                  [let [[new_cons [cons next_char nil]]]
						    [if [null conslist_pattern]
							[prog [= conslist_pattern      new_cons]
							      [= conslist_pattern_iter new_cons]]
						      [prog [set conslist_pattern_iter cdr new_cons]
							    [= conslist_pattern_iter new_cons]]]
						    [++ index]]]]]]
    conslist_pattern]]



[defunk string_pattern-match [string_pattern string]
  [pattern-match [string_pattern-as_conslist_pattern string_pattern] [string_pattern-as_conslist_pattern string]]]


    
