' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

'  f2ptr full_bcs =                                f2__compile__push_iter(cause, tracewrap); f2ptr iter = full_bcs;'  
'  iter           = f2__list_cdr__set(cause, iter, f2__compile__push_value(cause, tracewrap));'
'  iter           = f2__list_cdr__set(cause, iter, f2__compile__push_return(cause, tracewrap));'
'  iter           = f2__list_cdr__set(cause, iter, f2__compile__push_env(cause, tracewrap));'


[defmetro thread_stack-rest       [this]      `[cdr [cdr [cdr [cdr ,this]]]]]
[defmetro thread_stack-env_reg    [this] `[car                     ,this]]
[defmetro thread_stack-return_reg [this] `[car                [cdr ,this]]]
[defmetro thread_stack-value_reg  [this] `[car           [cdr [cdr ,this]]]]
[defmetro thread_stack-args_reg   [this] `[car      [cdr [cdr [cdr ,this]]]]]

[defunk thread_stack-is_complete [this]
  [if [cons? this]
      [let [[cdr1 [cdr this]]]
	[if [cons? cdr1]
	    [let [[cdr2 [cdr cdr1]]]
	      [if [cons? cdr2]
		  [let [[cdr3 [cdr cdr2]]]
		    [if [cons? cdr3]
			t]]]]]]]]

[defunk thread_stack-get_rest [this]
  [let [[rest [thread_stack-rest this]]]
    [if [thread_stack-is_complete rest]
	rest]]]

`[this does not work yet...  the stack is not as simple as it seems...]
`[defunk thread-stream_backtrace [this stream]
  [let [[stack [thread-stack this]]]
    [let [[stack_iter stack]]
      [while stack_iter
	[let [[env_reg    [thread_stack-env_reg    stack_iter]]
	      [return_reg [thread_stack-return_reg stack_iter]]
	      [value_reg  [thread_stack-value_reg  stack_iter]]
	      [args_reg   [thread_stack-args_reg   stack_iter]]]
	  [ansi-stream-foreground stream 9] [format stream '\n' 'Thread Funktion Call Stack'
						    '\n'
						    '\n' '  :env    ' [brief env_reg]]
	  [ansi-stream-foreground stream 9] [format stream '\n' '  :return ' [brief return_reg]]
	  [ansi-stream-foreground stream 9] [format stream '\n' '  :value  ' [brief value_reg]]
	  [ansi-stream-foreground stream 9] [format stream '\n' '  :args   ' [brief args_reg]]
	  [format stream '\n']
	  ]
	[set stack_iter [thread_stack-get_rest stack_iter]]]]]]

[defunk thread-stream_backtrace [this stream]
  [let [[stack [thread-stack this]]]
    [let [[stack_iter stack]]
      [while stack_iter
	[let [[stack_exp [car stack_iter]]]
	  [if [funkable? stack_exp]
	      [let [[funkable stack_exp]]
		[let [[name [funkable-name funkable]]
		      [args [funkable-args funkable]]]
		  [format stream '\n' '  ' [brief stack_exp]]]]
	    ]]
	[prog [format stream '\n' '  ' [brief stack_exp]]]]
      ]
    [set stack_iter [cdr stack_iter]]]]]]

[defunk thread-print_backtrace [this]
  [thread-stream_backtrace this stdout]]

