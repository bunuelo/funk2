' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[load 'fu2/actor.fu2']

[print 'test 1']

[defunk new-card [color number shape]
  [actor [color  [] color]
	 [number [] number]
	 [shape  [] shape]
	 [print  [] [prog [format stdout '\n\t'] [format stdout color]
			  [format stdout '\n\t'] [format stdout number]
			  [format stdout '\n\t'] [format stdout shape]
			  this]]]]

[print 'test 2']

[globalize card-properties
	   [new-card `[  |  red  | | green | |  blue |]
		      `[ |   1   | |   2   | |   3   |]
		       `[| round | | square| | wiggly|]]]

[print 'test 3']

[defunk random-elt [seq]
  [elt seq [random [length seq]]]]

[print 'test 4']

[defunk random-card []
  [new-card [random-elt [act color  card-properties]]
	    [random-elt [act number card-properties]]
	    [random-elt [act shape  card-properties]]]]

[print 'test 5']

[defunk new-game [column-num row-num]
  [let [[space-2d [array row-num]]]
    [print 'test 1']
    [partimes [y row-num]
	      [let [[column [array column-num]]]
		[print 'test 1.1']
		[partimes [x column-num]
			  [print 'test 1.2']
			  [elt-set column x [random-card]]]
		[elt-set space-2d y column]]]
    [print 'test 2']
    [actor [column-num []    column-num]
	   [row-num    []    row-num]
	   [space-2d   []    space-2d]
	   [get_card   [x y] [elt space-2d y x]]
	   [cards      []    [let [[cards nil]]
			       [dotimes [y row-num]
				 [dotimes [x column-num]
				   [format stdout '\n(x, y) = ('] [format stdout x] [format stdout ', '] [format stdout y] [format stdout ')']
				   [set cards [cons [elt space-2d y x] cards]]]]
			       cards]]
	   [print      []    [prog [dotimes [y row-num]
				     [format stdout '\n']
				     [format stdout '\n'] [dotimes [x column-num] [format stdout '\t'] [format stdout [act color  [elt space-2d y x]]]]
				     [format stdout '\n'] [dotimes [x column-num] [format stdout '\t'] [format stdout [act number [elt space-2d y x]]]]
				     [format stdout '\n'] [dotimes [x column-num] [format stdout '\t'] [format stdout [act shape  [elt space-2d y x]]]]]
				   this
				   ]]	   
	   ]]]

[print 'test 6']



















