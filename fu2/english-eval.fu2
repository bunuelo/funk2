' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[globalize *english-eval:critic_atom_hash* [hashtable-new 18]]

[defunk   critic-new    [potree func]  [array `critic potree func]]
[defmetro critic-potree [this]        `[array-elt ,this 1]]
[defmetro critic-func   [this]        `[array-elt ,this 2]]

'Your metro compiler is meant to allow your mind to hopefully only be thinking about small, simple, and specific problems.'
[defmetro potree-new  [data] data]
[defmetro potree-data [this] this]

[defmetro potree-foreach_node_in_first_layer [this func]
  `[mapc func [potree-data ,this]]]

[defunk potree-foreach_node [this func]
  [potree-foreach_node_in_first_layer this [funk [element]
						 [funkall func element]
						 [if [cons? element]
						     [potree-foreach_node element func]]]]]

[defunk potree-is_strictly_contained_in_potree [this exp]
  [let [[this_iter this]
	[this_exp  [car this]]
	[exp_iter  exp]]
    [while exp_iter
      [if [or [and [cons? this_exp] [potree-is_strictly_contained_in_potree this_exp [car exp_iter]]]
	      [eq this_exp [car exp_iter]]]
	  [prog [set this_iter [cdr this_iter]]
		[if this_iter
		    [set this_exp [car this_iter]]
		  [set exp_iter [cons nil nil]]]]]
      [set exp_iter  [cdr exp_iter]]]
    [null this_iter]]]

[defunk potree-is_greedily_contained_in_sequence-helper [this sequence_iter_place]
  [let [[this_iter     this]
	[this_exp      [car this]]
	[sequence_iter [place-thing sequence_iter_place]]]
    [while sequence_iter
      [let [[found_match nil]]
	[if [and [cons? this_exp] [potree-is_greedily_contained_in_sequence-helper this_exp sequence_iter_place]]
	    [prog [set found_match t]
		  [set sequence_iter [place-thing sequence_iter_place]]]
	  [prog [place-thing-set sequence_iter_place sequence_iter]
		[if [eq this_exp [car sequence_iter]]
		    [set found_match t]]]]
	[if found_match
	    [prog [set this_iter [cdr this_iter]]
		  [if this_iter
		      [set this_exp [car this_iter]]
		    [set sequence_iter [cons nil nil]]]]]]
      [set sequence_iter [cdr sequence_iter]]
      [place-thing-set sequence_iter_place sequence_iter]]
    [null this_iter]]]

[defunk potree-is_greedily_contained_in_sequence [this sequence]
  [let [[retval nil]]
    [while sequence
      [if [potree-is_greedily_contained_in_sequence-helper this [place sequence]]
	  [prog [set retval   t]
		[set sequence nil]]]
      [set sequence [cdr sequence]]]
    retval]]

[defunk critic-matches [this sequence]
  [potree-is_greedily_contained_in_sequence [critic-potree this] sequence]]

[defmetro defcritic [&rest english_sequence]
  [english-eval:define-knowledge english_sequence

[defunk english-eval:fire_known_critics [english_sequence]
  [let [[keyvalue_pair [hashtable-lookup_keyvalue_pair *english-eval:knowledge_atom_hash* knowledge]]
	[nodes         []]]
    [if keyvalue_pair
	[set nodes [cdr keyvalue_pair]]]
    [potree-foreach_node_in_first_layer [english_pattern-potree knowledge] [funk [node] [set nodes [cons nodes value]]]]
    [hashtable-add_keyvalue_pair *english-eval:knowledge_atom_hash* nodes]
    knowledge]]

[defunk english-eval [english_sequence]
  [english-eval:fire_known_critics english_sequence]]


