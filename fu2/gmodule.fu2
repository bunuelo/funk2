' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[globalize -gmodule-bind_lazy-  1]
[globalize -gmodule-bind_local- 2]
[globalize -gmodule-bind_mask-  3]

[defunk safe:gmodule-build_path    [x y] [if [and [gmodule-supported] [or [null x] [string?  x]] [string?  y]] [unsafe:gmodule-build_path    x y] [error `run-time [list `safe:gmodule-build_path    `type-check-failure]]]]
[defunk safe:gmodule-open          [x y] [if [and [gmodule-supported]              [string?  x]  [integer? y]] [unsafe:gmodule-open          x y] [error `run-time [list `safe:gmodule-open          `type-check-failure]]]]
[defunk safe:gmodule-symbol        [x y] [if [and [gmodule-supported]              [pointer? x]  [string?  y]] [unsafe:gmodule-symbol        x y] [error `run-time [list `safe:gmodule-symbol        `type-check-failure]]]]
[defunk safe:gmodule-name          [x]   [if [and [gmodule-supported]              [pointer? x]]               [unsafe:gmodule-name          x]   [error `run-time [list `safe:gmodule-name          `type-check-failure]]]]
[defunk safe:gmodule-make_resident [x]   [if [and [gmodule-supported]              [pointer? x]]               [unsafe:gmodule-make_resident x]   [error `run-time [list `safe:gmodule-make_resident `type-check-failure]]]]
[defunk safe:gmodule-close         [x]   [if [and [gmodule-supported]              [pointer? x]]               [unsafe:gmodule-close         x]   [error `run-time [list `safe:gmodule-close         `type-check-failure]]]]
[defunk gmodule-error              []    [if      [gmodule-supported]                                          [unsafe:gmodule-error]             [error `run-time [list `gmodule-error              `type-check-failure]]]]

[defmetro gmodule-build_path    [x y] `[,[if *compile-type-checking* `safe:gmodule-build_path    `unsafe:gmodule-build_path]    ,x ,y]]
[defmetro gmodule-open          [x y] `[,[if *compile-type-checking* `safe:gmodule-open          `unsafe:gmodule-open]          ,x ,y]]
[defmetro gmodule-symbol        [x y] `[,[if *compile-type-checking* `safe:gmodule-symbol        `unsafe:gmodule-symbol]        ,x ,y]]
[defmetro gmodule-name          [x]   `[,[if *compile-type-checking* `safe:gmodule-name          `unsafe:gmodule-name]          ,x]]
[defmetro gmodule-make_resident [x]   `[,[if *compile-type-checking* `safe:gmodule-make_resident `unsafe:gmodule-make_resident] ,x]]
[defmetro gmodule-close         [x]   `[,[if *compile-type-checking* `safe:gmodule-close         `unsafe:gmodule-close]         ,x]]

[globalize -gmodule-name-hash- [hashtable-new 10]]

[defunk   gmodule-new                    [name library_file_directory library_file_name system_gmodule]  [array `gmodule name library_file_directory library_file_name system_gmodule]]
[defmetro gmodule-name                   [this]                                                         `[array-elt ,this 1]]
[defmetro gmodule-library_file_directory [this]                                                         `[array-elt ,this 2]]
[defmetro gmodule-library_file_name      [this]                                                         `[array-elt ,this 3]]
[defmetro gmodule-system_gmodule         [this]                                                         `[array-elt ,this 4]]

[defunk gmodule-lookup [name]
  [hashtable-lookup_value -gmodule-hash-name- name]]

[defunk gmodule-init_library [name]
  [let [[gmodule [gmodule-lookup name]]]
    [if [null [gmodule-system_gmodule gmodule]]
	[let [[library_file_directory [gmodule-library_file_directory gmodule]]
	      [library_file_name      [gmodule-library_file_name      gmodule]]]
	  [let [[system_gmodule [gmodule-open [gmodule-build_path library_file_directory library_file_name] 0]]]
	    [put system_gmodule [gmodule-system_gmodule gmodule]]
	    [if [null system_gmodule] [error `loading-gmodule `[loading ncurses dynamic library]]]]]]]]

[defmetro defgmodule [name library_file_directory library_file_name]
  [let [[gmodule [gmodule-new name library_file_directory library_file_name nil]]]
    [hashtable-add_keyvalue_pair -gmodule-name-hash- name gmodule]]]

[defmetro defalien [name gmodule_name return_type c_name argument_name_type_pairs]
  `[defunk-alien [gmodule-lookup gmodule_name] ,name ,return_type ,c_name ,argument_type_name_pairs]]

[print 'done with gmodule.fu2']