
[defunk   planner_condition-new [exp]   [array `planner_condition exp]]
[defmetro planner_condition-exp [this] `[array-elt ,this 1]]

[defunk   planner_action-new            [exp preconditions postconditions]  [array `planner_action exp preconditions postconditions]]
[defmetro planner_action-exp            [this]                             `[array-elt ,this 1]]
[defmetro planner_action-preconditions  [this]                             `[array-elt ,this 2]]
[defmetro planner_action-postconditions [this]                             `[array-elt ,this 3]]

[defunk   planner-new     [actions]  [array `planner actions]]
[defmetro planner-actions [this]    `[array-elt ,this 1]]

[defunk   plan-new [exp]   [array `plan exp]]
[defmetro plan-exp [this] `[array-elt ,this 1]]



[defunk plan_exp-eval_in_blocks_world [exp blocks_world]
  [cond [[cons? exp] [let [[command [car exp]]]
		       [cond [[eq command `drop]    [blocks_world-drop blocks_world]]
			     [[eq command `move-to] [blocks_world-move_to blocks_world [second exp]]]
			     [[eq command `pick-up] [blocks_world-pick_up blocks_world [second exp]]]
			     [[eq command `prog]    [mapc [funk [subexp]
								[plan_exp-eval_in_blocks_world subexp]]
							  [cdr exp]]]]]]
	[t           [error `run-time `[plan_exp-eval_in_blocks_world exp is not recognized]]]]]

[defunk plan-eval_in_blocks_world [this blocks_world]
  [plan_exp-eval_in_blocks_world [plan-exp this] blocks_world]]

[defunk plan-add_exp_at_end [this exp]
  [plan-new `[prog ,[plan-exp this]
		    ,exp]]]

[defunk plan-add_exp_at_start [this exp]
  [plan-new `[prog ,exp
		    ,[plan-exp this]]]]

[plan-new `[prog [move-to the-red-block]
		 [pick-up the-red-block]
		 [move-to the-green-block]
		 [drop]]]




