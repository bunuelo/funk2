
[defunk   planner_action-new                    [exp precond_postcond_pairs]  [array `planner_action exp precond_postcond_pairs]]
[defmetro planner_action-exp                    [this]                       `[array-elt ,this 1]]
[defmetro planner_action-precond_postcond_pairs [this]                       `[array-elt ,this 2]]

[defunk planner_action-create [exp] [planner_action-new exp nil]]

[defunk   planner_plan-new               [exp expected_postcond]  [array `planner_plan exp expected_postcond]]
[defmetro planner_plan-exp               [this]                  `[array-elt ,this 1]]
[defmetro planner_plan-expected_postcond [this]                  `[array-elt ,this 2]]

[defunk   planner-new            [actions perceive_funk heuristic_funk]  [array `planner actions perceive_funk heuristic_funk]]
[defmetro planner-actions        [this]                                 `[array-elt ,this 1]]
[defmetro planner-perceive_funk  [this]                                 `[array-elt ,this 2]]
[defmetro planner-heuristic_funk [this]                                 `[array-elt ,this 3]]

[defunk planner-perceive [this]
  [funkall [planner-perceive_funk this] this]]

[defunk planner-heuristic [this]
  [funkall [planner-heuristic_funk this] this]]

[defunk planner-test []
  [let [[blocks_world [blocks_world-create [blocks_world_physics-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
									   [blocks_world_object-new_gripper `the-gripper      21 23  3  3 `magenta]
									   [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
									   [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
									   [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
									   [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]]
    [let [[planner [planner-new [list [planner_action-create `[move-to the-red-block]]
				      [planner_action-create `[move-to the-green-block]]
				      [planner_action-create `[move-to the-blue-block]]
				      [planner_action-create `[move-to the-yellow-block]]
				      [planner_action-create `[move-to the-table]]
				      [planner_action-create `[pick-up the-red-block]]
				      [planner_action-create `[pick-up the-green-block]]
				      [planner_action-create `[pick-up the-blue-block]]
				      [planner_action-create `[pick-up the-yellow-block]]
				      [planner_action-create `[pick-up the-table]]
				      [planner_action-create `[drop]]]
				[funk [this-planner]
				      [blocks_world-generate_perceptions blocks_world]]
				[let [[goal_percepts `[[on the-red-block the-yellow-block]
						       [on the-yellow-block the-blue-block]
						       [on the-blue-block the-table]]]]
				  [funk [this-planner]
					[let [[distance_from_goal 0]]
					  [mapc [funk [percept]
						      [if [not [member? percept [planner-perceive this-planner]]]
							  [= distance_from_goal [+ distance_from_goal 1]]]]
						goal_percepts]
					  distance_from_goal]]]
				]]]
      
							  
						    
				    
