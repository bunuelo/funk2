' 
 Copyright (c) 2007 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk   primobject?                [x]      [and x [array? x] [unsafe:integer-greater_than [unsafe:array-length x] 1] [eq [array-elt x 0] `primobject]]]
[defmetro unsafe:primobject-slot     [x y]   `[array-elt     ,x [unsafe:integer-add 2 ,y]]]
[defmetro unsafe:primobject-slot-set [x y z] `[array-elt-set ,x [unsafe:integer-add 2 ,y] ,z]]
[defmetro unsafe:primobject-type     [x]     `[array-elt     ,x 1]]

[defunk abstract_object? [x] [and [primobject? x] [eq [unsafe:primobject-type x] `abstract_object]]]

[defmetro hashtable                          [bin_num_power bin_array] `[array `primobject `hashtable nil ,bin_num_power ,bin_array]]
[defunk   hashtable?                         [x]                        [and [primobject? x] [eq [unsafe:primobject-type x] `hashtable]]]
[defmetro unsafe:hashtable-bin_num_power     [x]                       `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:hashtable-bin_num_power-set [x y]                     `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:hashtable-bin_array         [x]                       `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:hashtable-bin_array-set     [x y]                     `[unsafe:primobject-slot-set ,x 2 ,y]]

[defmetro frame                              [var_hashtable funkvar_hashtable] `[array `primobject `frame nil ,var_hashtable ,funkvar_hashtable]]
[defunk   frame?                             [x]                                [and [primobject? x] [eq [unsafe:primobject-type x] `frame]]]
[defmetro unsafe:frame-var_hashtable         [x]                               `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:frame-var_hashtable-set     [x y]                             `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:frame-funkvar_hashtable     [x]                               `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:frame-funkvar_hashtable-set [x y]                             `[unsafe:primobject-slot-set ,x 2 ,y]]

[defmetro environment                       [frame parent_env desc] `[array `primobject `environment nil ,var_hashtable ,funkvar_hashtable]]
[defunk   environment?                      [x]                      [and [primobject? x] [eq [unsafe:primobject-type x] `environment]]]
[defmetro unsafe:environment-frame          [x]                     `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:environment-frame-set      [x y]                   `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:environment-parent_env     [x]                     `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:environment-parent_env-set [x y]                   `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:environment-desc           [x]                     `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:environment-desc-set       [x y]                   `[unsafe:primobject-slot-set ,x 3 ,y]]

[defunk   cfunk?                    [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `cfunk]]]
[defmetro unsafe:cfunk-name         [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:cfunk-name-set     [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:cfunk-args         [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:cfunk-args-set     [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:cfunk-cfunkptr     [x]   `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:cfunk-cfunkptr-set [x y] `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:cfunk-env          [x]   `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:cfunk-env-set      [x y] `[unsafe:primobject-slot-set ,x 4 ,y]]

[defunk   metrocfunk?                    [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `metrocfunk]]]
[defmetro unsafe:metrocfunk-name         [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:metrocfunk-name-set     [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:metrocfunk-args         [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:metrocfunk-args-set     [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:metrocfunk-cfunkptr     [x]   `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:metrocfunk-cfunkptr-set [x y] `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:metrocfunk-env          [x]   `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:metrocfunk-env-set      [x y] `[unsafe:primobject-slot-set ,x 4 ,y]]
  
[defunk   funk?                               [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `funk]]]
[defmetro unsafe:funk-name                    [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:funk-name-set                [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:funk-body_bytecodes          [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:funk-body_bytecodes-set      [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:funk-args                    [x]   `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:funk-args-set                [x y] `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:funk-demetropolized_body     [x]   `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:funk-demetropolized_body-set [x y] `[unsafe:primobject-slot-set ,x 4 ,y]]
[defmetro unsafe:funk-body                    [x]   `[unsafe:primobject-slot     ,x 5]]
[defmetro unsafe:funk-body-set                [x y] `[unsafe:primobject-slot-set ,x 5 ,y]]
[defmetro unsafe:funk-env                     [x]   `[unsafe:primobject-slot     ,x 6]]
[defmetro unsafe:funk-env-set                 [x y] `[unsafe:primobject-slot-set ,x 6 ,y]]
[defmetro unsafe:funk-machine_code            [x]   `[unsafe:primobject-slot     ,x 7]]
[defmetro unsafe:funk-machine_code-set        [x y] `[unsafe:primobject-slot-set ,x 7 ,y]]
   
[defunk   metro?                               [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `metro]]]
[defmetro unsafe:metro-name                    [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:metro-name-set                [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:metro-body_bytecodes          [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:metro-body_bytecodes-set      [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:metro-args                    [x]   `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:metro-args-set                [x y] `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:metro-demetropolized_body     [x]   `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:metro-demetropolized_body-set [x y] `[unsafe:primobject-slot-set ,x 4 ,y]]
[defmetro unsafe:metro-body                    [x]   `[unsafe:primobject-slot     ,x 5]]
[defmetro unsafe:metro-body-set                [x y] `[unsafe:primobject-slot-set ,x 5 ,y]]
[defmetro unsafe:metro-env                     [x]   `[unsafe:primobject-slot     ,x 6]]
[defmetro unsafe:metro-env-set                 [x y] `[unsafe:primobject-slot-set ,x 6 ,y]]
[defmetro unsafe:metro-machine_code            [x]   `[unsafe:primobject-slot     ,x 7]]
[defmetro unsafe:metro-machine_code-set        [x y] `[unsafe:primobject-slot-set ,x 7 ,y]]

[defmetro exception                  [tag value] `[array `primobject `exception nil ,tag ,value]]
[defunk   exception?                 [x]          [and [primobject? x] [eq [unsafe:primobject-type x] `exception]]]
[defmetro unsafe:exception-tag       [x]         `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:exception-tag-set   [x y]       `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:exception-value     [x]         `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:exception-value-set [x y]       `[unsafe:primobject-slot-set ,x 2 ,y]]

`[defmetro bytecode                    [command arg0 arg1] `[array `primobject `bytecode nil ,command ,arg0 ,arg1]]
[defunk   bytecode?                   [x]                  [and [primobject? x] [eq [unsafe:primobject-type x] `bytecode]]]
[defmetro unsafe:bytecode-command     [x]                 `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:bytecode-command-set [x y]               `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:bytecode-arg0        [x]                 `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:bytecode-arg0-set    [x y]               `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:bytecode-arg1        [x]                 `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:bytecode-arg1-set    [x y]               `[unsafe:primobject-slot-set ,x 3 ,y]]

[defunk   thread?                              [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `thread]]]
[defmetro unsafe:thread-program_counter        [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:thread-program_counter-set    [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:thread-stack                  [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:thread-stack-set              [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:thread-iter                   [x]   `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:thread-iter-set               [x y] `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:thread-env                    [x]   `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:thread-env-set                [x y] `[unsafe:primobject-slot-set ,x 4 ,y]]
[defmetro unsafe:thread-args                   [x]   `[unsafe:primobject-slot     ,x 5]]
[defmetro unsafe:thread-args-set               [x y] `[unsafe:primobject-slot-set ,x 5 ,y]]
[defmetro unsafe:thread-return                 [x]   `[unsafe:primobject-slot     ,x 6]]
[defmetro unsafe:thread-return-set             [x y] `[unsafe:primobject-slot-set ,x 6 ,y]]
[defmetro unsafe:thread-value                  [x]   `[unsafe:primobject-slot     ,x 7]]
[defmetro unsafe:thread-value-set              [x y] `[unsafe:primobject-slot-set ,x 7 ,y]]
[defmetro unsafe:thread-trace                  [x]   `[unsafe:primobject-slot     ,x 8]]
[defmetro unsafe:thread-trace-set              [x y] `[unsafe:primobject-slot-set ,x 8 ,y]]
[defmetro unsafe:thread-critics                [x]   `[unsafe:primobject-slot     ,x 9]]
[defmetro unsafe:thread-critics-set            [x y] `[unsafe:primobject-slot-set ,x 9 ,y]]
[defmetro unsafe:thread-context                [x]   `[unsafe:primobject-slot     ,x 10]]
[defmetro unsafe:thread-context-set            [x y] `[unsafe:primobject-slot-set ,x 10 ,y]]
[defmetro unsafe:thread-keep_undead            [x]   `[unsafe:primobject-slot     ,x 11]]
[defmetro unsafe:thread-keep_undead-set        [x y] `[unsafe:primobject-slot-set ,x 11 ,y]]
[defmetro unsafe:thread-is_zombie              [x]   `[unsafe:primobject-slot     ,x 12]]
[defmetro unsafe:thread-is_zombie-set          [x y] `[unsafe:primobject-slot-set ,x 12 ,y]]
[defmetro unsafe:thread-parent_thread          [x]   `[unsafe:primobject-slot     ,x 13]]
[defmetro unsafe:thread-parent_thread-set      [x y] `[unsafe:primobject-slot-set ,x 13 ,y]]
[defmetro unsafe:thread-parent_env             [x]   `[unsafe:primobject-slot     ,x 14]]
[defmetro unsafe:thread-parent_env-set         [x y] `[unsafe:primobject-slot-set ,x 14 ,y]]
[defmetro unsafe:thread-execute_mutex          [x]   `[unsafe:primobject-slot     ,x 15]]
[defmetro unsafe:thread-execute_mutex-set      [x y] `[unsafe:primobject-slot-set ,x 15 ,y]]
[defmetro unsafe:thread-last_executed_time     [x]   `[unsafe:primobject-slot     ,x 16]]
[defmetro unsafe:thread-last_executed_time-set [x y] `[unsafe:primobject-slot-set ,x 16 ,y]]

[defmetro unsafe:thread-complete? [x] `[unsafe:thread-is_zombie ,x]]

`[defmetro unsafe:thread-complete?           [x]   `[null [unsafe:thread-program_counter ,x]]]

`[defmetro cause                               [subscribers_mutex subscribers] `[array `primobject `cause nil ,subscribers_mutex ,subscribers]]
[defunk   cause?                               [x]                              [and [primobject? x] [eq [unsafe:primobject-type x] `cause]]]
[defmetro unsafe:cause-bytecode_tracing_on     [x]                             `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:cause-bytecode_tracing_on-set [x y]                           `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:cause-memory_tracing_on       [x]                             `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:cause-memory_tracing_on-set   [x y]                           `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:cause-subscribers_mutex       [x]                             `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:cause-subscribers_mutex-set   [x y]                           `[unsafe:primobject-slot-set ,x 3 ,y]]
[defmetro unsafe:cause-subscribers             [x]                             `[unsafe:primobject-slot     ,x 4]]
[defmetro unsafe:cause-subscribers-set         [x y]                           `[unsafe:primobject-slot-set ,x 4 ,y]]
[defmetro unsafe:cause-imagination_stack       [x]                             `[unsafe:primobject-slot     ,x 5]]
[defmetro unsafe:cause-imagination_stack-set   [x y]                           `[unsafe:primobject-slot-set ,x 5 ,y]]
[defmetro unsafe:cause-event_buffer_first      [x]                             `[unsafe:primobject-slot     ,x 6]]
[defmetro unsafe:cause-event_buffer_first-set  [x y]                           `[unsafe:primobject-slot-set ,x 6 ,y]]
[defmetro unsafe:cause-event_buffer_last       [x]                             `[unsafe:primobject-slot     ,x 7]]
[defmetro unsafe:cause-event_buffer_last-set   [x y]                           `[unsafe:primobject-slot-set ,x 7 ,y]]

[defmetro transframe                            [symbol_old_news] `[array `primobject `transframe nil ,symbol_old_news]]
[defunk   transframe?                           [x]                [and [primobject? x] [eq [unsafe:primobject-type x] `transframe]]]
[defmetro unsafe:transframe-symbol_old_news     [x]               `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:transframe-symbol_old_news-set [x y]             `[unsafe:primobject-slot-set ,x 1 ,y]]

[defmetro bug                 [type] `[array `primobject `bug nil ,type]]
[defunk   bug?                [x]     [and [primobject? x] [eq [unsafe:primobject-type x] `bug]]]
[defmetro unsafe:bug-type     [x]    `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:bug-type-set [x y]  `[unsafe:primobject-slot-set ,x 1 ,y]]

[defmetro size_2d              [x y] `[array `primobject `size_2d nil ,x ,y]]
[defunk   size_2d?             [x]    [and [primobject? x] [eq [unsafe:primobject-type x] `size_2d]]]
[defmetro unsafe:size_2d-x     [x]   `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:size_2d-x-set [x y] `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:size_2d-y     [x]   `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:size_2d-y-set [x y] `[unsafe:primobject-slot-set ,x 2 ,y]]

[defmetro matrix                 [xres yres data] `[array `primobject `matrix nil ,xres ,yres ,data]]
[defunk   matrix?                [x]               [and [primobject? x] [eq [unsafe:primobject-type x] `matrix]]]
[defmetro unsafe:matrix-xres     [x]              `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:matrix-xres-set [x y]            `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:matrix-yres     [x]              `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:matrix-yres-set [x y]            `[unsafe:primobject-slot-set ,x 2 ,y]]
[defmetro unsafe:matrix-data     [x]              `[unsafe:primobject-slot     ,x 3]]
[defmetro unsafe:matrix-data-set [x y]            `[unsafe:primobject-slot-set ,x 3 ,y]]

[defmetro bytecode_event                     [bytecode context] `[array `primobject `bytecode_event nil ,bytecode ,context]]
[defunk   bytecode_event?                    [x]                 [and [primobject? x] [eq [unsafe:primobject-type x] `bytecode_event]]]
[defmetro unsafe:bytecode_event-bytecode     [x]                `[unsafe:primobject-slot     ,x 1]]
[defmetro unsafe:bytecode_event-bytecode-set [x y]              `[unsafe:primobject-slot-set ,x 1 ,y]]
[defmetro unsafe:bytecode_event-context      [x]                `[unsafe:primobject-slot     ,x 2]]
[defmetro unsafe:bytecode_event-context-set  [x y]              `[unsafe:primobject-slot-set ,x 2 ,y]]

'Define safe versions of unsafe functions here.'

[defunk safe:integer-to_double [x] [if [integer? x] [unsafe:integer-to_double x] [error `run-time `[safe:integer-to_double type-check-failure]]]]
[defunk safe:integer-to_float  [x] [if [integer? x] [unsafe:integer-to_float  x] [error `run-time `[safe:integer-to_float  type-check-failure]]]]

[defunk safe:integer-greater_than      [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-greater_than       x y] [error `run-time `[safe:integer-greater_than      type-check-failure]]]]
[defunk safe:integer-less_than         [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-less_than          x y] [error `run-time `[safe:integer-less_than         type-check-failure]]]]
[defunk safe:integer-add               [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-add                x y] [error `run-time `[safe:integer-add               type-check-failure]]]]
[defunk safe:integer-subtract          [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-subtract           x y] [error `run-time `[safe:integer-subtract          type-check-failure]]]]
[defunk safe:integer-multiply          [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-multiply           x y] [error `run-time `[safe:integer-multiply          type-check-failure]]]]
[defunk safe:integer-add_double        [x y] [if [and [integer? x] [double?  y]] [unsafe:integer-add_double         x y] [error `run-time `[safe:integer-add_double        type-check-failure]]]]
[defunk safe:integer-subtract_double   [x y] [if [and [integer? x] [double?  y]] [unsafe:integer-subtract_double    x y] [error `run-time `[safe:integer-subtract_double   type-check-failure]]]]
[defunk safe:integer-divide_by_integer [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-divide_by_integer  x y] [error `run-time `[safe:integer-divide_by_integer type-check-failure]]]]
[defunk safe:integer-divide_by_double  [x y] [if [and [integer? x] [double?  y]] [unsafe:integer-divide_by_double   x y] [error `run-time `[safe:integer-divide_by_double  type-check-failure]]]]
[defunk safe:integer-equal_sign        [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-equal_sign         x y] [error `run-time `[safe:integer-equal_sign        type-check-failure]]]]
[defunk safe:integer-not_equal_sign    [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-not_equal_sign     x y] [error `run-time `[safe:integer-not_equal_sign    type-check-failure]]]]
[defunk safe:integer-bitshift_left     [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-bitshift_left      x y] [error `run-time `[safe:integer-bitshift_left     type-check-failure]]]]
[defunk safe:integer-bitshift_right    [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-bitshift_right     x y] [error `run-time `[safe:integer-bitshift_right    type-check-failure]]]]
[defunk safe:integer-bit_and           [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-bit_and            x y] [error `run-time `[safe:integer-bit_and           type-check-failure]]]]
[defunk safe:integer-bit_or            [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-bit_or             x y] [error `run-time `[safe:integer-bit_or            type-check-failure]]]]
[defunk safe:integer-bit_xor           [x y] [if [and [integer? x] [integer? y]] [unsafe:integer-bit_xor            x y] [error `run-time `[safe:integer-bit_xor           type-check-failure]]]]
[defunk safe:integer-bit_not           [x]   [if [and [integer? x] [integer? y]] [unsafe:integer-bit_not            x]   [error `run-time `[safe:integer-bit_not           type-check-failure]]]]
[defunk safe:pointer-greater_than      [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-greater_than       x y] [error `run-time `[safe:pointer-greater_than      type-check-failure]]]]
[defunk safe:pointer-less_than         [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-less_than          x y] [error `run-time `[safe:pointer-less_than         type-check-failure]]]]
[defunk safe:pointer-add_integer       [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-add_integer        x y] [error `run-time `[safe:pointer-add_integer       type-check-failure]]]]
[defunk safe:pointer-subtract          [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-subtract           x y] [error `run-time `[safe:pointer-subtract          type-check-failure]]]]
[defunk safe:pointer-equal_sign        [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-equal_sign         x y] [error `run-time `[safe:pointer-equal_sign        type-check-failure]]]]
[defunk safe:pointer-not_equal_sign    [x y] [if [and [pointer? x] [pointer? y]] [unsafe:pointer-not_equal_sign     x y] [error `run-time `[safe:pointer-not_equal_sign    type-check-failure]]]]

[defunk safe:double-to_integer        [x]   [if [double?  x]                   [unsafe:double-to_integer        x]   [error `run-time `[safe:double-to_integer        type-check-failure]]]]
[defunk safe:double-to_float          [x]   [if [double?  x]                   [unsafe:double-to_float          x]   [error `run-time `[safe:double-to_float          type-check-failure]]]]
[defunk safe:double-add_double        [x y] [if [and [double? x] [double?  y]] [unsafe:double-add_double        x y] [error `run-time `[safe:double-add_double        type-check-failure]]]]
[defunk safe:double-subtract_double   [x y] [if [and [double? x] [double?  y]] [unsafe:double-subtract_double   x y] [error `run-time `[safe:double-subtract_double   type-check-failure]]]]
[defunk safe:double-divide_by_double  [x y] [if [and [double? x] [double?  y]] [unsafe:double-divide_by_double  x y] [error `run-time `[safe:double-divide_by_double  type-check-failure]]]]
[defunk safe:double-add_integer       [x y] [if [and [double? x] [integer? y]] [unsafe:double-add_integer       x y] [error `run-time `[safe:double-add_integer       type-check-failure]]]]
[defunk safe:double-subtract_integer  [x y] [if [and [double? x] [integer? y]] [unsafe:double-subtract_integer  x y] [error `run-time `[safe:double-subtract_integer  type-check-failure]]]]
[defunk safe:double-divide_by_integer [x y] [if [and [double? x] [integer? y]] [unsafe:double-divide_by_integer x y] [error `run-time `[safe:double-divide_by_integer type-check-failure]]]]

[defunk safe:float-to_integer  [x] [if [float?   x] [unsafe:float-to_integer  x] [error `run-time `[safe:float-to_integer  type-check-failure]]]]
[defunk safe:float-to_double   [x] [if [float?   x] [unsafe:float-to_double   x] [error `run-time `[safe:float-to_double   type-check-failure]]]]

[defunk safe:deref-pointer [x] [if [pointer? x] [unsafe:deref-pointer x] [error `run-time `[safe:deref-pointer type-check-failure]]]]

[defunk safe:string-length                [x]   [if      [string? x]               [unsafe:string-length                x]   [error `run-time `[safe:string-length                type-check-failure]]]]
[defunk safe:string-elt                   [x y] [if [and [string? x] [integer? y]] [unsafe:string-elt                   x y] [error `run-time `[safe:string-elt                   type-check-failure]]]]
[defunk safe:string-equals                [x y] [if [and [string? x] [string?  y]] [unsafe:string-equals                x y] [error `run-time `[safe:string-equals                type-check-failure]]]]
[defunk safe:string-to_new_raw_c_string   [x]   [if      [string? x]               [unsafe:string-to_new_raw_c_string   x]   [error `run-time `[safe:string-to_new_raw_c_string   type-check-failure]]]]
[defunk safe:string-new_from_raw_c_string [x]   [if      [pointer? x]              [unsafe:string-new_from_raw_c_string x]   [error `run-time `[safe:string-new_from_raw_c_string type-check-failure]]]]

[defunk safe:place-thing     [x]   [if [place? x] [unsafe:place-thing     x]   [error `run-time `[safe:place-thing     type-check-failure]]]]
[defunk safe:place-thing-set [x y] [if [place? x] [unsafe:place-thing-set x y] [error `run-time `[safe:place-thing-set type-check-failure]]]]

[defunk safe:cons-car                [x]   [if [cons? x] [unsafe:cons-car                x]   [error `run-time `[safe:cons-car              type-check-failure]]]]
[defunk safe:cons-car-set            [x y] [if [cons? x] [unsafe:cons-car-set            x y] [error `run-time `[safe:cons-car-set          type-check-failure]]]]
[defunk safe:cons-cdr                [x]   [if [cons? x] [unsafe:cons-cdr                x]   [error `run-time `[safe:cons-cdr              type-check-failure]]]]
[defunk safe:cons-cdr-set            [x y] [if [cons? x] [unsafe:cons-cdr-set            x y] [error `run-time `[safe:cons-cdr-set          type-check-failure]]]]

[defunk safe:doublelink-prev      [x]   [if [doublelink? x] [unsafe:doublelink-prev      x]   [error `run-time `[safe:doublelink-prev      type-check-failure]]]]
[defunk safe:doublelink-prev-set  [x y] [if [doublelink? x] [unsafe:doublelink-prev-set  x y] [error `run-time `[safe:doublelink-prev-set  type-check-failure]]]]
[defunk safe:doublelink-next      [x]   [if [doublelink? x] [unsafe:doublelink-next      x]   [error `run-time `[safe:doublelink-next      type-check-failure]]]]
[defunk safe:doublelink-next-set  [x y] [if [doublelink? x] [unsafe:doublelink-next-set  x y] [error `run-time `[safe:doublelink-next-set  type-check-failure]]]]
[defunk safe:doublelink-value     [x]   [if [doublelink? x] [unsafe:doublelink-value     x]   [error `run-time `[safe:doublelink-value     type-check-failure]]]]
[defunk safe:doublelink-value-set [x y] [if [doublelink? x] [unsafe:doublelink-value-set x y] [error `run-time `[safe:doublelink-value-set type-check-failure]]]]

[defunk safe:array-length                    [x]     [if [array? x]                    [unsafe:array-length                    x]     [error `run-time `[safe:array-length                    type-check-failure]]]]
[defunk safe:array-elt                       [x y]   [if [and [array? x] [integer? y]] [unsafe:array-elt                       x y]   [error `run-time `[safe:array-elt                       type-check-failure]]]]
[defunk safe:array-elt-set                   [x y z] [if [and [array? x] [integer? y]] [unsafe:array-elt-set                   x y z] [error `run-time `[safe:array-elt-set                   type-check-failure]]]]
[defunk safe:array-elt-tracing_on            [x y]   [if [and [array? x] [integer? y]] [unsafe:array-elt-tracing_on            x y]   [error `run-time `[safe:array-elt-tracing_on            type-check-failure]]]]
[defunk safe:array-elt-tracing_on-set        [x y z] [if [and [array? x] [integer? y]] [unsafe:array-elt-tracing_on-set        x y z] [error `run-time `[safe:array-elt-tracing_on-set        type-check-failure]]]]
[defunk safe:array-elt-trace                 [x y]   [if [and [array? x] [integer? y]] [unsafe:array-elt-trace                 x y]   [error `run-time `[safe:array-elt-trace                 type-check-failure]]]]
[defunk safe:array-elt-trace-set             [x y z] [if [and [array? x] [integer? y]] [unsafe:array-elt-trace-set             x y z] [error `run-time `[safe:array-elt-trace-set             type-check-failure]]]]
[defunk safe:array-elt-imagination_frame     [x y]   [if [and [array? x] [integer? y]] [unsafe:array-elt-imagination_frame     x y]   [error `run-time `[safe:array-elt-imagination_frame     type-check-failure]]]]
[defunk safe:array-elt-imagination_frame-set [x y z] [if [and [array? x] [integer? y]] [unsafe:array-elt-imagination_frame-set x y z] [error `run-time `[safe:array-elt-imagination_frame-set type-check-failure]]]]

[defunk safe:chunk-length                      [x]     [if      [chunk? x]                                                                         [unsafe:chunk-length                 x]     [error `run-time `[safe:chunk-length                 type-check-failure]]]]
[defunk safe:chunk-bytes                       [x]     [if      [chunk? x]                                                                         [unsafe:chunk-bytes                  x]     [error `run-time `[safe:chunk-bytes                  type-check-failure]]]]
[defunk safe:chunk-copy                        [x y]   [if [and [chunk? x] [chunk? y]]                                                             [unsafe:chunk-copy                   x y]   [error `run-time `[safe:chunk-copy                   type-check-failure]]]]
[defunk safe:chunk-read_8bit                   [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than    y    [unsafe:chunk-length x]]]              [unsafe:chunk-read_8bit              x y]   [error `run-time `[safe:chunk-read_8bit              `type-check-failure]]]]
[defunk safe:chunk-read_8bit_signed            [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than    y    [unsafe:chunk-length x]]]              [unsafe:chunk-read_8bit_signed       x y]   [error `run-time `[safe:chunk-read_8bit_signed       `type-check-failure]]]]
[defunk safe:chunk-write_8bit_integer          [x y z] [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than    y    [unsafe:chunk-length x]] [integer? z]] [unsafe:chunk-write_8bit_integer     x y z] [error `run-time `[safe:chunk-write_8bit             `type-check-failure]]]]
[defunk safe:chunk-read_16bit                  [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 1] [unsafe:chunk-length x]]]              [unsafe:chunk-read_16bit             x y]   [error `run-time `[safe:chunk-read_16bit             type-check-failure]]]]
[defunk safe:chunk-read_16bit_signed           [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 1] [unsafe:chunk-length x]]]              [unsafe:chunk-read_16bit_signed      x y]   [error `run-time `[safe:chunk-read_16bit_signed      type-check-failure]]]]
[defunk safe:chunk-write_16bit_integer         [x y z] [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 1] [unsafe:chunk-length x]] [integer? z]] [unsafe:chunk-write_16bit_integer    x y z] [error `run-time `[safe:chunk-write_16bit            type-check-failure]]]]
[defunk safe:chunk-read_32bit                  [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 3] [unsafe:chunk-length x]]]              [unsafe:chunk-read_32bit             x y]   [error `run-time `[safe:chunk-read_32bit             type-check-failure]]]]
[defunk safe:chunk-read_32bit_signed           [x y]   [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 3] [unsafe:chunk-length x]]]              [unsafe:chunk-read_32bit_signed      x y]   [error `run-time `[safe:chunk-read_32bit_signed      type-check-failure]]]]
[defunk safe:chunk-write_32bit_integer         [x y z] [if [and [chunk? x] [integer? y] [or [unsafe:integer-equal_sign y 0] [unsafe:integer-greater_than y 0]] [unsafe:integer-less_than [unsafe:integer-add y 3] [unsafe:chunk-length x]] [integer? z]] [unsafe:chunk-write_32bit_integer    x y z] [error `run-time `[safe:chunk-write_32bit            type-check-failure]]]]
[defunk safe:chunk-new_compiled_from_funk      [x]     [if      [funk?  x]                                                                         [unsafe:chunk-new_compiled_from_funk x]     [error `run-time `[safe:chunk-new_compiled_from_funk type-check-failure]]]]

[defunk safe:hashtable-bin_num_power     [x]     [if [hashtable?  x] [unsafe:hashtable-bin_num_power     x]     [error `run-time `[safe:hashtable-bin_num_power     type-check-failure]]]]
[defunk safe:hashtable-bin_num_power-set [x y]   [if [hashtable?  x] [unsafe:hashtable-bin_num_power-set x y]   [error `run-time `[safe:hashtable-bin_num_power-set type-check-failure]]]]
[defunk safe:hashtable-bin_array         [x]     [if [hashtable?  x] [unsafe:hashtable-bin_array         x]     [error `run-time `[safe:hashtable-bin_array         type-check-failure]]]]
[defunk safe:hashtable-bin_array-set     [x y]   [if [hashtable?  x] [unsafe:hashtable-bin_array-set     x y]   [error `run-time `[safe:hashtable-bin_array-set     type-check-failure]]]]

[defunk safe:frame-var_hashtable         [x]     [if [frame?  x] [unsafe:frame-var_hashtable         x]     [error `run-time `[safe:frame-var_hashtable         type-check-failure]]]]
[defunk safe:frame-var_hashtable-set     [x y]   [if [frame?  x] [unsafe:frame-var_hashtable-set     x y]   [error `run-time `[safe:frame-var_hashtable-set     type-check-failure]]]]
[defunk safe:frame-funkvar_hashtable     [x]     [if [frame?  x] [unsafe:frame-funkvar_hashtable     x]     [error `run-time `[safe:frame-funkvar_hashtable     type-check-failure]]]]
[defunk safe:frame-funkvar_hashtable-set [x y]   [if [frame?  x] [unsafe:frame-funkvar_hashtable-set x y]   [error `run-time `[safe:frame-funkvar_hashtable-set type-check-failure]]]]

[defunk safe:environment-frame          [x]     [if [environment? x] [unsafe:environment-frame          x]     [error `run-time `[safe:environment-frame          type-check-failure]]]]
[defunk safe:environment-frame-set      [x y]   [if [environment? x] [unsafe:environment-frame-set      x y]   [error `run-time `[safe:environment-frame-set      type-check-failure]]]]
[defunk safe:environment-parent_env     [x]     [if [environment? x] [unsafe:environment-parent_env     x]     [error `run-time `[safe:environment-parent_env     type-check-failure]]]]
[defunk safe:environment-parent_env-set [x y]   [if [environment? x] [unsafe:environment-parent_env-set x y]   [error `run-time `[safe:environment-parent_env-set type-check-failure]]]]
[defunk safe:environment-desc           [x]     [if [environment? x] [unsafe:environment-desc           x]     [error `run-time `[safe:environment-desc           type-check-failure]]]]
[defunk safe:environment-desc-set       [x y]   [if [environment? x] [unsafe:environment-desc-set       x y]   [error `run-time `[safe:environment-desc-set       type-check-failure]]]]

[defunk safe:cfunk-name                 [x]     [if [cfunk?      x] [unsafe:cfunk-name                 x]     [error `run-time `[safe:cfunk-name             type-check-failure]]]]
[defunk safe:cfunk-name-set             [x y]   [if [cfunk?      x] [unsafe:cfunk-name-set             x y]   [error `run-time `[safe:cfunk-name-set         type-check-failure]]]]
[defunk safe:cfunk-args                 [x]     [if [cfunk?      x] [unsafe:cfunk-args                 x]     [error `run-time `[safe:cfunk-args             type-check-failure]]]]
[defunk safe:cfunk-args-set             [x y]   [if [cfunk?      x] [unsafe:cfunk-args-set             x y]   [error `run-time `[safe:cfunk-args-set         type-check-failure]]]]
[defunk safe:cfunk-cfunkptr             [x]     [if [cfunk?      x] [unsafe:cfunk-cfunkptr             x]     [error `run-time `[safe:cfunk-cfunkptr         type-check-failure]]]]
[defunk safe:cfunk-cfunkptr-set         [x y]   [if [cfunk?      x] [unsafe:cfunk-cfunkptr-set         x y]   [error `run-time `[safe:cfunk-cfunkptr-set     type-check-failure]]]]
[defunk safe:cfunk-env                  [x]     [if [cfunk?      x] [unsafe:cfunk-env                  x]     [error `run-time `[safe:cfunk-env              type-check-failure]]]]
[defunk safe:cfunk-env-set              [x y]   [if [cfunk?      x] [unsafe:cfunk-env-set              x y]   [error `run-time `[safe:cfunk-env-set          type-check-failure]]]]

[defunk safe:metrocfunk-name            [x]     [if [metrocfunk? x] [unsafe:metrocfunk-name            x]     [error `run-time `[safe:metrocfunk-name         type-check-failure]]]]
[defunk safe:metrocfunk-name-set        [x y]   [if [metrocfunk? x] [unsafe:metrocfunk-name-set        x y]   [error `run-time `[safe:metrocfunk-name-set     type-check-failure]]]]
[defunk safe:metrocfunk-args            [x]     [if [metrocfunk? x] [unsafe:metrocfunk-args            x]     [error `run-time `[safe:metrocfunk-args         type-check-failure]]]]
[defunk safe:metrocfunk-args-set        [x y]   [if [metrocfunk? x] [unsafe:metrocfunk-args-set        x y]   [error `run-time `[safe:metrocfunk-args-set     type-check-failure]]]]
[defunk safe:metrocfunk-cfunkptr        [x]     [if [metrocfunk? x] [unsafe:metrocfunk-cfunkptr        x]     [error `run-time `[safe:metrocfunk-cfunkptr     type-check-failure]]]]
[defunk safe:metrocfunk-cfunkptr-set    [x y]   [if [metrocfunk? x] [unsafe:metrocfunk-cfunkptr-set    x y]   [error `run-time `[safe:metrocfunk-cfunkptr-set type-check-failure]]]]
[defunk safe:metrocfunk-env             [x]     [if [metrocfunk? x] [unsafe:metrocfunk-env             x]     [error `run-time `[safe:metrocfunk-env          type-check-failure]]]]
[defunk safe:metrocfunk-env-set         [x y]   [if [metrocfunk? x] [unsafe:metrocfunk-env-set         x y]   [error `run-time `[safe:metrocfunk-env-set      type-check-failure]]]]

[defunk safe:funk-name                    [x]     [if [funk?       x] [unsafe:funk-name                    x]     [error `run-time `[safe:funk-name                    type-check-failure]]]]
[defunk safe:funk-name-set                [x y]   [if [funk?       x] [unsafe:funk-name-set                x y]   [error `run-time `[safe:funk-name-set                type-check-failure]]]]
[defunk safe:funk-body_bytecodes          [x]     [if [funk?       x] [unsafe:funk-body_bytecodes          x]     [error `run-time `[safe:funk-body_bytecodes          type-check-failure]]]]
[defunk safe:funk-body_bytecodes-set      [x y]   [if [funk?       x] [unsafe:funk-body_bytecodes-set      x y]   [error `run-time `[safe:funk-body_bytecodes-set      type-check-failure]]]]
[defunk safe:funk-args                    [x]     [if [funk?       x] [unsafe:funk-args                    x]     [error `run-time `[safe:funk-args                    type-check-failure]]]]
[defunk safe:funk-args-set                [x y]   [if [funk?       x] [unsafe:funk-args-set                x y]   [error `run-time `[safe:funk-args-set                type-check-failure]]]]
[defunk safe:funk-demetropolized_body     [x]     [if [funk?       x] [unsafe:funk-demetropolized_body     x]     [error `run-time `[safe:funk-demetropolized_body     type-check-failure]]]]
[defunk safe:funk-demetropolized_body-set [x y]   [if [funk?       x] [unsafe:funk-demetropolized_body-set x y]   [error `run-time `[safe:funk-demetropolized_body-set type-check-failure]]]]
[defunk safe:funk-body                    [x]     [if [funk?       x] [unsafe:funk-body                    x]     [error `run-time `[safe:funk-body                    type-check-failure]]]]
[defunk safe:funk-body-set                [x y]   [if [funk?       x] [unsafe:funk-body-set                x y]   [error `run-time `[safe:funk-body-set                type-check-failure]]]]
[defunk safe:funk-env                     [x]     [if [funk?       x] [unsafe:funk-env                     x]     [error `run-time `[safe:funk-env                     type-check-failure]]]]
[defunk safe:funk-env-set                 [x y]   [if [funk?       x] [unsafe:funk-env-set                 x y]   [error `run-time `[safe:funk-env-set                 type-check-failure]]]]
[defunk safe:funk-machine_code            [x]     [if [funk?       x] [unsafe:funk-machine_code            x]     [error `run-time `[safe:funk-machine_code            type-check-failure]]]]
[defunk safe:funk-machine_code-set        [x y]   [if [funk?       x] [unsafe:funk-machine_code-set        x y]   [error `run-time `[safe:funk-machine_code-set        type-check-failure]]]]

[defunk safe:metro-name                    [x]     [if [metro? x] [unsafe:metro-name                    x]     [error `run-time `[safe:metro-name                    type-check-failure]]]]
[defunk safe:metro-name-set                [x y]   [if [metro? x] [unsafe:metro-name-set                x y]   [error `run-time `[safe:metro-name-set                type-check-failure]]]]
[defunk safe:metro-body_bytecodes          [x]     [if [metro? x] [unsafe:metro-body_bytecodes          x]     [error `run-time `[safe:metro-body_bytecodes          type-check-failure]]]]
[defunk safe:metro-body_bytecodes-set      [x y]   [if [metro? x] [unsafe:metro-body_bytecodes-set      x y]   [error `run-time `[safe:metro-body_bytecodes-set      type-check-failure]]]]
[defunk safe:metro-args                    [x]     [if [metro? x] [unsafe:metro-args                    x]     [error `run-time `[safe:metro-args                    type-check-failure]]]]
[defunk safe:metro-args-set                [x y]   [if [metro? x] [unsafe:metro-args-set                x y]   [error `run-time `[safe:metro-args-set                type-check-failure]]]]
[defunk safe:metro-demetropolized_body     [x]     [if [metro? x] [unsafe:metro-demetropolized_body     x]     [error `run-time `[safe:metro-demetropolized_body     type-check-failure]]]]
[defunk safe:metro-demetropolized_body-set [x y]   [if [metro? x] [unsafe:metro-demetropolized_body-set x y]   [error `run-time `[safe:metro-demetropolized_body-set type-check-failure]]]]
[defunk safe:metro-body                    [x]     [if [metro? x] [unsafe:metro-body                    x]     [error `run-time `[safe:metro-body                    type-check-failure]]]]
[defunk safe:metro-body-set                [x y]   [if [metro? x] [unsafe:metro-body-set                x y]   [error `run-time `[safe:metro-body-set                type-check-failure]]]]
[defunk safe:metro-env                     [x]     [if [metro? x] [unsafe:metro-env                     x]     [error `run-time `[safe:metro-env                     type-check-failure]]]]
[defunk safe:metro-env-set                 [x y]   [if [metro? x] [unsafe:metro-env-set                 x y]   [error `run-time `[safe:metro-env-set                 type-check-failure]]]]
[defunk safe:metro-machine_code            [x]     [if [metro? x] [unsafe:metro-machine_code            x]     [error `run-time `[safe:metro-machine_code            type-check-failure]]]]
[defunk safe:metro-machine_code-set        [x y]   [if [metro? x] [unsafe:metro-machine_code-set        x y]   [error `run-time `[safe:metro-machine_code-set        type-check-failure]]]]

[defunk safe:exception-tag              [x]     [if [exception?  x] [unsafe:exception-tag              x]     [error `run-time `[safe:exception-tag       type-check-failure]]]]
[defunk safe:exception-tag-set          [x y]   [if [exception?  x] [unsafe:exception-tag-set          x y]   [error `run-time `[safe:exception-tag-set   type-check-failure]]]]
[defunk safe:exception-value            [x]     [if [exception?  x] [unsafe:exception-value            x]     [error `run-time `[safe:exception-value     type-check-failure]]]]
[defunk safe:exception-value-set        [x y]   [if [exception?  x] [unsafe:exception-value-set        x y]   [error `run-time `[safe:exception-value-set type-check-failure]]]]

[defunk safe:circular_buffer-remove [x]   [if [circular_buffer? x] [unsafe:circular_buffer-remove x]   [error `run-time `[safe:circular_buffer-remove type-check-failure]]]]
[defunk safe:circular_buffer-add    [x y] [if [circular_buffer? x] [unsafe:circular_buffer-add    x y] [error `run-time `[safe:circular_buffer-add    type-check-failure]]]]

[defunk safe:bytecode-command           [x]     [if [bytecode?   x] [unsafe:bytecode-command           x]     [error `run-time `[safe:bytecode-command     type-check-failure]]]]
[defunk safe:bytecode-command-set       [x y]   [if [bytecode?   x] [unsafe:bytecode-command-set       x y]   [error `run-time `[safe:bytecode-command-set type-check-failure]]]]
[defunk safe:bytecode-arg0              [x]     [if [bytecode?   x] [unsafe:bytecode-arg0              x]     [error `run-time `[safe:bytecode-arg0        type-check-failure]]]]
[defunk safe:bytecode-arg0-set          [x y]   [if [bytecode?   x] [unsafe:bytecode-arg0-set          x y]   [error `run-time `[safe:bytecode-arg0-set    type-check-failure]]]]
[defunk safe:bytecode-arg1              [x]     [if [bytecode?   x] [unsafe:bytecode-arg1              x]     [error `run-time `[safe:bytecode-arg1        type-check-failure]]]]
[defunk safe:bytecode-arg1-set          [x y]   [if [bytecode?   x] [unsafe:bytecode-arg1-set          x y]   [error `run-time `[safe:bytecode-arg1-set    type-check-failure]]]]

[defunk safe:thread-program_counter        [x]   [if [thread? x] [unsafe:thread-program_counter        x]   [error `run-time `[safe:thread-program_counter        type-check-failure]]]]
[defunk safe:thread-program_counter-set    [x y] [if [thread? x] [unsafe:thread-program_counter-set    x y] [error `run-time `[safe:thread-program_counter-set    type-check-failure]]]]
[defunk safe:thread-stack                  [x]   [if [thread? x] [unsafe:thread-stack                  x]   [error `run-time `[safe:thread-stack                  type-check-failure]]]]
[defunk safe:thread-stack-set              [x y] [if [thread? x] [unsafe:thread-stack-set              x y] [error `run-time `[safe:thread-stack-set              type-check-failure]]]]
[defunk safe:thread-iter                   [x]   [if [thread? x] [unsafe:thread-iter                   x]   [error `run-time `[safe:thread-iter                   type-check-failure]]]]
[defunk safe:thread-iter-set               [x y] [if [thread? x] [unsafe:thread-iter-set               x y] [error `run-time `[safe:thread-iter-set               type-check-failure]]]]
[defunk safe:thread-env                    [x]   [if [thread? x] [unsafe:thread-env                    x]   [error `run-time `[safe:thread-env                    type-check-failure]]]]
[defunk safe:thread-env-set                [x y] [if [thread? x] [unsafe:thread-env-set                x y] [error `run-time `[safe:thread-env-set                type-check-failure]]]]
[defunk safe:thread-args                   [x]   [if [thread? x] [unsafe:thread-args                   x]   [error `run-time `[safe:thread-args                   type-check-failure]]]]
[defunk safe:thread-args-set               [x y] [if [thread? x] [unsafe:thread-args-set               x y] [error `run-time `[safe:thread-args-set               type-check-failure]]]]
[defunk safe:thread-return                 [x]   [if [thread? x] [unsafe:thread-return                 x]   [error `run-time `[safe:thread-return                 type-check-failure]]]]
[defunk safe:thread-return-set             [x y] [if [thread? x] [unsafe:thread-return-set             x y] [error `run-time `[safe:thread-return-set             type-check-failure]]]]
[defunk safe:thread-value                  [x]   [if [thread? x] [unsafe:thread-value                  x]   [error `run-time `[safe:thread-value                  type-check-failure]]]]
[defunk safe:thread-value-set              [x y] [if [thread? x] [unsafe:thread-value-set              x y] [error `run-time `[safe:thread-value-set              type-check-failure]]]]
[defunk safe:thread-trace                  [x]   [if [thread? x] [unsafe:thread-trace                  x]   [error `run-time `[safe:thread-trace                  type-check-failure]]]]
[defunk safe:thread-trace-set              [x y] [if [thread? x] [unsafe:thread-trace-set              x y] [error `run-time `[safe:thread-trace-set              type-check-failure]]]]
[defunk safe:thread-critics                [x]   [if [thread? x] [unsafe:thread-critics                x]   [error `run-time `[safe:thread-critics                type-check-failure]]]]
[defunk safe:thread-critics-set            [x y] [if [thread? x] [unsafe:thread-critics-set            x y] [error `run-time `[safe:thread-critics-set            type-check-failure]]]]
[defunk safe:thread-context                [x]   [if [thread? x] [unsafe:thread-context                x]   [error `run-time `[safe:thread-context                type-check-failure]]]]
[defunk safe:thread-context-set            [x y] [if [thread? x] [unsafe:thread-context-set            x y] [error `run-time `[safe:thread-context-set            type-check-failure]]]]
[defunk safe:thread-keep_undead            [x]   [if [thread? x] [unsafe:thread-keep_undead            x]   [error `run-time `[safe:thread-keep_undead            type-check-failure]]]]
[defunk safe:thread-keep_undead-set        [x y] [if [thread? x] [unsafe:thread-keep_undead-set        x y] [error `run-time `[safe:thread-keep_undead-set        type-check-failure]]]]
[defunk safe:thread-parent_thread          [x]   [if [thread? x] [unsafe:thread-parent_thread          x]   [error `run-time `[safe:thread-parent_thread          type-check-failure]]]]
[defunk safe:thread-parent_thread-set      [x y] [if [thread? x] [unsafe:thread-parent_thread-set      x y] [error `run-time `[safe:thread-parent_thread-set      type-check-failure]]]]
[defunk safe:thread-parent_env             [x]   [if [thread? x] [unsafe:thread-parent_env             x]   [error `run-time `[safe:thread-parent_env             type-check-failure]]]]
[defunk safe:thread-parent_env-set         [x y] [if [thread? x] [unsafe:thread-parent_env-set         x y] [error `run-time `[safe:thread-parent_env-set         type-check-failure]]]]
[defunk safe:thread-execute_mutex          [x]   [if [thread? x] [unsafe:thread-execute_mutex          x]   [error `run-time `[safe:thread-execute_mutex          type-check-failure]]]]
[defunk safe:thread-execute_mutex-set      [x y] [if [thread? x] [unsafe:thread-execute_mutex-set      x y] [error `run-time `[safe:thread-execute_mutex-set      type-check-failure]]]]
[defunk safe:thread-last_executed_time     [x]   [if [thread? x] [unsafe:thread-last_executed_time     x]   [error `run-time `[safe:thread-last_executed_time     type-check-failure]]]]
[defunk safe:thread-last_executed_time-set [x y] [if [thread? x] [unsafe:thread-last_executed_time-set x y] [error `run-time `[safe:thread-last_executed_time-set type-check-failure]]]]
[defunk safe:thread-complete?              [x]   [if [thread? x] [unsafe:thread-complete?              x]   [error `run-time `[safe:thread-complete?              type-check-failure]]]]

[defunk safe:cause-bytecode_tracing_on     [x]   [if [cause? x] [unsafe:cause-bytecode_tracing_on     x]   [error `run-time `[safe:cause-bytecode_tracing_on     type-check-failure]]]]
[defunk safe:cause-bytecode_tracing_on-set [x y] [if [cause? x] [unsafe:cause-bytecode_tracing_on-set x y] [error `run-time `[safe:cause-bytecode_tracing_on-set type-check-failure]]]]
[defunk safe:cause-memory_tracing_on       [x]   [if [cause? x] [unsafe:cause-memory_tracing_on       x]   [error `run-time `[safe:cause-memory_tracing_on       type-check-failure]]]]
[defunk safe:cause-memory_tracing_on-set   [x y] [if [cause? x] [unsafe:cause-memory_tracing_on-set   x y] [error `run-time `[safe:cause-memory_tracing_on-set   type-check-failure]]]]
[defunk safe:cause-subscribers_mutex       [x]   [if [cause? x] [unsafe:cause-subscribers_mutex       x]   [error `run-time `[safe:cause-subscribers_mutex       type-check-failure]]]]
[defunk safe:cause-subscribers_mutex-set   [x y] [if [cause? x] [unsafe:cause-subscribers_mutex-set   x y] [error `run-time `[safe:cause-subscribers_mutex-set   type-check-failure]]]]
[defunk safe:cause-subscribers             [x]   [if [cause? x] [unsafe:cause-subscribers             x]   [error `run-time `[safe:cause-subscribers             type-check-failure]]]]
[defunk safe:cause-subscribers-set         [x y] [if [cause? x] [unsafe:cause-subscribers-set         x y] [error `run-time `[safe:cause-subscribers-set         type-check-failure]]]]
[defunk safe:cause-imagination_stack       [x]   [if [cause? x] [unsafe:cause-imagination_stack       x]   [error `run-time `[safe:cause-imagination_stack       type-check-failure]]]]
[defunk safe:cause-imagination_stack-set   [x y] [if [cause? x] [unsafe:cause-imagination_stack-set   x y] [error `run-time `[safe:cause-imagination_stack-set   type-check-failure]]]]
[defunk safe:cause-event_buffer_first      [x]   [if [cause? x] [unsafe:cause-event_buffer_first      x]   [error `run-time `[safe:cause-event_buffer_first      type-check-failure]]]]
[defunk safe:cause-event_buffer_first-set  [x y] [if [cause? x] [unsafe:cause-event_buffer_first-set  x y] [error `run-time `[safe:cause-event_buffer_first-set  type-check-failure]]]]
[defunk safe:cause-event_buffer_last       [x]   [if [cause? x] [unsafe:cause-event_buffer_last       x]   [error `run-time `[safe:cause-event_buffer_last       type-check-failure]]]]
[defunk safe:cause-event_buffer_last-set   [x y] [if [cause? x] [unsafe:cause-event_buffer_last-set   x y] [error `run-time `[safe:cause-event_buffer_last-set   type-check-failure]]]]

[defunk safe:transframe-symbol_old_news     [x]   [if [transframe? x] [unsafe:transframe-symbol_old_news     x]   [error `run-time `[safe:transframe-symbol_old_news     type-check-failure]]]]
[defunk safe:transframe-symbol_old_news-set [x y] [if [transframe? x] [unsafe:transframe-symbol_old_news-set x y] [error `run-time `[safe:transframe-symbol_old_news-set type-check-failure]]]]

[defunk safe:bug-type     [x]   [if [bug? x] [unsafe:bug-type     x]   [error `run-time `[safe:bug-type     type-check-failure]]]]
[defunk safe:bug-type-set [x y] [if [bug? x] [unsafe:bug-type-set x y] [error `run-time `[safe:bug-type-set type-check-failure]]]]

[defunk safe:size_2d-x     [x]   [if [size_2d? x] [unsafe:size_2d-x     x]   [error `run-time `[safe:size_2d-x     type-check-failure]]]]
[defunk safe:size_2d-x-set [x y] [if [size_2d? x] [unsafe:size_2d-x-set x y] [error `run-time `[safe:size_2d-x-set type-check-failure]]]]
[defunk safe:size_2d-y     [x]   [if [size_2d? x] [unsafe:size_2d-y     x]   [error `run-time `[safe:size_2d-y     type-check-failure]]]]
[defunk safe:size_2d-y-set [x y] [if [size_2d? x] [unsafe:size_2d-y-set x y] [error `run-time `[safe:size_2d-y-set type-check-failure]]]]

[defunk safe:matrix-xres                [x]     [if [matrix?     x] [unsafe:matrix-xres                x]     [error `run-time `[safe:matrix-xres                type-check-failure]]]]
[defunk safe:matrix-xres-set            [x y]   [if [matrix?     x] [unsafe:matrix-xres-set            x y]   [error `run-time `[safe:matrix-xres-set            type-check-failure]]]]
[defunk safe:matrix-yres                [x]     [if [matrix?     x] [unsafe:matrix-yres                x]     [error `run-time `[safe:matrix-yres                type-check-failure]]]]
[defunk safe:matrix-yres-set            [x y]   [if [matrix?     x] [unsafe:matrix-yres-set            x y]   [error `run-time `[safe:matrix-yres-set            type-check-failure]]]]
[defunk safe:matrix-data                [x]     [if [matrix?     x] [unsafe:matrix-data                x]     [error `run-time `[safe:matrix-data                type-check-failure]]]]
[defunk safe:matrix-data-set            [x y]   [if [matrix?     x] [unsafe:matrix-data-set            x y]   [error `run-time `[safe:matrix-data-set            type-check-failure]]]]

[defunk safe:bytecode_event-bytecode     [x]   [if [bytecode_event? x] [unsafe:bytecode_event-bytecode     x]   [error `run-time `[safe:bytecode_event-bytecode     type-check-failure]]]]
[defunk safe:bytecode_event-bytecode-set [x y] [if [bytecode_event? x] [unsafe:bytecode_event-bytecode-set x y] [error `run-time `[safe:bytecode_event-bytecode-set type-check-failure]]]]
[defunk safe:bytecode_event-context      [x]   [if [bytecode_event? x] [unsafe:bytecode_event-context      x]   [error `run-time `[safe:bytecode_event-context      type-check-failure]]]]
[defunk safe:bytecode_event-context-set  [x y] [if [bytecode_event? x] [unsafe:bytecode_event-context-set  x y] [error `run-time `[safe:bytecode_event-context-set  type-check-failure]]]]



'we need a technique for this variable to be have local scope!  (compiler metros?)'
[globalize *compile-type-checking* nil]

[defmetro integer-to_double          [x]     `[,[if *compile-type-checking* `safe:integer-to_double          `unsafe:integer-to_double]          ,x]]
[defmetro integer-to_float           [x]     `[,[if *compile-type-checking* `safe:integer-to_float           `unsafe:integer-to_float]           ,x]]

[defmetro double-to_integer          [x]     `[,[if *compile-type-checking* `safe:double-to_integer          `unsafe:double-to_integer]          ,x]]
[defmetro double-to_float            [x]     `[,[if *compile-type-checking* `safe:double-to_float            `unsafe:double-to_float]            ,x]]
[defmetro double-add_double          [x y]   `[,[if *compile-type-checking* `safe:double-add_double          `unsafe:double-add_double]          ,x ,y]]
[defmetro double-subtract_double     [x y]   `[,[if *compile-type-checking* `safe:double-subtract_double     `unsafe:double-subtract_double]     ,x ,y]]
[defmetro double-divide_by_double    [x y]   `[,[if *compile-type-checking* `safe:double-divide_by_double    `unsafe:double-divide_by_double]    ,x ,y]]
[defmetro double-add_integer         [x y]   `[,[if *compile-type-checking* `safe:double-add_integer         `unsafe:double-add_integer]         ,x ,y]]
[defmetro double-subtract_integer    [x y]   `[,[if *compile-type-checking* `safe:double-subtract_integer    `unsafe:double-subtract_integer]    ,x ,y]]
[defmetro double-divide_by_integer   [x y]   `[,[if *compile-type-checking* `safe:double-divide_by_integer   `unsafe:double-divide_by_integer]   ,x ,y]]

[defmetro integer-greater_than      [x y] `[,[if *compile-type-checking* `safe:integer-greater_than      `unsafe:integer-greater_than]      ,x ,y]]
[defmetro integer-less_than         [x y] `[,[if *compile-type-checking* `safe:integer-less_than         `unsafe:integer-less_than]         ,x ,y]]
[defmetro integer-add               [x y] `[,[if *compile-type-checking* `safe:integer-add               `unsafe:integer-add]               ,x ,y]]
[defmetro integer-subtract          [x y] `[,[if *compile-type-checking* `safe:integer-subtract          `unsafe:integer-subtract]          ,x ,y]]
[defmetro integer-multiply          [x y] `[,[if *compile-type-checking* `safe:integer-multiply          `unsafe:integer-multiply]          ,x ,y]]
[defmetro integer-add_double        [x y] `[,[if *compile-type-checking* `safe:integer-add_double        `unsafe:integer-add_double]        ,x ,y]]
[defmetro integer-subtract_double   [x y] `[,[if *compile-type-checking* `safe:integer-subtract_double   `unsafe:integer-subtract_double]   ,x ,y]]
[defmetro integer-divide_by_integer [x y] `[,[if *compile-type-checking* `safe:integer-divide_by_integer `unsafe:integer-divide_by_integer] ,x ,y]]
[defmetro integer-divide_by_double  [x y] `[,[if *compile-type-checking* `safe:integer-divide_by_double  `unsafe:integer-divide_by_double]  ,x ,y]]
[defmetro integer-equal_sign        [x y] `[,[if *compile-type-checking* `safe:integer-equal_sign        `unsafe:integer-equal_sign]        ,x ,y]]
[defmetro integer-not_equal_sign    [x y] `[,[if *compile-type-checking* `safe:integer-not_equal_sign    `unsafe:integer-not_equal_sign]    ,x ,y]]
[defmetro integer-bitshift_left     [x y] `[,[if *compile-type-checking* `safe:integer-bitshift_left     `unsafe:integer-bitshift_left]     ,x ,y]]
[defmetro integer-bitshift_right    [x y] `[,[if *compile-type-checking* `safe:integer-bitshift_right    `unsafe:integer-bitshift_right]    ,x ,y]]
[defmetro integer-bit_and           [x y] `[,[if *compile-type-checking* `safe:integer-bit_and           `unsafe:integer-bit_and]           ,x ,y]]
[defmetro integer-bit_or            [x y] `[,[if *compile-type-checking* `safe:integer-bit_or            `unsafe:integer-bit_or]            ,x ,y]]
[defmetro integer-bit_xor           [x y] `[,[if *compile-type-checking* `safe:integer-bit_xor           `unsafe:integer-bit_xor]           ,x ,y]]
[defmetro integer-bit_not           [x]   `[,[if *compile-type-checking* `safe:integer-bit_not           `unsafe:integer-bit_not]           ,x]]
[defmetro pointer-greater_than      [x y] `[,[if *compile-type-checking* `safe:pointer-greater_than      `unsafe:pointer-greater_than]      ,x ,y]]
[defmetro pointer-less_than         [x y] `[,[if *compile-type-checking* `safe:pointer-less_than         `unsafe:pointer-less_than]         ,x ,y]]
[defmetro pointer-add_integer       [x y] `[,[if *compile-type-checking* `safe:pointer-add_integer       `unsafe:pointer-add_integer]       ,x ,y]]
[defmetro pointer-subtract          [x y] `[,[if *compile-type-checking* `safe:pointer-subtract          `unsafe:pointer-subtract]          ,x ,y]]
[defmetro pointer-equal_sign        [x y] `[,[if *compile-type-checking* `safe:pointer-equal_sign        `unsafe:pointer-equal_sign]        ,x ,y]]
[defmetro pointer-not_equal_sign    [x y] `[,[if *compile-type-checking* `safe:pointer-not_equal_sign    `unsafe:pointer-not_equal_sign]    ,x ,y]]

[defmetro double-to_integer        [x]   `[,[if *compile-type-checking* `safe:double-to_integer        `unsafe:double-to_integer]        ,x]]
[defmetro double-to_float          [x]   `[,[if *compile-type-checking* `safe:double-to_float          `unsafe:double-to_float]          ,x]]
[defmetro double-add_double        [x y] `[,[if *compile-type-checking* `safe:double-add_double        `unsafe:double-add_double]        ,x ,y]]
[defmetro double-subtract_double   [x y] `[,[if *compile-type-checking* `safe:double-subtract_double   `unsafe:double-subtract_double]   ,x ,y]]
[defmetro double-divide_by_double  [x y] `[,[if *compile-type-checking* `safe:double-divide_by_double  `unsafe:double-divide_by_double]  ,x ,y]]
[defmetro double-add_integer       [x y] `[,[if *compile-type-checking* `safe:double-add_integer       `unsafe:double-add_integer]       ,x ,y]]
[defmetro double-subtract_integer  [x y] `[,[if *compile-type-checking* `safe:double-subtract_integer  `unsafe:double-subtract_integer]  ,x ,y]]
[defmetro double-divide_by_integer [x y] `[,[if *compile-type-checking* `safe:double-divide_by_integer `unsafe:double-divide_by_integer] ,x ,y]]

[defmetro float-to_integer           [x]     `[,[if *compile-type-checking* `safe:float-to_integer           `unsafe:float-to_integer]           ,x]]
[defmetro float-to_double            [x]     `[,[if *compile-type-checking* `safe:float-to_double            `unsafe:float-to_double]            ,x]]

[defmetro deref-pointer              [x]     `[,[if *compile-type-checking* `safe:deref-pointer              `unsafe:deref-pointer]              ,x]]

[defmetro cons-car                   [x]     `[,[if *compile-type-checking* `safe:cons-car                   `unsafe:cons-car]                   ,x]]
[defmetro cons-car-set               [x y]   `[,[if *compile-type-checking* `safe:cons-car-set               `unsafe:cons-car-set]               ,x ,y]]
[defmetro cons-cdr                   [x]     `[,[if *compile-type-checking* `safe:cons-cdr                   `unsafe:cons-cdr]                   ,x]]
[defmetro cons-cdr-set               [x y]   `[,[if *compile-type-checking* `safe:cons-cdr-set               `unsafe:cons-cdr-set]               ,x ,y]]

[defmetro place-thing     [x]   `[,[if *compile-type-checking* `safe:place-thing     `unsafe:place-thing]     ,x]]
[defmetro place-thing-set [x y] `[,[if *compile-type-checking* `safe:place-thing-set `unsafe:place-thing-set] ,x ,y]]

[defmetro doublelink-prev      [x]   `[,[if *compile-type-checking* `safe:doublelink-prev      `unsafe:doublelink-prev]      ,x]]
[defmetro doublelink-prev-set  [x y] `[,[if *compile-type-checking* `safe:doublelink-prev-set  `unsafe:doublelink-prev-set]  ,x ,y]]
[defmetro doublelink-next      [x]   `[,[if *compile-type-checking* `safe:doublelink-next      `unsafe:doublelink-next]      ,x]]
[defmetro doublelink-next-set  [x y] `[,[if *compile-type-checking* `safe:doublelink-next-set  `unsafe:doublelink-next-set]  ,x ,y]]
[defmetro doublelink-value     [x]   `[,[if *compile-type-checking* `safe:doublelink-value     `unsafe:doublelink-value]     ,x]]
[defmetro doublelink-value-set [x y] `[,[if *compile-type-checking* `safe:doublelink-value-set `unsafe:doublelink-value-set] ,x ,y]]

[defmetro string-length                [x]     `[,[if *compile-type-checking* `safe:string-length                `unsafe:string-length]                ,x]]
[defmetro string-elt                   [x y]   `[,[if *compile-type-checking* `safe:string-elt                   `unsafe:string-elt]                   ,x ,y]]
[defmetro string-equals                [x y]   `[,[if *compile-type-checking* `safe:string-equals                `unsafe:string-equals]                ,x ,y]]
[defmetro string-to_new_raw_c_string   [x]     `[,[if *compile-type-checking* `safe:string-to_new_raw_c_string   `unsafe:string-to_new_raw_c_string]   ,x]]
[defmetro string-new_from_raw_c_string [x]     `[,[if *compile-type-checking* `safe:string-new_from_raw_c_string `unsafe:string-new_from_raw_c_string] ,x]]

[defmetro array-length            [x]     `[,[if *compile-type-checking* `safe:array-length                    `unsafe:array-length]                    ,x]]
[defmetro array-elt-var_index     [x y]   `[,[if *compile-type-checking* `safe:array-elt                       `unsafe:array-elt]                       ,x ,y]]
[defmetro array-elt-set-var_index [x y z] `[,[if *compile-type-checking* `safe:array-elt-set                   `unsafe:array-elt-set]                   ,x ,y ,z]]

[defmetro array-elt [x y]
  [if [integer? y]
      `[rawcode ,x
		 [bytecode reg_array-elt value ,y nil]]
    `[array-elt-var_index ,x ,y]]]

[defmetro array-elt-set [x y z]
  [if [integer? y]
      `[rawcode ,x
		 [bytecode copy value iter]
		 ,z
		  [bytecode reg_array-elt-set iter ,y nil]]
    `[array-elt-set-var_index ,x ,y ,z]]]

[defmetro array-elt-tracing_on            [x y]   `[,[if *compile-type-checking* `safe:array-elt-tracing_on            `unsafe:array-elt-tracing_on]            ,x ,y]]
[defmetro array-elt-tracing_on-set        [x y z] `[,[if *compile-type-checking* `safe:array-elt-tracing_on-set        `unsafe:array-elt-tracing_on-set]        ,x ,y ,z]]
[defmetro array-elt-trace                 [x y]   `[,[if *compile-type-checking* `safe:array-elt-trace                 `unsafe:array-elt-trace]                 ,x ,y]]
[defmetro array-elt-trace-set             [x y z] `[,[if *compile-type-checking* `safe:array-elt-trace-set             `unsafe:array-elt-trace-set]             ,x ,y ,z]]
[defmetro array-elt-imagination_frame     [x y]   `[,[if *compile-type-checking* `safe:array-elt-imagination_frame     `unsafe:array-elt-imagination_frame]     ,x ,y]]
[defmetro array-elt-imagination_frame-set [x y z] `[,[if *compile-type-checking* `safe:array-elt-imagination_frame-set `unsafe:array-elt-imagination_frame-set] ,x ,y ,z]]

[defmetro chunk-length                 [x]     `[,[if *compile-type-checking* `safe:chunk-length                 `unsafe:chunk-length]                 ,x]]
[defmetro chunk-bytes                  [x]     `[,[if *compile-type-checking* `safe:chunk-bytes                  `unsafe:chunk-bytes]                  ,x]]
[defmetro chunk-copy                   [x y]   `[,[if *compile-type-checking* `safe:chunk-copy                   `unsafe:chunk-copy]                   ,x ,y]]
[defmetro chunk-read_8bit              [x y]   `[,[if *compile-type-checking* `safe:chunk-read_8bit              `unsafe:chunk-read_8bit]              ,x ,y]]
[defmetro chunk-read_8bit_signed       [x y]   `[,[if *compile-type-checking* `safe:chunk-read_8bit_signed       `unsafe:chunk-read_8bit_signed]       ,x ,y]]
[defmetro chunk-write_8bit_integer     [x y z] `[,[if *compile-type-checking* `safe:chunk-write_8bit_integer     `unsafe:chunk-write_8bit_integer]     ,x ,y ,z]]
[defmetro chunk-read_16bit             [x y]   `[,[if *compile-type-checking* `safe:chunk-read_16bit             `unsafe:chunk-read_16bit]             ,x ,y]]
[defmetro chunk-read_16bit_signed      [x y]   `[,[if *compile-type-checking* `safe:chunk-read_16bit_signed      `unsafe:chunk-read_16bit_signed]      ,x ,y]]
[defmetro chunk-write_16bit_integer    [x y z] `[,[if *compile-type-checking* `safe:chunk-write_16bit_integer    `unsafe:chunk-write_16bit_integer]    ,x ,y ,z]]
[defmetro chunk-read_32bit             [x y]   `[,[if *compile-type-checking* `safe:chunk-read_32bit             `unsafe:chunk-read_32bit]             ,x ,y]]
[defmetro chunk-read_32bit_signed      [x y]   `[,[if *compile-type-checking* `safe:chunk-read_32bit_signed      `unsafe:chunk-read_32bit_signed]      ,x ,y]]
[defmetro chunk-write_32bit_integer    [x y z] `[,[if *compile-type-checking* `safe:chunk-write_32bit_integer    `unsafe:chunk-write_32bit_integer]    ,x ,y ,z]]
[defmetro chunk-new_compiled_from_funk [x]     `[,[if *compile-type-checking* `safe:chunk-new_compiled_from_funk `unsafe:chunk-new_compiled_from_funk] ,x]]

[defmetro hashtable-bin_num_power     [x]     `[,[if *compile-type-checking* `safe:hashtable-bin_num_power     `unsafe:exception-bin_num_power]     ,x]]
[defmetro hashtable-bin_num_power-set [x y]   `[,[if *compile-type-checking* `safe:hashtable-bin_num_power-set `unsafe:exception-bin_num_power-set] ,x ,y]]
[defmetro hashtable-bin_array         [x]     `[,[if *compile-type-checking* `safe:hashtable-bin_array         `unsafe:exception-bin_array]         ,x]]
[defmetro hashtable-bin_array-set     [x y]   `[,[if *compile-type-checking* `safe:hashtable-bin_array-set     `unsafe:exception-bin_array-set]     ,x ,y]]

[defmetro frame-var_hashtable         [x]     `[,[if *compile-type-checking* `safe:frame-var_hashtable         `unsafe:frame-var_hashtable]         ,x]]
[defmetro frame-var_hashtable-set     [x y]   `[,[if *compile-type-checking* `safe:frame-var_hashtable-set     `unsafe:frame-var_hashtable-set]     ,x ,y]]
[defmetro frame-funkvar_hashtable     [x]     `[,[if *compile-type-checking* `safe:frame-funkvar_hashtable     `unsafe:frame-funkvar_hashtable]     ,x]]
[defmetro frame-funkvar_hashtable-set [x y]   `[,[if *compile-type-checking* `safe:frame-funkvar_hashtable-set `unsafe:frame-funkvar_hashtable-set] ,x ,y]]

[defmetro environment-frame          [x]     `[,[if *compile-type-checking* `safe:environment-frame          `unsafe:environment-frame]          ,x]]
[defmetro environment-frame-set      [x y]   `[,[if *compile-type-checking* `safe:environment-frame-set      `unsafe:environment-frame-set]      ,x ,y]]
[defmetro environment-parent_env     [x]     `[,[if *compile-type-checking* `safe:environment-parent_env     `unsafe:environment-parent_env]     ,x]]
[defmetro environment-parent_env-set [x y]   `[,[if *compile-type-checking* `safe:environment-parent_env-set `unsafe:environment-parent_env-set] ,x ,y]]
[defmetro environment-desc           [x]     `[,[if *compile-type-checking* `safe:environment-desc           `unsafe:environment-desc]           ,x]]
[defmetro environment-desc-set       [x y]   `[,[if *compile-type-checking* `safe:environment-desc-set       `unsafe:environment-desc-set]       ,x ,y]]

[defmetro cfunk-name                 [x]     `[,[if *compile-type-checking* `safe:cfunk-name                 `unsafe:cfunk-name]                 ,x]]
[defmetro cfunk-name-set             [x y]   `[,[if *compile-type-checking* `safe:cfunk-name-set             `unsafe:cfunk-name-set]             ,x ,y]]
[defmetro cfunk-args                 [x]     `[,[if *compile-type-checking* `safe:cfunk-args                 `unsafe:cfunk-args]                 ,x]]
[defmetro cfunk-args-set             [x y]   `[,[if *compile-type-checking* `safe:cfunk-args-set             `unsafe:cfunk-args-set]             ,x ,y]]
[defmetro cfunk-cfunkptr             [x]     `[,[if *compile-type-checking* `safe:cfunk-cfunkptr             `unsafe:cfunk-cfunkptr]             ,x]]
[defmetro cfunk-cfunkptr-set         [x y]   `[,[if *compile-type-checking* `safe:cfunk-cfunkptr-set         `unsafe:cfunk-cfunkptr-set]         ,x ,y]]
[defmetro cfunk-env                  [x]     `[,[if *compile-type-checking* `safe:cfunk-env                  `unsafe:cfunk-env]                  ,x]]
[defmetro cfunk-env-set              [x y]   `[,[if *compile-type-checking* `safe:cfunk-env-set              `unsafe:cfunk-env-set]              ,x ,y]]

[defmetro metrocfunk-name            [x]     `[,[if *compile-type-checking* `safe:metrocfunk-name            `unsafe:metrocfunk-name]            ,x]]
[defmetro metrocfunk-name-set        [x y]   `[,[if *compile-type-checking* `safe:metrocfunk-name-set        `unsafe:metrocfunk-name-set]        ,x ,y]]
[defmetro metrocfunk-args            [x]     `[,[if *compile-type-checking* `safe:metrocfunk-args            `unsafe:metrocfunk-args]            ,x]]
[defmetro metrocfunk-args-set        [x y]   `[,[if *compile-type-checking* `safe:metrocfunk-args-set        `unsafe:metrocfunk-args-set]        ,x ,y]]
[defmetro metrocfunk-cfunkptr        [x]     `[,[if *compile-type-checking* `safe:metrocfunk-cfunkptr        `unsafe:metrocfunk-cfunkptr]        ,x]]
[defmetro metrocfunk-cfunkptr-set    [x y]   `[,[if *compile-type-checking* `safe:metrocfunk-cfunkptr-set    `unsafe:metrocfunk-cfunkptr-set]    ,x ,y]]
[defmetro metrocfunk-env             [x]     `[,[if *compile-type-checking* `safe:metrocfunk-env             `unsafe:metrocfunk-env]             ,x]]
[defmetro metrocfunk-env-set         [x y]   `[,[if *compile-type-checking* `safe:metrocfunk-env-set         `unsafe:metrocfunk-env-set]         ,x ,y]]

[defmetro funk-name                    [x]     `[,[if *compile-type-checking* `safe:funk-name                    `unsafe:funk-name]                    ,x]]
[defmetro funk-name-set                [x y]   `[,[if *compile-type-checking* `safe:funk-name-set                `unsafe:funk-name-set]                ,x ,y]]
[defmetro funk-body_bytecodes          [x]     `[,[if *compile-type-checking* `safe:funk-body_bytecodes          `unsafe:funk-body_bytecodes]          ,x]]
[defmetro funk-body_bytecodes-set      [x y]   `[,[if *compile-type-checking* `safe:funk-body_bytecodes-set      `unsafe:funk-body_bytecodes-set]      ,x ,y]]
[defmetro funk-args                    [x]     `[,[if *compile-type-checking* `safe:funk-args                    `unsafe:funk-args]                    ,x]]
[defmetro funk-args-set                [x y]   `[,[if *compile-type-checking* `safe:funk-args-set                `unsafe:funk-args-set]                ,x ,y]]
[defmetro funk-demetropolized_body     [x]     `[,[if *compile-type-checking* `safe:funk-demetropolized_body     `unsafe:funk-demetropolized_body]     ,x]]
[defmetro funk-demetropolized_body-set [x y]   `[,[if *compile-type-checking* `safe:funk-demetropolized_body-set `unsafe:funk-demetropolized_body-set] ,x ,y]]
[defmetro funk-body                    [x]     `[,[if *compile-type-checking* `safe:funk-body                    `unsafe:funk-body]                    ,x]]
[defmetro funk-body-set                [x y]   `[,[if *compile-type-checking* `safe:funk-body-set                `unsafe:funk-body-set]                ,x ,y]]
[defmetro funk-env                     [x]     `[,[if *compile-type-checking* `safe:funk-env                     `unsafe:funk-env]                     ,x]]
[defmetro funk-env-set                 [x y]   `[,[if *compile-type-checking* `safe:funk-env-set                 `unsafe:funk-env-set]                 ,x ,y]]
[defmetro funk-machine_code            [x]     `[,[if *compile-type-checking* `safe:funk-machine_code            `unsafe:funk-machine_code]            ,x]]
[defmetro funk-machine_code-set        [x y]   `[,[if *compile-type-checking* `safe:funk-machine_code-set        `unsafe:funk-machine_code-set]        ,x ,y]]

[defmetro metro-name                    [x]     `[,[if *compile-type-checking* `safe:metro-name                    `unsafe:metro-name]                    ,x]]
[defmetro metro-name-set                [x y]   `[,[if *compile-type-checking* `safe:metro-name-set                `unsafe:metro-name-set]                ,x ,y]]
[defmetro metro-body_bytecodes          [x]     `[,[if *compile-type-checking* `safe:metro-body_bytecodes          `unsafe:metro-body_bytecodes]          ,x]]
[defmetro metro-body_bytecodes-set      [x y]   `[,[if *compile-type-checking* `safe:metro-body_bytecodes-set      `unsafe:metro-body_bytecodes-set]      ,x ,y]]
[defmetro metro-args                    [x]     `[,[if *compile-type-checking* `safe:metro-args                    `unsafe:metro-args]                    ,x]]
[defmetro metro-args-set                [x y]   `[,[if *compile-type-checking* `safe:metro-args-set                `unsafe:metro-args-set]                ,x ,y]]
[defmetro metro-demetropolized_body     [x]     `[,[if *compile-type-checking* `safe:metro-demetropolized_body     `unsafe:metro-demetropolized_body]     ,x]]
[defmetro metro-demetropolized_body-set [x y]   `[,[if *compile-type-checking* `safe:metro-demetropolized_body-set `unsafe:metro-demetropolized_body-set] ,x ,y]]
[defmetro metro-body                    [x]     `[,[if *compile-type-checking* `safe:metro-body                    `unsafe:metro-body]                    ,x]]
[defmetro metro-body-set                [x y]   `[,[if *compile-type-checking* `safe:metro-body-set                `unsafe:metro-body-set]                ,x ,y]]
[defmetro metro-env                     [x]     `[,[if *compile-type-checking* `safe:metro-env                     `unsafe:metro-env]                     ,x]]
[defmetro metro-env-set                 [x y]   `[,[if *compile-type-checking* `safe:metro-env-set                 `unsafe:metro-env-set]                 ,x ,y]]
[defmetro metro-machine_code            [x]     `[,[if *compile-type-checking* `safe:metro-machine_code            `unsafe:metro-machine_code]            ,x]]
[defmetro metro-machine_code-set        [x y]   `[,[if *compile-type-checking* `safe:metro-machine_code-set        `unsafe:metro-machine_code-set]        ,x ,y]]

[defmetro exception-tag              [x]     `[,[if *compile-type-checking* `safe:exception-tag              `unsafe:exception-tag]              ,x]]
[defmetro exception-tag-set          [x y]   `[,[if *compile-type-checking* `safe:exception-tag-set          `unsafe:exception-tag-set]          ,x ,y]]
[defmetro exception-value            [x]     `[,[if *compile-type-checking* `safe:exception-value            `unsafe:exception-value]            ,x]]
[defmetro exception-value-set        [x y]   `[,[if *compile-type-checking* `safe:exception-value-set        `unsafe:exception-value-set]        ,x ,y]]

[defmetro circular_buffer-remove [x]   `[,[if *compile-type-checking* `safe:circular_buffer-remove `unsafe:circular_buffer-remove] ,x]]
[defmetro circular_buffer-add    [x y] `[,[if *compile-type-checking* `safe:circular_buffer-add    `unsafe:circular_buffer-add]    ,x ,y]]

[defmetro bytecode-command           [x]     `[,[if *compile-type-checking* `safe:bytecode-command           `unsafe:bytecode-command]           ,x]]
[defmetro bytecode-command-set       [x y]   `[,[if *compile-type-checking* `safe:bytecode-command-set       `unsafe:bytecode-command-set]       ,x ,y]]
[defmetro bytecode-arg0              [x]     `[,[if *compile-type-checking* `safe:bytecode-arg0              `unsafe:bytecode-arg0]              ,x]]
[defmetro bytecode-arg0-set          [x y]   `[,[if *compile-type-checking* `safe:bytecode-arg0-set          `unsafe:bytecode-arg0-set]          ,x ,y]]
[defmetro bytecode-arg1              [x]     `[,[if *compile-type-checking* `safe:bytecode-arg1              `unsafe:bytecode-arg1]              ,x]]
[defmetro bytecode-arg1-set          [x y]   `[,[if *compile-type-checking* `safe:bytecode-arg1-set          `unsafe:bytecode-arg1-set]          ,x ,y]]

[defmetro thread-program_counter        [x]     `[,[if *compile-type-checking* `safe:thread-program_counter        `unsafe:thread-program_counter]        ,x]]
[defmetro thread-program_counter-set    [x y]   `[,[if *compile-type-checking* `safe:thread-program_counter-set    `unsafe:thread-program_counter-set]    ,x ,y]]
[defmetro thread-stack                  [x]     `[,[if *compile-type-checking* `safe:thread-stack                  `unsafe:thread-stack]                  ,x]]
[defmetro thread-stack-set              [x y]   `[,[if *compile-type-checking* `safe:thread-stack-set              `unsafe:thread-stack-set]              ,x ,y]]
[defmetro thread-iter                   [x]     `[,[if *compile-type-checking* `safe:thread-iter                   `unsafe:thread-iter]                   ,x]]
[defmetro thread-iter-set               [x y]   `[,[if *compile-type-checking* `safe:thread-iter-set               `unsafe:thread-iter-set]               ,x ,y]]
[defmetro thread-env                    [x]     `[,[if *compile-type-checking* `safe:thread-env                    `unsafe:thread-env]                    ,x]]
[defmetro thread-env-set                [x y]   `[,[if *compile-type-checking* `safe:thread-env-set                `unsafe:thread-env-set]                ,x ,y]]
[defmetro thread-args                   [x]     `[,[if *compile-type-checking* `safe:thread-args                   `unsafe:thread-args]                   ,x]]
[defmetro thread-args-set               [x y]   `[,[if *compile-type-checking* `safe:thread-args-set               `unsafe:thread-args-set]               ,x ,y]]
[defmetro thread-return                 [x]     `[,[if *compile-type-checking* `safe:thread-return                 `unsafe:thread-return]                 ,x]]
[defmetro thread-return-set             [x y]   `[,[if *compile-type-checking* `safe:thread-return-set             `unsafe:thread-return-set]             ,x ,y]]
[defmetro thread-value                  [x]     `[,[if *compile-type-checking* `safe:thread-value                  `unsafe:thread-value]                  ,x]]
[defmetro thread-value-set              [x y]   `[,[if *compile-type-checking* `safe:thread-value-set              `unsafe:thread-value-set]              ,x ,y]]
[defmetro thread-trace                  [x]     `[,[if *compile-type-checking* `safe:thread-trace                  `unsafe:thread-trace]                  ,x]]
[defmetro thread-trace-set              [x y]   `[,[if *compile-type-checking* `safe:thread-trace-set              `unsafe:thread-trace-set]              ,x ,y]]
[defmetro thread-critics                [x]     `[,[if *compile-type-checking* `safe:thread-critics                `unsafe:thread-critics]                ,x]]
[defmetro thread-critics-set            [x y]   `[,[if *compile-type-checking* `safe:thread-critics-set            `unsafe:thread-critics-set]            ,x ,y]]
[defmetro thread-context                [x]     `[,[if *compile-type-checking* `safe:thread-context                `unsafe:thread-context]                ,x]]
[defmetro thread-context-set            [x y]   `[,[if *compile-type-checking* `safe:thread-context-set            `unsafe:thread-context-set]            ,x ,y]]
[defmetro thread-keep_undead            [x]     `[,[if *compile-type-checking* `safe:thread-keep_undead            `unsafe:thread-keep_undead]            ,x]]
[defmetro thread-keep_undead-set        [x y]   `[,[if *compile-type-checking* `safe:thread-keep_undead-set        `unsafe:thread-keep_undead-set]        ,x ,y]]
[defmetro thread-parent_thread          [x]     `[,[if *compile-type-checking* `safe:thread-parent_thread          `unsafe:thread-parent_thread]          ,x]]
[defmetro thread-parent_thread-set      [x y]   `[,[if *compile-type-checking* `safe:thread-parent_thread-set      `unsafe:thread-parent_thread-set]      ,x ,y]]
[defmetro thread-parent_env             [x]     `[,[if *compile-type-checking* `safe:thread-parent_env             `unsafe:thread-parent_env]             ,x]]
[defmetro thread-parent_env-set         [x y]   `[,[if *compile-type-checking* `safe:thread-parent_env-set         `unsafe:thread-parent_env-set]         ,x ,y]]
[defmetro thread-execute_mutex          [x]     `[,[if *compile-type-checking* `safe:thread-execute_mutex          `unsafe:thread-execute_mutex]          ,x]]
[defmetro thread-execute_mutex-set      [x y]   `[,[if *compile-type-checking* `safe:thread-execute_mutex-set      `unsafe:thread-execute_mutex-set]      ,x ,y]]
[defmetro thread-last_executed_time     [x]     `[,[if *compile-type-checking* `safe:thread-last_executed_time     `unsafe:thread-last_executed_time]     ,x]]
[defmetro thread-last_executed_time-set [x y]   `[,[if *compile-type-checking* `safe:thread-last_executed_time-set `unsafe:thread-last_executed_time-set] ,x ,y]]
[defmetro thread-complete?              [x]     `[,[if *compile-type-checking* `safe:thread-complete?              `unsafe:thread-complete?]              ,x]]

[defmetro cause-bytecode_tracing_on     [x]   `[,[if *compile-type-checking* `safe:cause-bytecode_tracing_on     `unsafe:cause-bytecode_tracing_on]     ,x]]
[defmetro cause-bytecode_tracing_on-set [x y] `[,[if *compile-type-checking* `safe:cause-bytecode_tracing_on-set `unsafe:cause-bytecode_tracing_on-set] ,x ,y]]
[defmetro cause-memory_tracing_on       [x]   `[,[if *compile-type-checking* `safe:cause-memory_tracing_on       `unsafe:cause-memory_tracing_on]       ,x]]
[defmetro cause-memory_tracing_on-set   [x y] `[,[if *compile-type-checking* `safe:cause-memory_tracing_on-set   `unsafe:cause-memory_tracing_on-set]   ,x ,y]]
[defmetro cause-subscribers_mutex       [x]   `[,[if *compile-type-checking* `safe:cause-subscribers_mutex       `unsafe:cause-subscribers_mutex]       ,x]]
[defmetro cause-subscribers_mutex-set   [x y] `[,[if *compile-type-checking* `safe:cause-subscribers_mutex-set   `unsafe:cause-subscribers_mutex-set]   ,x ,y]]
[defmetro cause-subscribers             [x]   `[,[if *compile-type-checking* `safe:cause-subscribers             `unsafe:cause-subscribers]             ,x]]
[defmetro cause-subscribers-set         [x y] `[,[if *compile-type-checking* `safe:cause-subscribers-set         `unsafe:cause-subscribers-set]         ,x ,y]]
[defmetro cause-imagination_stack       [x]   `[,[if *compile-type-checking* `safe:cause-imagination_stack       `unsafe:cause-imagination_stack]       ,x]]
[defmetro cause-imagination_stack-set   [x y] `[,[if *compile-type-checking* `safe:cause-imagination_stack-set   `unsafe:cause-imagination_stack-set]   ,x ,y]]
[defmetro cause-event_buffer_first      [x]   `[,[if *compile-type-checking* `safe:cause-event_buffer_first      `unsafe:cause-event_buffer_first]      ,x]]
[defmetro cause-event_buffer_first-set  [x y] `[,[if *compile-type-checking* `safe:cause-event_buffer_first-set  `unsafe:cause-event_buffer_first-set]  ,x ,y]]
[defmetro cause-event_buffer_last       [x]   `[,[if *compile-type-checking* `safe:cause-event_buffer_last       `unsafe:cause-event_buffer_last]       ,x]]
[defmetro cause-event_buffer_last-set   [x y] `[,[if *compile-type-checking* `safe:cause-event_buffer_last-set   `unsafe:cause-event_buffer_last-set]   ,x ,y]]

[defmetro transframe-symbol_old_news     [x]   `[,[if *compile-type-checking* `safe:transframe-symbol_old_news     `unsafe:transframe-symbol_old_news]     ,x]]
[defmetro transframe-symbol_old_news-set [x y] `[,[if *compile-type-checking* `safe:transframe-symbol_old_news-set `unsafe:transframe-symbol_old_news-set] ,x ,y]]

[defmetro bug-type     [x]   `[,[if *compile-type-checking* `safe:bug-type     `unsafe:bug-type]     ,x]]
[defmetro bug-type-set [x y] `[,[if *compile-type-checking* `safe:bug-type-set `unsafe:bug-type-set] ,x ,y]]

[defmetro size_2d-x     [x]   `[,[if *compile-type-checking* `safe:size_2d-x     `unsafe:size_2d-x]     ,x]]
[defmetro size_2d-x-set [x y] `[,[if *compile-type-checking* `safe:size_2d-x-set `unsafe:size_2d-x-set] ,x ,y]]
[defmetro size_2d-y     [x]   `[,[if *compile-type-checking* `safe:size_2d-y     `unsafe:size_2d-y]     ,x]]
[defmetro size_2d-y-set [x y] `[,[if *compile-type-checking* `safe:size_2d-y-set `unsafe:size_2d-y-set] ,x ,y]]

[defmetro matrix-xres     [x]   `[,[if *compile-type-checking* `safe:matrix-xres     `unsafe:matrix-xres]     ,x]]
[defmetro matrix-xres-set [x y] `[,[if *compile-type-checking* `safe:matrix-xres-set `unsafe:matrix-xres-set] ,x ,y]]
[defmetro matrix-yres     [x]   `[,[if *compile-type-checking* `safe:matrix-yres     `unsafe:matrix-yres]     ,x]]
[defmetro matrix-yres-set [x y] `[,[if *compile-type-checking* `safe:matrix-yres-set `unsafe:matrix-yres-set] ,x ,y]]
[defmetro matrix-data     [x]   `[,[if *compile-type-checking* `safe:matrix-data     `unsafe:matrix-data]     ,x]]
[defmetro matrix-data-set [x y] `[,[if *compile-type-checking* `safe:matrix-data-set `unsafe:matrix-data-set] ,x ,y]]

[defmetro bytecode_event-bytecode     [x]   `[,[if *compile-type-checking* `safe:bytecode_event-bytecode     `unsafe:bytecode_event-bytecode]     ,x]]
[defmetro bytecode_event-bytecode-set [x y] `[,[if *compile-type-checking* `safe:bytecode_event-bytecode-set `unsafe:bytecode_event-bytecode-set] ,x ,y]]
[defmetro bytecode_event-context      [x]   `[,[if *compile-type-checking* `safe:bytecode_event-context      `unsafe:bytecode_event-context]     ,x]]
[defmetro bytecode_event-context-set  [x y] `[,[if *compile-type-checking* `safe:bytecode_event-context-set  `unsafe:bytecode_event-context-set] ,x ,y]]



