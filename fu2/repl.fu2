'
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defmetro object-fwrite      [this stream] `[object-execute ,this `fwrite      .stream]]
[defmetro object-fwrite_html [this stream] `[object-execute ,this `fwrite_html .stream]]

[defunk afwrite [exp stream]
  [if [abstract_object? exp]
      [object-fwrite exp stream]
    [fwrite stream exp]]]

[defunk afwrite_html [exp stream]
  [if [abstract_object? exp]
      [object-fwrite_html exp stream]
    [fwrite_html stream exp]]]

[defunk aformat [stream :rest args]
  [mapc [funk [arg]
	      [if [abstract_object? arg]
		  [object-format arg stream]
		[format stream arg]]]
	args]]

[defunk aformat_html [stream :rest args]
  [mapc [funk [arg]
	      [if [abstract_object? arg]
		  [object-format_html arg stream]
		[format-html stream arg]]]
	args]]

`[does nothing for now]

[defunk abstract [exp]
  [brief exp]]

[defunk repl-io [input-stream output-stream html tutorial]
  [define-funk afwrite-maybe_html      [if html &afwrite_html &afwrite]]
  [define-funk aformat-maybe_html      [if html &aformat-html &aformat]]
  [define-funk stream-print-maybe_html [funk [stream exp] [aformat-maybe_html stream '\n'] [afwrite-maybe_html exp]]]
  [define-funk print-maybe_html        [funk [exp]        [stream-print-maybe_html stdout exp]]]
  [if output-stream [aformat-maybe_html output-stream '\nin--> ']]
  [let [[read-exp [read input-stream]]]
    [if [exception? read-exp]
	[let [[tag [exception-tag read-exp]]]
	  [cond [[eq tag `reader:end_of_file-exception] [prog [if output-stream [afwrite-maybe_html 'repl-io: got end_of_file exception.' output-stream]]
							      t]]
		[t                                      [prog [if output-stream [afwrite-maybe_html [list 'error repl-io: unexpected exception ' eval-exp] output-stream]]
							      eval-exp]]]]
      [let [[read-exp-abstract [abstract read-exp]]]
	[if tutorial [if output-stream [prog [aformat-maybe_html output-stream '\nread> '] [afwrite-maybe_html read-exp-abstract output-stream]]]]
	[let [[eval-exp [eval read-exp]]]
	  [if [exception? eval-exp]
	      [let [[tag [exception-tag eval-exp]]]
		[cond [[eq tag `reader:end_of_file-exception] [prog [if output-stream [afwrite-maybe_html 'repl-io: got end_of_file exception.' output-stream]]
								    t]]
		      [t                                      [prog [if output-stream [afwrite-maybe_html [list 'error repl-io: unexpected exception ' eval-exp] output-stream]]
								    eval-exp]]]]
	    [let [[eval-exp-abstract [abstract eval-exp]]]
	      [if output-stream [prog [aformat-maybe_html output-stream '\nout-> '] [afwrite-maybe_html eval-exp-abstract output-stream]]]
	      [repl-io input-stream output-stream html tutorial]]]]]]]]

[defunk repl []
  [let [[result [repl-io stdin stdout nil nil]]]
    [if [exception? result]
	[prog [format stdout
		      '\nerror repl: unexpected exception ' result '\n'
		      '\n            restarting repl.\n']
	      [repl]]]]]

[defunk repl-html []
  [let [[result [repl-io stdin stdout t t]]]
    [if [exception? result]
	[prog [format-html stdout
			   '\nerror repl: unexpected exception ' result '\n'
			   '\n            restarting repl.\n']
	      [repl-html]]]]]

[defunk load1 [filename]
  [let [[file-stream [stream-new_open_file filename [stream-file_mode-rdonly]]]]
    [if [null file-stream]
	[error `load-error [list 'load error: could not open "' filename '" for reading.']]
      [let [[result [repl-io file-stream nil nil nil]]]
	[stream-close file-stream]
	result]]]]

[defunk load [:rest filenames]
  [print [cons `load filenames]]
  [mapc [funk [filename]
	      [load1 filename]]
	filenames]]

[defunk parload [:rest filenames]
  [print [cons `parload filenames]]
  [parc [funk [filename]
	      [load1 filename]]
	filenames]]

