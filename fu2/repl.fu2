'
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk afwrite [exp stream]
  [fwrite stream exp]]

[defunk afwrite_html [exp stream]
  [fwrite_html stream exp]]

[defunk aformat [stream :rest args]
  [mapc [funk [arg]
	      [terminal_format stream arg]]
	args]]

[defunk aformat_html [stream :rest args]
  [mapc [funk [arg]
	      [format-html stream arg]]
	args]]

`[does nothing for now]

[defunk stream-read [input_stream]
  [let [[read_successful nil]
	[read_exp        nil]]
    [while [not read_successful]
      [= read_exp [stream-try_read input_stream]]
      [if [is-type `exception read_exp]
	  [let [[tag [object-get read_exp `tag]]]
	    [if [eq tag `reader:no_character_waiting-exception]
		[millisleep 1000]
	      [= read_successful `t]]]
	[= read_successful `t]]]
    read_exp]]

[defunk read []
  [stream-read standard-input]]

[defunk stream_repl-io [input-stream output-stream html tutorial]
  [define-funk afwrite-maybe_html      [if html &afwrite_html &afwrite]]
  [define-funk aformat-maybe_html      [if html &aformat_html &aformat]]
  [define-funk stream-print-maybe_html [funk [stream exp] [aformat-maybe_html stream '\n'] [afwrite-maybe_html exp]]]
  [define-funk print-maybe_html        [funk [exp]        [if output-stream [stream-print-maybe_html output-stream exp]]]]
  [if output-stream [aformat-maybe_html output-stream '\nin--> ']]
  [let [[read_successful   nil]
	[read-exp          nil]]
    [while [not read_successful]
      [= read-exp [stream-read input-stream]]
      [cond [[is-type `exception read-exp] [let [[tag [object-get read-exp `tag]]]
					     [cond [[eq tag `reader:end_of_file-exception] [prog [if output-stream [afwrite-maybe_html 'stream_repl-io: got end_of_file exception.' output-stream]]
												 [= read_successful t]
												 t]]
						   [t                                      [prog [if output-stream [afwrite-maybe_html [list 'error stream_repl-io: unexpected exception ' read-exp] output-stream]]
												 [= read_successful t]
												 read-exp]]]]]
	    [t                             [= read_successful t]]]]
    [if tutorial [if output-stream [prog [aformat-maybe_html output-stream '\nread> '] [afwrite-maybe_html read-exp output-stream]]]]
    [if [equals read-exp `[exit]]
	`repl-exit
      [let [[eval-exp [if [eq standard-input input-stream]
			  [with-new-cause [cause-define cause-name `repl-eval]
					  [cause-define cause-exp read-exp]
					  [eval read-exp]]
			[eval read-exp]]]]
	[if [is-type `exception eval-exp]
	    [let [[tag [object-get eval-exp `tag]]]
	      [cond [[eq tag `reader:end_of_file-exception] [prog [if output-stream [afwrite-maybe_html 'stream_repl-io: got end_of_file exception.' output-stream]]
								  t]]
		    [t                                      [prog [if output-stream [afwrite-maybe_html [list 'error stream_repl-io: unexpected exception ' eval-exp] output-stream]]
								  eval-exp]]]]
	  [prog [if output-stream [prog [aformat-maybe_html output-stream '\nout-> '] [afwrite-maybe_html eval-exp output-stream]]]
		[stream_repl-io input-stream output-stream html tutorial]]]]]]]

[defunk stream_repl []
  [with-new-cause [cause-define cause-name `repl]
		  [let [[result [stream_repl-io standard-input [get standard-terminal stream] nil nil]]]
		    [if [is-type `exception result]
			[prog [format [get standard-terminal stream]
				      '\nerror repl: unexpected exception ' result '\n'
				      '\n            restarting repl.\n']
			      [stream_repl]]]]]]

[defunk stream_repl-html []
  [let [[result [stream_repl-io standard-input [get standard-terminal stream] t t]]]
    [if [is-type `exception result]
	[prog [format-html [get standard-terminal stream]
			   '\nerror repl: unexpected exception ' result '\n'
			   '\n            restarting repl.\n']
	      [stream_repl-html]]]]]

[globalize terminal_repl-prompt_color     8]
[globalize terminal_repl-user_input_color 15]

[defunk terminal_repl-io [input-stream output-terminal]
  [if output-terminal
      [prog [ansi-stream-foreground [get output-terminal stream] terminal_repl-prompt_color] [terminal_format output-terminal '\n in-> '] [ansi-stream-foreground [get output-terminal stream] terminal_repl-user_input_color]]]
  [let [[read_successful   nil]
	[read-exp          nil]]
    [while [not read_successful]
      [= read-exp [stream-read input-stream]]
      [cond [[is-type `exception read-exp] [let [[tag [object-get read-exp `tag]]]
					     [cond [[eq tag `reader:end_of_file-exception] [prog [if output-terminal [terminal_format output-terminal 'stream_repl-io: got end_of_file exception.']]
												 [= read_successful t]
												 t]]
						   [t                                      [prog [if output-terminal [terminal_format output-terminal [list 'error stream_repl-io: unexpected exception ' read-exp]]]
												 [= read_successful t]
												 read-exp]]]]]
	    [t                             [= read_successful t]]]]
    [if [equals read-exp `[exit]]
	`repl-exit
      [let [[eval-exp [if [eq standard-input input-stream]
			  [with-new-cause [cause-define cause-name `repl-eval]
					  [cause-define cause-exp read-exp]
					  [ansi-stream-reset [get output-terminal stream]]
					  [eval read-exp]]
			[eval read-exp]]]]
	[if [is-type `exception eval-exp]
	    [let [[tag [object-get eval-exp `tag]]]
	      [cond [[eq tag `reader:end_of_file-exception] [prog [if output-terminal [terminal_format output-terminal 'stream_repl-io: got end_of_file exception.']]
								  t]]
		    [t                                      [prog [if output-terminal [terminal_format output-terminal [list 'error stream_repl-io: unexpected exception ' eval-exp]]]
								  eval-exp]]]]
	  [prog [if output-terminal [prog [ansi-stream-foreground [get output-terminal stream] terminal_repl-prompt_color] [terminal_format output-terminal '\nout-> '] [ansi-stream-reset [get output-terminal stream]]
					  [terminal_write output-terminal eval-exp]]]
		[terminal_repl-io input-stream output-terminal]]]]]]]

[defunk repl []
  [let [[result [terminal_repl-io standard-input standard-terminal]]]
    [if [is-type `exception result]
	[prog [terminal_format standard-terminal
			       '\nerror terminal repl: unexpected exception ' result '\n'
			       '\n                     restarting terminal repl.\n']
	      [repl]]]]]

[defunk load1 [filename]
  [with-new-cause [cause-define cause-name      `load1]
		  [cause-define source-filename filename]
		  [let [[file-stream [stream-new_open_file filename [stream-file_mode-rdonly]]]]
		    [if [null file-stream]
			[error load-error [format nil 'load error: could not open "' filename '" for reading.']]
		      [let [[result [with-new-cause [cause-define source-filename filename]
						    [terminal_repl-io file-stream nil nil nil]
						    ]]]
			[stream-close file-stream]
			[memory-debug_assert_valid]
			result]]]]]

[defunk load [:rest filenames]
  [if [null [cause-lookup `standard-terminal]]
      [cause-define standard-terminal [terminal_print_frame-new stdout 0 [termios-width] [termios-height] 128 t nil t 1000000000]]]
  [if [null [cause-lookup `standard-input]]
      [cause-define standard-input stdin]]
  [print [cons `load filenames]]
  [mapc [funk [filename]
	      [load1 filename]]
	filenames]]

[defunk parload [:rest filenames]
  [print [cons `parload filenames]]
  [parc [funk [filename]
	      [load1 filename]]
	filenames]]

