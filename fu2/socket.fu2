' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[globalize-funk socket:h_errno &socket:f2-h_errno]

[globalize socket:inaddr_any [socket:f2-inaddr_any]]

[globalize socket:pf_unix      [socket:f2-socket-pf_unix]]
[globalize socket:pf_local     [socket:f2-socket-pf_local]]
[globalize socket:pf_inet      [socket:f2-socket-pf_inet]]
[globalize socket:pf_inet6     [socket:f2-socket-pf_inet6]]
`[globalize socket:pf_ipx       [socket:f2-socket-pf_ipx]]
`[globalize socket:pf_netlink   [socket:f2-socket-pf_netlink]]
`[globalize socket:pf_x25       [socket:f2-socket-pf_x25]]
`[globalize socket:pf_ax25      [socket:f2-socket-pf_ax25]]
`[globalize socket:pf_atmpvc    [socket:f2-socket-pf_atmpvc]]
[globalize socket:pf_appletalk [socket:f2-socket-pf_appletalk]]
`[globalize socket:pf_packet    [socket:f2-socket-pf_packet]]

[globalize socket:sock_stream    [socket:f2-socket-sock_stream]]
[globalize socket:sock_dgram     [socket:f2-socket-sock_dgram]]
[globalize socket:sock_seqpacket [socket:f2-socket-sock_seqpacket]]
[globalize socket:sock_raw       [socket:f2-socket-sock_raw]]
[globalize socket:sock_rdm       [socket:f2-socket-sock_rdm]]
[globalize socket:sock_packet    [socket:f2-socket-sock_packet]]




[defunk socket:socket [domain type protocol]
  [if [not [and [integer? domain] [integer? type] [integer? protocol]]]
      [error `socket-error `[socket:socket argument-type]]
    [let [[rv [socket:f2-socket domain type protocol]]]
      [if [= rv -1]
	  [error `socket-error `[return-value ,[errno:errno-string]]]
	rv]]]]

[defunk socket:accept [sockfd addr_array]
  [if [not [and [integer? sockfd]
		[or [null addr_array] [array? addr_array]]]]
      [error `socket-error `[socket:accept argument-type]]
    [let [[rv [socket:f2-accept sockfd addr_array]]]
      [if [= rv -1]
	  [if [= [errno:errno] errno:errno-eagain]
	      nil
	    [error `socket-error `[return-value ,[errno:errno-string]]]]
	rv]]]]

[defunk socket:connect [sockfd sin_family sin_port sin_addr]
  [if [not [and [integer? sockfd] [integer? sin_family] [integer? sin_port] [array? sin_addr]]]
      [error `socket-error `[socket:connect argument-type]]
    [let [[rv [socket:f2-connect sockfd sin_family sin_port sin_addr]]]
      [if [= rv -1]
	  [error `socket-error `[return-value ,[errno:errno-string]]]
	rv]]]]

[defunk socket:bind [sockfd sin_family sin_port sin_addr]
  [if [not [and [integer? sockfd] [integer? sin_family] [integer? sin_port] [array? sin_addr]]]
      [error `socket-error `[socket:bind argument-type]]
    [let [[rv [socket:f2-bind sockfd sin_family sin_port sin_addr]]]
      [if [= rv -1]
	  [error `socket-error `[return-value ,[errno:errno-string]]]
	rv]]]]

[defunk socket:getsockname [s name namelen]
  [if [not [and [integer? s] [pointer? name] [pointer? namelen]]]
      [error `socket-error `[socket:getsockname argument-type]]
    [socket:f2-getsockname s name namelen]]]

[defunk socket:listen [sockfd backlog]
  [if [not [and [integer? sockfd] [integer? backlog]]]
      [error `socket-error `[socket:listen argument-type]]
    [let [[rv [socket:f2-listen  sockfd backlog]]]
      [if [= rv -1]
	  [error `socket-error `[return-value ,[errno:errno-string]]]
	rv]]]]

[defunk socket:gethostbyname [name]
  [if [not [string? name]]
      [error `socket-error `[socket:gethostbyname argument-type]]
    [let [[hostent [socket:f2-gethostbyname name]]]
      [if [or [null hostent] [= #x0 hostent]]
	  [error `socket-new_client `[return-value ,[socket:h_errno]]]
	hostent]]]]

[defunk socket:hostent-h_name      [hostent]                             [if [not      [pointer? hostent]]                                                             [error `socket-error `argument-type] [socket:f2-hostent-h_name      hostent]]]
[defunk socket:hostent-h_aliases   [hostent]                             [if [not      [pointer? hostent]]                                                             [error `socket-error `argument-type] [socket:f2-hostent-h_aliases   hostent]]]
[defunk socket:hostent-h_addrtype  [hostent]                             [if [not      [pointer? hostent]]                                                             [error `socket-error `argument-type] [socket:f2-hostent-h_addrtype  hostent]]]
[defunk socket:hostent-h_length    [hostent]                             [if [not      [pointer? hostent]]                                                             [error `socket-error `argument-type] [socket:f2-hostent-h_length    hostent]]]
[defunk socket:hostent-h_addr_list [hostent]                             [if [not      [pointer? hostent]]                                                             [error `socket-error `argument-type] [socket:f2-hostent-h_addr_list hostent]]]

[defunk socket:hostent-format [stream hostent]
  [format stream
	  '\nhostent-h_name     : ' [socket:hostent-h_name      hostent]
	  '\nhostent-h_aliases  : ' [socket:hostent-h_aliases   hostent]
	  '\nhostent-h_addrtype : ' [socket:hostent-h_addrtype  hostent]
	  '\nhostent-h_length   : ' [socket:hostent-h_length    hostent]
	  '\nhostent-h_addr_list: ' [socket:hostent-h_addr_list hostent]]]

[globalize socket:h_errno-host_not_found [socket:f2-h_errno-host_not_found]]
[globalize socket:h_errno-no_address     [socket:f2-h_errno-no_address]]
[globalize socket:h_errno-no_recovery    [socket:f2-h_errno-no_recovery]]
[globalize socket:h_errno-try_again      [socket:f2-h_errno-try_again]]

[defunk socket:localhost-name [] [car [socket:hostent-h_aliases [socket:gethostbyname 'localhost']]]]

`[format stdout '\nlocalhost-name = ' [socket:localhost-name]]

[defunk socket:sockaddr_in-sin_family [sockaddr_in] [if [not [pointer? sockaddr_in]] [error `socket-error `argument-type] [socket:f2-sockaddr_in-sin_family sockaddr_in]]]
[defunk socket:sockaddr_in-sin_port   [sockaddr_in] [if [not [pointer? sockaddr_in]] [error `socket-error `argument-type] [socket:f2-sockaddr_in-sin_port   sockaddr_in]]]
[defunk socket:sockaddr_in-sin_addr   [sockaddr_in] [if [not [pointer? sockaddr_in]] [error `socket-error `argument-type] [socket:f2-sockaddr_in-sin_addr   sockaddr_in]]]

[defunk socket:chunk-send [chunk start length fd flags]
  [if [not [and [chunk? chunk] [integer? start] [integer? length] [integer? fd] [integer? flags]]]
      [error `socket-error `argument-type]
    [let [[rv [socket:f2-chunk-send chunk start length fd flags]]]
      [if [= rv -1]
	  [if [= [errno:errno] errno:errno-eagain]
	      nil
	    [error `socket-error `[return-value ,[errno:errno-string]]]]
	rv]]]]

[defunk socket:chunk-recv [chunk start length fd flags]
  [if [not [and [chunk? chunk] [integer? start] [integer? length] [integer? fd] [integer? flags]]]
      [error `socket-error `argument-type]
    [let [[rv [socket:f2-chunk-recv chunk start length fd flags]]]
      [if [= rv -1]
	  [if [= [errno:errno] errno:errno-eagain]
	      nil
	    [error `socket-error `[return-value ,[errno:errno-string]]]]
	rv]]]]

[defunk socket:send [fd pointer byte_num flags] [if [not [and [integer? fd] [pointer? pointer] [integer? byte_num] [integer? flags]]] [error `socket-error `argument-type] [socket:f2-send fd pointer byte_num flags]]]
[defunk socket:recv [fd pointer byte_num flags] [if [not [and [integer? fd] [pointer? pointer] [integer? byte_num] [integer? flags]]] [error `socket-error `argument-type] [socket:f2-recv fd pointer byte_num flags]]]

[defunk socket:describe-host [name]
  [let [[hostent [socket:gethostbyname name]]]
    [socket:hostent-format stdout hostent]
    hostent]]

