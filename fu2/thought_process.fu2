'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defmetro thought-define_slot [this slot value]
  `[let [[thought-slot_value ,value]
	 [this              ,this]]
     [primfunk:thought_process__read_funk__put  this ,name [funk []           thought-slot_value]]
     [primfunk:thought_process__write_funk__put this ,name [funk [value] [= thought-slot_value value]]]]]

[defmetro thought-defunk_slot [this slot args :body body]
  `[primfunk:thought_process__execute_funk__put ,this ,slot [funk ,[cons `this args] @body]]]  

[defmetro thought_with_body-define [name value]
  `[thought-define_slot this ,name ,value]]

[defmetro thought_with_body-defunk [name args :rest body]
  `[thought-defunk_slot this ,name ,args @body]]

[defmetro thought-new_with_name_and_body [name :rest body]
  `[let [[this [primfunk:thought_process]]]
     [let [[thought-name-slot_value [quote ,name]]]
       [primfunk:thought_process__read_funk__put  this `name [funk []           thought-name-slot_value]]
       [primfunk:thought_process__write_funk__put this `name [funk [value] [= thought-name-slot_value value]]]]
     [prog @[mapcar [funk [body_exp]
			  [cond [[cons? body_exp] [let [[command [car body_exp]]]
						    [let [[command_mapped [cond [[eq command `define] `thought_with_body-define]
										[[eq command `defunk] `thought_with_body-defunk]
										[t                    command]]]]
						      `[let [[object_command_result [,command_mapped @[cdr body_exp]]]]
							 [if [not [exception? object_command_result]]
							     object_command_result
							   [error `run-time `[exception-found while-evaluating thought-body-exp ,body_exp]]]]]]]
				[t                body_exp]]]
		    body]]
     this]]

[defmetro defthought [name :rest body]
  [print `[defthought ,name]]
  `[globalize ,name [let [[this [thought-new_with_name_and_body @body]]]
		      this]]]

[defunk thought_process-read_funk-lookup [this slot]
  [let [[this__read_funk [primfunk:thought_process__read_funk this slot]]]
    [if this__read_funk
	this__read_funk
      [let [[parents_iter [primfunk:thought_process__read_funk this `parent_types]]]
	[while parents_iter
	  [let [[parent [car parents_iter]]]
	    [= this__read_funk [thought_process-read_funk-lookup parent slot]]
	    [if this__read_funk
		[= parents_iter nil]
	      [= parents_iter [cdr parents_iter]]]]]]]
    [if this__read_funk
	this__read_funk
      [exception `run-time `[thought_process-read_slot ,[thought-name this] ,slot]]]]]

[defunk thought_process-write_funk-lookup [this slot]
  [let [[this__write_funk [primfunk:thought_process__write_funk this slot]]]
    [if this__write_funk
	this__write_funk
      [let [[parents_iter [primfunk:thought_process__write_funk this `parent_types]]]
	[while parents_iter
	  [let [[parent [car parents_iter]]]
	    [= this__write_funk [thought_process-read_write-lookup parent slot]]
	    [if this__write_funk
		[= parents_iter nil]
	      [= parents_iter [cdr parents_iter]]]]]]]
    [if this__write_funk
	this__write_funk
      [exception `run-time `[thought_process-write_slot ,[thought-name this] ,slot]]]]]

[defunk thought_process-execute_funk-lookup [this slot]
  [let [[this__execute_funk [primfunk:thought_process__execute_funk this slot]]]
    [if this__execute_funk
	this__execute_funk
      [let [[parents_iter [primfunk:thought_process__execute_funk this `parent_types]]]
	[while parents_iter
	  [let [[parent [car parents_iter]]]
	    [= this__execute_funk [thought_process-execute_funk-lookup parent slot]]
	    [if this__execute_funk
		[= parents_iter nil]
	      [= parents_iter [cdr parents_iter]]]]]]]
    [if this__execute_funk
	this__execute_funk
      [exception `run-time `[thought_process-execute_slot ,[thought-name this] ,slot]]]]]

[defmetro thought-read_slot [this slot]
  `[apply [thought_process-read_funk-lookup    ,this ,slot] nil]]

[defmetro thought-write_slot [this slot value]
  `[apply [thought_process-write_funk-lookup   ,this ,slot] [cons value nil]]]

[defmetro thought-execute_slot [this slot :rest args]
  `[apply [thought_process-execute_funk-lookup ,this ,slot] [list @args]]]

[defmetro thought-name             [this]       `[thought-read_slot  ,this `name]]
[defmetro thought-name-set         [this value] `[thought-write_slot ,this `name ,value]]
[defmetro thought-real_value       [this]       `[thought-read_slot  ,this `real_value]]
[defmetro thought-real_value-set   [this value] `[thought-write_slot ,this `real_value ,value]]
[defmetro thought-parent_types     [this]       `[thought-read_slot  ,this `parent_types]]
[defmetro thought-parent_types-set [this value] `[thought-write_slot ,this `parent_types ,value]]
[defmetro thought-child_types      [this]       `[thought-read_slot  ,this `child_types]]
[defmetro thought-child_types-set  [this value] `[thought-write_slot ,this `child_types ,value]]
[defmetro thought-real_value       [this]       `[thought-read_slot  ,this `real_value]]
[defmetro thought-real_value-set   [this value] `[thought-write_slot ,this `real_value ,value]]

[defmetro thought-fwrite      [this stream] `[thought-execute_slot ,this `fwrite      ,stream]]
[defmetro thought-fwrite_html [this stream] `[thought-execute_slot ,this `fwrite_html ,stream]]
[defmetro thought-format      [this stream] `[thought-execute_slot ,this `format      ,stream]]
[defmetro thought-format_html [this stream] `[thought-execute_slot ,this `format_html ,stream]]

[defthought thought_process:thought_process
  [define parent_types nil]
  [define child_types  nil]
  [defunk fwrite       [stream] [exp-fwrite      stream this]]
  [defunk fwrite_html  [stream] [exp-fwrite_html stream this]]
  [defunk format       [stream] [exp-format      stream this]]
  [defunk format_html  [stream] [exp-fwrite_html stream this]]]

[defthought thought_process:thought_interface
  [define parent_types [list thought_process:thought_process]]
  [define child_types  nil]]

[defthought thought_process:interface-algebra
  [define parent_types [list thought_process:thought_interface]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero         []           `[skipped-eval `[thought-zero     ,this]]]
   [defunk one          []           `[skipped-eval `[thought-one      ,this]]]
   [defunk add          [:rest rest] `[skipped-eval `[thought-add      ,this @rest]]]
   [defunk subtract     [:rest rest] `[skipped-eval `[thought-subtract ,this @rest]]]
   [defunk multiply     [:rest rest] `[skipped-eval `[thought-multiply ,this @rest]]]
   [defunk divide       [:rest rest] `[skipped-eval `[thought-divide   ,this @rest]]]]

[defmetro thought-zero     [this]            `[thought-read_slot    ,this `zero]]
[defmetro thought-one      [this]            `[thought-read_slot    ,this `one]]
[defmetro thought-add      [this :rest rest] `[thought-execute_slot ,this `add      [list @rest]]]
[defmetro thought-subtract [this :rest rest] `[thought-execute_slot ,this `subtract [list @rest]]]
[defmetro thought-multiply [this :rest rest] `[thought-execute_slot ,this `multiply [list @rest]]]
[defmetro thought-divide   [this :rest rest] `[thought-execute_slot ,this `divide   [list @rest]]]

[defthought thought_process:real_thought
  [define parent_types [list thought_process:thought_process]]
  [define child_types  nil]
  [defunk fwrite       [stream] [exp-fwrite      stream [thought-real_value this]]]
  [defunk fwrite_html  [stream] [exp-fwrite_html stream [thought-real_value this]]]
  [defunk format       [stream] [exp-format      stream [thought-real_value this]]]
  [defunk format_html  [stream] [exp-format_html stream [thought-real_value this]]]]

[defthought thought_process:ptype
  [define parent_types [list thought_process:real_thought]]
  [define child_types  nil]]

[defthought thought_process:ptype_free_memory
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_newly_allocated 
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_integer
  [define parent_types [list thought_process:ptype thought_process:interface-algebra]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero     []           0]
   [defunk one      []           1]
   [defunk add      [:rest rest] [apply &+ [mapcar &primfunk:realize [cons this rest]]]]
   [defunk subtract [:rest rest] [apply &- [mapcar &primfunk:realize [cons this rest]]]]
   [defunk multiply [:rest rest] [apply &* [mapcar &primfunk:realize [cons this rest]]]]
   [defunk divide   [:rest rest] [apply &/ [mapcar &primfunk:realize [cons this rest]]]]]

[defthought thought_process:ptype_double
  [define parent_types [list thought_process:ptype thought_process:interface-algebra]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero     []           [integer-to_double 0]]
   [defunk one      []           [integer-to_double 1]]
   [defunk add      [:rest rest] [apply &+ [mapcar &primfunk:realize [cons this rest]]]]
   [defunk subtract [:rest rest] [apply &- [mapcar &primfunk:realize [cons this rest]]]]
   [defunk multiply [:rest rest] [apply &* [mapcar &primfunk:realize [cons this rest]]]]
   [defunk divide   [:rest rest] [apply &/ [mapcar &primfunk:realize [cons this rest]]]]]

[defthought thought_process:ptype_float
  [define parent_types [list thought_process:ptype thought_process:interface-algebra]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero     []           [integer-to_float 0]]
   [defunk one      []           [integer-to_float 1]]
   [defunk add      [:rest rest] [apply &+ [mapcar &primfunk:realize [cons this rest]]]]
   [defunk subtract [:rest rest] [apply &- [mapcar &primfunk:realize [cons this rest]]]]
   [defunk multiply [:rest rest] [apply &* [mapcar &primfunk:realize [cons this rest]]]]
   [defunk divide   [:rest rest] [apply &/ [mapcar &primfunk:realize [cons this rest]]]]]

[defthought thought_process:ptype_pointer
  [define parent_types [list thought_process:ptype thought_process:interface-algebra]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero     []           [integer-to_pointer 0]]
   [defunk one      []           [integer-to_pointer 1]]
   [defunk add      [:rest rest] [apply &+ [mapcar &primfunk:realize [cons this rest]]]]
   [defunk subtract [:rest rest] [apply &- [mapcar &primfunk:realize [cons this rest]]]]
   [defunk multiply [:rest rest] [apply &* [mapcar &primfunk:realize [cons this rest]]]]
   [defunk divide   [:rest rest] [apply &/ [mapcar &primfunk:realize [cons this rest]]]]]

[defthought thought_process:ptype_gfunkptr
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_cmutex
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_char
  [define parent_types [list thought_process:ptype thought_process:interface-algebra]]
  [define child_types  nil]
  `interface-algebra
   [defunk zero     []           [integer-to_char 0]]
   [defunk one      []           [integer-to_char 1]]
   [defunk add      [:rest rest] [apply &+ [mapcar &primfunk:realize [cons this rest]]]]
   [defunk subtract [:rest rest] [apply &- [mapcar &primfunk:realize [cons this rest]]]]
   [defunk multiply [:rest rest] [apply &* [mapcar &primfunk:realize [cons this rest]]]]
   [defunk divide   [:rest rest] [apply &/ [mapcar &primfunk:realize [cons this rest]]]]]

[defthought thought_process:ptype_string
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_symbol
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_chunk
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_array
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defthought thought_process:ptype_larva
  [define parent_types [list thought_process:ptype]]
  [define child_types  nil]]

[defunk ptype-thought [exp type]
  [let [[this         [primfunk:thought_process]]
	[parent_types [list type]]]
    [primfunk:thought_process__read_funk__put  this `parent_types [funk []           parent_types]]
    [primfunk:thought_process__write_funk__put this `parent_types [funk [value] [= parent_types value]]]
    [primfunk:thought_process__read_funk__put  this `real_value   [funk []           exp]]
    this]]

[defunk thought [exp]
  [if [null exp]
      nil
    [cond [[integer?    exp] [ptype-thought exp thought_process:ptype_integer]]
	  [[double?     exp] [ptype-thought exp thought_process:ptype_double]]
	  [[float?      exp] [ptype-thought exp thought_process:ptype_float]]
	  [[pointer?    exp] [ptype-thought exp thought_process:ptype_pointer]]
	  [[cmutex?      exp] [ptype-thought exp thought_process:ptype_cmutex]]
	  [[string?     exp] [ptype-thought exp thought_process:ptype_string]]
	  [[symbol?     exp] [ptype-thought exp thought_process:ptype_symbol]]
	  [[chunk?      exp] [ptype-thought exp thought_process:ptype_chunk]]
	  [[array?      exp] [ptype-thought exp thought_process:ptype_array]]
	  [t                 [ptype-thought exp nil]]]]]

[defunk realize [thought]
  [if [thought_process? thought]
      [thought-realize thought]]


