' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'


'primitive chunk writing funktions'

[defunk x86_8bit-x86_compile [chunk index value]
  [if chunk [chunk-write_8bit chunk index [coerce-to-int value]]]
  [+ index 1]]

[defunk x86_16bit-x86_compile [chunk index value]
  [if chunk [chunk-write_16bit chunk index [coerce-to-int value]]]
  [+ index 2]]

[defunk x86_32bit-x86_compile [chunk index value]
  [if chunk [chunk-write_32bit chunk index [coerce-to-int value]]]
  [+ index 4]]

'x86_arg definition'

[defunk   x86_arg      [:rest data] `[mov_arg @data]]
[defunk   x86_arg?     [exp]         [and [cons? exp] [eq [car exp] `mov_arg]]]
[defmetro x86_arg-data [this]       `[cdr ,this]]

[defunk   x86_arg-rel_to_reg        [reg offset]  [x86_arg `rel_to_reg reg offset]]
[defunk   x86_arg-rel_to_reg?       [exp]         [and [x86_arg? exp] [let [[data [x86_arg-data exp]]] [and [cons? data] [eq [car data] `rel_to_reg]]]]]
[defmetro x86_arg-rel_to_reg-reg    [this]       `[elt [x86_arg-data ,this] 1]]
[defmetro x86_arg-rel_to_reg-offset [this]       `[elt [x86_arg-data ,this] 2]]

[defunk   x86_arg-abs_addr      [addr]  [x86_arg `abs_addr addr]]
[defunk   x86_arg-abs_addr?     [exp]   [and [x86_arg? exp] [let [[data [x86_arg-data exp]]] [and [cons? data] [eq [car data] `abs_addr]]]]]
[defmetro x86_arg-abs_addr-addr [this] `[elt [x86_arg-data ,this] 1]]

[defunk   x86_arg-const? [exp] [or [integer? exp] [pointer? exp]]]

'x86 assembly language to x86 machine code compile funktions'

'  define primitive mov functions and abstract to x86_arg functions'

[load 'fu2/x86-compile-mov.fu2']

'x86 push register functions'

'80483dc:	50                   	push   %eax'
'80483dd:	51                   	push   %ecx'
'80483de:	52                   	push   %edx'
'80483df:	53                   	push   %ebx'
'80483e0:	54                   	push   %esp'
'80483e1:	55                   	push   %ebp'
'80483e2:	56                   	push   %esi'
'80483e3:	57                   	push   %edi'

[defunk x86_push_reg-x86_8bit_code [reg]
  [cond [[eq reg `eax] #x50]
	[[eq reg `ecx] #x51]
	[[eq reg `edx] #x52]
	[[eq reg `ebx] #x53]
	[[eq reg `esp] #x54]
	[[eq reg `ebp] #x55]
	[[eq reg `esi] #x56]
	[[eq reg `edi] #x57]
	[t [error `machine_code_compile-time 'unrecognized x86 register']]]]

[defunk x86_push_reg-x86_compile [chunk index reg]
  [x86_8bit-x86_compile chunk index [x86_push_reg-x86_8bit_code reg]]]

[defunk x86_push_arg-x86_compile [chunk index arg]
  [cond [[x86_arg-rel_to_reg? arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[x86_arg-abs_addr?   arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[x86_arg-const?      arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[symbol?             arg] [x86_push_reg-x86_compile chunk index arg]]
	[t                         [error `machine_code_compile-time [list `x86_push_arg-x86_compile 'unknown x86_arg type' arg]]]]]

'x86 pop register functions'

'80483e4:	58                   	pop    %eax'
'80483e5:	59                   	pop    %ecx'
'80483e6:	5a                   	pop    %edx'
'80483e7:	5b                   	pop    %ebx'
'80483e8:	5c                   	pop    %esp'
'80483e9:	5d                   	pop    %ebp'
'80483ea:	5e                   	pop    %esi'
'80483eb:	5f                   	pop    %edi'

[defunk x86_pop_reg-x86_8bit_code [reg]
  [cond [[eq reg `eax] #x58]
	[[eq reg `ecx] #x59]
	[[eq reg `edx] #x5A]
	[[eq reg `ebx] #x5B]
	[[eq reg `esp] #x5C]
	[[eq reg `ebp] #x5D]
	[[eq reg `esi] #x5E]
	[[eq reg `edi] #x5F]
	[t [error `machine_code_compile-time 'unrecognized x86 register']]]]

[defunk x86_pop_reg-x86_compile [chunk index reg]
  [x86_8bit-x86_compile chunk index [x86_pop_reg-x86_8bit_code reg]]]

[defunk x86_pop_arg-x86_compile [chunk index arg]
  [cond [[x86_arg-rel_to_reg? arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[x86_arg-abs_addr?   arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[x86_arg-const?      arg] [error `machine_code_compile-time `unimplemented-feature]]
	[[symbol?             arg] [x86_pop_reg-x86_compile chunk index arg]]
	[t                         [error `machine_code_compile-time [list `x86_pop_arg-x86_compile 'unknown x86_arg type' arg]]]]]

'x86 return function'

'80483d1:	c3                   	ret    '
[defunk x86_ret-x86_compile [chunk index]
  [set index [x86_8bit-x86_compile chunk index #xC3]]
  index]

'x86 call function'

'80483ff:	e8 b0 ff ff ff       	call   80483b4 <test1>'
[defunk x86_call_relative-x86_compile [chunk index value]
  [set index [x86_8bit-x86_compile  chunk index #xE8]]
  [set index [x86_32bit-x86_compile chunk index value]]
  index]

'x86 add function'

'804840e:	83 c4 10             	add    $0x10,%esp'
[defunk x86_add_const_to_esp-x86_compile [chunk index value]
  [set index [x86_16bit-x86_compile chunk index #xC483]]
  [set index [x86_8bit-x86_compile  chunk index value]]
  index]

'x86 subtract function'

'80483d6:	83 ec 10             	sub    $0x10,%esp'
[defunk x86_sub_8bit_from_esp-x86_compile [chunk index value]
  [set index [x86_16bit-x86_compile chunk index #xEC83]]
  [set index [x86_8bit-x86_compile  chunk index value]]
  index]

'x86 leave function'

'80483da:	c9                   	leave  '
[defunk x86_leave-x86_compile [chunk index]
  [set index [x86_8bit-x86_compile chunk index #xC9]]
  index]

