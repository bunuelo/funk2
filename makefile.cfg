# 
# Copyright (c) 2007-2008 Bo Morgan.
# All rights reserved.
# 
# Author: Bo Morgan
# 
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
# 
# BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
# BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
# WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
# 
# Bo Morgan requests users of this software to return to bo@mit.edu any
# improvements or extensions that they make and grant Bo Morgan the
# rights to redistribute these changes.
# 

# write seconds since 1980 to file (for version definition)
$(shell date +%s > seconds.tmp)

# get the name of the architecture
processor = $(shell uname -p)
# get the name of the operating system
os_name = $(shell uname -s)

# determine the number of processor
ifeq ($(os_name),Darwin)
  processor_num = $(shell sysctl -n hw.ncpu)
else
  processor_num = $(shell cat /proc/cpuinfo | grep processor | grep -v type | wc -l)
endif

libs = -lpthread

# processor_power_num description:
#   0 power => 1 processor,
#   1 power => 2 processors,
#   2 power => 4 processors,
#   3 power => 8 processors,
#   4 power => 16 processors, etc.

ifeq ($(processor_num),0)
  processor_flags = -Dprocessor_num_power=0
endif
ifeq ($(processor_num),1)
  processor_flags = -Dprocessor_num_power=0
endif
ifeq ($(processor_num),2)
  processor_flags = -Dprocessor_num_power=1
endif
ifeq ($(processor_num),4)
  processor_flags = -Dprocessor_num_power=2
endif
ifeq ($(processor_num),8)
  processor_flags = -Dprocessor_num_power=3
endif
ifeq ($(processor_num),16)
  processor_flags = -Dprocessor_num_power=4
endif

funk2_objs   = $(funk2_server_objs)
ifeq ($(processor),x86_64)
  #gmodule_compile_flags = -I/usr/include/glib-2.0/ -I/usr/lib64/glib-2.0/include/
  arch_defines = -DF2__ARCH_64BIT
else
  #gmodule_compile_flags = -I/usr/include/glib-2.0/ -I/usr/lib/glib-2.0/include/
  arch_defines = -DF2__ARCH_32BIT
endif

gmodule_compile_flags = $(shell pkg-config --cflags gmodule-2.0)

version_flags = -DF2__COMPILE_TIME_ID=$(shell cat seconds.tmp)

trace_flags           = #-DF2__TRACE__ALL_POINTERS -DF2__TRACE__ALL_COMPILES 
compiled_image__flags = -DF2__INSTALL__BOOTSTRAP_IMG__FILENAME=\"$(install__bootstrap__img)\" -DF2__COMPILE__BOOTSTRAP_REPL_IMG__FILENAME=\"$(compile__bootstrap__repl__img)\" -DF2__COMPILE__BOOTSTRAP_IMG__FILENAME=\"$(compile__bootstrap__img)\"

debug_flags    = -O0 -g -pg -DDEBUG -DF2__ASSERTIONS__RELEASE -DF2__ASSERTIONS__DEBUG -DDEBUG_MEMORY=1 -DDEBUG_MEMORY_POINTERS #-DDEBUG_BYTECODES -DDEBUG_REDBLACKTREE -DDEBUG_COMPILE -DDEBUG_MEMORY_VALID_PTRS 
optimize_flags = -O3 -g -pg

debug__cc_flags   = -Wall -fPIC $(arch_defines) $(memory_flags) $(processor_flags) $(version_flags) $(gmodule_compile_flags) $(trace_flags) $(compiled_image__flags) $(debug_flags)
release__cc_flags = -Wall -fPIC $(arch_defines) $(memory_flags) $(processor_flags) $(version_flags) $(gmodule_compile_flags) $(trace_flags) $(compiled_image__flags) $(optimize_flags)
athena__cc_flags  = $(debug__cc_flags) -DF2__SINGLE_USER_32BIT_VERSION

#cc_flags = $(debug__cc_flags)
#cc_flags = $(release__cc_flags)
cc_flags = $(athena__cc_flags)

