' 
 Copyright (c) 2007 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[memblock-set_init_render_xyz [integer-to_float 0] [integer-to_float 0] [integer-to_float 0]]
[memblock-set_init_render_on 1]

`[load 'fu2/neuralmom-nervous_system.fu2']

[memblock-set_init_render_xyz   [integer-to_float 0] [integer-to_float 0] [integer-to_float 0]]
[memblock-set_init_render_noise [integer-to_float 25]]

[globalize pi [/ [integer-to_double 22] [integer-to_double 7]]]

[let [[green-robot-id     nil]
      [pink-robot-id      nil]
      [ground-object      nil]
      [board-object       nil]
      [stick1-object      nil]
      [stick2-object      nil]
      [stick3-object      nil]
      [stick4-object      nil]
      [render_volume-xres nil]
      [render_volume-yres nil]
      [render_volume-zres nil]
      [robot_step_length_array [array [prog 'step 1'  4]
				      [prog 'step 2'  8]
				      [prog 'step 3'  4]
				      [prog 'step 4'  8]
				      [prog 'step 5'  4]
				      [prog 'step 6'  2]
				      [prog 'step 7'  2]
				      [prog 'step 8'  4]
				      [prog 'step 9'  4]
				      [prog 'step 10' 4]
				      [prog 'step 11' 2]
				      [prog 'step 12' 1]
				      [prog 'step 13' 2]
				      [prog 'step 14' 1]
				      [prog 'step 15' 1]
				      [prog 'step 16' 1]
				      [prog 'step 17' 1]
				      [prog 'step 18' 8]]]
      ]
  
  [defunk robots-do_step [index]
    [cond [[= index 1] [prog 'pink turns away to set up the scenario'
			     [roboverse-robot-thought_text-set   green-robot-id [string-to_new_raw_c_string '(1) want to complete the table']]
			     [roboverse-robot-behaviors-turn_to  pink-robot-id [/ pi 4]]
			     [roboverse-robot-behaviors-bend_hip pink-robot-id [/ pi 6]]]]
	  [[= index 2] [prog 'green moves over to stick3'
			     [roboverse-robot-thought_text-set               green-robot-id [string-to_new_raw_c_string '(2) want to grasp table leg']]
			     [roboverse-robot-behaviors-move_close_to_object green-robot-id stick1-object [integer-to_double 0]]
			     [roboverse-robot-behaviors-stop_turn_to         pink-robot-id]
			     ]]
	  [[= index 3] [prog 'green grabs stick1'
			     [roboverse-robot-thought_text-set        green-robot-id [string-to_new_raw_c_string '(3) want to grab a stick']]
			     [roboverse-robot-behaviors-lock_position green-robot-id]
			     [roboverse-robot-behaviors-grab_object   green-robot-id stick1-object]
			     ]]
	  [[= index 4] [prog 'green moves over to board'
			     [roboverse-robot-thought_text-set               green-robot-id [string-to_new_raw_c_string '(4) want to move over to board']]
			     [roboverse-robot-behaviors-stop_lock_position   green-robot-id]
			     [roboverse-robot-behaviors-move_close_to_object green-robot-id board-object [integer-to_double 2]]
			     ]]
	  [[= index 5] [prog 'green tries to attach the stick'
			     [roboverse-robot-thought_text-set                    green-robot-id [string-to_new_raw_c_string '(5) want to attach leg to table']]
			     [roboverse-robot-behaviors-stop_move_close_to_object green-robot-id]
			     [roboverse-robot-behaviors-lock_position             green-robot-id]
			     [roboverse-robot-behaviors-bend_hip                  green-robot-id [/ pi 3]]
			     ]]
	  [[= index 6] [prog 'green fails to attach the stick and bends back up'
			     [roboverse-robot-thought_text-set   green-robot-id [string-to_new_raw_c_string '(6) failed to attach leg to table']]
			     [roboverse-robot-behaviors-bend_hip green-robot-id [integer-to_double 0]]
			     ]]
	  [[= index 7] [prog 'green says Help!'
			     [roboverse-robot-thought_text-set green-robot-id [string-to_new_raw_c_string '']]
			     [roboverse-robot-speech_text-set  green-robot-id [string-to_new_raw_c_string '(7) Help!']]
			     ]]
	  [[= index 8] [prog 'pink comes over near board'
			     [roboverse-robot-speech_text-set    green-robot-id [string-to_new_raw_c_string '']]
			     [roboverse-robot-thought_text-set   pink-robot-id  [string-to_new_raw_c_string '(8) what does green want?']]
			     [roboverse-robot-behaviors-turn_to  pink-robot-id  pi]
			     [roboverse-robot-behaviors-bend_hip pink-robot-id  [integer-to_double 0]]
			     ]]
	  [[= index 9] [prog 'pink comes over near board'
			     [roboverse-robot-thought_text-set        pink-robot-id [string-to_new_raw_c_string '(9) want to help green take table apart']]
			     [roboverse-robot-behaviors-stop_turn_to  pink-robot-id]
			     [roboverse-robot-behaviors-stop_bend_hip pink-robot-id]
			     [roboverse-robot-behaviors-move_to       pink-robot-id [integer-to_double 12] [integer-to_double -6] [integer-to_double 0]]
			     ]]
	  [[= index 10] [prog 'pink comes over next to board'
			      [roboverse-robot-thought_text-set               pink-robot-id [string-to_new_raw_c_string '(10) want to help green take table apart']]
			      [roboverse-robot-behaviors-move_close_to_object pink-robot-id board-object [integer-to_double 2]]
			      ]]
	  [[= index 11] [prog 'pink bends down to grab the stick'
			      [roboverse-robot-thought_text-set                    pink-robot-id [string-to_new_raw_c_string '(11) want to pull this table leg off']]
			      [roboverse-robot-behaviors-stop_move_close_to_object pink-robot-id]
			      [roboverse-robot-behaviors-stop_bend_hip             pink-robot-id]
			      [roboverse-robot-behaviors-lock_position             pink-robot-id]
			      [roboverse-robot-behaviors-touch_object              pink-robot-id stick1-object]
			      ]]
	  [[= index 12] [prog 'green says no and pink lets go of the stick'
			      [roboverse-robot-speech_text-set green-robot-id [string-to_new_raw_c_string '(12) No!']]
			      ]]
	  [[= index 13] [prog 'green says no and pink lets go of the board'
			      [roboverse-robot-speech_text-set             green-robot-id [string-to_new_raw_c_string '']]
			      [roboverse-robot-thought_text-set            pink-robot-id [string-to_new_raw_c_string '(13) misunderstood green\'s intentions']]
			      [roboverse-robot-behaviors-stop_touch_object pink-robot-id]
			      [roboverse-robot-behaviors-bend_hip          pink-robot-id [integer-to_double 0]]
			      ]]
	  [[= index 14] [prog 'green bends over to signal that green wants to attach the stick'
			      [roboverse-robot-speech_text-set         green-robot-id [string-to_new_raw_c_string '']]
			      [roboverse-robot-behaviors-lock_position green-robot-id]
			      [roboverse-robot-behaviors-bend_hip      green-robot-id [/ [integer-to_double 6] 10]]
			      [roboverse-robot-thought_text-set        green-robot-id [string-to_new_raw_c_string '(14) want to show pink what i intended']]
			      [roboverse-robot-thought_text-set        pink-robot-id  [string-to_new_raw_c_string '']]
			      [roboverse-robot-behaviors-stop_bend_hip pink-robot-id]
			      ]]
	  [[= index 15] [prog 'pink lifts up the board to make space for the stick'
			      [roboverse-robot-thought_text-set        green-robot-id [string-to_new_raw_c_string '']]
			      [roboverse-robot-thought_text-set        pink-robot-id [string-to_new_raw_c_string '(15) want to lift up board']]
			      [roboverse-robot-behaviors-lock_position pink-robot-id]
			      [roboverse-robot-behaviors-lift_object   pink-robot-id board-object]
			      ]]
	  [[= index 16] [prog 'green attaches stick1 to the board'
			      [roboverse-robot-thought_text-set         pink-robot-id [string-to_new_raw_c_string '']]
			      [roboverse-robot-thought_text-set         green-robot-id [string-to_new_raw_c_string '(16) want to attach leg to table']]
			      [roboverse-robot-behaviors-stop_bend_hip  green-robot-id]
			      [roboverse-robot-behaviors-lock_position  green-robot-id]
			      [roboverse-robot-behaviors-insert_objects green-robot-id stick1-object board-object]
			      ]]
	  [[= index 17] [prog 'green stops inserting the object'
			      [roboverse-robot-thought_text-set              pink-robot-id  [string-to_new_raw_c_string '(17) want to wait for green to finish']]
			      [roboverse-robot-thought_text-set              green-robot-id [string-to_new_raw_c_string '']]
			      [roboverse-robot-behaviors-stop_insert_objects green-robot-id]
			      ]]
	  [[= index 18] [prog 'pink stops lifting object'
			      [roboverse-robot-thought_text-set           pink-robot-id  [string-to_new_raw_c_string '(17) want to think of new goal']]
			      [roboverse-robot-behaviors-stop_lift_object pink-robot-id]
			      ]]
	  [t           [error 'robots-do_step error: invalid index.']]]]
  
  [defunk neuralmom-move-robots [green-robot-id pink-robot-id]
    [roboverse-robot-behaviors-move_to green-robot-id [integer-to_double green-x] [integer-to_double green-y] [integer-to_double green-z]] 
    [= green-x [- green-x]]
    [= green-y [- green-y]]
    [roboverse-robot-behaviors-move_to pink-robot-id [integer-to_double pink-x] [integer-to_double pink-y] [integer-to_double pink-z]] 
    [= pink-x [- pink-x]]
    [= pink-y [- pink-y]]]
  
  [defunk neuralmom-demo-run []
    [memblock-set_init_render_xyz [integer-to_float 0] [integer-to_float -1] [integer-to_float 0]]
    [format stdout '\nneuralmom-demo-run status: starting.\n']
    [roboverse-init_library]
    [brainviz-init_library]
    
    [= render_volume-xres [brainviz-render_volume-xres]]
    [= render_volume-yres [brainviz-render_volume-yres]]
    [= render_volume-zres [brainviz-render_volume-zres]]
    
    [roboverse-start 1 1]
    [roboverse-simulation_window-set_num_subwindows 2 1]
    [roboverse-render-user_render_callback-set [brainviz__render-cfunk_ptr]]
    [brainviz-generate_volume_thread-start]
    [format stdout '\nroboverse simulation started.']
    [= green-robot-id [roboverse-simulation-lookup_robot_by_name [string-to_new_raw_c_string 'green']]]
    [= pink-robot-id  [roboverse-simulation-lookup_robot_by_name [string-to_new_raw_c_string 'pink']]]
    [= ground-object  [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'ground']]]
    [= board-object   [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'board']]]
    [= stick1-object  [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'stick1']]]
    [= stick2-object  [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'stick2']]]
    [= stick3-object  [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'stick3']]]
    [= stick4-object  [roboverse-simulation-lookup_object_by_name [string-to_new_raw_c_string 'stick4']]]
    
    [format stdout '\ngreen-robot-id = ' green-robot-id]
    [format stdout '\npink-robot-id  = ' pink-robot-id]
    [format stdout '\nground-object  = ' ground-object]
    [format stdout '\nboard-object   = ' board-object]
    [format stdout '\nstick1-object  = ' stick1-object]
    [format stdout '\nstick2-object  = ' stick2-object]
    [format stdout '\nstick3-object  = ' stick3-object]
    [format stdout '\nstick4-object  = ' stick4-object]
    
    [robots-do_step 1]
    
    'start up a bunch of parallel threads'
    `[dotimes [j 2]
      [thread [funk []
		    [let [[seq nil]]
		      [dotimes [i 1000]
			[= seq [cons i seq]]]
		      [apply &+ seq]
		      ]]
	      []]]
    
    [let [[still_running       t]
	  [robot-step-index    1]
	  [robot-step-subindex 0]]
      [define-funk neuralmom-is_still_running [funk [] still_running]]
      [prog `[launch_all_brain_areas &neuralmom-is_still_running]]
      [define-funk loop
	[funk []
	      [let [[key [roboverse-simulation_window-check_keypress]]]
		[format stdout '\nkey: '] [format stdout key] 
		'Q - quit'
		[if [!= key 113]
		    [prog [format stdout ' looping...']
			  [let [[subframes 16]]
			    [prog [roboverse-simulation_thread-step_time [/ [integer-to_double 7] [* 4 subframes]]]]
			    [let [[brainviz-render_volume [brainviz-render_volume-get_current]]]
			      [if [and [pointer? brainviz-render_volume] [!= brainviz-render_volume #x0]]
				  [prog [roboverse-user_gui-subwindow-display_volume 0 0 render_volume-xres render_volume-yres render_volume-zres brainviz-render_volume]
					[roboverse-user_gui-subwindow-display_volume 1 0 render_volume-xres render_volume-yres render_volume-zres brainviz-render_volume]
					]]]
			    [brainviz-update_volume]
			    [if [= robot-step-subindex 0]
				[prog [format stdout '\nrobot-step-index = ' robot-step-index]
				      [robots-do_step robot-step-index]
				      ]]
			    [= robot-step-subindex [+ robot-step-subindex 1]]
			    [if [> robot-step-subindex [* subframes [array-elt robot_step_length_array [- robot-step-index 1]]]]
				[prog [= robot-step-subindex 0]
				      [= robot-step-index [+ robot-step-index 1]]
				      [if [> robot-step-index 18]
					  [= robot-step-index 1]]]]]
			  [loop]]]]]]
      [loop]
      [= still_running nil]
      [roboverse-stop]
      [format stdout '\nroboverse simulation finished.']]
    [brainviz-generate_volume_thread-stop]
    [format stdout '\nneuralmom-demo-run status: finished.\n']
    nil]
  
  ]


