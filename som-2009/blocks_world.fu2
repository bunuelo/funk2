
[defunk blocks_world_object-is_on_objects [this objects]
  [blocks_world_object-translate_overlaps_objects this 0 -1 objects]]

[defunk blocks_world_object-is_under_objects [this objects]
  [blocks_world_object-translate_overlaps_objects this 0 1 objects]]

[defunk blocks_world_object-translate [this dx dy]
  [blocks_world_rectangle-translate [blocks_world_object-rectangle this] dx dy]]

[defunk blocks_world_object-create [name type x0 y0 x_size y_size color]
  [blocks_world_object-new name type [blocks_world_rectangle-create x0 y0 [- [+ x0 x_size] 1] [- [+ y0 y_size] 1]] [blocks_world_color-new color] nil nil]]

[defunk blocks_world_object-new_block [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `block x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_table [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `table x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_gripper [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `gripper x0 y0 x_size y_size color]]

[defunk blocks_world_physics-simulate [this]
  [let [[done    nil]
	[objects [blocks_world_physics-objects this]]]
    [while [not done]
      [let [[an_object_moved nil]
	    [object_iter     objects]]
	[while object_iter
	  [let* [[object      [car object_iter]]
		 [object_type [blocks_world_object-type object]]]
	    [if [eq object_type `block]
		[if [and [not [blocks_world_object-ignore_gravity             object]]
			 [not [blocks_world_object-translate_overlaps_objects object 0 -1 [remove object objects]]]]
		    [prog [blocks_world_object-translate object 0 -1]
			  [blocks_world_rectangle-clear_line_above [blocks_world_object-rectangle object]]
			  [blocks_world_object-render object]
			  [set an_object_moved t]]]]]
	  [set object_iter [cdr object_iter]]]
	[if [not an_object_moved]
	    [set done t]]]]]]

[defunk blocks_world_physics-render [this]
  [ansi-stream-rectangle stdout 1 1 [- [termios-width] 1] [- [termios-height] 10] [string-elt ' ' 0]]
  [mapc [funk [object]
	      [blocks_world_object-render object]]
	[blocks_world_physics-objects this]]
  [ansi-stream-move_cursor stdout 1 26]]

[defunk blocks_world_physics-generate_perceptions [this]
  [let [[objects     [blocks_world_physics-objects this]]
	[perceptions nil]]
    [mapc [funk [object_a]
		[let [[on_object [blocks_world_object-is_on_objects object_a [remove object_a objects]]]]
		  [if on_object
		      [set perceptions [cons `[on ,[blocks_world_object-name object_a] ,[blocks_world_object-name on_object]] perceptions]]]]]
	  objects]
    perceptions]]

[defunk blocks_world_physics-move_to [this object_name]
  [let [[objects [blocks_world_physics-objects this]]
	[gripper nil]
	[object  nil]]
    [mapc [funk [obj]
		[let [[type [blocks_world_object-type obj]]
		      [name [blocks_world_object-name obj]]]
		  [if [eq type `gripper]
		      [set gripper obj]]
		  [if [eq name object_name]
		      [set object obj]]]]
	  objects]
    [if [or [null gripper]
	    [null object]]
	`failure
      [let [[holding_object [blocks_world_object-holding_object gripper]]]
	[let [[rect [blocks_world_object-rectangle gripper]]]
	  [let [[x0 [blocks_world_rectangle-x0 rect]]
		[x1 [blocks_world_rectangle-x1 rect]]]
	    [let [[avg_x [/ [+ x0 x1] 2]]]
	      [let [[object_rect [blocks_world_object-rectangle object]]]
		[let [[gx0 [blocks_world_rectangle-x0 object_rect]]
		      [gx1 [blocks_world_rectangle-x1 object_rect]]]
		  [let [[avg_gx [/ [+ gx0 gx1] 2]]]
		    [let [[dx [- avg_gx avg_x]]]
		      [let [[dx1 [if [> dx 0] 1 -1]]]
			[dotimes [ix [if [< dx 0] [- dx] dx]]
			  [blocks_world_object-translate gripper dx1 0]
			  [blocks_world_object-render    gripper]
			  [if holding_object
			      [prog [blocks_world_object-translate holding_object dx1 0]
				    [blocks_world_object-render    holding_object]]]
			  ]]]]]]]]]]]]]

[defunk blocks_world_physics-pick_up [this object_name]
  [let [[objects [blocks_world_physics-objects this]]
	[gripper nil]
	[object  nil]]
    [mapc [funk [obj]
		[let [[type [blocks_world_object-type obj]]
		      [name [blocks_world_object-name obj]]]
		  [if [eq type `gripper]
		      [set gripper obj]]
		  [if [and [eq name object_name]
			   [eq [blocks_world_object-type obj] `block]]
		      [set object obj]]]]
	  objects]
    [if [or [null gripper]
	    [null object]]
	`failure
      [if [blocks_world_object-holding_object gripper]
	  `failure
	[let [[rect [blocks_world_object-rectangle gripper]]]
	  [let [[x0 [blocks_world_rectangle-x0 rect]]
		[x1 [blocks_world_rectangle-x1 rect]]]
	    [let [[avg_x [/ [+ x0 x1] 2]]]
	      [let [[object_rect [blocks_world_object-rectangle object]]]
		[let [[gx0 [blocks_world_rectangle-x0 object_rect]]
		      [gx1 [blocks_world_rectangle-x1 object_rect]]]
		  [let [[avg_gx [/ [+ gx0 gx1] 2]]]
		    [let [[dx [- avg_gx avg_x]]]
		      [if [!= dx 0]
			  `failure
			[if [blocks_world_object-is_under_objects object [remove object objects]]
			    `failure
			  [let [[y0  [blocks_world_rectangle-y0 rect]]
				[gy1 [blocks_world_rectangle-y1 object_rect]]]
			    [let [[dy [- [- y0 gy1] 1]]]
			      [blocks_world_object-ignore_gravity-set object  t]
			      [blocks_world_object-holding_object-set gripper object]
			      [dotimes [iy dy]
				[blocks_world_object-translate object 0 1]
				[blocks_world_object-render object]
				]]]]]]]]]]]]]]]]

[defunk blocks_world_physics-drop [this]
  [let [[objects [blocks_world_physics-objects this]]
	[gripper nil]]
    [mapc [funk [obj]
		[let [[type [blocks_world_object-type obj]]]
		  [if [eq type `gripper]
		      [set gripper obj]]]]
	  objects]
    [if [null gripper]
	`failure
      [let [[holding_object [blocks_world_object-holding_object gripper]]]
	[if [not holding_object]
	    `failure
	  [prog [blocks_world_object-holding_object-set gripper        nil]
		[blocks_world_object-ignore_gravity-set holding_object nil]
		`success]]]]]]

[defunk blocks_world-new [help_message
			  welcome_message
			  last_results
			  done
			  perceptions
			  need_rerender
			  need_simulate
			  need_perceive
			  physics] 
  [array `blocks_world
	  help_message
	  welcome_message
	  last_results
	  done
	  perceptions
	  need_rerender
	  need_simulate
	  need_perceive
	  physics]]
[defmetro blocks_world-help_message      [this]       `[array-elt     ,this 1]]
[defmetro blocks_world-welcome_message   [this]       `[array-elt     ,this 2]]
[defmetro blocks_world-last_results      [this]       `[array-elt     ,this 3]]
[defmetro blocks_world-last_results-set  [this value] `[array-elt-set ,this 3 ,value]]
[defmetro blocks_world-done              [this]       `[array-elt     ,this 4]]
[defmetro blocks_world-done-set          [this value] `[array-elt-set ,this 4 ,value]]
[defmetro blocks_world-perceptions       [this]       `[array-elt     ,this 5]]
[defmetro blocks_world-perceptions-set   [this value] `[array-elt-set ,this 5 ,value]]
[defmetro blocks_world-need_rerender     [this]       `[array-elt     ,this 6]]
[defmetro blocks_world-need_rerender-set [this value] `[array-elt-set ,this 6 ,value]]
[defmetro blocks_world-need_simulate     [this]       `[array-elt     ,this 7]]
[defmetro blocks_world-need_simulate-set [this value] `[array-elt-set ,this 7 ,value]]
[defmetro blocks_world-need_perceive     [this]       `[array-elt     ,this 8]]
[defmetro blocks_world-need_perceive-set [this value] `[array-elt-set ,this 8 ,value]]
[defmetro blocks_world-physics           [this]       `[array-elt     ,this 9]]

[defunk blocks_world-create [physics]
  [let* [[help_message    [list '  (a few commands: ' `[exit] ', ' `[sim] ', ' `[look] ', ' `[move-to <object>] ', ' `[pick-up <object>]  ', ' `[drop] ')']]
	 [welcome_message [append [list 'Welcome to ' `Blocks ' ' `World ' ' `v2.2]
				  help_message]]
	 [last_results    welcome_message]
	 [done            nil]
	 [perceptions     nil]
	 [need_rerender   t]
	 [need_simulate   t]
	 [need_perceive   t]]
    [blocks_world-new help_message
		      welcome_message
		      last_results
		      done
		      perceptions
		      need_rerender
		      need_simulate
		      need_perceive
		      physics]]]

[defunk blocks_world-rep [this]
  [if [not [blocks_world-done this]]
      [let [[physics [blocks_world-physics this]]]
	[print this]
	[if [blocks_world-need_rerender this]
	    [prog [blocks_world_physics-render physics 20 [- [termios-height] 10]]
		  [blocks_world-need_rerender-set this nil]]]
	[if [blocks_world-need_simulate this]
	    [prog [blocks_world_physics-simulate physics]
		  [blocks_world-need_rerender-set this t]
		  [blocks_world-need_simulate-set this nil]]]
	[if [blocks_world-need_perceive this]
	    [prog [blocks_world-perceptions-set   this [blocks_world_physics-generate_perceptions physics]]
		  [blocks_world-need_perceive-set this nil]]]
	
	[ansi-stream-rectangle stdout 1 [- [termios-height] 8] [- [termios-width] 1] [- [termios-height] 1] [string-elt ' ' 0]]
	
	[ansi-stream-move_cursor stdout 1 [- [termios-height] 8]]
	[ansi-stream-foreground stdout 15]
	[format stdout 'blocks-world-out> ']
	[apply &format [cons stdout [blocks_world-last_results this]]]
	[format stdout '\n' '\n' 'perceptions: ' [blocks_world-perceptions this]]
	[blocks_world-last_results-set this nil]
	
	[ansi-stream-move_cursor stdout 1 [- [termios-height] 2]]
	[ansi-stream-foreground stdout 15]
	[format stdout 'blocks-world-in-> ']
	
	[let [[exp             [read stdin]]
	      [command_failure nil]]
	  [ansi-stream-foreground stdout 15]
	  [if [not [cons? exp]]
	      [set command_failure t]
	    [let [[command [car exp]]]
	      [cond [[eq command `exit]     [blocks_world-done-set this t]]
		    [[eq command `sim]      [prog [blocks_world_physics-simulate physics]
						  [blocks_world-need_rerender-set this t]
						  [blocks_world-need_perceive-set this t]
						  [blocks_world-last_results-set  this [list 'Done simulating blocks world.']]]]
		    [[eq command `eval]     [prog [if [!= [length exp] 2]
						      [blocks_world-last_results-set this [list 'eval only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						    [blocks_world-last_results-set   this [list 'Evalulation result is ' [eval [eval [second exp]]] '.']]]]]
		    [[eq command `look]     [prog [blocks_world-last_results-set this [list 'Perceptions: ' [blocks_world_physics-generate_perceptions physics]]]]]
		    [[eq command `move-to]  [prog [if [!= [length exp] 2]
						      [blocks_world-last_results-set this [list 'move-to only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						    [let [[object_name [second exp]]]
						      [blocks_world-need_rerender-set this t]
						      [blocks_world-last_results-set  this [list 'move-to result: ' [blocks_world_physics-move_to physics object_name]]]
						      ]]]]
		    [[eq command `pick-up]  [prog [if [!= [length exp] 2]
						      [blocks_world-last_results-set this [list 'pick-up only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						    [let [[object_name [second exp]]]
						      [blocks_world-need_perceive-set this t]
						      [blocks_world-need_rerender-set this t]
						      [blocks_world-last_results-set  this [list 'pick-up result: ' [blocks_world_physics-pick_up physics object_name]]]
						      ]]]]
		    [[eq command `drop]     [prog [blocks_world-last_results-set [list 'drop result: ' [blocks_world_physics-drop physics]]]
						  [blocks_world_physics-simulate physics]
						  [blocks_world-need_perceive-set this t]
						  [blocks_world-need_rerender-set this t]]]
		    [t                      [set command_failure t]]]]]
	  [if command_failure
	      [prog [ansi-stream-foreground stdout 15]
		    [blocks_world-last_results-set this [append [list 'Blocks world command failure, ' exp '.\n']
								[blocks_world-help_message this]]]]]
	  
	  ]]]]

[defunk blocks_world-repl [this]
  [ansi-stream-clear_screen stdout]
  [while [not [blocks_world-done this]]
    [blocks_world-rep this]
    ]]

[defunk blocks_world-test []
  [let [[blocks_world [blocks_world-create [blocks_world_physics-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
									   [blocks_world_object-new_gripper `the-gripper      21 23  3  3 `magenta]
									   [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
									   [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
									   [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
									   [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]]
    [blocks_world-repl blocks_world]
    blocks_world]]



