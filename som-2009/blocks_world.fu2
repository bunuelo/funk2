
[globalize blocks_world-lower_left-x 20]
[globalize blocks_world-lower_left-y [- [termios-height] 10]]

[defunk ansi-stream-bordered_rectangle [stream x0 y0 x1 y1 background_char]
  [ansi-stream-move_cursor stream x0 y0] [format stdout '/']
  [ansi-stream-move_cursor stream x1 y0] [format stdout '\\']
  [ansi-stream-move_cursor stream x0 y1] [format stdout '\\']
  [ansi-stream-move_cursor stream x1 y1] [format stdout '/']
  [if [> [- x1 x0] 1]
      [prog [ansi-stream-rectangle stream [+ x0 1]    y0    [- x1 1]    y0    [string-elt '-' 0]] 
	    [ansi-stream-rectangle stream [+ x0 1]    y1    [- x1 1]    y1    [string-elt '-' 0]] ]]
  [if [> [- y1 y0] 1]
      [prog [ansi-stream-rectangle stream    x0    [+ y0 1]    x0    [- y1 1] [string-elt '|' 0]] 
	    [ansi-stream-rectangle stream    x1    [+ y0 1]    x1    [- y1 1] [string-elt '|' 0]] ]]
  [if [and [> [- x1 x0] 1]
	   [> [- y1 y0] 1]]
      [ansi-stream-rectangle stream [+ x0 1] [+ y0 1] [- x1 1] [- y1 1] background_char]]]


[defunk blocks_world_rectangle? [exp]
  [and exp
       [array? exp]
       [> [array-length exp] 0]
       [eq `blocks_world_rectangle [array-elt exp 0]]]]

[defunk   blocks_world_rectangle-new [x0 y0 x1 y1]  [array `blocks_world_rectangle `:x0 x0 `:y0 y0 `:x1 x1 `:y1 y1]]
[defmetro blocks_world_rectangle-x0  [this] `[array-elt ,this 2]]
[defmetro blocks_world_rectangle-y0  [this] `[array-elt ,this 4]]
[defmetro blocks_world_rectangle-x1  [this] `[array-elt ,this 6]]
[defmetro blocks_world_rectangle-y1  [this] `[array-elt ,this 8]]

[defunk blocks_world_rectangle-new_copy [this]
  [blocks_world_rectangle-new [blocks_world_rectangle-x0 this]
			      [blocks_world_rectangle-y0 this]
			      [blocks_world_rectangle-x1 this]
			      [blocks_world_rectangle-y1 this]]]

[defunk blocks_world_rectangle-create [ux0 uy0 ux1 uy1]
  [let [[x0 nil]
	[x1 nil]
	[y0 nil]
	[y1 nil]]
    [if [< ux0 ux1]
	[prog [set x0 ux0]
	      [set x1 ux1]]
      [prog [set x0 ux1]
	    [set x1 ux0]]]
    [if [< uy0 uy1]
	[prog [set y0 uy0]
	      [set y1 uy1]]
      [prog [set y0 uy1]
	    [set y1 uy0]]]
    [blocks_world_rectangle-new x0 y0 x1 y1]]]

[defunk blocks_world_rectangle-render [this background_char]
  [let [[screen_height [termios-height]]]
    [ansi-stream-bordered_rectangle stdout
				    [+ 10 [blocks_world_rectangle-x0 this]]
				    [- screen_height [+ 10 [blocks_world_rectangle-y1 this]]]
				    [+ 10 [blocks_world_rectangle-x1 this]]
				    [- screen_height [+ 10 [blocks_world_rectangle-y0 this]]]
				    background_char]]]

[defunk blocks_world_rectangle-x_size [this] [+ [- [blocks_world_rectangle-x1 this] [blocks_world_rectangle-x0 this]] 1]]
[defunk blocks_world_rectangle-y_size [this] [+ [- [blocks_world_rectangle-y1 this] [blocks_world_rectangle-y0 this]] 1]]

[defunk blocks_world_rectangle-translate [this dx dy]
  [put [+ [blocks_world_rectangle-x0 this] dx] [blocks_world_rectangle-x0 this]]
  [put [+ [blocks_world_rectangle-y0 this] dy] [blocks_world_rectangle-y0 this]]
  [put [+ [blocks_world_rectangle-x1 this] dx] [blocks_world_rectangle-x1 this]]
  [put [+ [blocks_world_rectangle-y1 this] dy] [blocks_world_rectangle-y1 this]]]

[defunk blocks_world_rectangle-new_translate [this dx dy]
  [let [[new_rectangle [blocks_world_rectangle-new_copy this]]]
    [blocks_world_rectangle-translate new_rectangle dx dy]
    new_rectangle]]

[defunk blocks_world_rectangle-overlaps [this that]
  [if [not [blocks_world_rectangle? that]]
      [error `run-time `[blocks_world_rectangle-overlaps 'that is not blocks_world_rectangle' ,this ,that]]]
  [let [[a_x0 [blocks_world_rectangle-x0 this]]
	[a_y0 [blocks_world_rectangle-y0 this]]
	[a_x1 [blocks_world_rectangle-x1 this]]
	[a_y1 [blocks_world_rectangle-y1 this]]
	[b_x0 [blocks_world_rectangle-x0 that]]
	[b_y0 [blocks_world_rectangle-y0 that]]
	[b_x1 [blocks_world_rectangle-x1 that]]
	[b_y1 [blocks_world_rectangle-y1 that]]]
    [and [or [and [<= b_x0 a_x0] [>= b_x1 a_x1]]
	     [and [<= a_x0 b_x0] [>= a_x1 b_x1]]
	     [and [<= a_x0 b_x0] [>= a_x1 b_x0]]
	     [and [<= a_x0 b_x1] [>= a_x1 b_x1]]]
	 [or [and [<= b_y0 a_y0] [>= b_y1 a_y1]]
	     [and [<= a_y0 b_y0] [>= a_y1 b_y1]]
	     [and [<= a_y0 b_y0] [>= a_y1 b_y0]]
	     [and [<= a_y0 b_y1] [>= a_y1 b_y1]]]]]]

[defunk blocks_world_color? [exp]
  [and exp
       [array? exp]
       [> [array-length exp] 0]
       [eq `blocks_world_color [array-elt exp 0]]]]

[defunk   blocks_world_color-new  [name]  [array `blocks_world_color `:name name]]
[defmetro blocks_world_color-name [this] `[array-elt ,this 2]]

[defunk blocks_world_color-render [this]
  [let [[name [blocks_world_color-name this]]]
    [cond [[eq name `red]     [ansi-stream-foreground stdout 12]]
	  [[eq name `green]   [ansi-stream-foreground stdout 10]]
	  [[eq name `blue]    [ansi-stream-foreground stdout 11]]
	  [[eq name `white]   [ansi-stream-foreground stdout 15]]
	  [[eq name `magenta] [ansi-stream-foreground stdout 13]]
	  [[eq name `yellow]  [ansi-stream-foreground stdout 14]]
	  [t                  [ansi-stream-foreground stdout 15]]]]]


[defunk blocks_world_object? [exp]
  [and exp
       [array? exp]
       [> [array-length exp] 0]
       [eq `blocks_world_object [array-elt exp 0]]]]

[defunk   blocks_world_object-new       [type rectangle color]  [array `blocks_world_object `:type type `:rectangle rectangle `:color color]]
[defmetro blocks_world_object-type      [this]                 `[array-elt ,this 2]]
[defmetro blocks_world_object-rectangle [this]                 `[array-elt ,this 4]]
[defmetro blocks_world_object-color     [this]                 `[array-elt ,this 6]]

[defunk blocks_world_object-render [this]
  [let [[type [blocks_world_object-type this]]]
    [let [[render_char [cond [[eq type `table]   [string-elt '-' 0]]
			     [[eq type `block]   [string-elt '*' 0]]
			     [[eq type `gripper] [string-elt '~' 0]]
			     [t                  [string-elt '?' 0]]]]]
      [let [[rectangle [blocks_world_object-rectangle this]]]
	[let [[color [blocks_world_object-color this]]]
	  [blocks_world_color-render color]
	  [blocks_world_rectangle-render rectangle render_char]
	  [ansi-stream-foreground stdout 15]
	  ]]]]]

[defunk blocks_world_object-translate_overlaps_objects [this dx dy objects]
  [let [[rectangle [blocks_world_object-rectangle this]]]
    [let [[translate_rectangle [blocks_world_rectangle-new_translate rectangle dx dy]]]
      [let [[object_iter   objects]
	    [found_overlap nil]]
	[while object_iter
	  [let [[object [car object_iter]]]
	    [let [[object_rectangle [blocks_world_object-rectangle object]]]
	      [if [blocks_world_rectangle-overlaps translate_rectangle object_rectangle]
		  [prog [set found_overlap t]
			[set object_iter   nil]]
		[set object_iter [cdr object_iter]]]]]]
	found_overlap]]]]

[defunk blocks_world_object-translate [this dx dy]
  [blocks_world_rectangle-translate [blocks_world_object-rectangle this] dx dy]]

[defunk blocks_world_object-create [type x0 y0 x_size y_size color]
  [blocks_world_object-new type [blocks_world_rectangle-create x0 y0 [- [+ x0 x_size] 1] [- [+ y0 y_size] 1]] [blocks_world_color-new color]]]

[defunk blocks_world_object-new_block [x0 y0 x_size y_size color]
  [blocks_world_object-create `block x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_table [x0 y0 x_size y_size color]
  [blocks_world_object-create `table x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_gripper [x0 y0 x_size y_size color]
  [blocks_world_object-create `gripper x0 y0 x_size y_size color]]

[defunk blocks_world? [exp]
  [and exp
       [array? exp]
       [> [array-length exp] 0]
       [eq `blocks_world [array-elt exp 0]]]]

[defunk   blocks_world-new     [objects]  [array `blocks_world `:objects objects]]
[defmetro blocks_world-objects [this]    `[array-elt ,this 2]]


[defunk blocks_world-simulate [this]
  [let [[done    nil]
	[objects [blocks_world-objects this]]]
    [while [not done]
      [let [[an_object_moved nil]]
	[let [[object_iter objects]]
	  [while object_iter
	    [let [[object [car object_iter]]]
	      [let [[object_type [blocks_world_object-type object]]]
		[if [eq object_type `block]
		    [if [not [blocks_world_object-translate_overlaps_objects object 0 -1 [remove object objects]]]
			[prog [blocks_world_object-translate object 0 -1]
			      [blocks_world_object-render object]
			      [set an_object_moved t]]]]]]
	    [set object_iter [cdr object_iter]]]]
	[if [not an_object_moved]
	    [set done t]]]]]]

[defunk blocks_world-render [this]
  [ansi-stream-bordered_rectangle stdout 1 1 [- [termios-width] 1] [- [termios-height] 10] [string-elt ' ' 0]]
  [mapc [funk [object]
	      [blocks_world_object-render object]]
	[blocks_world-objects this]]
  [ansi-stream-move_cursor stdout 1 26]]

[defunk blocks_world-repl [this]
  [ansi-stream-clear_screen stdout]
  [let [[last_results  [list 'Welcome to Blocks World v2.2  (valid commands: quit, sim)']]
	[done          nil]
	[need_rerender t]]
    [while [not done]
      [if need_rerender
	  [prog [blocks_world-render this 20 [- [termios-height] 10]]
		[set need_rerender nil]]]
      
      [ansi-stream-bordered_rectangle stdout 1 [- [termios-height] 8] [- [termios-width] 1] [- [termios-height] 1] [string-elt ' ' 0]]
      
      [ansi-stream-move_cursor stdout 1 [- [termios-height] 8]]
      [ansi-stream-foreground stdout 15]
      [format stdout 'blocks-world-out> ']
      [apply &format [cons stdout last_results]]
      [set last_results nil]
      
      [ansi-stream-move_cursor stdout 1 [- [termios-height] 2]]
      [ansi-stream-foreground stdout 15]
      [format stdout 'blocks-world-in-> ']
      
      [let [[exp             [read stdin]]
	    [command_failure nil]]
	[ansi-stream-foreground stdout 15]
	[if [not [cons? exp]]
	    [set command_failure t]
	  [let [[command [car exp]]]
	    [cond [[eq command `exit] [set done t]]
		  [[eq command `sim]  [prog [blocks_world-simulate this]
					    [set need_rerender t]
					    [set last_results [list 'Done simulating blocks world.']]]]
		  [[eq command `eval] [prog [if [!= [length exp] 2]
						[set last_results [list 'eval only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
					      [set last_results [list 'Evalulation result is ' [eval [eval [second exp]]] '.']]]]]
		  [t                  [set command_failure t]]]]]
	[if command_failure
	    [prog [ansi-stream-foreground stdout 15]
		  [set last_results [list 'Blocks world command failure, ' exp '.\n'
					  'Try one of these commands: ' `[exit] ', ' `[sim] ', or ' `[eval [+ 1 2]] '.\n']]]]]
      
      ]]]

[defunk blocks_world-test []
  [let [[blocks_world [blocks_world-new [list [blocks_world_object-new_table    0  0 50  2 `white]
					      [blocks_world_object-new_gripper 21 15  3  3 `magenta]
					      [blocks_world_object-new_block   10  2  5  5 `blue]
					      [blocks_world_object-new_block   20  5  5  5 `green]
					      [blocks_world_object-new_block   30  2 10  5 `red]
					      [blocks_world_object-new_block   30 10  5  5 `yellow]]]]]
    [blocks_world-repl blocks_world]
    blocks_world]]


