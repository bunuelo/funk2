
[defunk blocks_world_object-is_on_objects [this objects]
  [blocks_world_object-translate_overlaps_objects this 0 -1 objects]]

[defunk blocks_world_object-is_under_objects [this objects]
  [blocks_world_object-translate_overlaps_objects this 0 1 objects]]

[defunk blocks_world_object-translate [this dx dy]
  [blocks_world_rectangle-translate [blocks_world_object-rectangle this] dx dy]]

[defunk blocks_world_object-create [name type x0 y0 x_size y_size color]
  [blocks_world_object-new name type [blocks_world_rectangle-create x0 y0 [- [+ x0 x_size] 1] [- [+ y0 y_size] 1]] [blocks_world_color-new color] nil nil]]

[defunk blocks_world_object-new_block [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `block x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_table [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `table x0 y0 x_size y_size color]]

[defunk blocks_world_object-new_gripper [name x0 y0 x_size y_size color]
  [blocks_world_object-create name `gripper x0 y0 x_size y_size color]]

[defunk blocks_world-simulate [this]
  [let [[done    nil]
	[objects [blocks_world-objects this]]]
    [while [not done]
      [let [[an_object_moved nil]
	    [object_iter     objects]]
	[while object_iter
	  [let* [[object      [car object_iter]]
		 [object_type [blocks_world_object-type object]]]
	    [if [eq object_type `block]
		[if [not [blocks_world_object-translate_overlaps_objects object 0 -1 [remove object objects]]]
		    [prog [blocks_world_object-translate object 0 -1]
			  [blocks_world_rectangle-clear_line_above [blocks_world_object-rectangle object]]
			  [blocks_world_object-render object]
			  [set an_object_moved t]]]]]
	  [set object_iter [cdr object_iter]]]
	[if [not an_object_moved]
	    [set done t]]]]]]

[defunk blocks_world-render [this]
  [ansi-stream-rectangle stdout 1 1 [- [termios-width] 1] [- [termios-height] 10] [string-elt ' ' 0]]
  [mapc [funk [object]
	      [blocks_world_object-render object]]
	[blocks_world-objects this]]
  [ansi-stream-move_cursor stdout 1 26]]

[defunk blocks_world-generate_perceptions [this]
  [let [[objects     [blocks_world-objects this]]
	[perceptions nil]]
    [mapc [funk [object_a]
		[let [[on_object [blocks_world_object-is_on_objects object_a [remove object_a objects]]]]
		  [if on_object
		      [set perceptions [cons `[on ,[blocks_world_object-name object_a] ,[blocks_world_object-name on_object]] perceptions]]]]]
	  objects]
    perceptions]]

[defunk blocks_world-move_to [this object_name]
  [let [[objects [blocks_world-objects this]]
	[gripper nil]
	[object  nil]]
    [mapc [funk [obj]
		[let [[type [blocks_world_object-type obj]]
		      [name [blocks_world_object-name obj]]]
		  [if [eq type `gripper]
		      [set gripper obj]]
		  [if [eq name object_name]
		      [set object obj]]]]
	  objects]
    [if [or [null gripper]
	    [null object]]
	`failure
      [let [[rect [blocks_world_object-rectangle gripper]]]
	[let [[x0 [blocks_world_rectangle-x0 rect]]
	      [x1 [blocks_world_rectangle-x1 rect]]]
	  [let [[avg_x [/ [+ x0 x1] 2]]]
	    [let [[object_rect [blocks_world_object-rectangle object]]]
	      [let [[gx0 [blocks_world_rectangle-x0 object_rect]]
		    [gx1 [blocks_world_rectangle-x1 object_rect]]]
		[let [[avg_gx [/ [+ gx0 gx1] 2]]]
		  [let [[dx [- avg_gx avg_x]]]
		    [let [[dx1 [if [> dx 0] 1 -1]]]
		      [dotimes [ix [if [< dx 0] [- dx] dx]]
			[blocks_world_object-translate gripper dx1 0]
			[blocks_world_object-render gripper]
			]]]]]]]]]]]]

[defunk blocks_world-pick_up [this object_name]
  [let [[objects [blocks_world-objects this]]
	[gripper nil]
	[object  nil]]
    [mapc [funk [obj]
		[let [[type [blocks_world_object-type obj]]
		      [name [blocks_world_object-name obj]]]
		  [if [eq type `gripper]
		      [set gripper obj]]
		  [if [eq name object_name]
		      [set object obj]]]]
	  objects]
    [if [or [null gripper]
	    [null object]]
	`failure
      [if [blocks_world_object-holding_object gripper]
	  `failure
	[let [[rect [blocks_world_object-rectangle gripper]]]
	  [let [[x0 [blocks_world_rectangle-x0 rect]]
		[x1 [blocks_world_rectangle-x1 rect]]]
	    [let [[avg_x [/ [+ x0 x1] 2]]]
	      [let [[object_rect [blocks_world_object-rectangle object]]]
		[let [[gx0 [blocks_world_rectangle-x0 object_rect]]
		      [gx1 [blocks_world_rectangle-x1 object_rect]]]
		  [let [[avg_gx [/ [+ gx0 gx1] 2]]]
		    [let [[dx [- avg_gx avg_x]]]
		      [if [!= dx 0]
			  `failure
			[if [blocks_world_object-is_under_objects object [remove object objects]]
			    `failure
			  [let [[y0  [blocks_world_rectangle-y0 rect]]
				[gy1 [blocks_world_rectangle-y1 object_rect]]]
			    [let [[dy [- [- y0 gy1] 1]]]
			      [blocks_world_object-ignore_gravity-set object  t]
			      [blocks_world_object-holding_object-set gripper object]
			      [dotimes [iy dy]
				[blocks_world_object-translate object 0 1]
				[blocks_world_object-render object]
				]]]]]]]]]]]]]]]]

[defunk blocks_world-repl [this]
  [ansi-stream-clear_screen stdout]
  [let* [[help_message    [list '  (a few commands: ' `[exit] ', ' `[sim] ', ' `[look] ', ' `[move-to <object>] ', ' `[pick-up <object>] ')']]
	 [welcome_message [append [list 'Welcome to ' `Blocks ' ' `World ' ' `v2.2]
				  help_message]]
	 [last_results    welcome_message]
	 [done            nil]
	 [need_rerender   t]]
    [while [not done]
      [if need_rerender
	  [prog [blocks_world-render this 20 [- [termios-height] 10]]
		[set need_rerender nil]]]
      
      [ansi-stream-rectangle stdout 1 [- [termios-height] 8] [- [termios-width] 1] [- [termios-height] 1] [string-elt ' ' 0]]
      
      [ansi-stream-move_cursor stdout 1 [- [termios-height] 8]]
      [ansi-stream-foreground stdout 15]
      [format stdout 'blocks-world-out> ']
      [apply &format [cons stdout last_results]]
      [set last_results nil]
      
      [ansi-stream-move_cursor stdout 1 [- [termios-height] 2]]
      [ansi-stream-foreground stdout 15]
      [format stdout 'blocks-world-in-> ']
      
      [let [[exp             [read stdin]]
	    [command_failure nil]]
	[ansi-stream-foreground stdout 15]
	[if [not [cons? exp]]
	    [set command_failure t]
	  [let [[command [car exp]]]
	    [cond [[eq command `exit]     [set done t]]
		  [[eq command `sim]      [prog [blocks_world-simulate this]
						[set need_rerender t]
						[set last_results [list 'Done simulating blocks world.']]]]
		  [[eq command `eval]     [prog [if [!= [length exp] 2]
						    [set last_results [list 'eval only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						  [set last_results [list 'Evalulation result is ' [eval [eval [second exp]]] '.']]]]]
		  [[eq command `look]     [prog [set last_results [list 'Perceptions: ' [blocks_world-generate_perceptions this]]]]]
		  [[eq command `move-to]  [prog [if [!= [length exp] 2]
						    [set last_results [list 'move-to only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						  [let [[object_name [second exp]]]
						    [set need_rerender t]
						    [set last_results [list 'move-to result: ' [blocks_world-move_to this object_name]]]
						    ]]]]
		  [[eq command `pick-up]  [prog [if [!= [length exp] 2]
						    [set last_results [list 'pick-up only takes one argument and you gave ' [length exp] ' arguments (you entered ' exp ').']]
						  [let [[object_name [second exp]]]
						    [set need_rerender t]
						    [set last_results [list 'pick-up result: ' [blocks_world-pick_up this object_name]]]
						    ]]]]
		  [t                      [set command_failure t]]]]]
	[if command_failure
	    [prog [ansi-stream-foreground stdout 15]
		  [set last_results [append [list 'Blocks world command failure, ' exp '.\n']
					    help_message]]]]]
      
      ]]]

[defunk blocks_world-test []
  [let [[blocks_world [blocks_world-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
					      [blocks_world_object-new_gripper `the-gripper      21 15  3  3 `magenta]
					      [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
					      [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
					      [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
					      [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]
    [blocks_world-repl blocks_world]
    blocks_world]]



