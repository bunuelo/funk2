[load 'som-2009/lab1-prop-utils.fu2']

'3.1 Modify the propositional_agent-plan method for the agent so that
 it has the preconditions to only pick up the red block.  To run the
 agent, type [lab1-31-test] and then, in the blocksworld REPL, type
 [agent] to run one sense, plan, act cycle. '

[defunk propositional_agent-sense [blocks_world]
  [blocks_world-generate_perceptions blocks_world]]

[defunk propositional_agent-plan [perceptions]
  [if [member? [quote [on the-yellow-block the-red-block]] perceptions]
      [quote [prog [move-to the-yellow-block]
		   [pick-up the-yellow-block]
		   [move-to the-blue-block]
		   [drop]]]
    [quote [prog [move-to the-red-block]
		 [pick-up the-red-block]
		 [move-to the-yellow-block]
		 [drop]]]]]

[defunk propositional_agent-act [blocks_world plan]
  [blocks_world-eval blocks_world plan]]

[defblocks_world_agent propositional_agent
  [let [[blocks_world [blocks_world_agent-blocks_world this-agent]]]
    [propositional_agent-act blocks_world [propositional_agent-plan [propositional_agent-sense blocks_world]]]]]

[defunk lab1-31-test []
  [lab1_agent_type-test `propositional_agent]]


' 3.2   Not complete. '

[globalize learning-exploration-1
	   [let [[special_plan [learning_agent_plan-create `[pick-up the-red-block]]]]
	     [list special_plan
		   [learning_agent_plan-create `[prog [move-to the-yellow-block] [pick-up the-yellow-block] [move-to the-blue-block] [drop]]]
		   special_plan
		   [learning_agent_plan-create `[move-to the-red-block]]
		   special_plan
		   ]]]

[globalize learning-exploration-2
	   [let [[special_plan [learning_agent_plan-create `[pick-up the-red-block]]]]
	     [list special_plan
		   [learning_agent_plan-create `[prog [move-to the-yellow-block] [pick-up   the-red-block] [move-to the-green-block] [drop]]]
		   special_plan
		   [learning_agent_plan-create `[move-to the-red-block]]
		   special_plan]]]

[defunk learning_agent-act [blocks_world plan]
  [blocks_world-eval blocks_world plan]]

[defunk learning_agent-explore [blocks_world exploration_plans]
  [mapc [funk [learning_agent_plan]
	      [let [[precondition [learning_agent-sense blocks_world]]]
		[let [[result [learning_agent-act blocks_world [learning_agent_plan-plan learning_agent_plan]]]]
		  [let [[postcondition [learning_agent-sense blocks_world]]]
		    [if [eq `failure result]
			[learning_agent_plan-negative_prepost_pairs-set learning_agent_plan
									[cons [list precondition postcondition]
									      [learning_agent_plan-negative_prepost_pairs learning_agent_plan]]]
		      [learning_agent_plan-positive_prepost_pairs-set learning_agent_plan
								      [cons [list precondition postcondition]
									    [learning_agent_plan-positive_prepost_pairs learning_agent_plan]]]]]]]]
	exploration_plans]
  nil]

[defunk learning_agent-learn_conjunctive_rules [exploration_plans]
  [mapc [funk [exploration_plan]
	      [let [[negative_preconditions [mapcar [funk [pair] [first pair]] [learning_agent_plan-negative_prepost_pairs exploration_plan]]]
		    [positive_preconditions [mapcar [funk [pair] [first pair]] [learning_agent_plan-positive_prepost_pairs exploration_plan]]]]
		[let [[all_negative_preconditions [list-to-set [apply &merge negative_preconditions]]]
		      [all_positive_preconditions [list-to-set [apply &merge positive_preconditions]]]]
		  [let [[all_states [list-to-set [merge all_negative_preconditions all_positive_preconditions]]]]
		    [let [[conjunctive_negative_preconditions all_states]
			  [conjunctive_positive_preconditions all_states]]
		      [mapc [funk [precondition]
				  [set conjunctive_negative_preconditions [intersect precondition conjunctive_negative_preconditions]]]
			    negative_preconditions]
		      [mapc [funk [precondition]
				  [set conjunctive_negative_preconditions [intersect precondition conjunctive_positive_preconditions]]]
			    positive_preconditions]
		      [learning_agent_plan-conjunctive_rule-set exploration_plan [append conjunctive_positive_preconditions
											 [mapcar [funk [precondition]
												       `[not ,precondition]]
												 conjunctive_negative_preconditions]]]]]]]]
	exploration_plans]]

[defunk learning_agent-plan [perceptions]
  nil]

[defblocks_world_agent learning_agent
  [let [[blocks_world [blocks_world_agent-blocks_world this-agent]]]
    [let [[exploration_plans learning-exploration-1]]
      [learning_agent-explore                 blocks_world exploration_plans]
      [learning_agent-learn_conjunctive_rules              exploration_plans]
      [learning_agent-act blocks_world [learning_agent-plan blocks_world [learning_agent-sense blocks_world]]]]]]


[defunk lab1-32-test []
  [lab1_agent_type-test `learning_agent]]
