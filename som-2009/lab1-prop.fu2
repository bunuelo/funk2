'3.1  Modify the plan method for the agent so that it has the preconditions to only pick up the red block.  To run the agent, type [lab1-31-test] and then, in the blocksworld REPL, type [agent] to run one sense, plan, act cycle. '

[defmetro compile_propositional_reaction [:rest trigger_percepts__reactive_plan__pairs]
  `[funk [perceptions]
	 ,[cons `cond
		 [append [mapcar [funk [trigger_percepts__reactive_plan]
				       [let [[trigger_percepts [first  trigger_percepts__reactive_plan]]
					     [reactive_plan    [second trigger_percepts__reactive_plan]]]
					 `[[and @[mapcar [funk [trigger_percept]
							       `[member? [quote ,trigger_percept] perceptions]]
							 trigger_percepts]]
					   [quote ,reactive_plan]]]]
				 trigger_percepts__reactive_plan__pairs]
			 [list `[t nil]]]]]]

[defunk propositional_agent-sense [blocks_world]
  [blocks_world-generate_perceptions blocks_world]]

[defunk propositional_agent-plan [perceptions]
  [let [[policy [compile_propositional_reaction [[[on the-yellow-block the-red-block]] [prog [move-to the-yellow-block]
											     [pick-up the-yellow-block]
											     [move-to the-blue-block]
											     [drop]]]
						[[]                                    [prog [move-to the-red-block]
											     [pick-up the-red-block]
											     [move-to the-yellow-block]
											     [drop]]]]]]
    [apply policy [list perceptions]]]]

[defunk propositional_agent-act [blocks_world plan]
  [blocks_world-eval blocks_world plan]]

[defblocks_world_agent propositional_agent
  [let [[blocks_world [blocks_world_agent-blocks_world this-agent]]]
    [propositional_agent-act blocks_world [propositional_agent-plan [propositional_agent-sense blocks_world]]]]]

[defunk lab1_agent_type-test [agent_type_name]
  [let [[blocks_world [blocks_world-create [blocks_world_physics-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
									   [blocks_world_object-new_gripper `the-gripper      21 23  3  3 `magenta]
									   [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
									   [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
									   [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
									   [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]]
    [let [[agent [blocks_world_agent-new agent_type_name blocks_world]]]
      [blocks_world-agent-set blocks_world agent]
      [blocks_world-repl      blocks_world]
      blocks_world]]]




[defunk lab1-31-test []
  [lab1_agent_type-test `propositional_agent]]


' 3.2   Not complete. '

[defunk learner [current past]
	[if [eq [size past] 0]
		[set past current]
		[set past [intersection past current]]]]



[defunk learn-from-experience [perceptions result positive negative]
  [if [eq result 'success']	
      [learner perceptions positive]
    [learner perceptions negative]]]


[defunk print-rule [pos neg]
  [print [difference [pos neg]]]]

[globalize learning-exploration-1
	   [list [quote [prog [move-to the-yellow-block] [pick-up the-yellow-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to    the-red-block] [pick-up    the-red-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to the-yellow-block] [pick-up    the-red-block] [move-to the-blue-block] [drop]]]]]

[globalize learning-exploration-2
	   [list [quote [prog [move-to the-yellow-block] [pick-up   the-red-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to  the-green-block] [pick-up the-green-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to  the-green-block] [pick-up the-green-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to  the-green-block] [pick-up the-green-block] [move-to the-blue-block] [drop]]]
		 [quote [prog [move-to  the-green-block] [pick-up the-green-block] [move-to the-blue-block] [drop]]]]]


[defunk learning_agent-plan [perceptions]
  [let [[positive [list nil]] [negative [list nil]]]
    `[prog [move-to the-yellow-block]
	   [pick-up the-yellow-block]
	   [move-to the-blue-block]
	   [drop]]]]

[defunk learning_agent-act [blocks_world plan]
  [blocks_world-eval blocks_world plan]]

[defblocks_world_agent learning_agent
  [let [[blocks_world [blocks_world_agent-blocks_world this-agent]]]
    [learning_agent-act blocks_world [learning_agent-plan [learning_agent-sense blocks_world]]]]]


[defunk lab1-32-test []
  [lab1_agent_type-test `learning_agent]]
