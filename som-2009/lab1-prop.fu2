
[defunk sense [blocks_world]
  [print 'sense here.']
  [blocks_world-generate_perceptions blocks_world]]

[defunk plan [perceptions]
  [print 'plan here.']
  `[prog [move-to the-red-block]
	 [pick-up the-red-block]
	 [drop]]]

[defunk act [blocks_world plan]
  [print 'act here.']
  [blocks_world-eval blocks_world plan]]

[defblocks_world_agent propositional_agent
  [print 'propositional agent here.']
  [let [[blocks_world [print [blocks_world_agent-blocks_world this-agent]]]]
    [act blocks_world [plan [sense blocks_world]]]]]

[defunk lab1_agent_type-test [agent_type_name]
  [let [[blocks_world [blocks_world-create [blocks_world_physics-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
									   [blocks_world_object-new_gripper `the-gripper      21 23  3  3 `magenta]
									   [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
									   [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
									   [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
									   [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]]
    [let [[agent [blocks_world_agent-new agent_type_name blocks_world]]]
      [blocks_world-agent-set blocks_world agent]
      [blocks_world-repl      blocks_world]
      blocks_world]]]



[defunk lab1-prop-test []
  [lab1_agent_type-test `propositional_agent]]



`[prog
  
  [globalize bw [blocks_world-create [blocks_world_physics-new [list [blocks_world_object-new_table   `the-table         0  0 50  2 `white]
								     [blocks_world_object-new_gripper `the-gripper      21 23  3  3 `magenta]
								     [blocks_world_object-new_block   `the-blue-block   10  2  5  5 `blue]
								     [blocks_world_object-new_block   `the-green-block  20  5  5  5 `green]
								     [blocks_world_object-new_block   `the-red-block    30  2 10  5 `red]
								     [blocks_world_object-new_block   `the-yellow-block 30 10  5  5 `yellow]]]]]
  
  
  [defunk blocks_world_physics-generate_perceptions2 [this]
    [let [[objects     [blocks_world_physics-objects this]]
	  [perceptions nil]]
      [mapc [funk [object_a]
		  [let [[on_object [blocks_world_object-is_on_objects object_a [remove object_a objects]]
				   [in_gripper [and [eq `gripper [blocks_world_object-type object_a]] [ blocks_world_object-is-on]]
					       ]]
			[if on_object
			    [set perceptions [cons `[on ,[blocks_world_object-name object_a] ,[blocks_world_object-name on_object]] perceptions]]]]]
		  objects]
	    perceptions]]
    
    [blocks_world_physics-generate_perceptions [blocks_world-physics bw]]
    
    ]]

