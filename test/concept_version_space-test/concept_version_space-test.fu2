'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk concept_version_space_hypothesis-test []
  [let [[cvs [new concept_version_space]]]
    [have cvs add_variable_value `color `green]
    [have cvs add_variable_value `color `blue]
    [have cvs add_variable_value `shape `cube]
    [have cvs add_variable_value `shape `pyramid]
    [let [[hypothesis [new concept_version_space_hypothesis]]]
      [have hypothesis add_variable_value `color `?]
      [have hypothesis add_variable_value `shape `?]
      [terminal_format standard-terminal '\nhypothesis: ' hypothesis]
      [let [[example [new concept_version_space_example nil]]]
	[have example add_variable_value `color `green]
	[have example add_variable_value `shape `pyramid]
	[terminal_format standard-terminal '\nexample: ' example]
	[let [[is_consistent_with_example [get hypothesis is_consistent_with_example example]]]
	  [terminal_format standard-terminal '\nis_consistent_with_example: ' is_consistent_with_example]
	  [if [not is_consistent_with_example]
	      [if [get example positive]
		  [terminal_format standard-terminal '\nminimal_generalizations_consistent_with_example: ' [get hypothesis minimal_generalizations_consistent_with_example example]]
		[terminal_format standard-terminal '\nminimal_specializations_consistent_with_example: ' [get hypothesis minimal_specializations_consistent_with_example example cvs]]]]
	  
	  ]]]]
  ]

[defunk concept_version_space-test []
  [let [[cvs [new concept_version_space]]]
    [have cvs add_variable_value `color `green]
    [have cvs add_variable_value `color `blue]
    [have cvs add_variable_value `shape `cube]
    [have cvs add_variable_value `shape `pyramid]
    [let [[e1  [let [[this [new concept_version_space_example t]]]
		 [have this add_variable_value `color `green]
		 [have this add_variable_value `shape `cube]
		 this]]
	  [e2  [let [[this [new concept_version_space_example nil]]]
		 [have this add_variable_value `color `green]
		 [have this add_variable_value `shape `pyramid]
		 this]]
	  [e3  [let [[this [new concept_version_space_example t]]]
		 [have this add_variable_value `color `blue]
		 [have this add_variable_value `shape `cube]
		 this]]
	  ]
      [terminal_format standard-terminal '\ncvs: ' cvs]
      [have cvs train_on_example e1]
      [terminal_format standard-terminal '\ncvs: ' cvs]
      [have cvs train_on_example e2]
      [terminal_format standard-terminal '\ncvs: ' cvs]
      [have cvs train_on_example e3]
      cvs]]]

