'Copyright (c) 2007-2012 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk keyboard-test []
  [let [[old_opts [keyboard-current_mode]]
	[done     nil]]
    [keyboard-enable_noncanonical_mode]
    [while [not done]
      [let [[ch [keyboard-read_character]]]
	[terminal_format standard-terminal '\n' ch ': ' [get ch string]]
	[if [eq ch #c1b]
	    [= done t]]]]
    [keyboard-current_mode-set old_opts]]]


[defunk keyboard-check_keypress []
  [let [[old_opts [keyboard-current_mode]]]
    [keyboard-enable_noncanonical_mode]
    [let [[ch [keyboard-try_read_character]]]
      [if [null ch]
	  nil
	[let [[result [cond [[eq ch #c7F] `key:backspace]
			    [[eq ch #c1B] [let [[escaped_ch [keyboard-try_read_character]]]
					    [if [null escaped_ch]
						`key:escape
						[cond [[equals [get escaped_ch string] '['] [let [[ansi_ch [keyboard-try_read_character]]]
											      [if [null ansi_ch]
												  [prog [terminal_format standard-terminal '^[[']
													`key:invalid]
												[cond [[equals [get ansi_ch string] 'A'] `key:up]
												      [[equals [get ansi_ch string] 'B'] `key:down]
												      [[equals [get ansi_ch string] 'C'] `key:right]
												      [[equals [get ansi_ch string] 'D'] `key:left]
												      [t                                 [prog [terminal_format standard-terminal '^[[' [get ansi_ch string]]
																	       `key:invalid]]]]]]
						      [[equals [get escaped_ch string] 'O'] [let [[other_ch [keyboard-try_read_character]]]
											      [if [null other_ch]
												  [prog [terminal_format standard-terminal '^[O']
													`key:invalid]
												[cond [[equals [get other_ch string] 'H'] `key:home]
												      [[equals [get other_ch string] 'F'] `key:end]
												      [t                                  [prog [terminal_format standard-terminal '^[O' [get other_ch string]]
																		`key:invalid]]]]]]
						      [t                                    [prog [terminal_format standard-terminal '^[' [get escaped_ch string]]
												  `key:invalid]]]]]]
			    [t            ch]]]]
	  [keyboard-current_mode-set old_opts]
	  result]]]]]

[defunk print-ansi-up []
  [terminal_format standard-terminal [format nil [get #c1B string] '[A']]]

[defunk print-ansi-down []
  [terminal_format standard-terminal [format nil [get #c1B string] '[B']]]

[defunk print-ansi-right []
  [terminal_format standard-terminal [format nil [get #c1B string] '[C']]]

[defunk print-ansi-left []
  [terminal_format standard-terminal [format nil [get #c1B string] '[D']]]

[defunk print-ansi-move [x y]
  [if [< y 0]
      [dotimes [i [- y]]
	[print-ansi-up]]
    [if [> y 0]
	[dotimes [i y]
	  [print-ansi-down]]]]
  [if [< x 0]
      [dotimes [i [- x]]
	[print-ansi-left]]
    [if [> x 0]
	[dotimes [i x]
	  [print-ansi-right]]]]]

[deframe keyboard_editor [frame] [[start_x      0]
				  [start_y      0]
				  [cursor_x     0]
				  [cursor_y     0]
				  [buffer_max_x 0]
				  [buffer_max_y 0]]]

[deftypefunk keyboard_editor execute print_debug [:rest expressions]
  [print-ansi-move [- cursor_x] [- [+ cursor_y 1]]]
  [let [[begin_x [get standard-terminal x]]
	[begin_y [get standard-terminal height]]]
    [apply &terminal_format [cons standard-terminal expressions]]
    [let [[end_x [get standard-terminal x]]
	  [end_y [get standard-terminal height]]]
      [print-ansi-move [- cursor_x [- end_x begin_x]]
		       [- [+ cursor_y 1] [- end_y begin_y]]]]]]

[deftypefunk keyboard_editor execute read []
  [let [[old_opts [keyboard-current_mode]]
	[done     nil]]
    [keyboard-enable_noncanonical_mode]
    [let [[fiber [fiber [funk []
			      [= start_x [get standard-terminal x]]
			      [= start_y [get standard-terminal height]]
			      [keyboard-check_keypress] 'get rid of first enter.'
			      [while [not done]
				[let [[key [keyboard-check_keypress]]]
				  [if [null key]
				      [millisleep 100]
				    [prog [cond [[eq key `key:backspace]        [if [> cursor_x 0]
										    [prog [= cursor_x [- cursor_x 1]]
											  [terminal_format standard-terminal '\b \b']]]]
						[[eq key `key:escape]           [= done t]]
						[[eq key `key:up]               [if [> cursor_y 0]
										    [prog [= cursor_y [- cursor_y 1]]
											  [print-ansi-up]]]]
						[[eq key `key:down]             [if [< cursor_y buffer_max_y]
										    [prog [= cursor_y [+ cursor_y 1]]
											  [print-ansi-down]]]]
						[[eq key `key:right]            [if [< cursor_x buffer_max_x]
										    [prog [= cursor_x [+ cursor_x 1]]
											  [print-ansi-right]]]]
						[[eq key `key:left]             [if [> cursor_x 0]
										    [prog [= cursor_x [- cursor_x 1]]
											  [print-ansi-left]]]]
						[[eq key `key:home]             ]
						[[eq key `key:end]              ]
						[[is-type `char key]            [cond [[equals [get key string] '\n'] [prog [= cursor_x 0]
															    [= cursor_y [+ cursor_y 1]]
															    [if [> cursor_y buffer_max_y]
																[= buffer_max_y cursor_y]]
															    [terminal_format standard-terminal '\n']
													       [dotimes [i start_x]
														 [terminal_format standard-terminal ' ']]]]
										      [[equals [get key string] '\t'] [let [[tab_space_num [- [<< [>> [+ cursor_x 8] 3] 3] cursor_x]]]
															[= cursor_x [+ cursor_x tab_space_num]]
															[if [> cursor_x buffer_max_x]
															    [= buffer_max_x cursor_x]]
															[dotimes [i tab_space_num]
															  [terminal_format standard-terminal ' ']]]]
										      [t                              [prog [= cursor_x [+ cursor_x 1]]
															    [if [> cursor_x buffer_max_x]
																[= buffer_max_x cursor_x]]
															    [terminal_format standard-terminal [get key string]]]]]]
						[t                              [prog [dotimes [i 10]
											[terminal_format standard-terminal '.']
											[millisleep 10]]
										      [terminal_format standard-terminal '!']
										      [millisleep 10]
										      [terminal_format standard-terminal '\b \b']
										      [millisleep 10]
										      [dotimes [i 10]
											[terminal_format standard-terminal '\b \b']
											[millisleep 10]]
										      [terminal_format standard-terminal standard-terminal]
										      ]]]
					  [have this print_debug cursor_x ' ' cursor_y '    ']]]]]]
			[]]]]
      [while [global_scheduler-contains_active_fiber fiber]
	[millisleep 100]]
      [keyboard-current_mode-set old_opts]]]]


[defunk keyboard-read []
  [let [[keyboard_editor [new keyboard_editor]]]
    [have keyboard_editor read]]]

[defunk keyboard-repl []
  [terminal_format standard-terminal '\n in-> ']
  [keyboard-read]]



