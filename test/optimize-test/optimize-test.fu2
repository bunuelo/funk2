'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe optimize_test [frame] [name
				funk
				test_args
				success_condition
				success_funk
				test_result
				success_result]
  [new [initial-name
	initial-funk
	initial-test_args
	initial-success_condition]
       [= name              initial-name]
       [= funk              initial-funk]
       [= test_args         initial-test_args]
       [= success_condition initial-success_condition]
       [= success_funk      [eval `[funk [] ,success_condition]]]
       [= test_result       nil]
       [= success_result    nil]]]

[deftypefunk optimize_test execute run []
  [let [[test_funk_execution_completed nil]]
    [let [[test_funk [eval `[funk [] @[get this body]]]]]
      [shelter [= test_result [with this
				    [apply test_funk nil]]]
	       [= test_funk_execution_completed t]]]
    [if [not test_funk_execution_completed]
	[prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of test funk ' [get this name] ' test.']
	      t]
      [let [[success_funk_execution_completed nil]]
	[shelter [= success_result [with this
					 [apply success_funk nil]]]
		 [= success_funk_execution_completed t]]
	[if [not success_funk_execution_completed]
	    [prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of success funk for ' [get this name] ' test.']
		  t]
	  success_result]]]]]

[defunk optimize-test []
  [let [[test [new optimize_test `first-test
		   [funk [a b]
			 [if [< a b]
			     a
			   b]]
		   `[1 2]
		   `[== test_result 1]]]]
    [have test run]]]



