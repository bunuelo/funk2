'Copyright (c) 2007-2011 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'


[deframe optimize_test [frame] [name
				funk
				optimized_funk
				test_args
				success_condition
				success_funk
				unoptimized_result
				optimized_result]
  [new [initial-name
	initial-funk
	initial-test_args
	initial-success_condition]
       [= name               initial-name]
       [= funk               initial-funk]
       [= test_args          initial-test_args]
       [= success_condition  initial-success_condition]
       [= success_funk       [eval `[funk [result] ,success_condition]]]
       [= unoptimized_result nil]
       [= optimized_result   nil]]]

[deftypefunk optimize_test execute run []
  [let [[funk_execution_completed nil]]
    [shelter [= unoptimized_result [with this
					 [apply funk test_args]]]
	     [= funk_execution_completed t]]
    [if [not funk_execution_completed]
	[prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of unoptimized funk for ' [get this name] ' test.']
	      nil]
      [let [[success_funk_execution_completed nil]
	    [unoptimized_success_result       nil]]
	[shelter [= unoptimized_success_result [with this
						     [apply success_funk `[,unoptimized_result]]]]
		 [= success_funk_execution_completed t]]
	[if [not success_funk_execution_completed]
	    [prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of success funk for ' [get this name] ' test.']
		  nil]
	  [if [not unoptimized_success_result]
	      [prog [terminal_format standard-terminal '\noptimize_test: success funk for ' [get this name] ' test is not true.']
		    nil]
	    [let [[optimize_funk_completed nil]]
	      [shelter [have funk optimize 10]
		       [= optimized_funk          funk]
		       [= funk                    nil]
		       [= optimize_funk_completed t]]
	      [if [not optimize_funk_completed]
		  [prog [terminal_format standard-terminal '\noptimize_test: failed to complete optimization of funk for ' [get this name] ' test.']
			nil]
		[let [[optimized_funk_execution_completed nil]]
		  [prog [= optimized_result [with this
						  [apply optimized_funk test_args]]]
			[= optimized_funk_execution_completed t]]
		  [if [not optimized_funk_execution_completed]
		      [prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of optimized funk for ' [get this name] ' test.']
			    nil]
		    [let [[success_funk_execution_completed nil]
			  [optimized_success_result         nil]]
		      [shelter [= optimized_success_result [with this
								 [apply success_funk `[,optimized_result]]]]
			       [= success_funk_execution_completed t]]
		      [if [not success_funk_execution_completed]
			  [prog [terminal_format standard-terminal '\noptimize_test: failed to complete execution of success funk for ' [get this name] ' test.']
				nil]
			[if [not optimized_success_result]
			    [prog [terminal_format standard-terminal '\noptimize_test: optimized funk failed success test for ' [get this name] ' test.']
				  nil]
			  [prog [terminal_format standard-terminal '\noptimize_test: optimized funk succeeded ' [get this name] ' test.']
				t]]]]]]]]]]]]]]


[defunk optimize-test []
  [let [[test [new optimize_test `first-test
		   [funk [a b]
			 [if [< a b]
			     a
			   b]]
		   `[1 2]
		   `[== result 1]]]]
    [have test run]]]



