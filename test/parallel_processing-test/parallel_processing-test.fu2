'Copyright (c) 2007-2013 Bo Morgan.
 All rights reserved.
 
 Authors:
 
   Bo Morgan (2007-2013): Initial implementation.
 
 This program is distributed under the terms of the GNU General
 Public License.  See the COPYING file that is distributed with this
 file.
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.'

[defunk test-parallel-processing-helper [fiber-count loop-count]
  [let [[start_conditionlock      [new conditionlock]]
	[done_count               0]
	[done_count_conditionlock [new conditionlock]]
	[start                    nil]]
    [dotimes [i fiber-count]
      [fiber [funk []
		   [let [[a 0]]
		     [have start_conditionlock lock]
		     [while [not start]
		       [have start_conditionlock wait]]
		     [have start_conditionlock unlock]
		     [dotimes [i loop-count]
		       [++ a]]
		     [have done_count_conditionlock lock]
		     [++ done_count]
		     [have done_count_conditionlock signal]
		     [have done_count_conditionlock unlock]]]
	     nil]]
    [let [[start-time [time]]]
      [have start_conditionlock lock]
      [= start t]
      [have start_conditionlock signal]
      [have start_conditionlock unlock]
      [have done_count_conditionlock lock]
      [while [< done_count fiber-count]
	[have done_count_conditionlock wait]]
      [have done_count_conditionlock unlock]
      [let [[end-time [time]]]
	[let [[cycles_per_second [/ [* 1000000000.0 loop-count fiber-count] [get [- end-time start-time] total_nanoseconds]]]]
	  [terminal_format standard-terminal
			   '\n    time    : ' [- end-time start-time]
			   '\n    cycles/s: ' cycles_per_second]
	  cycles_per_second]]]]]

[defunk test-parallel-processing [min-fiber-count max-fiber-count loop-count]
  [dotimes [i [+ [- max-fiber-count min-fiber-count] 1]]
    [let [[fiber-count [+ min-fiber-count i]]]
      [let [[total 0]]
	[dotimes [j loop-count]
	  [= total [+ total [test-parallel-processing-helper fiber-count 10000]]]] 
	[terminal_format standard-terminal '\navg[' fiber-count ']: ' [/ total loop-count]]]]]]

