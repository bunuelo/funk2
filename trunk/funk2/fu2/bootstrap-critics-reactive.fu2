' 
 Copyright (c) 2007-2008 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'

[defunk critic-reactive-integer_type_bug [thread bug]
  [ansi-stream-reset stdout]
  [format stdout
	  '\n\n'
	  [append `[A bug has occured.]
		   [bug-english_sentence_list bug]]
	  '\n\n']
  [globalize last-error-thread thread]
  `bug_not_handled]

[defunk critic-reactive-unknown_bug [thread]
  [ansi-stream-foreground stdout 10]
  [thread-print_backtrace thread]
  [let [[value       [thread-value thread]]
	[bug_handled nil]]
    [format stdout '\n' '  bug: ' value]
    [if [is-type `bug value]
	[let* [[bug  value]
	       [type [bug-type bug]]]
	  [if [eq `bug_handled [cond [[is-type `integer type] [critic-reactive-integer_type_bug thread bug]]
				     [t                       `bug_not_handled]]]
	      [= bug_handled t]]]
      [prog [ansi-stream-foreground stdout]
	    [format stdout
		    '\n' 'This should be a bug.  Instead we got: ' value
		    '\n']]]
    [if bug_handled
	[prog [ansi-stream-foreground stdout 10]
	      [format stdout
		      '\n' 
		      '\n' 'Bug reported as handled.  Exiting reactive critic thread.'
		      '\n']
	      [ansi-stream-reset stdout]]
      [prog [ansi-stream-foreground stdout 10]
	    [thread-enable_reactive_critics [this-thread]]
	    [format stdout
		    '\n' 'Beginning new user debug repl now.']
	    [ansi-stream-reset stdout]
	    [repl]]]]]

[defunk critic-reactive-primitive_response [thread]
  [critic-reactive-unknown_bug thread]]

[globalize thread:-environment_critics- [list &critic-reactive-unknown_bug]]

[defmetro criticize [var code :rest body]
  `[prog [define thread:-environment_critics- [list [funk [,var]
							  ,code]]]
	 @body]]

[defunk thread-enable_reactive_critics [this]
  [object-set this `critics &critic-reactive-primitive_response]]

[boot-add_user_command `[thread-enable_reactive_critics [this-thread]]]

