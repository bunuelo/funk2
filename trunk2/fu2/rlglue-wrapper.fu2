' 
 Copyright (c) 2007-2009 Bo Morgan.
 All rights reserved.
 
 Author: Bo Morgan
 
 Permission to use, copy, modify and distribute this software and its
 documentation is hereby granted, provided that both the copyright
 notice and this permission notice appear in all copies of the
 software, derivative works or modified versions, and any portions
 thereof, and that both notices appear in supporting documentation.
 
 BO MORGAN ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
 BO MORGAN DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 
 Bo Morgan requests users of this software to return to bo@mit.edu any
 improvements or extensions that they make and grant Bo Morgan the
 rights to redistribute these changes.
'


'Link to the dynamic libraries'
[globalize -gmodule-rlglue- nil]
[globalize -gmodule-rlglue-dynamic_library-directory- './extern/lib/']
[globalize -gmodule-rlglue-dynamic_library-name-      'librlglue']

[globalize -gmodule-rlglue_agent- nil]
[globalize -gmodule-rlglue_agent-dynamic_library-directory- './extern/lib/']
[globalize -gmodule-rlglue_agent-dynamic_library-name-      'librlagent']


[defunk rlglue-init_library []
  [if [null -gmodule-rlglue-]
      [prog [= -gmodule-rlglue- [gmodule-open [gmodule-build_path -gmodule-rlglue-dynamic_library-directory- -gmodule-rlglue-dynamic_library-name-] 0]]
	    [if [null -gmodule-rlglue-] [error `loading-gmodule 'loading rlglue dynamic library']]]]]

[defunk rlglue_agent-init_library []
  [if [null -gmodule-rlglue_agent-]
      [prog [= -gmodule-rlglue_agent- [gmodule-open [gmodule-build_path -gmodule-rlglue_agent-dynamic_library-directory- -gmodule-rlglue_agent-dynamic_library-name-] 0]]
	    [if [null -gmodule-rlglue_agent-] [error `loading-gmodule 'loading rlglue_agent dynamic library']]]]]



' DATA STRUCTURES from RL_COMMON.H
			typedef struct
			{
				unsigned int numInts;
				unsigned int numDoubles;
				unsigned int numChars;
				int* intArray;
				double* doubleArray;
				char* charArray;
			} rl_abstract_type_t;


			typedef rl_abstract_type_t observation_t;
			typedef rl_abstract_type_t action_t;

			typedef struct{
			  const observation_t *observation;
			  const action_t *action;
			} observation_action_t;

			typedef struct
			{
			  double reward;
			  const observation_t *observation;
			  int terminal;
			} reward_observation_terminal_t;

			typedef struct {
			  double reward;
			  const observation_t *observation;
			  const action_t *action;
			  int terminal;
			} reward_observation_action_terminal_t;

			typedef reward_observation_action_terminal_t roat_t;
			typedef reward_observation_terminal_t rot_t;
			typedef observation_action_t oa_t;
'	
			

'/**********************************************************************'
'*'
'* Common Functions'  (from RL_glue.h)
'*'
'***********************************************************************/'

'const char* RL_init();'
[defunk-alien -gmodule-rlglue- rl_init pointer 'rl_init' []]

'const observation_action_t *RL_start();'
[defunk-alien -gmodule-rlglue- rl_obs_act nil 'rl_reward_observation_action_terminal_t' []]

'void RL_cleanup();'
[defunk-alien -gmodule-rlglue- rl_cleanup nil 'rl_cleanup' []]

'const char* RL_agent_message(const char* message);'
[defunk-alien -gmodule-rlglue- rl_agent_message pointer 'RL_agent_message' [pointer message]]

'const char* RL_env_message(const char* message);'
[defunk-alien -gmodule-rlglue- rl_env_message pointer 'RL_env_message' [pointer message]]

'double RL_return();'
[defunk-alien -gmodule-rlglue- rl_return double 'RL_return' []]

'int RL_num_steps();'
[defunk-alien -gmodule-rlglue- rl_num_steps integer 'RL_num_steps' []]

'int RL_num_episodes();'
[defunk-alien -gmodule-rlglue- rl_num_episodes integer 'RL_num_episodes' []]

'int RL_episode(unsigned int num_steps);'
[defunk-alien -gmodule-rlglue- rl_episode integer 'RL_episode' [integer num_steps]]



'/**********************************************************************'
'*'
'* Environment Functions'
'*'
'***********************************************************************/'



'/**********************************************************************'
'*'
'* Agent Functions'
'*'
'***********************************************************************/'

'void agent_init(const char* task_spec);'
[defunk-alien -gmodule-rlglue_agent- agent_init nil 'agent_create' [[char* task_spec]]]

'const action_t* agent_start(const observation_t* observation);'
[defunk-alien -gmodule-rlglue_agent- agent_start pointer 'agent_start' [[pointer observation]]]

'const action_t* agent_step(double reward, const observation_t* observation);'
[defunk-alien -gmodule-rlglue_agent- agent_step pointer 'agent_step' [[double reward, pointer observation]]]

'void agent_end(double reward);'
[defunk-alien -gmodule-rlglue_agent- agent_end nil 'agent_start' [[double reward]]]

'void agent_cleanup();'
[defunk-alien -gmodule-rlglue_agent- agent_cleanup nil 'agent_cleanup' []]

'const char* agent_message(const char* message);'
[defunk-alien -gmodule-rlglue_agent- agent_message pointer 'agent_message' [[pointer message]]]


[defunk rlglue_agent-test []
	[rlglue_agent-init_library]
	[prog [agent_init] [agent_start]]]